{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.Integration where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset
open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Summation


record Partition[_,_] (a b : ‚Ñù) : Type‚ÇÄ where
 field
  len : ‚Ñï
  pts : Fin (1 ‚Ñï.+ len) ‚Üí ‚Ñù
  a‚â§pts : ‚àÄ k ‚Üí a ‚â§·µ£ pts k
  pts‚â§b : ‚àÄ k ‚Üí pts k ‚â§·µ£ b
  pts‚â§pts : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ pts (fsuc k)

 diffs : Fin len ‚Üí Œ£ ‚Ñù (0 ‚â§·µ£_)
 diffs k = _ , x‚â§y‚Üí0‚â§y-x (pts (finj k)) _ (pts‚â§pts k)

 mesh : ‚Ñù
 mesh = foldlFin max·µ£ 0 (fst ‚àò diffs)

 a‚â§b : a ‚â§·µ£ b
 a‚â§b = isTrans‚â§·µ£ a _ _ (a‚â§pts fzero) (pts‚â§b fzero)

 pts'Œ£-R : ElimFinSS (Œ£-syntax ‚Ñù (Œª p ‚Üí (a ‚â§·µ£ p) √ó (p ‚â§·µ£ b))) (suc len)
 pts'Œ£-R .ElimFinSS.a‚ÇÄ = a , ‚â§·µ£-refl a , a‚â§b
 pts'Œ£-R .ElimFinSS.f k = pts k , a‚â§pts _ , pts‚â§b _
 pts'Œ£-R .ElimFinSS.a‚Çô = b , a‚â§b , ‚â§·µ£-refl b

 pts'Œ£ : Fin (3 ‚Ñï.+ len) ‚Üí Œ£[ p ‚àà ‚Ñù ] (a ‚â§·µ£ p) √ó (p ‚â§·µ£ b)
 pts'Œ£ = ElimFinSS.go pts'Œ£-R

 pts' : Fin (3 ‚Ñï.+ len) ‚Üí ‚Ñù
 pts' = fst ‚àò pts'Œ£

 a‚â§pts' : ‚àÄ k ‚Üí a ‚â§·µ£ pts' k
 a‚â§pts' = fst ‚àò snd ‚àò pts'Œ£

 pts'‚â§b : ‚àÄ k ‚Üí pts' k ‚â§·µ£ b
 pts'‚â§b = snd ‚àò snd ‚àò pts'Œ£

 pts'‚â§pts' : ‚àÄ k ‚Üí pts' (finj k) ‚â§·µ£ pts' (fsuc k)
 pts'‚â§pts' (zero , l , p) = a‚â§pts' (1 , l , +-suc _ _ ‚àô cong suc p)
 pts'‚â§pts' k'@(suc k , zero , p) =
  let z = pts'‚â§b (suc k , 1 , cong suc p)
  in isTrans‚â°‚â§·µ£ (pts' (finj k'))
        (pts' (suc k , 1 , (Œª i ‚Üí suc (p i))))
        _ (cong {x = finj k'}
                {(suc k , 1 , cong suc p)} pts'
                 (to‚Ñï-injective refl)) z
 pts'‚â§pts' (suc k , suc l , p) =
   let k' = k , l , cong (pred‚Ñï ‚àò pred‚Ñï)
               (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p)
   in subst2 _‚â§·µ£_
         (cong (Œª u ‚Üí pts (k , l ‚Ñï.+ (suc zero) , u))
           (isSet‚Ñï _ _ _ _))
         (cong (Œª u ‚Üí pts (suc k , l , u))
           (isSet‚Ñï _ _ _ _))
         (pts‚â§pts k')

 isStrictPartition : Type
 isStrictPartition = ‚àÄ k ‚Üí pts' (finj k) <·µ£ pts' (fsuc k)

 mesh‚â§·µ£ : ‚Ñù ‚Üí Type
 mesh‚â§·µ£ Œ¥ = ‚àÄ k ‚Üí  pts' (fsuc k) -·µ£ pts' (finj k)  ‚â§·µ£ Œ¥

 record Sample : Type‚ÇÄ where
  field
   samples : Fin (2 ‚Ñï.+ len) ‚Üí ‚Ñù
   pts'‚â§samples : (k : Fin _) ‚Üí pts' (finj k) ‚â§·µ£ samples k
   samples‚â§pts' : (k : Fin _) ‚Üí samples k ‚â§·µ£ pts' (fsuc k)


  a‚â§samples : ‚àÄ k ‚Üí a  ‚â§·µ£ samples k
  a‚â§samples k = isTrans‚â§·µ£ a _ _ (a‚â§pts' (finj k)) (pts'‚â§samples k)

  samples‚â§b : ‚àÄ k ‚Üí samples k ‚â§·µ£ b
  samples‚â§b k = isTrans‚â§·µ£ (samples k) _ b (samples‚â§pts' k) (pts'‚â§b (fsuc k))

  samplesŒ£ : Fin (2 ‚Ñï.+ len) ‚Üí Œ£[ t ‚àà ‚Ñù ] (a ‚â§·µ£ t ) √ó (t ‚â§·µ£ b)
  samplesŒ£ k = samples k , a‚â§samples k , samples‚â§b k

  riemannSum : (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum f = foldlFin
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSum' : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum' f = foldlFin {n = 2 ‚Ñï.+ len}
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSum'‚â° : (f g : ‚Ñù ‚Üí ‚Ñù) ‚Üí (‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí f x ‚â° g x) ‚Üí
                     riemannSum' f ‚â° riemannSum' g
  riemannSum'‚â° f g f‚â°g =
    cong (Œª g ‚Üí foldlFin {n = 2 ‚Ñï.+ len}
        g 0)
        (funExt‚ÇÇ (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí
           cong ((S +·µ£_) ‚àò (b-a ¬∑·µ£_))
               (f‚â°g t (a‚â§t , t‚â§b))))
         ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
  
  riemannSum-clamp : (f : ‚àÄ r ‚Üí r ‚àà interval‚Ñô a b ‚Üí ‚Ñù)
    ‚Üí riemannSum (curry ‚àò f) ‚â°
      riemannSum' 
      (Œª x‚ÇÅ ‚Üí  f (clamp·µ£ a b x‚ÇÅ) (clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b x‚ÇÅ))
  riemannSum-clamp f =
    cong (Œª g ‚Üí foldlFin {n = 2 ‚Ñï.+ len}
        g 0)
        (funExt‚ÇÇ (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí
           cong ((S +·µ£_) ‚àò (b-a ¬∑·µ£_))
             (cong (uncurry f)
               (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° a b t (a‚â§t , t‚â§b))))))
         ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSum'+ : (f g : ‚Ñù ‚Üí ‚Ñù) ‚Üí
    riemannSum' f +·µ£ riemannSum' g
      ‚â° riemannSum' (Œª x ‚Üí f x +·µ£ g x)
  riemannSum'+ f g = zip-foldFin+·µ£' (2 ‚Ñï.+ len)
    (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
    _ _ 0 0
   ‚àô (cong‚ÇÇ foldlFin (funExt‚ÇÇ
    Œª S y ‚Üí cong (S +·µ£_) (sym (¬∑DistL+ _ _ _)))
   (+·µ£-rat 0 0)
    ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k)))


  riemannSum+ : ‚àÄ f g ‚Üí
    riemannSum f +·µ£ riemannSum g
      ‚â° riemannSum (Œª x ‚â§x x‚â§  ‚Üí f x ‚â§x x‚â§ +·µ£ g x ‚â§x x‚â§)
  riemannSum+ f g = zip-foldFin+·µ£' (2 ‚Ñï.+ len)
    (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
    _ _ 0 0
   ‚àô (cong‚ÇÇ foldlFin (funExt‚ÇÇ
    Œª S y ‚Üí cong (S +·µ£_) (sym (¬∑DistL+ _ _ _)))
   (+·µ£-rat 0 0)
    ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k)))

  riemannSum'‚â§ : (f g : ‚Ñù ‚Üí ‚Ñù) ‚Üí
    (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí f r ‚â§·µ£ g r) ‚Üí
    riemannSum' f ‚â§·µ£ riemannSum' g

  riemannSum'‚â§ f g f‚â§g =
     foldFin+‚â§ (2 ‚Ñï.+ len) _ _ _  _
       (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
       (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
       (‚â§·µ£-refl 0) Œª x ‚Üí ‚â§·µ£-o¬∑·µ£ _ _ _ (x‚â§y‚Üí0‚â§y-x _ _ (pts'‚â§pts' x))
         (f‚â§g _ (a‚â§samples x) (samples‚â§b x))



  riemannSum'C¬∑ : ‚àÄ C (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí
    riemannSum' (Œª x ‚Üí C ¬∑·µ£ f x)
     ‚â° C ¬∑·µ£ riemannSum' f
  riemannSum'C¬∑ C f =
    (cong foldlFin (funExt‚ÇÇ
    Œª S y ‚Üí cong (S +·µ£_)
      (¬∑·µ£Assoc _ _ _ ‚àô‚àô cong (_¬∑·µ£ f (y .fst .fst)) (¬∑·µ£Comm _ _)
       ‚àô‚àô sym (¬∑·µ£Assoc _ _ _)))
    ‚â°$ 0
    ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k)))
    ‚àô foldFin¬∑DistL' (2 ‚Ñï.+ len) _ _
    (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSumC¬∑ : ‚àÄ C f ‚Üí
    riemannSum (Œª x ‚â§x x‚â§ ‚Üí C ¬∑·µ£ f x ‚â§x x‚â§)
     ‚â° C ¬∑·µ£ riemannSum f
  riemannSumC¬∑ C f =
    (cong foldlFin (funExt‚ÇÇ
    Œª S y ‚Üí cong (S +·µ£_)
      (¬∑·µ£Assoc _ _ _ ‚àô‚àô cong (_¬∑·µ£ f (y .fst .fst) _ _) (¬∑·µ£Comm _ _)
       ‚àô‚àô sym (¬∑·µ£Assoc _ _ _)))
    ‚â°$ 0
    ‚â°$ (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k)))
    ‚àô foldFin¬∑DistL' (2 ‚Ñï.+ len) _ _
    (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))


  riemannSum'- : (f g : ‚Ñù ‚Üí ‚Ñù) ‚Üí
    riemannSum' f -·µ£ riemannSum' g
      ‚â° riemannSum' (Œª x ‚Üí f x -·µ£ g x)
  riemannSum'- f g = 
      cong‚ÇÇ _+·µ£_ refl
        (-·µ£‚â°[-1¬∑·µ£] _
         ‚àô sym (riemannSum'C¬∑ -1 _)
         ‚àô cong riemannSum' (funExt Œª _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _)))
    ‚àô riemannSum'+ _ _


  riemannSum- : ‚àÄ f g ‚Üí
    riemannSum f -·µ£ riemannSum g
      ‚â° riemannSum (Œª x ‚â§x x‚â§ ‚Üí f x ‚â§x x‚â§ -·µ£ g x ‚â§x x‚â§)
  riemannSum- f g = 
      cong‚ÇÇ _+·µ£_ refl
        (-·µ£‚â°[-1¬∑·µ£] _
         ‚àô sym (riemannSumC¬∑ -1 _)
         ‚àô cong riemannSum (funExt‚ÇÉ Œª _ _ _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _)))
    ‚àô riemannSum+ _ _



  riemannSum'-alt : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum'-alt f = foldlFin {n = 2 ‚Ñï.+ len}
    (Œª S k ‚Üí
     S +·µ£ (pts' (fsuc k) -·µ£ pts' (finj k)) ¬∑·µ£ (f (fst (samplesŒ£ k))) ) 0
     (idfun _)

  riemannSum'-alt-lem : ‚àÄ f ‚Üí riemannSum' f ‚â° riemannSum'-alt f
  riemannSum'-alt-lem f =
   foldFin+map (2 ‚Ñï.+ len) 0 _
    (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))
    (idfun _)


  riemannSum'-abs·µ£‚â§ : (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí
    abs·µ£ (riemannSum' f) ‚â§·µ£ riemannSum' (abs·µ£ ‚àò f)
  riemannSum'-abs·µ£‚â§ f =
    subst2 _‚â§·µ£_
      (cong abs·µ£ (sym (riemannSum'-alt-lem f)))
      (sym (riemannSum'-alt-lem (abs·µ£ ‚àò f)))
      (foldFin+‚â§-abs (2 ‚Ñï.+ len) 0 0 _ _
        (idfun _) (idfun _)
        (isTrans‚â°‚â§·µ£ _ _ _ abs·µ£0 (‚â§·µ£-refl 0))
        Œª k ‚Üí
          ‚â°·µ£Weaken‚â§·µ£ _ _
            (¬∑abs·µ£ _ _
           ‚àô cong‚ÇÇ _¬∑·µ£_
             (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (pts'‚â§pts' k)))
             refl))



  riemannSum'Const : ‚àÄ C ‚Üí riemannSum' (const C) ‚â° C ¬∑·µ£ (b -·µ£ a)
  riemannSum'Const C = riemannSum'-alt-lem (const C)
   ‚àô (Œª i ‚Üí foldlFin {n = 2 ‚Ñï.+ len}
    (Œª S k ‚Üí
     S +·µ£ ¬∑·µ£Comm (pts' (fsuc k) -·µ£ pts' (finj k)) C i ) 0
     (idfun _))
   ‚àô foldFin¬∑DistL' (2 ‚Ñï.+ len) _ C (idfun _)
   ‚àô cong (C ¬∑·µ£_) (deltas-sum (2 ‚Ñï.+ len) pts')


 open Sample public

 leftSample : Sample
 leftSample .samples = pts' ‚àò finj
 leftSample .pts'‚â§samples = ‚â§·µ£-refl ‚àò pts' ‚àò finj
 leftSample .samples‚â§pts' = pts'‚â§pts'

 rightSample : Sample
 rightSample .samples = pts' ‚àò fsuc
 rightSample .pts'‚â§samples = pts'‚â§pts'
 rightSample .samples‚â§pts' = ‚â§·µ£-refl ‚àò pts' ‚àò fsuc


-- clampDelta·µ£ : ‚àÄ L L' x ‚Üí clamp·µ£ L L' x ‚â°
--                (x +·µ£ clamp·µ£ (L -·µ£ x) (L' -·µ£ x) 0)
-- clampDelta·µ£ L L' x = {!!}


-- clampDeltaSplit‚Ñö : ‚àÄ L L' x y ‚Üí L ‚Ñö.‚â§ L' ‚Üí x ‚Ñö.‚â§ y
--             ‚Üí (y ‚Ñö.- x) ‚â°
--               (‚Ñö.min L y ‚Ñö.- ‚Ñö.min L x)
--                ‚Ñö.+ (‚Ñö.clamp L L' y ‚Ñö.- ‚Ñö.clamp L L' x)
--                ‚Ñö.+ (‚Ñö.max L' y ‚Ñö.- ‚Ñö.max L' x)
-- clampDeltaSplit‚Ñö = {!!}

open Partition[_,_] public hiding (a‚â§b)

TaggedPartition[_,_] : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
TaggedPartition[ a , b ] = Œ£ (Partition[ a , b ]) Sample




on[_,_]IntegralOf_is_ : ‚àÄ a b ‚Üí (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type

on[ a , b ]IntegralOf f is s =
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh‚â§·µ£ p (rat (fst Œ¥)) ‚Üí
       abs·µ£ (riemannSum t f -·µ£ s) <·µ£ rat (fst Œµ))


on[_,_]IntegralOf_is'_ : ‚àÄ a b ‚Üí (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
on[ a , b ]IntegralOf f is' s =
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh‚â§·µ£ p (rat (fst Œ¥)) ‚Üí
       abs·µ£ (riemannSum' t f -·µ£ s) <·µ£ rat (fst Œµ))


0‚â§pos/ : ‚àÄ {p q} ‚Üí 0 ‚Ñö.‚â§ [ pos p / q ]
0‚â§pos/ {p} {q} =
  subst (0 ‚Ñ§.‚â§_) (sym (‚Ñ§.¬∑IdR _))
    (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 0 p ‚Ñï.zero-‚â§)


module Integration a b (a‚â§b : a ‚â§·µ£ b) where

 Œî : ‚Ñù
 Œî = b -·µ£ a

 0‚â§Œî : 0 ‚â§·µ£ Œî
 0‚â§Œî = x‚â§y‚Üí0‚â§y-x a _ a‚â§b


 -- uContMesh : ‚àÄ f ‚Üí IsUContinuous f ‚Üí
 --        ‚àÄ (Œµ‚Çä : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
 --                  (‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
 --                     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
 --                       abs·µ£ (riemannSum' t f -·µ£
 --                             riemannSum' (leftSample p) f)
 --                          <·µ£ Œî ¬∑·µ£ rat (fst Œµ‚Çä)))
 -- uContMesh d iucf Œµ‚Çä = {!!}

 module _ (n : ‚Ñï) where

  t : ‚Ñï ‚Üí ‚Ñö
  t k = [ pos (suc k) / 2+ n  ]

  0‚â§t : ‚àÄ k ‚Üí 0 ‚â§·µ£ rat (t k)
  0‚â§t k = ‚â§‚Ñö‚Üí‚â§·µ£ 0 (t k) (0‚â§pos/ {suc k} {2+ n})

  t‚â§1 : ‚àÄ (k : Fin (1 ‚Ñï.+ n)) ‚Üí rat (t (fst k)) ‚â§·µ£ 1
  t‚â§1 k = ‚â§‚Ñö‚Üí‚â§·µ£ (t (fst k)) 1 w
   where
   w : pos (suc (k .fst)) ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ 1 ‚Ñ§.‚â§ pos 1 ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (2+ n)
   w = subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _)) (sym (‚Ñ§.¬∑IdL _))
          (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (suc (fst k))
           _ (‚Ñï.suc-‚â§-suc $ ‚Ñï.‚â§-suc $ ‚Ñï.pred‚Ñï-‚â§-pred‚Ñï (snd k)))

  tIncr : ‚àÄ k ‚Üí t k ‚Ñö.‚â§ t (suc k)
  tIncr k = ‚Ñ§.‚â§-¬∑o {m = pos (suc k)} {n = pos (suc (suc k))} {k = suc (suc n)}
            (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-suc‚Ñï)

  equalPartition : Partition[ a , b ]
  equalPartition .len = n
  equalPartition .pts k = a +·µ£ Œî ¬∑·µ£ (rat (t (fst k)))
  equalPartition .a‚â§pts k =
    isTrans‚â°‚â§·µ£ a (a +·µ£ Œî ¬∑·µ£ 0) _
      (sym (ùêë'.+IdR' _ _ (ùêë'.0RightAnnihilates _)))
       (‚â§·µ£-o+ (Œî ¬∑·µ£ 0) (Œî ¬∑·µ£ (rat (t (fst k)))) a
         (‚â§·µ£-o¬∑·µ£ 0 (rat (t (fst k))) Œî  0‚â§Œî (0‚â§t (fst k))))
  equalPartition .pts‚â§b k =
    isTrans‚â§‚â°·µ£ (a +·µ£ Œî ¬∑·µ£ rat (t (fst k))) (a +·µ£ Œî) b
    (‚â§·µ£-o+ _ _ a
     (isTrans‚â§‚â°·µ£ (Œî ¬∑·µ£ rat (t (fst k))) (Œî ¬∑·µ£ 1) Œî
      (‚â§·µ£-o¬∑·µ£ (rat (t (fst k))) 1 Œî  0‚â§Œî (t‚â§1 k)) (¬∑IdR Œî)))
      (Lùêë.lem--05 {a} {b})
  equalPartition .pts‚â§pts k =
     ‚â§·µ£-o+ _ _ a (‚â§·µ£-o¬∑·µ£ (rat (t ( (fst k)))) (rat (t (suc (fst k)))) Œî  0‚â§Œî
      (‚â§‚Ñö‚Üí‚â§·µ£ (t (fst k)) _ (tIncr (fst k))))


  equalPartitionPts' : ‚àÄ k ‚Üí pts' equalPartition k ‚â°
        a +·µ£ Œî ¬∑·µ£ rat [ pos (fst k) / 2+ n  ]
  equalPartitionPts' (zero , zero , p) = ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï p))
  equalPartitionPts' (zero , suc l , p) =
   sym (ùêë'.+IdR' _ _ (ùêë'.0RightAnnihilates' _ _ (cong rat (‚Ñö.[0/n]‚â°[0/m] _ _))))
  equalPartitionPts' (suc k , zero , p) =
    sym (Lùêë.lem--05 {a} {b}) ‚àô
      cong (a +·µ£_) (sym (ùêë'.¬∑IdR' _ _ (cong (rat ‚àò [_/ 2+ n ])
       (cong (pos ‚àò pred‚Ñï) p)
       ‚àô (cong rat $ ‚Ñö.[n/n]‚â°[m/m] (suc n) 0))))
  equalPartitionPts' (suc k , suc l , p) = refl

  equalPartitionŒî : ‚àÄ k ‚Üí
    pts' equalPartition (fsuc k) -·µ£ pts' equalPartition (finj k)
    ‚â° Œî ¬∑·µ£ rat [ 1 / 2+ n ]
  equalPartitionŒî (zero , zero , snd‚ÇÅ) = ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï snd‚ÇÅ))
  equalPartitionŒî (zero , suc fst‚ÇÇ , snd‚ÇÅ) =
   Lùêë.lem--063 {a}
  equalPartitionŒî (suc fst‚ÇÅ , zero , snd‚ÇÅ) =
    Lùêë.lem--089 {b} {a} {Œî ¬∑·µ£ rat [ pos (suc fst‚ÇÅ) / 2+ n ]}
     ‚àô cong‚ÇÇ (_-·µ£_)
       (sym (¬∑IdR Œî)) (cong (Œî ¬∑·µ£_) (cong (rat ‚àò [_/ 2+ n ])
         (cong (pos ‚àò pred‚Ñï) snd‚ÇÅ)))
       ‚àô sym (ùêë'.¬∑DistR- _ _ _) ‚àô
        cong (Œî ¬∑·µ£_)
         (cong‚ÇÇ {x = 1}
          {rat [ pos (suc (suc n)) / 2+ n ]}
          _-·µ£_ (cong rat (‚Ñö.[n/n]‚â°[m/m] 0 (suc n)))
          {rat [ pos (suc n) / 2+ n ]}
          {rat [ pos (suc n) / 2+ n ]}
          refl
          ‚àô -·µ£-rat‚ÇÇ [ (pos (suc (suc n))) / 2+ n ] [ pos (suc n) / 2+ n ]
           ‚àô cong rat
               (‚Ñö.n/k-m/k (pos (suc (suc n))) (pos (suc n)) (2+ n) ‚àô
                  cong [_/ 2+ n ] (cong (‚Ñ§._- pos (suc n))
                      (‚Ñ§.pos+ 1 (suc n)) ‚àô ‚Ñ§.plusMinus (pos (suc n)) 1)))

  equalPartitionŒî (suc k , suc l , p) =
   Lùêë.lem--088 {a} ‚àô
       sym (ùêë'.¬∑DistR- _ _ _) ‚àô
         cong (Œî ¬∑·µ£_) zz
    where
    zz : rat (t (suc k)) -·µ£ rat (t k) ‚â° rat [ 1 / 2+ n ]
    zz = cong‚ÇÇ {x = rat (t (suc k))}
          {rat [ pos (suc (suc k)) / 2+ n ]}
          _-·µ£_ refl {rat (t k)} {rat [ pos (suc k) / (2+ n) ]}
           refl  ‚àô -·µ£-rat‚ÇÇ
          ([ pos (suc (suc k)) / 2+ n ]) ([ pos (suc k) / 2+ n ]) ‚àô
           cong
             {x = [ pos (suc (suc k)) / 2+ n ] ‚Ñö.- [ pos (suc k) / 2+ n ]}
             {y = [ 1 / 2+ n ]}
             rat (‚Ñö.n/k-m/k (pos (suc (suc k))) (pos (suc k)) (2+ n)  ‚àô
                cong [_/ 2+ n ] (cong (‚Ñ§._- pos (suc k)) (‚Ñ§.pos+ 1 (suc k))

                 ‚àô ‚Ñ§.plusMinus (pos (suc k)) 1))

 isStrictEqualPartition : a <·µ£ b ‚Üí ‚àÄ n ‚Üí isStrictPartition (equalPartition n)
 isStrictEqualPartition a<b n k =
   subst2 _<·µ£_
     (sym (equalPartitionPts' n (finj k)))
     (sym (equalPartitionPts' n (fsuc k)))
     (<·µ£-o+ _ _ a
       (<·µ£-o¬∑·µ£ _ _
         (Œî , x<y‚Üí0<y-x _ _ a<b)
         (<‚Ñö‚Üí<·µ£ _ _ ((‚Ñö.[k/n]<[k'/n]
          (pos (fst k)) (pos (suc (fst k))) (2+ n)
            ‚Ñ§.isRefl‚â§)))))

 equalPartition-2‚Åø : ‚Ñï ‚Üí Partition[ a , b ]
 equalPartition-2‚Åø n = equalPartition (pred‚Ñï (pred‚Ñï (2^ (suc n))))

 equalPartition-mesh : ‚àÄ n ‚Üí
  mesh‚â§·µ£ (equalPartition n)
   ((b -·µ£ a) ¬∑·µ£ (rat [ 1 / 2+ n  ]) )
 equalPartition-mesh n k = ‚â°·µ£Weaken‚â§·µ£ _ _
  (equalPartitionŒî n k)

‚àÉPartition< : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
  ‚àÉ[ (p , tg) ‚àà TaggedPartition[ a , b ] ] mesh‚â§·µ£ p (rat (fst Œµ))
‚àÉPartition< a b a‚â§b Œµ =
  PT.map
    (Œª (x' , b-a<x' , _) ‚Üí
      let x'‚Çä = (x' , ‚Ñö.<‚Üí0< x'
                (<·µ£‚Üí<‚Ñö 0 x' (isTrans‚â§<·µ£ 0 (b -·µ£ a) (rat x')
                  (x‚â§y‚Üí0‚â§y-x a b a‚â§b) b-a<x')))
          (N , _) , (p , (u , _)) = ‚Ñö.ceil-[1-frac]‚Ñö‚Çä (inv‚Ñö‚Çä Œµ ‚Ñö‚Çä¬∑ x'‚Çä)
          ww : fst (x'‚Çä ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ) ‚Ñö.‚â§ fromNat (suc (suc N))
          ww = ‚Ñö.isTrans‚â§ (fst (x'‚Çä ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ)) (fromNat N)
                (fromNat (suc (suc N)))
              (subst2 (‚Ñö._‚â§_) (‚Ñö.+IdR (fst (inv‚Ñö‚Çä Œµ ‚Ñö‚Çä¬∑ x'‚Çä))
             ‚àô ‚Ñö.¬∑Comm (fst (inv‚Ñö‚Çä Œµ)) x') p
               (‚Ñö.‚â§-o+ _ _ (fst (inv‚Ñö‚Çä Œµ ‚Ñö‚Çä¬∑ x'‚Çä)) u))
                ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos N (suc (suc N))
                 (‚Ñï.‚â§-trans ‚Ñï.‚â§-suc‚Ñï ‚Ñï.‚â§-suc‚Ñï))))

      in (_ , leftSample (‚à´ab.equalPartition N)) ,
          Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (‚à´ab.equalPartition-mesh N k)
            (isTrans‚â§·µ£ _ _ _
              (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£-¬∑·µ£o _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos 1 (2+ N)))
                (<·µ£Weaken‚â§·µ£ _ _ b-a<x'))
                (sym (rat¬∑·µ£rat x' _)))
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z x' (fst Œµ) (fromNat (suc (suc N)))
               (subst (x' ‚Ñö.‚â§_) (‚Ñö.¬∑Comm (fst Œµ) _)
              (‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z x' (fromNat (suc (suc N))) Œµ
              ww)))))
      )
    (dense‚Ñöin‚Ñù (b -·µ£ a) ((b -·µ£ a) +·µ£ 1)
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR _)) (<·µ£-o+ 0 1 (b -·µ£ a) dec‚Ñö<·µ£?)))
 where
 module ‚à´ab = Integration a b a‚â§b

Integral'Uniq : ‚àÄ a b ‚Üí (a ‚â§·µ£ b) ‚Üí ‚àÄ f s s'
  ‚Üí on[ a , b ]IntegralOf f is' s
  ‚Üí on[ a , b ]IntegralOf f is' s'
  ‚Üí s ‚â° s'
Integral'Uniq a b a‚â§b f s s' S S' =
   eq‚Ñù _ _
    Œª Œµ ‚Üí
      PT.rec2 (isProp‚àº _ _ _ )
       (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
         let Œ¥‚äîŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
         in PT.rec (isProp‚àº _ _ _)
             (Œª (TP , TP<) ‚Üí subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
              (triangle‚àº {Œµ = /2‚Çä Œµ} {/2‚Çä Œµ}
                (sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ _ _ _)
                 (X TP Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (TP< k)
                  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))
                (invEq (‚àº‚âÉabs<Œµ _ _ _)
                  (X' TP Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (TP< k)
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥')))))))
                (‚àÉPartition< a b a‚â§b Œ¥‚äîŒ¥'))
       (S (/2‚Çä Œµ)) (S' (/2‚Çä Œµ))

IntegralUniq : ‚àÄ a b ‚Üí (a ‚â§·µ£ b) ‚Üí ‚àÄ f s s'
  ‚Üí on[ a , b ]IntegralOf f is s
  ‚Üí on[ a , b ]IntegralOf f is s'
  ‚Üí s ‚â° s'
IntegralUniq a b a‚â§b f s s' S S' =
  eq‚Ñù _ _
    Œª Œµ ‚Üí
      PT.rec2 (isProp‚àº _ _ _ )
       (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
         let Œ¥‚äîŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
         in PT.rec (isProp‚àº _ _ _)
             (Œª (TP , TP<) ‚Üí subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
              (triangle‚àº {Œµ = /2‚Çä Œµ} {/2‚Çä Œµ}
                (sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ _ _ _)
                 (X TP Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (TP< k)
                  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))
                (invEq (‚àº‚âÉabs<Œµ _ _ _)
                  (X' TP Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (TP< k)
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥')))))))
                (‚àÉPartition< a b a‚â§b Œ¥‚äîŒ¥'))
       (S (/2‚Çä Œµ)) (S' (/2‚Çä Œµ))


IntegratedProp : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f ‚Üí isProp (Œ£ _ on[ a , b ]IntegralOf f is'_)
IntegratedProp a b a‚â§b f (s , S) (s' , S')  =
  Œ£‚â°Prop (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí squash‚ÇÅ )
   (Integral'Uniq a b a‚â§b f s s' S S')

module Partition-pre+ (a b : ‚Ñù) (Œ± : ‚Ñù) where
 partition-pre+ :
    ( (TaggedPartition[ a , b ]))
    ‚Üí ((TaggedPartition[ a +·µ£ Œ± , b +·µ£ Œ± ]))
 partition-pre+  x .fst .len = x .fst .len
 partition-pre+  x .fst .pts = (_+·µ£ Œ±) ‚àò x .fst .pts
 partition-pre+  x .fst .a‚â§pts =
   ‚â§·µ£-+o _ _ _ ‚àò x .fst .a‚â§pts
 partition-pre+  x  .fst .pts‚â§b =
    ‚â§·µ£-+o _ _ _ ‚àò x .fst .pts‚â§b
 partition-pre+  x  .fst .pts‚â§pts =
     ‚â§·µ£-+o _ _ _ ‚àò x .fst .pts‚â§pts
 partition-pre+  x  .snd .samples =
  (_+·µ£ Œ±) ‚àò  x  .snd .samples
 partition-pre+  x .snd .pts'‚â§samples =
   Œª { k@(0 , _ , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .pts'‚â§samples k)
     ; k@(suc _ , 0 , _) ‚Üí ‚â§·µ£-+o _ _ _ (x  .snd .pts'‚â§samples k)
     ; k@(suc _ , suc _ , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .pts'‚â§samples k)
      }


 partition-pre+  x .snd .samples‚â§pts' =
   Œª { k@(0 , 0 , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .samples‚â§pts' k)
     ; k@(0 , suc _ , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .samples‚â§pts' k)
     ; k@(suc _ , 0 , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .samples‚â§pts' k)
     ; k@(suc _ , suc _ , _) ‚Üí ‚â§·µ£-+o _ _ _ (x .snd .samples‚â§pts' k)
      }

 partition-pre+-lem : ‚àÄ tp k ‚Üí
      pts' (fst (partition-pre+ tp)) (fsuc k) -·µ£
      pts' (fst (partition-pre+ tp)) (finj k)
      ‚â°
      (pts' (fst tp) (fsuc k)) -·µ£ (pts' (fst tp) (finj k))
 partition-pre+-lem tp (0 , 0 , _) = Lùêë.lem--075
 partition-pre+-lem tp (0 , suc _ , _) = Lùêë.lem--075
 partition-pre+-lem tp (suc _ , 0 , _) = Lùêë.lem--075
 partition-pre+-lem tp (suc _ , suc _ , _) = Lùêë.lem--075

 mesh-pre+ : ‚àÄ Œ¥ ‚Üí (tp : TaggedPartition[ a , b ]) ‚Üí
             mesh‚â§·µ£ (fst tp) Œ¥
            ‚Üí mesh‚â§·µ£ (fst (partition-pre+ tp)) Œ¥
 mesh-pre+ Œ¥ tp x k =
   isTrans‚â°‚â§·µ£ _ _ _ (partition-pre+-lem tp k) (x k)


pts'-tranp : ‚àÄ {a a' b b'} ‚Üí (p : a ‚â° a') (p' : b ‚â° b') ‚Üí
 ((pa , tg) : TaggedPartition[ a , b ]) ‚Üí
 ‚àÄ k k' ‚Üí fst k ‚â° fst k' ‚Üí
 pts' pa k ‚â° pts' (fst (subst2 TaggedPartition[_,_] p p' (pa , tg))) k'
pts'-tranp {a} {a'} {b} {b'} p p' =
 J2 (Œª a' p b' p' ‚Üí
              ((pa , tg) : TaggedPartition[ a , b ]) ‚Üí
            ‚àÄ k k' ‚Üí fst k ‚â° fst k' ‚Üí
            pts' pa k ‚â°
            pts' (fst (subst2 TaggedPartition[_,_] p p' (pa , tg))) k' )
         (Œª (pa , tg) k k' pp i ‚Üí
           fst (pts'Œ£ (transportRefl pa (~ i))
             (to‚Ñï-injective {suc (suc (suc (len pa)))}
               {k} {k'} pp i)))
           {a'} p {b'} p'

integral'-transl : ‚àÄ a b Œî f s
         ‚Üí (on[ a  , b ]IntegralOf (f ‚àòS (Œî +·µ£_)) is' s)
         ‚Üí (on[ a +·µ£ Œî  , b +·µ£ Œî  ]IntegralOf f is' s)
integral'-transl a b Œî f s X Œµ =
  PT.map
    (map-snd (Œª {Œ¥} Y (p , tp) m‚â§ ‚Üí
      isTrans‚â°<·µ£ _ _ _
       (cong (Œª rs ‚Üí abs·µ£ (rs -·µ£ s))
        (riemannSum'-alt-lem tp f ‚àô‚àô
          cong (Œª (gg : Fin (suc (suc (len p))) ‚Üí ‚Ñù) ‚Üí foldlFin
              (Œª S k ‚Üí
               S +·µ£ gg k ) 0
               (idfun _))
            (funExt
             (Œª x ‚Üí cong‚ÇÇ _¬∑·µ£_
                (sym (Partition-pre+.partition-pre+-lem
                  (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (p , tp) x) ‚àô
                   cong‚ÇÇ _-·µ£_
                    (pts'-tranp ((ùêë'.plusMinus a Œî)) ((ùêë'.plusMinus b Œî))
                      (Partition-pre+.partition-pre+
                     (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (p , tp))
                     (fsuc x) (fsuc x) refl)
                    ((pts'-tranp ((ùêë'.plusMinus a Œî)) ((ùêë'.plusMinus b Œî))
                      (Partition-pre+.partition-pre+
                     (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (p , tp))
                     (finj x) (finj x) refl)) )
               (cong f ((sym (ùêë'.minusPlus _ Œî)
                 ‚àô cong ((_+·µ£ Œî) ‚àò (_+·µ£ (-·µ£ Œî)))
                  (cong (samples tp) (to‚Ñï-injective refl))) ‚àô +·µ£Comm _ _ ))))
         ‚àô‚àô sym (riemannSum'-alt-lem
           (fst
             (subst2
              (Œª a' b' ‚Üí
                 Œ£ TaggedPartition[ a' , b' ]
                 (Œª pp ‚Üí mesh‚â§·µ£ (fst pp) (rat (fst Œ¥))))
              (ùêë'.plusMinus a Œî) (ùêë'.plusMinus b Œî)
              (Partition-pre+.partition-pre+ (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî)
               _
               ,
               Partition-pre+.mesh-pre+ (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (rat (fst Œ¥))
               (p , tp) m‚â§))
             .snd) (f ‚àòS _+·µ£_ Œî))))
        (uncurry Y
         (subst2 (Œª a' b' ‚Üí
          Œ£ (TaggedPartition[ a' , b' ]) (Œª (xx , _) ‚Üí
            mesh‚â§·µ£ xx (rat (fst Œ¥)) ) )
            (ùêë'.plusMinus a Œî) (ùêë'.plusMinus b Œî)
         (Partition-pre+.partition-pre+
          (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (p , tp) ,
           Partition-pre+.mesh-pre+
          (a +·µ£ Œî) (b +·µ£ Œî) (-·µ£ Œî) (rat (fst Œ¥)) (p , tp) m‚â§)))))
    (X Œµ)



module Partition-pre¬∑ (a b : ‚Ñù) (Œ± : ‚Ñù) (0‚â§Œ± : 0 ‚â§·µ£ Œ±) where
 partition-pre¬∑ :
    ( (TaggedPartition[ a , b ]))
    ‚Üí ((TaggedPartition[ a ¬∑·µ£ Œ± , b ¬∑·µ£ Œ± ]))
 partition-pre¬∑  x .fst .len = x .fst .len
 partition-pre¬∑  x .fst .pts = (_¬∑·µ£ Œ±) ‚àò x .fst .pts
 partition-pre¬∑  x .fst .a‚â§pts =
   ‚â§·µ£-¬∑·µ£o _ _ _ 0‚â§Œ± ‚àò x .fst .a‚â§pts
 partition-pre¬∑  x  .fst .pts‚â§b =
    ‚â§·µ£-¬∑·µ£o _ _ _ 0‚â§Œ± ‚àò x .fst .pts‚â§b
 partition-pre¬∑  x  .fst .pts‚â§pts =
     ‚â§·µ£-¬∑·µ£o _ _ _ 0‚â§Œ± ‚àò x .fst .pts‚â§pts
 partition-pre¬∑  x  .snd .samples =
  (_¬∑·µ£ Œ±) ‚àò  x  .snd .samples
 partition-pre¬∑  x .snd .pts'‚â§samples =
   Œª { k@(0 , _ , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .pts'‚â§samples k)
     ; k@(suc _ , 0 , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x  .snd .pts'‚â§samples k)
     ; k@(suc _ , suc _ , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .pts'‚â§samples k)
      }
   where
    z = 0‚â§Œ±

 partition-pre¬∑  x .snd .samples‚â§pts' =
   Œª { k@(0 , 0 , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .samples‚â§pts' k)
     ; k@(0 , suc _ , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .samples‚â§pts' k)
     ; k@(suc _ , 0 , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .samples‚â§pts' k)
     ; k@(suc _ , suc _ , _) ‚Üí ‚â§·µ£-¬∑·µ£o _ _ _ z (x .snd .samples‚â§pts' k)
      }
   where
    z = 0‚â§Œ±

 partition-pre¬∑-lem : ‚àÄ tp k ‚Üí
      pts' (fst (partition-pre¬∑ tp)) (fsuc k) -·µ£
      pts' (fst (partition-pre¬∑ tp)) (finj k)
      ‚â°
      pts' (fst tp) (fsuc k) ¬∑·µ£ Œ± -·µ£ pts' (fst tp) (finj k) ¬∑·µ£ Œ±
 partition-pre¬∑-lem tp (0 , 0 , _) = refl
 partition-pre¬∑-lem tp (0 , suc _ , _) = refl
 partition-pre¬∑-lem tp (suc _ , 0 , _) = refl
 partition-pre¬∑-lem tp (suc _ , suc _ , _) = refl

 mesh-pre¬∑ : ‚àÄ Œ¥ ‚Üí (tp : TaggedPartition[ a , b ]) ‚Üí
             mesh‚â§·µ£ (fst tp) Œ¥
            ‚Üí mesh‚â§·µ£ (fst (partition-pre¬∑ tp)) (Œ¥ ¬∑·µ£ Œ±)
 mesh-pre¬∑ Œ¥ tp x k =
   isTrans‚â°‚â§·µ£ _ _ _
     (partition-pre¬∑-lem tp k ‚àô sym (ùêë'.¬∑DistL- _ _ _))
     (‚â§·µ£-¬∑·µ£o _ _ _ 0‚â§Œ±
      (x k))

 -- mesh-pre¬∑-sample : ((p , tg) : TaggedPartition[ a , b ]) ‚Üí ‚àÄ k ‚Üí
 --     fst (samplesŒ£ tg k) ‚â° {!!}
 -- mesh-pre¬∑-sample = {!!}

-- module _ (a b : ‚Ñù) (Œ± : ‚Ñù) (0‚â§Œ± : 0 ‚â§·µ£ Œ±) where

--  integral'-pre¬∑ : ‚àÄ f s
--           ‚Üí (on[ a  , b ]IntegralOf (f ‚àòS (_¬∑·µ£ (Œ±))) is' s)
--           ‚Üí (on[ a ¬∑·µ£ Œ±  , b ¬∑·µ£ Œ±  ]IntegralOf f is' (s ¬∑·µ£ Œ±))
--  integral'-pre¬∑ f s X Œµ =
--    PT.rec squash‚ÇÅ
--       (Œª (x' , (Œ±<x' , _)) ‚Üí
--        let x'‚Çä : ‚Ñö‚Çä
--            x'‚Çä = (x' , ‚Ñö.<‚Üí0< x'
--                   (<·µ£‚Üí<‚Ñö [ pos 0 / 1+ 0 ] x'
--                    (isTrans‚â§<·µ£ (rat [ pos 0 / 1+ 0 ]) Œ± (rat x') 0‚â§Œ± Œ±<x')))
--        in PT.map
--          (map-snd Œª {Œ¥}
--            (XX : ((p , tg) : TaggedPartition[ a , b ]) ‚Üí
--                                mesh‚â§·µ£ p (rat (fst Œ¥)) ‚Üí
--                                abs·µ£ (riemannSum' tg (f ‚àòS (_¬∑·µ£ Œ±)) -·µ£ s) <·µ£
--                                rat (fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä x'‚Çä)))
--           (p , tg) (m‚â§ : mesh‚â§·µ£ p (rat (fst Œ¥)))  ‚Üí
--            {! !})
--           (X (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä x'‚Çä)))
--      ((dense‚Ñöin‚Ñù Œ± (Œ± +·µ£ 1)
--        (isTrans‚â°<·µ£ _ _ _
--          (sym (+IdR _)) (<·µ£-o+ 0 1 Œ± dec‚Ñö<·µ£?))))

module _ (a b : ‚Ñù) (Œ± : ‚Ñù) (0<Œ± : 0 <·µ£ Œ±) where

 module PP = Partition-pre¬∑ (a ¬∑·µ£ Œ±) (b ¬∑·µ£ Œ±)
  (fst (inv‚Ñù‚Çä (Œ± , 0<Œ±))) (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä (Œ± , 0<Œ±))))

 integral'-pre¬∑< : ‚àÄ f s
          ‚Üí (on[ a  , b ]IntegralOf (f ‚àòS (_¬∑·µ£ (Œ±))) is' s)
          ‚Üí (on[ a ¬∑·µ£ Œ±  , b ¬∑·µ£ Œ±  ]IntegralOf f is' (s ¬∑·µ£ Œ±))
 integral'-pre¬∑< f s X Œµ =
   PT.rec2 squash‚ÇÅ
      (Œª (x'' , (0<x'' , x''<Œ±)) (x' , (Œ±<x' , _)) ‚Üí
       let x'‚Çä : ‚Ñö‚Çä
           x'‚Çä = (x' , ‚Ñö.<‚Üí0< x'
                  (<·µ£‚Üí<‚Ñö [ pos 0 / 1+ 0 ] x'
                   (isTrans<·µ£ (rat [ pos 0 / 1+ 0 ]) Œ± (rat x') 0<Œ± Œ±<x')))
       in PT.map
         (Œª ((Œ¥ , XX) : Œ£ _ Œª Œ¥' ‚Üí (((p , tg) : TaggedPartition[ a , b ]) ‚Üí
                               mesh‚â§·µ£ p (rat (fst Œ¥')) ‚Üí
                               abs·µ£ (riemannSum' tg (f ‚àòS (_¬∑·µ£ Œ±)) -·µ£ s) <·µ£
                               rat (fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä x'‚Çä)))) ‚Üí
          let x''‚Çä : ‚Ñö‚Çä
              x''‚Çä = x'' , ‚Ñö.<‚Üí0< x'' (<·µ£‚Üí<‚Ñö 0 x'' 0<x'')
              Œ¥' : ‚Ñö‚Çä
              Œ¥' = Œ¥ ‚Ñö‚Çä¬∑ x''‚Çä
          in Œ¥' ,
               Œª (p , tg) (m‚â§ : mesh‚â§·µ£ p (rat (fst Œ¥')))  ‚Üí
               let (p' , tg') = PP.partition-pre¬∑ (p , tg)
                   ZZ = subst2 (Œª u v ‚Üí Œ£ TaggedPartition[ u , v ]
                              Œª (p , _) ‚Üí mesh‚â§·µ£ p (rat (fst Œ¥)))
                         ([x¬∑y·µ£]/‚Çäy a (Œ± , 0<Œ±)) ([x¬∑y·µ£]/‚Çäy b (Œ± , 0<Œ±))
                        ((p' , tg') ,

                          Œª k ‚Üí
                            isTrans‚â§·µ£ _ _ _
                              (PP.mesh-pre¬∑ (rat (fst Œ¥')) (p , tg) m‚â§ k)
                               (isTrans‚â§‚â°·µ£ _ _ _
                                 (‚â§·µ£-o¬∑·µ£ _ (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä x''‚Çä))) _ (
                                  <·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥')))
                                  (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
                                    (<·µ£Weaken‚â§·µ£ _ _ x''<Œ±)))
                                 (cong (_¬∑·µ£ fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä x''‚Çä)))
                                   (rat¬∑·µ£rat (fst Œ¥) x'')
                                  ‚àô [x¬∑y·µ£]/‚Çäy (rat (fst Œ¥)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä x''‚Çä)))
                                 )
                   zzz = isTrans<‚â°·µ£ _ _ _ (uncurry XX ZZ)
                           (rat¬∑·µ£rat (fst Œµ) _ ‚àô
                             cong (rat (fst Œµ) ¬∑·µ£_) (sym (inv‚Ñù‚Çä-rat x'‚Çä)))
                   zzz' = fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä x'‚Çä)) zzz
               in isTrans‚â°<·µ£ _ _ _
                    (cong abs·µ£
                      (cong (_-·µ£ s ¬∑·µ£ Œ±)
                        ( riemannSum'-alt-lem tg f
                         ‚àô‚àô (cong (Œª (f : Fin _ ‚Üí ‚Ñù) ‚Üí foldlFin
                            {n = (2 ‚Ñï.+ len (fst (fst ZZ)))}
                              (Œª S k ‚Üí S +·µ£ f k) 0 (idfun _))
                              (funExt
                                Œª (k : Fin _) ‚Üí
                                 cong‚ÇÇ _¬∑·µ£_
                                   (x/‚Çäy‚â°z‚Üíx‚â°z¬∑y _ _ (Œ± , 0<Œ±)
                                     (ùêë'.¬∑DistL- _ _ _
                                       ‚àô
                                        sym (PP.partition-pre¬∑-lem (p , tg) k)
                                         ‚àô
                                         cong‚ÇÇ _-·µ£_
                                          (pts'-tranp
                                            ([x¬∑y·µ£]/‚Çäy a (Œ± , 0<Œ±))
                                            ([x¬∑y·µ£]/‚Çäy b (Œ± , 0<Œ±))
                                            (p' , tg') (fsuc k) (fsuc k) refl)
                                          ((pts'-tranp
                                            ([x¬∑y·µ£]/‚Çäy a (Œ± , 0<Œ±))
                                            ([x¬∑y·µ£]/‚Çäy b (Œ± , 0<Œ±))
                                            (p' , tg') (finj k) (finj k) refl)))
                                    ‚àô ¬∑·µ£Comm _ _)
                                   (cong f
                                    (x/‚Çäy‚â°z‚Üíx‚â°z¬∑y _ _ (Œ± , 0<Œ±)
                                      (cong
                                        (Œª k
                                         ‚Üí (fst (samplesŒ£ tg k) Ôºè·µ£‚Çä (Œ± , 0<Œ±)))
                                        (to‚Ñï-injective refl)))) ‚àô
                                  sym (¬∑·µ£Assoc _ _ _))
                          ‚àô foldFin¬∑DistL' (2 ‚Ñï.+ len (fst (fst ZZ)))
                             _
                              Œ± (idfun _))
                           ‚àô ¬∑·µ£Comm _ _ ‚àô‚àô
                         cong (_¬∑·µ£ Œ±)
                           (sym (riemannSum'-alt-lem
                            (fst ZZ .snd) (Œª x ‚Üí f (x ¬∑·µ£ Œ±)))))
                        ‚àô‚àô
                       sym (ùêë'.¬∑DistL- _ _ Œ±) ‚àô‚àô ¬∑·µ£Comm _ _)
                      ‚àô‚àô ¬∑abs·µ£ _ _ ‚àô‚àô
                      cong (_¬∑·µ£ abs·µ£ (riemannSum' (fst ZZ .snd) (f ‚àòS (_¬∑·µ£ Œ±)) -·µ£ s))
                          (abs·µ£Pos _ 0<Œ±))
                    (isTrans‚â§<·µ£ _ _ _
                       (‚â§·µ£-¬∑·µ£o _ _ _ (0‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ Œ±<x'))
                      zzz'))
          (X (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä x'‚Çä)))
     (dense‚Ñöin‚Ñù 0 Œ± 0<Œ±)
     (dense‚Ñöin‚Ñù Œ± (Œ± +·µ£ 1)
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR _)) (<·µ£-o+ 0 1 Œ± dec‚Ñö<·µ£?)))




-- integral'-pre¬∑ : ‚àÄ a b f s (Œ± : ‚Ñù‚Çä)
--                  ‚Üí (on[ a , b ]IntegralOf f is' s)
--          ‚Üí (on[ a ¬∑·µ£ (fst Œ±) , b ¬∑·µ£ (fst Œ±)
--            ]IntegralOf (f ‚àòS (_¬∑·µ£ fst (inv‚Ñù‚Çä Œ±))) is' (s ¬∑·µ£ (fst Œ±)))
-- integral'-pre¬∑ a b f s Œ± X Œµ =
--   PT.rec squash‚ÇÅ
--     (Œª (Œ¥ , (0<Œ¥ , Œ¥<)) ‚Üí
--       PT.map (map-snd
--          Œª {Œ¥'} ‚Üí
--            Œª Y p p‚â§ ‚Üí
--             let pp = partition-pre¬∑
--                        (a ¬∑·µ£ (fst Œ±)) (b ¬∑·µ£ (fst Œ±)) (inv‚Ñù‚Çä Œ±)
--                      (p)
--             in isTrans<·µ£ _ _ _
--                (isTrans‚â°<·µ£ _ _ _ (({!!} ‚àô ¬∑abs·µ£ {!!} (fst Œ±))
--                     ‚àô cong (abs·µ£ _ ¬∑·µ£_) (abs·µ£Pos _ (snd Œ±)) ‚àô ¬∑·µ£Comm _ _ )
--                     {!!}
--                  -- (<·µ£-o¬∑·µ£ _ _  Œ± (Y (subst2 TaggedPartition[_,_]
--                  --  ([x¬∑y·µ£]/‚Çäy _ Œ±) (([x¬∑y·µ£]/‚Çäy _ Œ±)) pp)
--                  --   {!p‚â§!}))
--                    )
--                 (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _) Œ¥<)
--               )
--         (X (Œ¥ , {!!})))
--     (dense‚Ñöin‚Ñù 0 (rat (fst Œµ) ¬∑·µ£ (fst (inv‚Ñù‚Çä Œ±))) {!cfc!})



opaque
 unfolding _+·µ£_

 clamp-Œî-¬∑f : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f
       ‚Üí IsContinuous f
       ‚Üí ‚àÄ (Œ¥ : ‚Ñö‚Çä)
       ‚Üí ‚àÄ u v ‚Üí u ‚â§·µ£ v
       ‚Üí v -·µ£ u ‚â§·µ£ rat (fst Œ¥)
       ‚Üí ‚àÄ x ‚Üí x ‚àà interval‚Ñô u v
       ‚Üí (clamp·µ£ a b v -·µ£ clamp·µ£ a b u) ¬∑·µ£ f x
         ‚â° (clamp·µ£ a b v -·µ£ clamp·µ£ a b u)
           ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) (b +·µ£ rat (fst Œ¥)) x)
 clamp-Œî-¬∑f a b a‚â§b f cf Œ¥ u v u‚â§v v‚àºu x x‚àà =
   sym (Œª i ‚Üí (clamp·µ£ a (b* i) (v* i) -·µ£ clamp·µ£ a (b* i) u) ¬∑·µ£ f (x* i))
   ‚àô‚àô
   hhh'' a b u v x
   ‚àô‚àô
   Œª i ‚Üí (clamp·µ£ a (b* i) (v* i) -·µ£ clamp·µ£ a (b* i) u) ¬∑·µ£
      f (clamp·µ£ (a -·µ£ Œ¥* i) ((b* i) +·µ£ Œ¥* i) (x* i))


   where
   b* v* x* Œ¥* : I ‚Üí ‚Ñù
   b* i = ‚â§‚Üímax·µ£ a b a‚â§b i
   v* i = ‚â§‚Üímax·µ£ u v u‚â§v i
   x* i = ((cong (clamp·µ£ u) (Œª i ‚Üí v* i) ‚â°$ x) ‚àô sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° u v x x‚àà)
               ) i
   Œ¥* i = ((Œª i ‚Üí max·µ£ (v* i -·µ£ u) (rat (fst Œ¥)))
        ‚àô ‚â§‚Üímax·µ£  (v -·µ£ u) (rat (fst Œ¥)) v‚àºu) i

   fL : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
   fL a b u v = clamp·µ£ a (max·µ£ a b) (max·µ£ u v) -·µ£ clamp·µ£ a (max·µ£ a b) u

   fLC : ‚àÄ a b ‚Üí IsContinuous‚ÇÇ (fL a b)
   fLC a b = IsContinuous-‚ÇÇ‚àò
     (cont‚àò‚ÇÇ (IsContinuousClamp a (max·µ£ a b)) (contNE‚ÇÇ maxR))
    (cont‚àò‚ÇÇ (IsContinuousClamp a (max·µ£ a b)) cont‚ÇÇ-fst)

   fLC' : ‚àÄ u v ‚Üí IsContinuous‚ÇÇ (Œª a b ‚Üí fL a b u v)
   fLC' u v = IsContinuous-‚ÇÇ‚àò
     (IsContinuousClamp‚ÇÇ‚àò (max·µ£ u v) cont‚ÇÇ-fst (contNE‚ÇÇ maxR))
    (IsContinuousClamp‚ÇÇ‚àò u cont‚ÇÇ-fst (contNE‚ÇÇ maxR))

   f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
   f‚ÇÄ a b u v x = fL a b u v ¬∑·µ£ f (clamp·µ£ u (max·µ£ u v) x)
   f‚ÇÅ a b u v x = fL a b u v ¬∑·µ£
      f (clamp·µ£ (a -·µ£ (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥))))
       ((max·µ£ a b) +·µ£ (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥))))
       ((clamp·µ£ u (max·µ£ u v) x)))

   f‚ÇÄC : ‚àÄ a b x ‚Üí IsContinuous‚ÇÇ (Œª u v ‚Üí f‚ÇÄ a b u v x)
   f‚ÇÄC a b x = cont‚ÇÇ¬∑‚ÇÇ·µ£ (fLC a b)
     (cont‚àò‚ÇÇ cf (IsContinuousClamp‚ÇÇ‚àò x
       cont‚ÇÇ-fst (contNE‚ÇÇ maxR)))
   f‚ÇÅC : ‚àÄ a b x ‚Üí IsContinuous‚ÇÇ (Œª u v ‚Üí f‚ÇÅ a b u v x)
   f‚ÇÅC a b x = cont‚ÇÇ¬∑‚ÇÇ·µ£ (fLC a b) (cont‚àò‚ÇÇ cf
      (IsContinuousClamp‚ÇÇ‚àò'
        (IsContinuous-‚ÇÇ‚àò (cont‚ÇÇ-id a)
          (contNE‚ÇÇ‚àò maxR
            (IsContinuous-‚ÇÇ‚àò (contNE‚ÇÇ maxR) cont‚ÇÇ-fst) (cont‚ÇÇ-id _)))
        ((contNE‚ÇÇ‚àò sumR (cont‚ÇÇ-id (max·µ£ a b))
          (contNE‚ÇÇ‚àò maxR
            (IsContinuous-‚ÇÇ‚àò (contNE‚ÇÇ maxR) cont‚ÇÇ-fst) (cont‚ÇÇ-id _))))
        (IsContinuousClamp‚ÇÇ‚àò x cont‚ÇÇ-fst (contNE‚ÇÇ maxR))))

   f‚ÇÄC' : ‚àÄ u v x ‚Üí IsContinuous‚ÇÇ (Œª a b ‚Üí f‚ÇÄ a b u v x)
   f‚ÇÄC' u v x = cont‚àò‚ÇÇ (IsContinuous¬∑·µ£R _) (fLC' u v)
   f‚ÇÅC' : ‚àÄ u v x ‚Üí IsContinuous‚ÇÇ (Œª a b ‚Üí f‚ÇÅ a b u v x)
   f‚ÇÅC' u v x = cont‚ÇÇ¬∑‚ÇÇ·µ£ (fLC' u v)
      (cont‚àò‚ÇÇ cf (IsContinuousClamp‚ÇÇ‚àò (clamp·µ£ u (max·µ£ u v) x)
        (cont‚àò‚ÇÇ (IsContinuous+·µ£R (-·µ£ (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥)))))
          cont‚ÇÇ-fst)
        ((cont‚àò‚ÇÇ (IsContinuous+·µ£R (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥))))
          (contNE‚ÇÇ maxR)))))

   f‚ÇÄC'' : ‚àÄ a b u v ‚Üí IsContinuous (f‚ÇÄ a b u v)
   f‚ÇÄC'' a b u v = IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L _)
     (IsContinuous‚àò _ _ cf (IsContinuousClamp u (max·µ£ u v)))
   f‚ÇÅC'' : ‚àÄ a b u v ‚Üí IsContinuous (f‚ÇÅ a b u v)
   f‚ÇÅC'' a b u v = IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L _)
     (IsContinuous‚àò _ _ cf
       (IsContinuous‚àò _ _
        (IsContinuousClamp
          (a -·µ£ (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥))))
          ((max·µ£ a b) +·µ£ (max·µ£ (max·µ£ u v -·µ£ u) (rat (fst Œ¥)))))
        (IsContinuousClamp u (max·µ£ u v))))


   hhh : ‚àÄ a b ‚Üí a ‚Ñö.‚â§ b
       ‚Üí ‚àÄ u v ‚Üí u ‚Ñö.‚â§ v
       ‚Üí ‚àÄ Œ¥
       ‚Üí rat v -·µ£ rat u ‚â§·µ£ rat Œ¥
       ‚Üí ‚àÄ x ‚Üí x ‚àà ‚Ñöinterval‚Ñô u v

       ‚Üí (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u)) ¬∑·µ£ f (rat x)
         ‚â° (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u))
           ¬∑·µ£ f (clamp·µ£ (rat a -·µ£ rat Œ¥) (rat b +·µ£ rat Œ¥) (rat x))
   hhh a b a‚â§b u v u‚â§v Œ¥ v-u‚â§Œ¥ x (‚â§x , x‚â§) = ‚äé.rec
        (Œª p ‚Üí
         let q : clamp·µ£ (rat a) (rat b) (rat v)
                 -·µ£ clamp·µ£ (rat a) (rat b) (rat u) ‚â° 0
             q = cong‚ÇÇ _-·µ£_ (clamp·µ£-rat a b v) (clamp·µ£-rat a b u)
                   ‚àô -·µ£-rat‚ÇÇ (‚Ñö.clamp a b v) (‚Ñö.clamp a b u)  ‚àô cong rat p
         in (ùêë'.0LeftAnnihilates'
               (clamp·µ£ (rat a) (rat b) (rat v)
                 -·µ£ clamp·µ£ (rat a) (rat b) (rat u)) (f (rat x)) q)
          ‚àô sym (ùêë'.0LeftAnnihilates'
              (clamp·µ£ (rat a) (rat b) (rat v)
                 -·µ£ clamp·µ£ (rat a) (rat b) (rat u))
                  (f (clamp·µ£ (rat a -·µ£ rat (Œ¥)) (rat b +·µ£ rat Œ¥) (rat x))) q))
                  (Œª (a‚â§v , u‚â§b) ‚Üí
                     cong ( (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u)) ¬∑·µ£_)
                        (cong f
                          (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat a -·µ£ rat Œ¥) (rat b +·µ£ rat Œ¥) (rat x)
                           (isTrans‚â§·µ£ _ _ _
                              (isTrans‚â§‚â°·µ£ _ _ _
                                (‚â§·µ£Monotone+·µ£ _ _ _ _
                                  (‚â§‚Ñö‚Üí‚â§·µ£ a _ a‚â§v) (-·µ£‚â§·µ£ _ _ v-u‚â§Œ¥) )
                                (Lùêë.lem--079 {rat v} ))
                              (‚â§‚Ñö‚Üí‚â§·µ£ u _ ‚â§x)
                           , isTrans‚â§·µ£ _ _ _
                                (‚â§‚Ñö‚Üí‚â§·µ£ _ v x‚â§)
                                (isTrans‚â°‚â§·µ£ _ _ _
                                  (sym (Lùêë.lem--05 {rat u}))
                                  (‚â§·µ£Monotone+·µ£ _ _ _ _
                                   (‚â§‚Ñö‚Üí‚â§·µ£ u _ u‚â§b) v-u‚â§Œ¥))))))
                  (clampCases a b a‚â§b u v u‚â§v)

   hhh' : ‚àÄ (a b u v x : ‚Ñö) ‚Üí f‚ÇÄ (rat a) (rat b) (rat u) (rat v) (rat x)
                 ‚â°
               f‚ÇÅ (rat a) (rat b) (rat u) (rat v) (rat x)
   hhh' a b u v x = hhh a (‚Ñö.max a b) (‚Ñö.‚â§max a b) u (‚Ñö.max u v) (‚Ñö.‚â§max u v)
      (‚Ñö.max ((‚Ñö.max u v) ‚Ñö.- u) (fst Œ¥))
        (isTrans‚â°‚â§·µ£ _ _ _
          ((-·µ£-rat‚ÇÇ (‚Ñö.max u v) u))
          (‚â§‚Ñö‚Üí‚â§·µ£ ((‚Ñö.max u v) ‚Ñö.- u) _
            (‚Ñö.‚â§max ((‚Ñö.max u v) ‚Ñö.- u) (fst Œ¥))))

          (‚Ñö.clamp u (‚Ñö.max u v) x)
            (clam‚àà‚Ñöinterval‚Ñô u (‚Ñö.max u v) (‚Ñö.‚â§max u v) x)
     ‚àô cong‚ÇÇ _¬∑·µ£_
          refl
          (cong f
            (cong‚ÇÉ clamp·µ£ (cong (_-·µ£_ (rat a))
              (cong (flip max·µ£ (rat (fst Œ¥))) (sym (-·µ£-rat‚ÇÇ (‚Ñö.max u v) u))))
              (cong (rat (‚Ñö.max a b) +·µ£_)
               (cong (flip max·µ£ (rat (fst Œ¥))) (sym (-·µ£-rat‚ÇÇ (‚Ñö.max u v) u))))
              refl))

   hhh'' : ‚àÄ (a b u v x : ‚Ñù) ‚Üí f‚ÇÄ a b u v x ‚â° f‚ÇÅ a b u v x
   hhh'' a b u v x =
     ‚â°Cont‚ÇÇ (f‚ÇÄC a b x) (f‚ÇÅC a b x)
       (Œª u‚Ñö v‚Ñö ‚Üí let u = rat u‚Ñö ; v = rat v‚Ñö in
         ‚â°Cont‚ÇÇ (f‚ÇÄC' u v x) (f‚ÇÅC' u v x)
          (Œª a‚Ñö b‚Ñö ‚Üí let a = rat a‚Ñö ; b = rat b‚Ñö in
           ‚â°Continuous (f‚ÇÄ a b u v) (f‚ÇÅ a b u v)
            (f‚ÇÄC'' a b u v) (f‚ÇÅC'' a b u v)
             (hhh' a‚Ñö b‚Ñö u‚Ñö v‚Ñö) x)
          a b)
       u v


 -- clamp-Œî-¬∑f' : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f
 --      ‚Üí IsContinuous f
 --      ‚Üí ‚àÄ (Œ¥ : ‚Ñö‚Çä)
 --      ‚Üí ‚àÄ u v ‚Üí u ‚â§·µ£ v
 --      ‚Üí v -·µ£ u ‚â§·µ£ rat (fst Œ¥)
 --      ‚Üí ‚àÄ x ‚Üí rat x ‚àà interval‚Ñô u v
 --      ‚Üí (clamp·µ£ a b v -·µ£ clamp·µ£ a b u) ¬∑·µ£ f (rat x)
 --        ‚â° (clamp·µ£ a b v -·µ£ clamp·µ£ a b u)
 --          ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) (b) (rat x))
 -- clamp-Œî-¬∑f' a b a‚â§b f cf Œ¥ u v u‚â§v v‚àºu x (‚â§x , x‚â§) =
 --   subst {x = rat x} {clamp·µ£ u v (rat x)}
 --      (Œª x ‚Üí
 --      (clamp·µ£ a b v -·µ£ clamp·µ£ a b u) ¬∑·µ£ f x
 --        ‚â° (clamp·µ£ a b v -·µ£ clamp·µ£ a b u)
 --          ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) (b) x))
 --          ?
 --       (subst2 (Œª b u ‚Üí
 --      (clamp·µ£ a b v -·µ£ clamp·µ£ a b u) ¬∑·µ£ f (rat x)
 --        ‚â° (clamp·µ£ a b v -·µ£ clamp·µ£ a b u)
 --          ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) (b) (rat x)))
 --     (‚â§‚Üímax·µ£ _ _ a‚â§b)

 --     (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°
 --       (v -·µ£ rat (fst Œ¥)) v
 --       u (‚â§u , u‚â§v)))
 --       (‚â°Cont‚ÇÇ
 --         {f‚ÇÄ = Œª a b ‚Üí f‚ÇÄ a b u v}
 --         {f‚ÇÅ = Œª a b ‚Üí f‚ÇÅ a b u v}
 --        (cont‚àò‚ÇÇ (IsContinuous¬∑·µ£R (f (u' ?))) ch)
 --         (cont‚ÇÇ¬∑‚ÇÇ·µ£
 --           ch
 --           (cont‚àò‚ÇÇ cf
 --             (IsContinuousClamp‚ÇÇ‚àò (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v ?)
 --               ((Œª _ ‚Üí IsContinuousConst _) ,
 --                (Œª _ ‚Üí IsContinuous+·µ£R (-·µ£ rat (fst Œ¥)))
 --                ) ((contNE‚ÇÇ maxR)))))
 --        (Œª a‚Ñö b‚Ñö ‚Üí
 --          ‚â°Cont‚ÇÇ {f‚ÇÄ = f‚ÇÄ (rat a‚Ñö) (rat b‚Ñö)}
 --                 {f‚ÇÅ = f‚ÇÅ (rat a‚Ñö) (rat b‚Ñö)}
 --             (cont‚ÇÇ¬∑‚ÇÇ·µ£ (ch' a‚Ñö b‚Ñö)
 --               (cont‚àò‚ÇÇ cf ch''))
 --             (cont‚ÇÇ¬∑‚ÇÇ·µ£ (ch' a‚Ñö b‚Ñö)
 --               (cont‚àò‚ÇÇ cf
 --                 (cont‚àò‚ÇÇ (IsContinuousClamp (rat a‚Ñö -·µ£ rat (fst Œ¥))
 --                       ((max·µ£ (rat a‚Ñö) (rat b‚Ñö)))) ch'')))
 --             (Œª u‚Ñö v‚Ñö ‚Üí
 --              let qqq = (cong (Œª xx ‚Üí
 --                       clamp·µ£ xx (rat v‚Ñö) (rat u‚Ñö))
 --                        (sym (-·µ£-rat‚ÇÇ v‚Ñö  (fst Œ¥))))
 --                  ppp =
 --                     cong (Œª uu ‚Üí
 --                        clamp·µ£ (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö)) (rat v‚Ñö) -·µ£
 --                       clamp·µ£ (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö))
 --                       uu)
 --                        qqq
 --              in cong‚ÇÇ _¬∑·µ£_
 --                 (sym ppp)
 --                 (cong f (sym qqq))
 --                 ‚àô‚àô hh a‚Ñö ((‚Ñö.max a‚Ñö b‚Ñö))
 --                       (‚Ñö.‚â§max a‚Ñö b‚Ñö)
 --                    ((‚Ñö.clamp (v‚Ñö ‚Ñö.- (fst Œ¥)) (v‚Ñö) ( u‚Ñö)))
 --                       (v‚Ñö) (‚Ñö.clamp‚â§ (v‚Ñö ‚Ñö.- fst Œ¥) v‚Ñö u‚Ñö)
 --                        (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£-o+ (-·µ£ (rat (‚Ñö.clamp (v‚Ñö ‚Ñö.- fst Œ¥) v‚Ñö u‚Ñö)))
 --                         (-·µ£ rat (v‚Ñö ‚Ñö.- fst Œ¥))
 --                         (rat v‚Ñö)
 --                          (-·µ£‚â§·µ£ _ _  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§clamp (v‚Ñö ‚Ñö.- fst Œ¥) v‚Ñö u‚Ñö
 --                           (‚Ñö.‚â§-‚Ñö‚Çä v‚Ñö v‚Ñö Œ¥ (‚Ñö.isRefl‚â§ v‚Ñö))))))
 --                          (cong (_-·µ£_ (rat v‚Ñö)) (sym (-·µ£-rat‚ÇÇ v‚Ñö (fst Œ¥)))
 --                           ‚àô Lùêë.lem--079 {rat v‚Ñö} {rat (fst Œ¥)})
 --                          ) ‚àô‚àô
 --                 cong‚ÇÇ _¬∑·µ£_
 --                  ppp
 --                  (cong f
 --                    (cong (clamp·µ£ (rat a‚Ñö -·µ£ rat (fst Œ¥)) _)

 --                      qqq)))
 --             u v)
 --         a b))


 --   where
 --    -- x'
 --    ‚â§u : v -·µ£ rat (fst Œ¥) ‚â§·µ£ u
 --    ‚â§u = a-b‚â§c‚áía-c‚â§b v _ _ v‚àºu


 --    u' : ‚Ñù ‚Üí ‚Ñù
 --    u' = clamp·µ£ (v -·µ£ rat (fst Œ¥)) v

 --    f‚ÇÄ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 --    f‚ÇÄ a b u v = ((clamp·µ£ a (max·µ£ a b)) v -·µ£ clamp·µ£ a (max·µ£ a b)
 --      (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v u))
 --       ¬∑·µ£ f (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v (rat x))


 --    f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 --    f‚ÇÅ a b u v = ((clamp·µ£ a (max·µ£ a b)) v -·µ£ clamp·µ£ a (max·µ£ a b)
 --         (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v u))
 --          ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) ((max·µ£ a b))
 --           (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v (rat x)))




 --    b' : ‚Ñù
 --    b' = max·µ£ a b

 --    ch : IsContinuous‚ÇÇ Œª z z‚ÇÅ ‚Üí
 --                            NonExpanding‚ÇÇ-Lemmas.NE.go ‚Ñö._+_ sumR
 --                             (clamp·µ£ z (max·µ£ z z‚ÇÅ) v)
 --                            (-·µ£ clamp·µ£ z (max·µ£ z z‚ÇÅ) (u' u))
 --    ch = (IsContinuous-‚ÇÇ‚àò
 --             (IsContinuousClamp‚ÇÇ‚àò v
 --                ((Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousId))
 --                (contNE‚ÇÇ maxR))
 --             (IsContinuousClamp‚ÇÇ‚àò (clamp·µ£ (v -·µ£ rat (fst Œ¥)) v u)
 --                 ((Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousId))
 --                 (contNE‚ÇÇ maxR)))

 --    ch'' : IsContinuous‚ÇÇ (Œª z z‚ÇÅ ‚Üí (clamp·µ£ (z‚ÇÅ -·µ£ rat (fst Œ¥)) z‚ÇÅ (rat x)))
 --    ch'' = ?
 --    -- contNE‚ÇÇ‚àò minR
 --    --      {Œª z z‚ÇÅ ‚Üí max·µ£ ((z‚ÇÅ -·µ£ rat (fst Œ¥))) z}
 --    --      {Œª z z‚ÇÅ ‚Üí z‚ÇÅ}
 --    --    (contNE‚ÇÇ‚àò maxR
 --    --      ((Œª _ ‚Üí IsContinuous+·µ£R (-·µ£ rat (fst Œ¥))) , (Œª _ ‚Üí IsContinuousConst _))
 --    --      ( (Œª _ ‚Üí IsContinuousConst _) ,  (Œª _ ‚Üí IsContinuousId)))
 --    --   ((Œª _ ‚Üí IsContinuousId) , (Œª _ ‚Üí IsContinuousConst _))

 --    ch' : ‚àÄ a‚Ñö b‚Ñö ‚Üí IsContinuous‚ÇÇ
 --      (Œª z z‚ÇÅ ‚Üí
 --         clamp·µ£ (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö)) z‚ÇÅ -·µ£
 --         clamp·µ£ (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö))
 --         (clamp·µ£ (z‚ÇÅ -·µ£ rat (fst Œ¥)) z‚ÇÅ _))
 --    ch' a‚Ñö b‚Ñö = ?
 --    -- IsContinuous-‚ÇÇ‚àò
 --    --   ((Œª _ ‚Üí IsContinuousClamp (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö)))
 --    --    , Œª _ ‚Üí IsContinuousConst _ )
 --    --   (cont‚àò‚ÇÇ (IsContinuousClamp (rat a‚Ñö) (max·µ£ (rat a‚Ñö) (rat b‚Ñö)))
 --    --    ch'')

 --    hh : ‚àÄ a b ‚Üí a ‚Ñö.‚â§ b
 --      ‚Üí ‚àÄ u v ‚Üí u ‚Ñö.‚â§ v
 --      ‚Üí rat v -·µ£ rat u ‚â§·µ£ rat (fst Œ¥)

 --      ‚Üí (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u))
 --         ¬∑·µ£ f (rat x)
 --        ‚â° (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u))
 --          ¬∑·µ£ f (clamp·µ£ (rat a -·µ£ rat (fst Œ¥)) (rat b) (rat x))
 --    hh a b a‚â§b u v u‚â§v v-u‚â§Œ¥ = ?
 --      -- ‚äé.rec
 --      --   (Œª p ‚Üí
 --      --    let q : clamp·µ£ (rat a) (rat b) (rat v)
 --      --            -·µ£ clamp·µ£ (rat a) (rat b) (rat u) ‚â° 0
 --      --        q = cong‚ÇÇ _-·µ£_ (clamp·µ£-rat a b v) (clamp·µ£-rat a b u)
 --      --              ‚àô -·µ£-rat‚ÇÇ (‚Ñö.clamp a b v) (‚Ñö.clamp a b u)  ‚àô cong rat p
 --      --    in (ùêë'.0LeftAnnihilates'
 --      --          (clamp·µ£ (rat a) (rat b) (rat v)
 --      --            -·µ£ clamp·µ£ (rat a) (rat b) (rat u)) (f (rat u)) q)
 --      --     ‚àô sym (ùêë'.0LeftAnnihilates'
 --      --         (clamp·µ£ (rat a) (rat b) (rat v)
 --      --            -·µ£ clamp·µ£ (rat a) (rat b) (rat u))
 --      --             (f (clamp·µ£ (rat a -·µ£ rat (fst Œ¥)) (rat b) (rat u))) q))
 --      --   (Œª (a‚â§v , u‚â§b) ‚Üí
 --      --      cong ( (clamp·µ£ (rat a) (rat b) (rat v) -·µ£ clamp·µ£ (rat a) (rat b) (rat u)) ¬∑·µ£_)
 --      --     (cong f ((‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat a -·µ£ rat (fst Œ¥)) (rat b) (rat u)
 --      --        ((isTrans‚â§·µ£ _ _ _
 --      --          (‚â§·µ£-+o _ _ (-·µ£ (rat (fst Œ¥))) (‚â§‚Ñö‚Üí‚â§·µ£ a v a‚â§v)) (a-b‚â§c‚áía-c‚â§b (rat v) _ _ v-u‚â§Œ¥))
 --      --          , (‚â§‚Ñö‚Üí‚â§·µ£ u b u‚â§b)))
 --      --           )))
 --      --  (clampCases a b a‚â§b u v u‚â§v)

clamp-interval-Œî-swap : ‚àÄ a b a' b'
           ‚Üí a  ‚â§·µ£ b
           ‚Üí a' ‚â§·µ£ b'
                ‚Üí clamp·µ£ a  b  b' -·µ£ clamp·µ£ a  b  a'
                ‚â° clamp·µ£ a' b' b  -·µ£ clamp·µ£ a' b' a
clamp-interval-Œî-swap a b a' b' a‚â§b a'‚â§b' =
  subst2 (Œª b' b ‚Üí clamp·µ£ a  b  b' -·µ£ clamp·µ£ a  b  a'
                ‚â° clamp·µ£ a' b' b  -·µ£ clamp·µ£ a' b' a)
      (‚â§‚Üímax·µ£ _ _ a'‚â§b') (‚â§‚Üímax·µ£ _ _ a‚â§b)
      (‚â°Cont‚ÇÇ {f‚ÇÄ = Œª a b ‚Üí f a b a' b'}
              {f‚ÇÅ = Œª a b ‚Üí f a' b' a b}
         (fC' a' b')
         (fC a' b')
         (Œª a‚Ñö b‚Ñö ‚Üí let a = (rat a‚Ñö) ; b = (rat b‚Ñö) in
            ‚â°Cont‚ÇÇ {f‚ÇÄ = Œª a' b' ‚Üí f a b a' b'}
                   {f‚ÇÅ = Œª a' b' ‚Üí f a' b' a b}
             (fC (rat a‚Ñö) (rat b‚Ñö))
             (fC' (rat a‚Ñö) (rat b‚Ñö))
             (Œª a‚Ñö' b‚Ñö' ‚Üí
                -·µ£-rat‚ÇÇ _ _ ‚àô‚àô cong rat
                   (‚ÑöclampInterval-delta a‚Ñö _ a‚Ñö' _ (‚Ñö.‚â§max a‚Ñö b‚Ñö) (‚Ñö.‚â§max a‚Ñö' b‚Ñö'))
                 ‚àô‚àô sym (-·µ£-rat‚ÇÇ _ _))
             a' b')
         a b)



 where

 f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 f a b a' b' = clamp·µ£ a (max·µ£ a b) (max·µ£ a' b') -·µ£ clamp·µ£ a (max·µ£ a b) a'

 fC : ‚àÄ a b ‚Üí IsContinuous‚ÇÇ (f a b)
 fC a b = IsContinuous-‚ÇÇ‚àò
    (cont‚àò‚ÇÇ (IsContinuousClamp a (max·µ£ a b)) (contNE‚ÇÇ maxR))
    (cont‚àò‚ÇÇ (IsContinuousClamp a (max·µ£ a b))
     ((Œª _ ‚Üí IsContinuousConst _) ,  (Œª _ ‚Üí IsContinuousId)))

 fC' : ‚àÄ a b ‚Üí IsContinuous‚ÇÇ (Œª a' b' ‚Üí f a' b' a b)
 fC' a' b' = IsContinuous-‚ÇÇ‚àò
    (IsContinuousClamp‚ÇÇ‚àò (max·µ£ a' b')
     (((Œª _ ‚Üí IsContinuousConst _) ,  (Œª _ ‚Üí IsContinuousId)))
     (contNE‚ÇÇ maxR))
    (IsContinuousClamp‚ÇÇ‚àò a'
     ((Œª _ ‚Üí IsContinuousConst _) ,  (Œª _ ‚Üí IsContinuousId)) (contNE‚ÇÇ maxR))


llll : abs·µ£ (rat [ pos 0 / 1+ 0 ] -·µ£ rat [ pos 0 / 1+ 0 ]) ‚â§·µ£
      rat [ pos 0 / 1+ 0 ]
llll = ‚â°·µ£Weaken‚â§·µ£ _ _
   (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _) ‚àô abs·µ£0
     ‚àô cong {x = zero} (Œª z ‚Üí rat [ pos z / 1+ z ]) refl )

0<2^-‚Ñö : ‚àÄ n ‚Üí ‚Ñö.0< [ pos (2^ n) / 1+ 0 ]
0<2^-‚Ñö n = ‚Ñö.<‚Üí0< [ pos (2^ n) / 1+ 0 ] (‚Ñö.<‚Ñ§‚Üí<‚Ñö 0 (pos (2^ n))
 (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< 0 _) (0<2^ n) ))

2^-mon : ‚àÄ n ‚Üí 2^ n ‚Ñï.< 2^ (suc n)
2^-mon zero = ‚Ñï.‚â§-solver 2 2
2^-mon (suc n) = ‚Ñï.<-+-< (2^-mon n) (2^-mon n)

lemXX : ‚àÄ n ‚Üí 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc n))) ‚â° 2^ (suc n)
lemXX n = ‚Ñï.k+pred‚Ñï‚Çñ {2} {2^ (suc n)} (‚Ñï.‚â§-+-‚â§ {1} {2^ n} {1} {2^ n}
 (0<2^ n) (0<2^ n))

inv‚Ñö‚Çä-inj : ‚àÄ a b ‚Üí fst (inv‚Ñö‚Çä a) ‚â° fst (inv‚Ñö‚Çä b) ‚Üí fst a ‚â° fst b
inv‚Ñö‚Çä-inj a b x =
  sym (‚Ñö.inv‚Ñö‚Çä-invol _)
  ‚àô‚àô cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° x) ‚àô‚àô
  ‚Ñö.inv‚Ñö‚Çä-invol _

module Resample where


 -- resampledRiemannSum : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí  (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù)
 --   ‚Üí (pa pa' : Partition[ a , b ])
 --    (s : Sample pa) ‚Üí ‚Ñù
 -- resampledRiemannSum a b a‚â§b f pa pa' sa =
 --   foldlFin {n = 2 ‚Ñï.+ P'.len}
 --      (Œª s  k ‚Üí
 --        let  a' = P'.pts' (finj k)
 --             b' = P'.pts' (fsuc k)
 --        in s +·µ£
 --            foldlFin {n = 2 ‚Ñï.+ P.len}
 --            (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
 --              b-a ¬∑·µ£ (f (clamp·µ£ a' b' t)
 --                (isTrans‚â§·µ£ _ _ _ (P'.a‚â§pts' (finj k))
 --                  (‚â§clamp·µ£ a' b' t (P'.pts'‚â§pts' k)))
 --                (isTrans‚â§·µ£ _ _ _ (clamp‚â§·µ£ a' b' t) (P'.pts'‚â§b (fsuc k)))) ) 0
 --                (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
 --        )
 --      0
 --      (idfun _)

 --      -- (Œª k ‚Üí  k (P'.pts' (fsuc k) , P'.pts' (finj k)))
 --  -- foldlFin {n = 2 ‚Ñï.+ P.len}
 --  --    (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
 --  --      b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
 --  --        (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
 --  where
 --  module P = Partition[_,_] pa
 --  module P' = Partition[_,_] pa'
 --  module S = Sample sa


 resampledRiemannSum' : ‚àÄ a b ‚Üí  (‚Ñù ‚Üí ‚Ñù)
   ‚Üí (pa pa' : Partition[ a , b ])
    (s : Sample pa) ‚Üí ‚Ñù
 resampledRiemannSum' a b f pa pa' sa =
   foldlFin {n = 2 ‚Ñï.+ P'.len}
      (Œª s  k ‚Üí
        let  a' = P'.pts' (finj k)
             b' = P'.pts' (fsuc k)
        in s +·µ£
            foldlFin {n = 2 ‚Ñï.+ P.len}
            (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
              b-a ¬∑·µ£ (f t) ) 0
                (Œª k ‚Üí  S.samplesŒ£ k ,
                 clamp·µ£ a' b' (P.pts' (fsuc k))
                  -·µ£ clamp·µ£ a' b' (P.pts' (finj k)))
        ) 0 (idfun _)

  where
  module P = Partition[_,_] pa
  module P' = Partition[_,_] pa'
  module S = Sample sa


 partitionClamp : ‚àÄ a b  ‚Üí ‚àÄ a' b' ‚Üí a' ‚â§·µ£ b'
   ‚Üí a ‚â§·µ£ a' ‚Üí  b' ‚â§·µ£ b ‚Üí
   (pa : Partition[ a , b ]) ‚Üí
    b' -·µ£ a' ‚â°
         foldlFin {n = 2 ‚Ñï.+ len pa}
      (Œª s  k ‚Üí
        let  a* = pts' pa (finj k)
             b* = pts' pa (fsuc k)
        in s +·µ£
            ((clamp·µ£ a' b' b* -·µ£ clamp·µ£ a' b' a*))
        )
      0
      (idfun _)
 partitionClamp a b a' b' a'‚â§b' a‚â§a' b'‚â§b pa =
   cong‚ÇÇ _-·µ£_
     (sym (‚â§x‚Üíclamp·µ£‚â° a' b' (pts' pa flast) a'‚â§b' b'‚â§b))
     (sym (x‚â§‚Üíclamp·µ£‚â° a' b' (pts' pa fzero)
       a'‚â§b' a‚â§a'))
    ‚àô sym (deltas-sum (2 ‚Ñï.+ len pa)
      (clamp·µ£ a' b' ‚àò pts' pa ))



 resample : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí (pa pa' : Partition[ a , b ])
    (sa : Sample pa)  ‚Üí ‚àÄ f
    ‚Üí resampledRiemannSum' a b f pa pa' sa
       ‚â° riemannSum' sa f
 resample a b a‚â§b pa pa' sa f =
    ((cong (foldlFin {n = 2 ‚Ñï.+ P'.len})
     (funExt‚ÇÇ (Œª s k' ‚Üí
       cong (s +·µ£_)
        (foldFin+map (2 ‚Ñï.+ P.len) 0 _
         (Œª k ‚Üí  S.samplesŒ£ k ,
                 clamp·µ£ (P'.pts' (finj k')) (P'.pts' (fsuc k'))
                  (P.pts' (fsuc k))
                  -·µ£ clamp·µ£ (P'.pts' (finj k')) (P'.pts' (fsuc k'))
                   (P.pts' (finj k))) (idfun _) )))
     ‚â°$ 0) ‚â°$ (idfun _))
     ‚àô foldFin+transpose (2 ‚Ñï.+ P'.len) (2 ‚Ñï.+ P.len) _ 0
     ‚àô ((cong (foldlFin {n = 2 ‚Ñï.+ P.len})
          (funExt‚ÇÇ (Œª s k ‚Üí
            cong (s +·µ£_)
             (  (cong (foldlFin {n = 2 ‚Ñï.+ P'.len})
               (funExt‚ÇÇ (Œª s k' ‚Üí cong (s +·µ£_)
                 (¬∑·µ£Comm _ _)))
               ‚â°$ 0 ‚â°$ (idfun _))
              ‚àô foldFin¬∑DistL' (2 ‚Ñï.+ P'.len) _ (f (fst (S.samplesŒ£ k))) (idfun _)
              ‚àô cong (f (fst (S.samplesŒ£ k)) ¬∑·µ£_)
                  (((cong (foldlFin {n = 2 ‚Ñï.+ P'.len})
                     (funExt‚ÇÇ (Œª s k' ‚Üí cong (s +·µ£_)
                         ((clamp-interval-Œî-swap
                          (P'.pts' (finj k')) (P'.pts' (fsuc k'))
                          (P.pts' (finj k)) (P.pts' (fsuc k))
                          (P'.pts'‚â§pts' k') (P.pts'‚â§pts' k)))
                         )) ‚â°$ 0)
                      ‚â°$ (idfun _))
                   ‚àô sym
                     (partitionClamp a b (P.pts' (finj k)) (P.pts' (fsuc k))
                      (P.pts'‚â§pts' k) (P.a‚â§pts' (finj k)) (P.pts'‚â§b (fsuc k)) pa'))
              ‚àô ¬∑·µ£Comm _ _
             )
                        ))
          ‚â°$ 0) ‚â°$ (idfun _))
     ‚àô sym (foldFin+map (2 ‚Ñï.+ P.len) 0 _
       (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k)) (idfun _))


  where
  module P = Partition[_,_] pa
  module P' = Partition[_,_] pa'
  module S = Sample sa

--
 resampleŒî-UC : ‚àÄ a b ‚Üí (a<b : a ‚â§·µ£ b)   ‚Üí ‚àÄ f ‚Üí IsUContinuous f ‚Üí (Œµ : ‚Ñö‚Çä)
    ‚Üí (Œ¥ : ‚Ñö‚Çä ) ‚Üí  (‚àÄ (u v : ‚Ñù) ‚Üí
                   u ‚àº[ Œ¥ ] v ‚Üí
                   abs·µ£ (f u -·µ£ f v) <·µ£
                   fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£
                       inv‚Ñù‚Çä (max·µ£ 1 (b -·µ£ a) ,
                         isTrans<‚â§·µ£ _ _ _ (dec‚Ñö<·µ£? {0} {1}) (‚â§max·µ£ 1 (b -·µ£ a)))))
    ‚Üí (tpa tpa' : TaggedPartition[ a , b ])
       ‚Üí mesh‚â§·µ£ (fst tpa) (rat (fst (/4‚Çä Œ¥)))
       ‚Üí mesh‚â§·µ£ (fst tpa') (rat (fst (/4‚Çä Œ¥))) ‚Üí
      abs·µ£ (riemannSum' (snd tpa) f -·µ£ riemannSum' (snd tpa') f) ‚â§·µ£
     rat (fst Œµ)
 resampleŒî-UC a b a‚â§b f fcu Œµ Œ¥ X (pa , sa) (pa' , sa') = zzzz
   -- PT.map {A = Œ£ ‚Ñö‚Çä
   --              (Œª Œ¥ ‚Üí
   --                 (u v : ‚Ñù) ‚Üí
   --                 u ‚àº[ Œ¥ ] v ‚Üí
   --                 abs·µ£ (f u -·µ£ f v) <·µ£
   --                 fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£ inv‚Ñù‚Çä (b +·µ£ -·µ£ a , x<y‚Üí0<y-x a b a<b)))}
     -- (Œª (Œ¥ , X) ‚Üí  , Œª )
    -- (IsUContinuous-Œµ·µ£ f fcu
    --  (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£ inv‚Ñù‚Çä (_ , x<y‚Üí0<y-x _ _ a<b)))

  where
    œÉ : ‚Ñù‚Çä
    œÉ = max·µ£ 1 (b -·µ£ a) ,
        isTrans<‚â§·µ£ _ _ _ (dec‚Ñö<·µ£? {0} {1}) (‚â§max·µ£ 1 (b -·µ£ a))
    Œ∑ : ‚Ñù‚Çä
    Œ∑ = ‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£ inv‚Ñù‚Çä œÉ

    cf : IsContinuous f
    cf = IsUContinuous‚ÜíIsContinuous f fcu


    module P = Partition[_,_] pa
    module P' = Partition[_,_] pa'
    module S = Sample sa
    module S' = Sample sa'

    ruc'Œî : Fin (suc (suc P.len)) ‚Üí Fin (suc (suc P'.len)) ‚Üí ‚Ñù
    ruc'Œî k k' = (clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (fsuc k'))
         -·µ£
        clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (finj k')))


    zzzz :
      P.mesh‚â§·µ£ (rat (fst (/4‚Çä Œ¥))) ‚Üí
      P'.mesh‚â§·µ£ (rat (fst (/4‚Çä Œ¥))) ‚Üí
      abs·µ£ (S.riemannSum' f -·µ£ S'.riemannSum' f) ‚â§·µ£
      rat (fst Œµ)
    zzzz m-pa< m-pa'< =
       isTrans‚â°‚â§·µ£ _ _ _
        (cong abs·µ£
         (cong (_-·µ£_ (S.riemannSum' f))
           (sym (resample a b a‚â§b pa' pa sa' f))
           ‚àô zip-foldFin-·µ£ (2 ‚Ñï.+ len pa)

             (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
             (idfun _)
             _ _ _ _))
        (isTrans‚â§·µ£ _ _ _ (isTrans‚â§‚â°·µ£ _ _ _

          (foldFin+‚â§-abs (2 ‚Ñï.+ len pa) _ 0
            _ (Œª k ‚Üí (fst Œ∑ ¬∑·µ£ pts' pa (fsuc k) -·µ£ fst Œ∑ ¬∑·µ£ pts' pa (finj k))
                         )
                          (Œª k ‚Üí
                            (S.samplesŒ£ k ,
                             P.pts' (fsuc k) -·µ£ P.pts' (finj k)) , k)
                          (idfun _)
           llll
           ruc
           )
          (deltas-sum (2 ‚Ñï.+ len pa) ((fst Œ∑ ¬∑·µ£_) ‚àò pts' pa)
           ‚àô sym (ùêë'.¬∑DistR- _ _ _)))
            (isTrans‚â§‚â°·µ£ _ _ _
              (‚â§·µ£-o¬∑·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (snd Œ∑))
               (isTrans‚â§‚â°·µ£ _ _ _ (‚â§max·µ£ (b -·µ£ a) 1) (max·µ£Comm (b -·µ£ a) 1)) )
              ([x/‚Çäy]¬∑y·µ£ _ œÉ)))

     where

-- ruc

      ruc' : ‚àÄ k k' ‚Üí
             abs·µ£
         (f (S.samplesŒ£ k .fst) ¬∑·µ£ ruc'Œî k k' -·µ£
           ruc'Œî k k' ¬∑·µ£ f (S'.samplesŒ£ k' .fst))
         ‚â§·µ£ fst Œ∑ ¬∑·µ£ ruc'Œî k k'
      ruc' k k' =
       isTrans‚â°‚â§·µ£ _ _ _

        (cong abs·µ£ (cong‚ÇÇ _-·µ£_
         (¬∑·µ£Comm _ _)
         ((clamp-Œî-¬∑f _ _ (P.pts'‚â§pts' k)
           f cf (/2‚Çä (/2‚Çä Œ¥)) _ _ (P'.pts'‚â§pts' k')
             (isTrans‚â§‚â°·µ£ _ _ _ (m-pa'< k')
               (cong rat (‚Ñö./4‚Çä‚â°/2‚Çä/2‚Çä Œ¥))) _
                (S'.pts'‚â§samples k' ,
                 S'.samples‚â§pts' k' )))

                 ‚àô
              sym (ùêë'.¬∑DistR- (ruc'Œî k k') _ f') ) ‚àô
               ¬∑abs·µ£ _ _ ‚àô
                cong (_¬∑·µ£ (abs·µ£ (f (S.samplesŒ£ k .fst) -·µ£
                     f'))) (abs·µ£NonNeg _ hh
                       ) ‚àô ¬∑·µ£Comm _ _)
        (‚â§·µ£-¬∑·µ£o _ _ _ hh (<·µ£Weaken‚â§·µ£ _ _ (X _ _ smpl-Œ¥)))
        where
         Œ¥/4<Œ¥/2 = (isTrans‚â°<·µ£ _ _ _
                           (cong rat (‚Ñö.¬∑Assoc (fst Œ¥) _ _))
                           (<‚Ñö‚Üí<·µ£ (fst (/2‚Çä (/2‚Çä Œ¥))) (fst (/2‚Çä Œ¥)) (‚Ñö.x/2<x (/2‚Çä Œ¥))))

         f' = _
         hh = (x‚â§y‚Üí0‚â§y-x _ _
                        (clamp-monotone-‚â§·µ£
                         (P.pts' (finj k))
                         (P.pts' (fsuc k))
                         _ _ (P'.pts'‚â§pts' k')))

         xzxd : abs·µ£
             (P.pts' (fsuc k) +·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))) +·µ£ -·µ£ P.pts' (finj k))
             +·µ£ abs·µ£ (-·µ£ (-·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥)))))
             <·µ£ rat (fst Œ¥)
         xzxd =
           a<b-c‚áía+c<b _ _ _
           (subst2 _<·µ£_
            (sym (abs·µ£Pos _
               (isTrans‚â°<·µ£ _ _ _
                (sym (+·µ£-rat 0 0))
                (<‚â§·µ£Monotone+·µ£ _ _ _ _
                 (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä (/2‚Çä Œ¥))))
                 (x‚â§y‚Üí0‚â§y-x _ _ (P.pts'‚â§pts' k)))))
              ‚àô cong abs·µ£
              (+·µ£Assoc _ _ _ ‚àô cong (_+·µ£ (-·µ£ P.pts' (finj k))) (+·µ£Comm _ _ )))
              (cong rat (ùêê'.¬∑DistR- (fst Œ¥) 1 _) ‚àô sym (-·µ£-rat‚ÇÇ (fst Œ¥ ‚Ñö.¬∑ 1) _) ‚àô
                cong‚ÇÇ (_-·µ£_)
                   (cong rat (‚Ñö.¬∑IdR _))
                   ((cong rat (‚Ñö./4‚Çä‚â°/2‚Çä/2‚Çä Œ¥)) ‚àô sym (abs·µ£Pos _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä (/2‚Çä Œ¥)))))
                     ‚àô cong abs·µ£ (sym (-·µ£Invol _))))
            (isTrans‚â§<·µ£ _ _ _
              (‚â§·µ£Monotone+·µ£ _ _ _ _
               (‚â°·µ£Weaken‚â§·µ£ _ _ (cong rat (sym (‚Ñö./4‚Çä‚â°/2‚Çä/2‚Çä Œ¥)))) (m-pa< k))
              (isTrans‚â°<·µ£ _ _ _
                (+·µ£-rat _ _ ‚àô cong rat (sym ((‚Ñö.¬∑DistL+ (fst Œ¥) _ _))))
                (<‚Ñö‚Üí<·µ£ _ _
                  ((‚Ñö.<-o¬∑ ([ 1 / 4 ] ‚Ñö.+ [ 1 / 4 ])
                    (1 ‚Ñö.- [ 1 / 4 ]) (fst Œ¥) (‚Ñö.0<‚Ñö‚Çä Œ¥)
                     (‚Ñö.dec‚Ñö<? {[ 1 / 4 ] ‚Ñö.+ [ 1 / 4 ]}
                        {1 ‚Ñö.- [ 1 / 4 ]})))))))

         smpl-Œ¥ : S.samplesŒ£ k .fst ‚àº[ Œ¥ ]
              clamp·µ£ (P.pts' (finj k) -·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
                     (P.pts' (fsuc k) +·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
              (fst (S'.samplesŒ£ k'))
         smpl-Œ¥ =
           invEq (‚àº‚âÉabs<Œµ _ _ _)
           ((isTrans‚â§<·µ£ _ _ _
             (isTrans‚â°‚â§·µ£ _ _ _
               (cong abs·µ£
                ((cong‚ÇÇ _-·µ£_
                  (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (P.pts' (finj k) -·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
                   (P.pts' (fsuc k) +·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
                    (fst (S.samplesŒ£ k))

                     ((isTrans‚â§·µ£ _ _ _
                       (isTrans‚â§‚â°·µ£ _ _ _
                         (‚â§·µ£-o+ _ _ (P.pts' (finj k))
                          (-·µ£‚â§·µ£ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ 0 _ (‚Ñö.0‚â§‚Ñö‚Çä (/2‚Çä (/2‚Çä Œ¥))))))
                         (ùêë'.+IdR' _ _ (-·µ£-rat 0)))
                       (S.pts'‚â§samples k)) ,
                        isTrans‚â§·µ£ _ _ _
                        (S.samples‚â§pts' k)
                        (isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.+IdR' _ _ refl))
                          (‚â§·µ£-o+ _ _ (P.pts' (fsuc k))
                          (‚â§‚Ñö‚Üí‚â§·µ£ 0 _ (‚Ñö.0‚â§‚Ñö‚Çä (/2‚Çä (/2‚Çä Œ¥))))))
                       )
                       )
                  refl)))
                 (clamp·µ£-dist (P.pts' (finj k) -·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
                  (P.pts' (fsuc k) +·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥))))
                    _ _))
                 (isTrans‚â§<·µ£ _ _ _
                  (isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£
                   (cong ((P.pts' (fsuc k) +·µ£ rat (fst (/2‚Çä (/2‚Çä Œ¥)))) +·µ£_) ( -·µ£Distr _ _) ‚àô +·µ£Assoc _ _ _))
                    (abs·µ£-triangle _ _))
                     xzxd)))
      ruc : ‚àÄ k ‚Üí
          abs·µ£
        ((P.pts' (fsuc k) -·µ£ P.pts' (finj k)) ¬∑·µ£ f (S.samplesŒ£ k .fst) -·µ£
         foldlFin
         (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£ b-a ¬∑·µ£ f t) 0
         (Œª k‚ÇÅ ‚Üí
            P'.samplesŒ£ sa' k‚ÇÅ ,
            clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
            -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (finj k‚ÇÅ))))
        ‚â§·µ£
        (fst Œ∑ ¬∑·µ£ P.pts' (fsuc k) -·µ£ fst Œ∑ ¬∑·µ£ P.pts' (finj k))

      ruc k =
        isTrans‚â°‚â§·µ£ _ _ _
          (cong (abs·µ£ ‚àò (_-·µ£ (foldlFin
         (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£ b-a ¬∑·µ£ f t) 0
         (Œª k‚ÇÅ ‚Üí
            P'.samplesŒ£ sa' k‚ÇÅ ,
            clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
            -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (finj k‚ÇÅ))
            ))))
             (cong (_¬∑·µ£ f (S.samplesŒ£ k .fst))
               (partitionClamp a b
                 (P.pts' (finj k))
                 (P.pts' (fsuc k))
                  (P.pts'‚â§pts' k)
                 (P.a‚â§pts' (finj k)) (P.pts'‚â§b (fsuc k)) pa'
                 ) ‚àô ¬∑·µ£Comm _ _ ‚àô
                  sym (foldFin¬∑DistL (2 ‚Ñï.+ len pa') _ _ _
                   (idfun _))) ‚àô
                  cong abs·µ£
                   (zip-foldFin-·µ£ (2 ‚Ñï.+ len pa')
                   (idfun _)
                    (Œª k‚ÇÅ ‚Üí
                      (samplesŒ£ sa' k‚ÇÅ ,
                          clamp·µ£ (P.pts' (finj k))
                           (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
                       -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k))
                           (P'.pts' (finj k‚ÇÅ))))
                      _ _ _
                    0))
             (isTrans‚â§‚â°·µ£ _ _ _
              (foldFin+‚â§-abs (2 ‚Ñï.+ len pa')
                 _ 0 _
                  (Œª kk ‚Üí  fst Œ∑ ¬∑·µ£
                   (clamp·µ£ (P.pts' (finj k)) ((P.pts' (fsuc k)))
                    (P'.pts' (fsuc kk)) -·µ£
                     clamp·µ£ (P.pts' (finj k)) ((P.pts' (fsuc k)))
                      (P'.pts' (finj kk)))
                           )
                  ((Œª k‚ÇÅ ‚Üí k‚ÇÅ ,
                      (samplesŒ£ sa' k‚ÇÅ ,
                         clamp·µ£ (P.pts' (finj k))
                          (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
                            -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k))
                            (P'.pts' (finj k‚ÇÅ)))))
                  (idfun _)
                  (isTrans‚â°‚â§·µ£ _ _ _
                     (cong abs·µ£ (cong (_-·µ£ 0) (ùêë'.0RightAnnihilates _)))
                     llll)
                (ruc' k))
              ((foldFin¬∑DistL' (2 ‚Ñï.+ len pa') _ _ (idfun _) ‚àô
               cong (fst Œ∑ ¬∑·µ£_) (deltas-sum (2 ‚Ñï.+ P'.len )
                (clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) ‚àò (P'.pts'))
                 ‚àô cong‚ÇÇ _-·µ£_
                   (‚â§x‚Üíclamp·µ£‚â° (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' flast)
                     (P.pts'‚â§pts' k) (P.pts'‚â§b (fsuc k)) )
                   (x‚â§‚Üíclamp·µ£‚â° (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' fzero)
                    (P.pts'‚â§pts' k) (P.a‚â§pts' (finj k))))
               ) ‚àô ùêë'.¬∑DistR- _ _ _) )

‚àÉenclosing‚ÑöInterval : ‚àÄ a b ‚Üí
                      ‚àÉ[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ]
                        (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B)
‚àÉenclosing‚ÑöInterval a b =
  PT.map2 (Œª (A , _ , A<a) (B , b<B , _)
       ‚Üí (A , B) , <·µ£Weaken‚â§·µ£ _ _ A<a , <·µ£Weaken‚â§·µ£ _ _ b<B)
   (dense‚Ñöin‚Ñù (a -·µ£ 1) a (isTrans<‚â°·µ£ _ _ _ (<·µ£-o+ _ _ a (-·µ£<·µ£ _ _ (dec‚Ñö<·µ£? {0} {1})))
       (ùêë'.+IdR' _ _ (-·µ£-rat 0)) ))
   (dense‚Ñöin‚Ñù b (b +·µ£ 1)
    (isTrans‚â°<·µ£ _ _ _ (sym (+IdR b)) (<·µ£-o+ _ _ b (dec‚Ñö<·µ£? {0} {1}))))


record RefinableTaggedPartition[_,_] (a b : ‚Ñù) : Type where
 field
  tpSeq : ‚Ñï ‚Üí TaggedPartition[ a , b ]
  tpRef : ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
   mesh‚â§·µ£ (fst (tpSeq n)) (rat (fst Œµ)))

 tpTP : ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
   Œ£[ tp ‚àà TaggedPartition[ a , b ] ]
    (mesh‚â§·µ£ (fst tp) (rat (fst Œµ)))
 tpTP Œµ = tpSeq (suc (fst (tpRef Œµ))) , (snd (tpRef Œµ) _ ‚Ñï.‚â§-refl)


clamp-TaggedPartition : ‚àÄ A B ‚Üí A ‚â§·µ£ B ‚Üí ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí
   TaggedPartition[ A , B ] ‚Üí
   TaggedPartition[ a , b ]
clamp-TaggedPartition A B A‚â§B a b a‚â§b tp = w

 where
 w : TaggedPartition[ a , b ]
 w .fst .len = fst (tp) .len
 w .fst .pts = clamp·µ£ a b ‚àò (fst (tp) .pts)
 w .fst .a‚â§pts k = ‚â§clamp·µ£ a b _ a‚â§b
 w .fst .pts‚â§b k = clamp‚â§·µ£ a b _
 w .fst .pts‚â§pts k = clamp-monotone-‚â§·µ£ a b _ _
   (tp  .fst .pts‚â§pts k)
 w .snd .samples = clamp·µ£ a b ‚àò (tp .snd .samples)
 w .snd .pts'‚â§samples j@(zero , l , _) =
   ‚â§clamp·µ£ a b  _ a‚â§b
 w .snd .pts'‚â§samples j@(suc k , zero , _) =
  clamp-monotone-‚â§·µ£ a b _ _
   (tp .snd .pts'‚â§samples j)
 w .snd .pts'‚â§samples j@(suc k , suc l , _) =
  clamp-monotone-‚â§·µ£ a b _ _
   (tp .snd .pts'‚â§samples j)
 w .snd .samples‚â§pts' j@(zero , zero , p) =
  ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï p))
 w .snd .samples‚â§pts' j@(zero , suc l , _) =
  clamp-monotone-‚â§·µ£ a b _ _
   (tp .snd .samples‚â§pts' j)
 w .snd .samples‚â§pts' j@(suc k , zero , _) =
  clamp‚â§·µ£ a b  _
 w .snd .samples‚â§pts' j@(suc k , suc l , _) =
  clamp-monotone-‚â§·µ£ a b _ _
   (tp .snd .samples‚â§pts' j)

clamp-TaggedPartition-mesh : ‚àÄ A B A‚â§B a b a‚â§b
  ‚Üí a ‚àà interval‚Ñô A B
  ‚Üí b ‚àà interval‚Ñô A B
  ‚Üí ‚àÄ tp Œ¥
  ‚Üí mesh‚â§·µ£ (fst tp) Œ¥
  ‚Üí mesh‚â§·µ£ (fst (clamp-TaggedPartition A B A‚â§B a b a‚â§b tp)) Œ¥

clamp-TaggedPartition-mesh A B A‚â§B a b a‚â§b (‚â§a , a‚â§) (‚â§b , b‚â§) tp Œ¥ mesh-tp k =
   isTrans‚â§·µ£ _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _
     (cong‚ÇÇ _-·µ£_  (w-pts (fsuc k)) (w-pts (finj k)))
     ((subst2 _‚â§·µ£_
        (abs·µ£NonNeg _ ((x‚â§y‚Üí0‚â§y-x _ _
          (clamp-monotone-‚â§·µ£ (pts' (fst tp) (finj k)) (pts' (fst tp) (fsuc k))
            a b a‚â§b)))
         ‚àô sym (clamp-interval-Œî-swap
              a b
              (pts' (fst (tp)) (finj k))
              (pts' (fst (tp)) (fsuc k))

               a‚â§b ((pts'‚â§pts' (fst (tp)) k))))
        (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (pts'‚â§pts' (fst (tp)) k)))
        (clamp·µ£-dist _ _ _ _))))
    (mesh-tp k)
 where


 w-pts : ‚àÄ k ‚Üí pts' (fst (clamp-TaggedPartition A B A‚â§B a b a‚â§b tp)) k ‚â°
  clamp·µ£ a b (pts' (fst tp) k)
 w-pts j@(suc k , zero , _) = sym (‚â§x‚Üíclamp·µ£‚â° a b B a‚â§b b‚â§)
 w-pts j@(zero , _ , _) = sym (x‚â§‚Üíclamp·µ£‚â° a b A a‚â§b ‚â§a)
 w-pts j@(suc k , suc l , _) = refl

clamp-RefinableTaggedPartition : ‚àÄ A B ‚Üí ‚àÄ a b ‚Üí a ‚â§·µ£ b
   ‚Üí a ‚àà interval‚Ñô A B
   ‚Üí b ‚àà interval‚Ñô A B ‚Üí
   RefinableTaggedPartition[ A , B ] ‚Üí
   RefinableTaggedPartition[ a , b ]
clamp-RefinableTaggedPartition A B a b a‚â§b (‚â§a , a‚â§) (‚â§b , b‚â§) rfp = ww
 where
 open RefinableTaggedPartition[_,_]



 w : ‚Ñï ‚Üí TaggedPartition[ a , b ]
 w = clamp-TaggedPartition A B
   (isTrans‚â§·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _ ‚â§a a‚â§b) b‚â§)
    a b a‚â§b ‚àò rfp .tpSeq

 w-pts : ‚àÄ n k ‚Üí pts' (fst (w n)) k ‚â°
  clamp·µ£ a b (pts' (fst (rfp .tpSeq n)) k)
 w-pts n j@(suc k , zero , _) = sym (‚â§x‚Üíclamp·µ£‚â° a b B a‚â§b b‚â§)
 w-pts n j@(zero , _ , _) = sym (x‚â§‚Üíclamp·µ£‚â° a b A a‚â§b ‚â§a)
 w-pts n j@(suc k , suc l , _) = refl

 ww : RefinableTaggedPartition[ a , b ]
 ww .tpSeq = w
 ww .tpRef = map-snd (Œª X n n< k ‚Üí
   isTrans‚â§·µ£ _ _ _
     ((subst2 _‚â§·µ£_
        (cong abs·µ£
           (sym (cong‚ÇÇ _-·µ£_ (w-pts n (fsuc k)) (w-pts n (finj k))
             ‚àô (clamp-interval-Œî-swap
              a b
              (pts' (fst (rfp .tpSeq n)) (finj k))
              (pts' (fst (rfp .tpSeq n)) (fsuc k))

               a‚â§b ((pts'‚â§pts' (fst (rfp .tpSeq n)) k))))) ‚àô
          abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (pts'‚â§pts' (fst (w n)) k)))
        (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (pts'‚â§pts' (fst (rfp .tpSeq n)) k)))
        (clamp·µ£-dist _ _ _ _))
      ) (X n n< k) ) ‚àò (tpRef rfp)




module PreIntegration a b (a‚â§b : a ‚â§·µ£ b) (A B : ‚Ñö)
  (A‚â§a : rat A ‚â§·µ£ a)
  (b‚â§B : b ‚â§·µ£ rat B) (rtp : RefinableTaggedPartition[ a , b ])
  f (ucf : IsUContinuous f) where

 open RefinableTaggedPartition[_,_] rtp

 ‚à´-seq : Seq
 ‚à´-seq = (flip Sample.riemannSum' f ‚àò snd) ‚àòS tpSeq

 module HLP (Œµ : ‚Ñö‚Çä) where
  œÉ' : ‚Ñö‚Çä
  œÉ' = ‚Ñö.max 1 (B ‚Ñö.- A) ,
      ‚Ñö.<‚Üí0< (‚Ñö.max 1 (B ‚Ñö.- A))
       (‚Ñö.isTrans<‚â§ 0 1 (‚Ñö.max 1 (B ‚Ñö.- A))
        (‚Ñö.dec‚Ñö<? {0} {1}) ((‚Ñö.‚â§max 1 (B ‚Ñö.- A))))


  Œ∑' : ‚Ñö‚Çä
  Œ∑' = (/2‚Çä Œµ) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä œÉ'

  œÉ : ‚Ñù‚Çä
  œÉ = max·µ£ 1 (b -·µ£ a) ,
      isTrans<‚â§·µ£ _ _ _ (dec‚Ñö<·µ£? {0} {1}) (‚â§max·µ£ 1 (b -·µ£ a))

  Œ∑ : ‚Ñù‚Çä
  Œ∑ = ‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ) ‚Çä¬∑·µ£ inv‚Ñù‚Çä œÉ

  Œ∑'‚â§Œ∑ : rat (fst Œ∑') ‚â§·µ£ fst Œ∑
  Œ∑'‚â§Œ∑ = isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat _ _)
             (‚â§·µ£-o¬∑·µ£ _ _ _
              (<·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ))))
              (isTrans‚â°‚â§·µ£ _ _ _
               (sym (inv‚Ñù‚Çä-rat œÉ'))
               (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
                 ((max-monotone-‚â§·µ£ 1 (b -·µ£ a) (rat (B ‚Ñö.- A))
                   (isTrans‚â§‚â°·µ£ _ _ _
                    (a+d‚â§c+b‚áía-b‚â§c-d b a (rat B) (rat A)
                    (‚â§·µ£Monotone+·µ£ _ _ _ _
                     b‚â§B A‚â§a)) (-·µ£-rat‚ÇÇ _ _))))  )))


 IsCauchySequence'-‚à´-seq : IsCauchySequence' ‚à´-seq
 IsCauchySequence'-‚à´-seq Œµ =
  let (Œ¥ , Y) = ucf Œ∑'
      (N , X) = tpRef (/4‚Çä Œ¥)
  in N , Œª m n N<n N<m ‚Üí
    let qqzq = Resample.resampleŒî-UC a b a‚â§b f ucf (/2‚Çä Œµ) Œ¥
          (Œª u v x ‚Üí
           isTrans<‚â§·µ£
            _ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) (Y u v x))
            Œ∑'‚â§Œ∑)
           (tpSeq n) (tpSeq m) (X n N<n) (X m N<m)
     in isTrans‚â§<·µ£ _ _ _
          qqzq (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œµ))
  where
  open HLP Œµ

 IntegralOfUContinuous : ‚Ñù
 IntegralOfUContinuous =
   fromCauchySequence' ‚à´-seq IsCauchySequence'-‚à´-seq

 isIntegralOfUContinuous : on[ a , b ]IntegralOf f is' IntegralOfUContinuous
 isIntegralOfUContinuous Œµ =
  let (Œ¥ , Y) = ucf Œ∑'
      (N , X) = tpRef (/4‚Çä Œ¥)
      zuio = fst (‚àº‚âÉabs<Œµ _ _ _) (ùï£-lim-self _ (fromCauchySequence'-isCA
               ‚à´-seq IsCauchySequence'-‚à´-seq)
                (/2‚Çä (/2‚Çä Œµ)) ((/2‚Çä (/2‚Çä Œµ))))
      zzLem : riemannSum' (snd (tpSeq (suc N))) f
         ‚â° ‚à´-seq (suc (fst (IsCauchySequence'-‚à´-seq (/2‚Çä (/2‚Çä Œµ)))))
      zzLem = refl
  in ‚à£ /4‚Çä Œ¥ ,
     (Œª (pa , tp) pa‚â§Œ¥ ‚Üí
       let qqzq = Resample.resampleŒî-UC a b a‚â§b f ucf (/2‚Çä (/2‚Çä (/2‚Çä Œµ))) Œ¥
              (Œª u v x ‚Üí
                isTrans<‚â§·µ£
                 _ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) (Y u v x))
                 Œ∑'‚â§Œ∑)
                (pa , tp) (tpSeq (suc N))
                pa‚â§Œ¥ (X _ ‚Ñï.‚â§-refl)
           zuii = isTrans‚â§<·µ£ _ _ _ (abs·µ£-triangle _ _)
               (‚â§<·µ£Monotone+·µ£ _ _ _ _
                 qqzq zuio)
        in (isTrans<‚â§·µ£ _ _ _ (subst2 _<·µ£_
            (cong abs·µ£ Lùêë.lem--060)
              (+·µ£-rat _ _ ‚àô
                cong rat (cong (fst (/2‚Çä (/2‚Çä (/2‚Çä Œµ))) ‚Ñö.+_)
               (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)))))

            zuii )) (isTrans‚â§‚â°·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _
                ((‚Ñö.<-+o (fst (/2‚Çä (/2‚Çä (/2‚Çä Œµ))))
                   ((fst (/2‚Çä Œµ))) ((fst (/2‚Çä Œµ)))
                  (‚Ñö.isTrans<
                    (fst (/2‚Çä (/2‚Çä (/2‚Çä Œµ))))
                    (fst (/2‚Çä (/2‚Çä Œµ)))
                    (fst (/2‚Çä Œµ))
                    (x/2<x (/2‚Çä (/2‚Çä Œµ))) (x/2<x (/2‚Çä Œµ)))))))
                  (cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))))) ‚à£‚ÇÅ
  where
  open HLP (/2‚Çä (/2‚Çä Œµ))


rtp-1/n : ‚àÄ (A B : ‚Ñö) ‚Üí A ‚Ñö.‚â§ B ‚Üí RefinableTaggedPartition[ rat A , rat B ]
rtp-1/n A B A‚â§B .RefinableTaggedPartition[_,_].tpSeq n =
  Integration.equalPartition (rat A) (rat B) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ A‚â§B) n
   , leftSample _
rtp-1/n A B A‚â§B .RefinableTaggedPartition[_,_].tpRef Œµ =
  let Œî‚Çä = ‚Ñö.max (B ‚Ñö.- A) 1 , ‚Ñö.<‚Üí0< (‚Ñö.max (B ‚Ñö.- A) 1)
              (‚Ñö.isTrans<‚â§ 0 1 (‚Ñö.max (B ‚Ñö.- A) 1)
              (‚Ñö.dec‚Ñö<? {0} {1})
              ((‚Ñö.‚â§max' (B ‚Ñö.- A) 1)))
      (1+ N , p)  = ‚Ñö.ceil‚Ñö‚Çä (Œî‚Çä ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ)
      in N , Œª n N<n k ‚Üí
       let z = subst (‚Ñö.max (B ‚Ñö.- A) [ pos 1 / 1+ 0 ] ‚Ñö.‚â§_)
             (‚Ñö.¬∑Comm (fst Œµ) [ pos (suc (suc n)) / 1+ 0 ])
              ((‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z (‚Ñö.max (B ‚Ñö.- A) [ pos 1 / 1+ 0 ])
                   _ Œµ
                (‚Ñö.<Weaken‚â§ (fst (Œî‚Çä ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ)) (fromNat (suc (suc n)))
                (‚Ñö.isTrans< (fst (Œî‚Çä ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ)) _ (fromNat (suc (suc n))) p
                 (‚Ñö.<‚Ñ§‚Üí<‚Ñö
                   (‚Ñ§.pos (suc N)) (‚Ñ§.pos (suc (suc n)))
                     (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< (suc N) (suc (suc n)))
                        (‚Ñï.suc-‚â§-suc (‚Ñï.‚â§-suc N<n))))))))
       in isTrans‚â°‚â§·µ£ _ _ _
          (Integration.equalPartitionŒî (rat A) (rat B) (‚â§‚Ñö‚Üí‚â§·µ£ A B A‚â§B) n k ‚àô
            cong (_¬∑·µ£ rat [ pos 1 / 2+ n ]) (-·µ£-rat‚ÇÇ _ _) ‚àô
             sym (rat¬∑·µ£rat _ _))
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                (‚Ñö.isTrans‚â§ ((B ‚Ñö.- A) ‚Ñö.¬∑ [ pos 1 / 2+ n ])
                   _ (fst Œµ)
                  ((‚Ñö.‚â§-¬∑o (B ‚Ñö.- A) (‚Ñö.max (B ‚Ñö.- A) 1) ([ pos 1 / 2+ n ])
                  (‚Ñö.0‚â§pos 1 (2+ n))
                  (‚Ñö.‚â§max (B ‚Ñö.- A) 1)))
                  ( ‚Ñö.x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z (‚Ñö.max (B ‚Ñö.- A) 1)
                   (fst Œµ) (fromNat (suc (suc n))) z)))

‚àÉRefinableTaggedPartition : (‚àÄ (A B : ‚Ñö) ‚Üí A ‚Ñö.‚â§ B ‚Üí RefinableTaggedPartition[ rat A , rat B ])
  ‚Üí ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚à• RefinableTaggedPartition[ a , b ] ‚à•‚ÇÅ
‚àÉRefinableTaggedPartition rtp‚Ñö a b a‚â§b =
  PT.map (Œª ((A , B) , A‚â§a , b‚â§B) ‚Üí
    (clamp-RefinableTaggedPartition
            _ _ a b a‚â§b
             (A‚â§a , (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§B))
             (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b , b‚â§B)
            (rtp‚Ñö A B
              (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b)
                  b‚â§B)))))
   (‚àÉenclosing‚ÑöInterval a b)
