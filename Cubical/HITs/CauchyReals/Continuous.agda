{-# OPTIONS --lossy-unification #-}

module Cubical.HITs.CauchyReals.Continuous where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv hiding (_‚ñ†)
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Univalence
open import Cubical.Functions.FunExtEquiv

import Cubical.Functions.Logic as L

open import Cubical.Algebra.CommRing.Instances.Int

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Bool.Base using () renaming (Bool to ùüö ; true to 1ÃÇ ; false to 0ÃÇ)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Nat.Order.Recursive as OR
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Unit
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Sigma hiding (Path)
open import Cubical.Data.List as L
open import Cubical.Data.List using () renaming (List to ‚ü¶_‚üß)
open import Cubical.Foundations.Interpolate
open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_) 

open import Cubical.Data.Rationals using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)

import Cubical.Data.Rationals as ‚Ñö
import Cubical.Data.Rationals.Order as ‚Ñö
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö using (inv‚Ñö‚Çä)

open import Cubical.Data.NatPlusOne
open import Cubical.Foundations.Path
open import Cubical.Foundations.CartesianKanOps


import Agda.Builtin.Reflection as R
open import Cubical.Reflection.Base


import Cubical.Algebra.CommRing as CR

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order


0‚â§abs·µ£ : ‚àÄ x ‚Üí 0 ‚â§·µ£ abs·µ£ x
0‚â§abs·µ£ = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop (Œª z ‚Üí 0 ‚â§·µ£ abs·µ£ z)
 w .Elim‚Ñù-Prop.ratA q = ‚â§‚Ñö‚Üí‚â§·µ£ 0 (‚Ñö.abs' q)
   (subst (0 ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs q) (‚Ñö.0‚â§abs q))
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
  let y0 = _
      zz0 = NonExpanding‚ÇÇ.Œ≤-rat-lim maxR 0 (Œª q ‚Üí (abs·µ£ (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ q))))
               y0 _

      zz = sym (congLim' _ _ _
                Œª q ‚Üí
                   sym $ x‚ÇÅ (‚Ñö.inv‚Ñö‚Çä (_//_.[ pos 1 , (1+ 0) ] , tt) ‚Ñö‚Çä¬∑ q))
  in _‚àô_ {x = max·µ£ 0 (lim (Œª q ‚Üí (abs·µ£ (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ q)))) y0)}
       zz0 zz

 w .Elim‚Ñù-Prop.isPropA _ = isSet‚Ñù _ _


-·µ£Invol : ‚àÄ x ‚Üí -·µ£ (-·µ£ x) ‚â° x
-·µ£Invol = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop _
 w .Elim‚Ñù-Prop.ratA x = cong rat (‚Ñö.-Invol x)
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   congLim _ _ _ _
     Œª q ‚Üí x‚ÇÅ _ ‚àô cong x (‚Ñö‚Çä‚â° (Œª i ‚Üí ‚Ñö.¬∑IdL (‚Ñö.¬∑IdL (fst q) i) i)) 
 w .Elim‚Ñù-Prop.isPropA x = isSet‚Ñù (-·µ£ (-·µ£ x)) x


-·µ£Distr : ‚àÄ x y ‚Üí -·µ£ (x +·µ£ y) ‚â° (-·µ£ x) +·µ£ (-·µ£ y)
-·µ£Distr = Elim‚Ñù-Prop2Sym.go w
 where
 w : Elim‚Ñù-Prop2Sym (Œª z z‚ÇÅ ‚Üí (-·µ£ (z +·µ£ z‚ÇÅ)) ‚â° ((-·µ£ z) +·µ£ (-·µ£ z‚ÇÅ)))
 w .Elim‚Ñù-Prop2Sym.rat-ratA r q = cong rat (‚Ñö.-Distr r q)
 w .Elim‚Ñù-Prop2Sym.rat-limA r x y x‚ÇÅ =
   cong (-·µ£_) (snd (NonExpanding‚ÇÇ.Œ≤-rat-lim' sumR r x y))
    ‚àô fromLipshitzNEŒ≤ _ _ (Œª q ‚Üí (rat r) +·µ£ (x q))
         (fst (NonExpanding‚ÇÇ.Œ≤-rat-lim' sumR r x y))
    ‚àô  (congLim _ _ _ _ Œª q ‚Üí x‚ÇÅ _ ‚àô
      cong (Œª q' ‚Üí (-·µ£ rat r) +·µ£ (-·µ£ x q')) (sym (‚Ñö‚Çä‚â° $ ‚Ñö.¬∑IdL _)))
    ‚àô cong ((rat (‚Ñö.- r)) +·µ£_) (sym (fromLipshitzNEŒ≤ _ _ x y))
           
 w .Elim‚Ñù-Prop2Sym.lim-limA x y x' y' x‚ÇÅ =  
    cong (-·µ£_) (snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR x y x' y'))  ‚àô
     fromLipshitzNEŒ≤ _ _ (Œª q ‚Üí (x (‚Ñö./2‚Çä q)) +·µ£ (x' (‚Ñö./2‚Çä q)))
      (fst (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR x y x' y')) ‚àô 
     congLim _ _ _ _ (Œª q ‚Üí x‚ÇÅ _ _)
     ‚àô sym (snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR _ _ _ _))
      ‚àô cong‚ÇÇ _+·µ£_ (sym (fromLipshitzNEŒ≤ _ _ x y))
           ((sym (fromLipshitzNEŒ≤ _ _ x' y')))
 w .Elim‚Ñù-Prop2Sym.isSymA x y p =
  cong (-·µ£_) (+·µ£Comm y x)
   ‚àô‚àô p  ‚àô‚àô
    +·µ£Comm (-·µ£ x) (-·µ£ y)
 w .Elim‚Ñù-Prop2Sym.isPropA x y = isSet‚Ñù (-·µ£ (x +·µ£ y)) ((-·µ£ x) +·µ£ (-·µ£ y))

-abs·µ£ : ‚àÄ x ‚Üí abs·µ£ x ‚â° abs·µ£ (-·µ£ x)
-abs·µ£ = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop _
 w .Elim‚Ñù-Prop.ratA x = cong rat (‚Ñö.-abs' x)
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
  let yy = _
  in congLim  (Œª v‚ÇÅ ‚Üí
                  Elim‚Ñù.go
                  yy
                  (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ v‚ÇÅ))) _
                  (Œª x‚ÇÇ ‚Üí Elim‚Ñù.go yy
                            (Elim‚Ñù.go
                             _
                             (x (1 ‚Ñö‚Çä¬∑ (1 ‚Ñö‚Çä¬∑ x‚ÇÇ))))) _
      Œª q ‚Üí _‚àô_ {y = Elim‚Ñù.go yy (x (1 ‚Ñö‚Çä¬∑ (1 ‚Ñö‚Çä¬∑ q)))}
       (cong (Elim‚Ñù.go yy ‚àò x) ((‚Ñö‚Çä‚â° (sym (‚Ñö.¬∑IdL _)))) ) (x‚ÇÅ _)

 w .Elim‚Ñù-Prop.isPropA x = isSet‚Ñù (abs·µ£ x) (abs·µ£ (-·µ£ x))



-[x-y]‚â°y-x : ‚àÄ x y ‚Üí -·µ£ ( x +·µ£ (-·µ£ y) ) ‚â° y +·µ£ (-·µ£ x)
-[x-y]‚â°y-x x y = 
     -·µ£Distr x (-·µ£ y)
     ‚àô Œª i ‚Üí +·µ£Comm (-·µ£ x) (-·µ£Invol y i) i


minusComm-abs·µ£ : ‚àÄ x y ‚Üí abs·µ£ (x +·µ£ (-·µ£ y)) ‚â° abs·µ£ (y +·µ£ (-·µ£ x))
minusComm-abs·µ£ x y = -abs·µ£ _ ‚àô cong abs·µ£ (-[x-y]‚â°y-x x y)


open ‚Ñö.HLP

-- HoTT Lemma (11.3.41)

dense‚Ñöin‚Ñù : ‚àÄ u v ‚Üí u <·µ£ v ‚Üí ‚àÉ[ q ‚àà ‚Ñö ] ((u <·µ£ rat q) √ó (rat q <·µ£ v))
dense‚Ñöin‚Ñù u v =
  PT.map Œª ((u , v) , (z , (z' , z''))) ‚Üí
            u ‚Ñö.+ ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 2 ]) ,
              ‚à£ (u , u ‚Ñö.+ ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ]))
                , (z , ((
                     let zz' = ‚Ñö.<-¬∑o u v [ pos 1 / 1+ 3 ]
                                (‚Ñö.0<‚Üí< [ pos 1 / 1+ 3 ] _ ) z'
                        
                     in subst (‚Ñö._<
                              u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                               (cong (u ‚Ñö.+_)
                                 (‚Ñö.¬∑AnnihilL [ pos 1 / 1+ 3 ]) ‚àô ‚Ñö.+IdR u) $
                           ‚Ñö.‚â§<Monotone+ u u ([ pos 0 / 1+ 0 ]
                              ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                           ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                             (‚Ñö.isRefl‚â§ u) (
                              ‚Ñö.<-¬∑o 0 (v ‚Ñö.- u)
                                 [ pos 1 / 1+ 3 ]
                                  (‚Ñö.dec‚Ñö<? {0} {[ pos 1 / 1+ 3 ]})
                                   (‚Ñö.<‚Üí<minus u v z')))
                    , ‚â§‚Ñö‚Üí‚â§·µ£ _ _
                       (‚Ñö.‚â§-o+
                         ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                         ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ])
                          u (‚Ñö.‚â§-o¬∑ [ pos 1 / 1+ 3 ]
                             [ pos 1 / 1+ 1 ] (v ‚Ñö.- u)
                              (‚Ñö.0‚â§‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u v z'))
                               (‚Ñö.dec‚Ñö‚â§? {[ pos 1 / 1+ 3 ]}
                                          {[ pos 1 / 1+ 1 ]}))))) ‚à£‚ÇÅ
                , ‚à£ (v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ]) , v) ,
                  (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                     (subst
                       {x = (u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 3 / 1+ 3 ])}
                       {(v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ]))}
                       (u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ] ‚Ñö.‚â§_)
                        ((cong (u ‚Ñö.+_) (‚Ñö.¬∑DistR+ _ _ _ ‚àô ‚Ñö.+Comm _ _)
                          ‚àô ‚Ñö.+Assoc _ _ _) ‚àô‚àô
                            (cong‚ÇÇ ‚Ñö._+_
                              dist‚Ñö! u ¬∑[
                               (ge1 +ge ((neg-ge ge1) ¬∑ge
                                        ge[ [ pos 3 / 1+ 3 ] ]))  
                                     ‚â° (neg-ge ((neg-ge ge1) ¬∑ge
                                        ge[ [ pos 1 / 1+ 3 ] ]))   ]
                             dist‚Ñö! v ¬∑[ (( ge[ [ pos 3 / 1+ 3 ] ]))  
                                     ‚â° (ge1 +ge neg-ge (
                                        ge[ [ pos 1 / 1+ 3 ] ]))   ])
                            ‚àô‚àô (‚Ñö.+Comm _ _ ‚àô sym (‚Ñö.+Assoc v
                                   (‚Ñö.- (v ‚Ñö.¬∑ [ 1 / 4 ]))
                                    (‚Ñö.- ((‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ])))
                              ‚àô cong (‚Ñö._+_ v)
                                  (sym (‚Ñö.¬∑DistL+ -1 _ _)) ‚àô cong (‚Ñö._-_ v)
                             (sym (‚Ñö.¬∑DistR+ v (‚Ñö.- u) [ 1 / 4 ])) ))
                         (‚Ñö.‚â§-o+
                           ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ])
                           ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 3 / 1+ 3 ]) u
                            (‚Ñö.‚â§-o¬∑ [ pos 1 / 1+ 1 ] [ pos 3 / 1+ 3 ]
                              (v ‚Ñö.- u) ((‚Ñö.0‚â§‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u v z')))
                                ((‚Ñö.dec‚Ñö‚â§? {[ pos 1 / 1+ 1 ]}
                                          {[ pos 3 / 1+ 3 ]})))
                                  )) , (
                   subst ((v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])) ‚Ñö.<_)
                    (‚Ñö.+IdR v) (‚Ñö.<-o+ (‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ])) 0 v
                       (‚Ñö.-‚Ñö‚Çä<0 (‚Ñö.<‚Üí‚Ñö‚Çä u v z' ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 3 ] , _)))) , z'')) ‚à£‚ÇÅ  



-- 11.3.42




‚àº‚Üí‚â§ : ‚àÄ u q ‚Üí u ‚â§·µ£ (rat q) ‚Üí ‚àÄ v Œµ ‚Üí u ‚àº'[ Œµ ] v ‚Üí v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
‚àº‚Üí‚â§ u q u‚â§q v Œµ u‚àºv = 
 let maxLip : ((rat q)) ‚àº[ Œµ ] max·µ£ v ((rat q))
     maxLip =
         subst (_‚àº[ Œµ ] max·µ£ v ((rat q)))
           u‚â§q $ NonExpanding‚ÇÇ.go‚àºL maxR ((rat q)) u v Œµ (‚àº'‚Üí‚àº _ _ _ u‚àºv)
     zzz = ‚àº‚Üí‚â§-rat-u q q (‚â§·µ£-refl (rat q)) (max·µ£ v ((rat q))) Œµ (‚àº‚Üí‚àº' _ _ _ maxLip) 
 in cong (max·µ£ v ‚àò rat) (sym (‚Ñö.‚â§‚Üímax q (q ‚Ñö.+ fst Œµ)
          (‚Ñö.‚â§+‚Ñö‚Çä q q Œµ (‚Ñö.isRefl‚â§ q )))) ‚àô‚àô
     (max·µ£Assoc v (rat q) (rat (q ‚Ñö.+ fst Œµ)))  ‚àô‚àô  zzz
 where

 ‚àº‚Üí‚â§-rat-u : ‚àÄ u q ‚Üí rat u ‚â§·µ£ (rat q) ‚Üí ‚àÄ  v Œµ
             ‚Üí rat u ‚àº'[ Œµ ] v ‚Üí v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
 ‚àº‚Üí‚â§-rat-u r q u‚â§q = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop _
  w .Elim‚Ñù-Prop.ratA x Œµ (u , v) = ‚â§‚Ñö‚Üí‚â§·µ£ _ _
    (subst (‚Ñö._‚â§ q ‚Ñö.+ fst Œµ) lem--05 $ ‚Ñö.‚â§Monotone+ r q (x ‚Ñö.- r) (fst Œµ)
      (‚â§·µ£‚Üí‚â§‚Ñö r q u‚â§q)
      (‚Ñö.<Weaken‚â§ _ _ (‚Ñö.minus-<'  (fst Œµ) (x ‚Ñö.- r)
      $ subst ((‚Ñö.- fst Œµ) ‚Ñö.<_) (sym (‚Ñö.-[x-y]‚â°y-x x r)) u)))
  w .Elim‚Ñù-Prop.limA x y x‚ÇÅ Œµ =
       PT.rec (isProp‚â§·µ£ _ _)
     (uncurry Œª Œ∏ ‚Üí
       PT.rec (isProp‚â§·µ£ _ _)
        (uncurry Œª Œ∏<Œµ ‚Üí
          PT.rec (isProp‚â§·µ£ _ _)
            Œª (Œ∑ , xx , xx') ‚Üí
              let xx'* : rat r
                       ‚àº'[ (((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx) ] x Œ∑
                  xx'* = xx'

                  yy : (Œ¥ : ‚Ñö‚Çä) ‚Üí fst Œ¥ ‚Ñö.< fst Œ∏ ‚Üí
                          rat r ‚àº[ Œµ ] x Œ¥  
                  yy Œ¥ Œ¥<Œ∏ =
                    let z = triangle‚àº {rat r}
                              {x Œ∑} {x Œ¥}
                                {(((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx)}
                                   { Œ∏ ‚Ñö‚Çä+  Œ∑  }
                             (‚àº'‚Üí‚àº _ _
                              ((((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx))
                               xx')
                                let uu = (y Œ∑ Œ¥)
                                 in ‚àº-monotone<
                                       (subst (‚Ñö._< fst (Œ∏ ‚Ñö‚Çä+ Œ∑))
                                          (‚Ñö.+Comm (fst Œ¥) (fst Œ∑))
                                          (‚Ñö.<-+o
                                            (fst Œ¥)
                                            (fst Œ∏) (fst Œ∑)
                                            Œ¥<Œ∏)) uu
                    in subst‚àº lem--054 z
                  
              in sym (eq‚Ñù _ _ Œª Œµ' ‚Üí
                    let Œµ* = ‚Ñö.min‚Çä (‚Ñö./2‚Çä Œµ') (‚Ñö./2‚Çä Œ∏)
                        Œµ*<Œµ' = snd
                          (‚Ñö.<‚Üí‚Ñö‚Çä  (fst Œµ*) (fst Œµ')
                             (
                             ‚Ñö.isTrans‚â§< (fst Œµ*) (fst (‚Ñö./2‚Çä Œµ')) (fst Œµ')
                              (‚Ñö.min‚â§ (fst (‚Ñö./2‚Çä Œµ')) (fst (‚Ñö./2‚Çä Œ∏)))
                               (‚Ñö.x/2<x Œµ') )) 

                        Œµ*<Œ∏ = ‚Ñö.isTrans‚â§< (fst Œµ*) (fst (‚Ñö./2‚Çä Œ∏)) (fst Œ∏)
                              (‚Ñö.min‚â§' (fst (‚Ñö./2‚Çä Œµ')) (fst (‚Ñö./2‚Çä Œ∏)))
                               (‚Ñö.x/2<x Œ∏)

                        zzz = x‚ÇÅ Œµ* Œµ  (‚àº‚Üí‚àº' _ _ _ (yy Œµ* Œµ*<Œ∏))
                    in rat-lim (q ‚Ñö.+ fst Œµ) _ _ Œµ* _ Œµ*<Œµ'
                           (subst (rat (q ‚Ñö.+ fst Œµ)
                             ‚àº[ (fst Œµ' ‚Ñö.- fst Œµ*) , Œµ*<Œµ' ]_)
                              (sym zzz) (refl‚àº (rat (q ‚Ñö.+ fst Œµ))
                             ((fst Œµ' ‚Ñö.- fst Œµ*) , Œµ*<Œµ'))) )))
    ‚àò fst (rounded‚àº' (rat r) (lim x y) Œµ)

  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _


 
-- 11.3.43-i

‚àº‚Üí< : ‚àÄ u q ‚Üí u <·µ£ (rat q) ‚Üí ‚àÄ v Œµ ‚Üí u ‚àº'[ Œµ ] v ‚Üí v <·µ£ rat (q ‚Ñö.+ fst Œµ)
‚àº‚Üí< u q u<q v Œµ x =
  PT.map (Œª ((q' , r') , z , z' , z'') ‚Üí
            ((q' ‚Ñö.+ fst Œµ) , (r' ‚Ñö.+ fst Œµ)) ,
               (‚àº‚Üí‚â§ u q' z v Œµ x  , ((‚Ñö.<-+o q' r' (fst Œµ) z') ,
                 ‚â§‚Ñö‚Üí‚â§·µ£ (r' ‚Ñö.+ fst Œµ) (q ‚Ñö.+ fst Œµ)
                   (‚Ñö.‚â§-+o r' q (fst Œµ) (‚â§·µ£‚Üí‚â§‚Ñö r' q z'')))))
            u<q




-- x+[y-x]n/k‚â°y-[y-x]m/k : ‚àÄ x y n m k ‚Üí (n ‚Ñï.+ m ‚â° ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k) ‚Üí 
--   x ‚Ñö.+ (y ‚Ñö.- x) ‚Ñö.¬∑ [ pos n / k ] 
--    ‚â° y ‚Ñö.- ((y ‚Ñö.- x) ‚Ñö.¬∑ [ pos m / k ])
-- x+[y-x]n/k‚â°y-[y-x]m/k u v n m k p =
--   ((cong (u ‚Ñö.+_) (‚Ñö.¬∑DistR+ _ _ _ ‚àô ‚Ñö.+Comm _ _)
--         ‚àô ‚Ñö.+Assoc _ _ _) ‚àô‚àô
--           cong‚ÇÇ ‚Ñö._+_
--              {!!}
--              {!!}
--            --  dist‚Ñö! u ¬∑[
--            --   (ge1 +ge ((neg-ge ge1) ¬∑ge
--            --            ge[ [ pos 1 / 1+ 1 ] ]))  
--            --         ‚â° (neg-ge ((neg-ge ge1) ¬∑ge
--            --            ge[ [ pos 1 / 1+ 1 ] ]))   ]
--            -- dist‚Ñö! v ¬∑[ (( ge[ [ pos 1 / 1+ 1 ] ]))  
--            --         ‚â° (ge1 +ge neg-ge (
--            --            ge[ [ pos 1 / 1+ 1 ] ]))   ]
--           ‚àô‚àô (‚Ñö.+Comm _ _ ‚àô sym (‚Ñö.+Assoc v
--                  (‚Ñö.- (v ‚Ñö.¬∑ [ pos m / k ]))
--                   (‚Ñö.- ((‚Ñö.- u) ‚Ñö.¬∑ [ pos m / k ])))
--             ‚àô cong (‚Ñö._+_ v)
--                 (sym (‚Ñö.¬∑DistL+ -1 _ _)) ‚àô cong (‚Ñö._-_ v)
--            (sym (‚Ñö.¬∑DistR+ v (‚Ñö.- u) [ pos m / k ])) ))


x+[y-x]/2‚â°y-[y-x]/2 : ‚àÄ x y ‚Üí
  x ‚Ñö.+ (y ‚Ñö.- x) ‚Ñö.¬∑ [ 1 / 2 ] 
   ‚â° y ‚Ñö.- ((y ‚Ñö.- x) ‚Ñö.¬∑ [ 1 / 2 ])
x+[y-x]/2‚â°y-[y-x]/2 u v =
  ((cong (u ‚Ñö.+_) (‚Ñö.¬∑DistR+ _ _ _ ‚àô ‚Ñö.+Comm _ _)
        ‚àô ‚Ñö.+Assoc _ _ _) ‚àô‚àô
          cong‚ÇÇ ‚Ñö._+_
            dist‚Ñö! u ¬∑[
             (ge1 +ge ((neg-ge ge1) ¬∑ge
                      ge[ [ pos 1 / 1+ 1 ] ]))  
                   ‚â° (neg-ge ((neg-ge ge1) ¬∑ge
                      ge[ [ pos 1 / 1+ 1 ] ]))   ]
           dist‚Ñö! v ¬∑[ (( ge[ [ pos 1 / 1+ 1 ] ]))  
                   ‚â° (ge1 +ge neg-ge (
                      ge[ [ pos 1 / 1+ 1 ] ]))   ]
          ‚àô‚àô (‚Ñö.+Comm _ _ ‚àô sym (‚Ñö.+Assoc v
                 (‚Ñö.- (v ‚Ñö.¬∑ [ 1 / 2 ]))
                  (‚Ñö.- ((‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 2 ])))
            ‚àô cong (‚Ñö._+_ v)
                (sym (‚Ñö.¬∑DistL+ -1 _ _)) ‚àô cong (‚Ñö._-_ v)
           (sym (‚Ñö.¬∑DistR+ v (‚Ñö.- u) [ 1 / 2 ])) ))


-- 11.3.43-ii

‚àº‚Üí<' : ‚àÄ u q ‚Üí u <·µ£ (rat q) ‚Üí ‚àÄ v
   ‚Üí ‚àÉ[ Œµ ‚àà ‚Ñö‚Çä ] (u ‚àº'[ Œµ ] v ‚Üí v <·µ£ rat q)
‚àº‚Üí<' u q u<q v =
 PT.map
      (Œª ((u' , q') , z , z' , z'') ‚Üí
            ‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z')  ,
              (Œª xx ‚Üí
                let zwz = ‚àº‚Üí‚â§  u u'  z v _ xx
                in ‚à£ (_ , q') , (zwz ,
                  (subst2
                      {x = q' ‚Ñö.- (fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z')))}
                      {u' ‚Ñö.+ fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))}
                      ‚Ñö._<_
                     (sym (x+[y-x]/2‚â°y-[y-x]/2 u' q'))
                     (‚Ñö.+IdR q')
                     (‚Ñö.<-o+ (‚Ñö.- fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))) 0 q'
                          (‚Ñö.-‚Ñö‚Çä<0 (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))))
                     , z'')) ‚à£‚ÇÅ ))
      u<q


-- 11.3.44

lem-11-3-44 : ‚àÄ u Œµ ‚Üí u ‚àº'[ Œµ ] 0 ‚Üí abs·µ£ u <·µ£ rat (fst Œµ)
lem-11-3-44 = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop (Œª z ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí z ‚àº'[ Œµ ] 0 ‚Üí abs·µ£ z <·µ£ rat (fst Œµ))
 w .Elim‚Ñù-Prop.ratA x Œµ (x‚ÇÅ , x‚ÇÇ) =
    <‚Ñö‚Üí<·µ£ (‚Ñö.abs' x) (fst Œµ)
      (subst (‚Ñö._< fst Œµ) (‚Ñö.abs'‚â°abs x)
        (‚Ñö.absFrom<√ó< (fst Œµ) x
          (subst ((‚Ñö.- fst Œµ) ‚Ñö.<_) (‚Ñö.+IdR x) x‚ÇÅ)
           (subst (‚Ñö._< (fst Œµ)) ((‚Ñö.+IdR x)) x‚ÇÇ)))
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ Œµ =
   (PT.rec squash‚ÇÅ
     $ uncurry Œª Œ∏ ‚Üí PT.rec squash‚ÇÅ Œª (xx , xx') ‚Üí 
       let zqz = ((subst‚àº {Œµ' = (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , _))}
                              (‚Ñö.Œµ/6+Œµ/6‚â°Œµ/3 (fst Œ∏))
                            (ùï£-lim-self
                              x p (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , _))
                                 (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , _)))))
           by‚ñµ : Œ£ (‚Ñö.0< (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ ‚Ñö.[ 2 / 3 ] )))
                   (Œª z ‚Üí x (Œ∏ ‚Ñö‚Çä¬∑ (‚Ñö.[ pos 1 / 6 ] , _))
                    ‚àº'[ (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ ‚Ñö.[ 2 / 3 ] )) , z ]
                      0)
           by‚ñµ =
             let zz = triangle‚àº' (x ( Œ∏  ‚Ñö‚Çä¬∑(‚Ñö.[ 1 / 6 ] , _)))
                         (lim x p) 0 (( Œ∏  ‚Ñö‚Çä¬∑(‚Ñö.[ 1 / 3 ] , _)))
                          ((fst Œµ ‚Ñö.- fst Œ∏) , xx)
                         zqz xx'
                 zz' : ((fst Œ∏) ‚Ñö.¬∑ [ 1 / 3 ])
                         ‚Ñö.+ (fst Œµ ‚Ñö.- fst Œ∏) ‚â°
                         (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ [ 2 / 3 ]))
                 zz' = (Œª i ‚Üí ((fst Œ∏) ‚Ñö.¬∑ [ 1 / 3 ])
                         ‚Ñö.+ (fst Œµ ‚Ñö.-
                           dist‚Ñö! (fst Œ∏) ¬∑[
                             (ge1) ‚â° (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                               +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                               +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ] ) ] i ))
                     ‚àô‚àô lem--055 ‚àô‚àô
                       Œª i ‚Üí fst Œµ ‚Ñö.-
                           dist‚Ñö! (fst Œ∏) ¬∑[
                             (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                               +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ])
                               ‚â° (ge[ ‚Ñö.[ pos 2 / 1+ 2 ] ] ) ] i
             in sŒ£‚Ñö<' zz' zz
           xxx : abs·µ£ (x (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , tt))) <·µ£
                  rat (fst Œµ ‚Ñö.- (fst Œ∏  ‚Ñö.¬∑ [ pos 2 / 1+ 2 ]))
           xxx = x‚ÇÅ _ _  (snd (by‚ñµ))

           ggg' : abs·µ£ (lim x p) <·µ£ _
           ggg' = ‚àº‚Üí< _ _ xxx (abs·µ£ (lim x p))
                   ((Œ∏  ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , _))) $
                     ‚àº‚Üí‚àº' _ _ _ $
                             abs·µ£-nonExpanding _ _ _ zqz

           ggg : abs·µ£ (lim x p) <·µ£ rat (fst Œµ)
           ggg = isTrans<·µ£ (abs·µ£ (lim x p))
                   _ (rat (fst Œµ)) ggg'
                     (<‚Ñö‚Üí<·µ£ _ _ (subst2 ‚Ñö._<_
                          (lem--056 ‚àô
                            (Œª i ‚Üí (fst Œµ ‚Ñö.-
                             ((dist‚Ñö! (fst Œ∏) ¬∑[
                             (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                               +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ])
                               ‚â° (ge[ ‚Ñö.[ pos 2 / 1+ 2 ] ] ) ]) i))
                                ‚Ñö.+
                               (fst (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , tt)))))
                               (‚Ñö.+IdR (fst Œµ))
                           (‚Ñö.<-o+ (‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ [ pos 1 / 1+ 2 ])) 0 (fst Œµ)
                          (‚Ñö.-‚Ñö‚Çä<0 (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , tt))))))
           
           
       in ggg) ‚àòS fst (rounded‚àº' (lim x p) 0 Œµ)
 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ


‚àº‚âÉabs<Œµ‚áê : ‚àÄ u v  Œµ ‚Üí
  (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ)) ‚Üí (u ‚àº[ Œµ ] v) 
    
‚àº‚âÉabs<Œµ‚áê u v Œµ = Elim‚Ñù-Prop2Sym.go w u v Œµ
 where
  w : Elim‚Ñù-Prop2Sym Œª u v ‚Üí ‚àÄ Œµ ‚Üí
          (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ))
            ‚Üí u ‚àº[ Œµ ] v
  w .Elim‚Ñù-Prop2Sym.rat-ratA r q Œµ z =
    rat-rat-fromAbs r q Œµ
     (subst (‚Ñö._< fst Œµ) (sym (‚Ñö.abs'‚â°abs _)) (<·µ£‚Üí<‚Ñö _ _ z))
  w .Elim‚Ñù-Prop2Sym.rat-limA q x y R Œµ =
    PT.rec (isProp‚àº _ _ _) ( Œª (Œ∏ , (xx , xx')) ‚Üí
          let 0<Œ∏ = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 Œ∏
                       (isTrans‚â§<·µ£ 0 _ (rat Œ∏)
                         (0‚â§abs·µ£ _) xx))
              ww : ‚àÄ Œ¥ Œ∑ ‚Üí abs·µ£ (rat q +·µ£ (-·µ£ lim x y))
                          ‚àº[ Œ¥ ‚Ñö‚Çä+ Œ∑ ] abs·µ£ (rat q +·µ£ (-·µ£ (x Œ¥))) 
              ww Œ¥ Œ∑ =
                let uu : ‚ü® NonExpanding‚Çö (abs·µ£ ‚àòS (rat q +·µ£_) ‚àòS -·µ£_) ‚ü©
                    uu = NonExpanding‚Çö‚àò abs·µ£ ((rat q +·µ£_) ‚àòS -·µ£_)
                              abs·µ£-nonExpanding
                               (NonExpanding‚Çö‚àò (rat q +·µ£_) -·µ£_
                                      (NonExpanding‚ÇÇ.go‚àºR sumR (rat q))
                                       (Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding
                                         _ (snd -·µ£R)))
                in uu (lim x y) (x Œ¥) (Œ¥ ‚Ñö‚Çä+ Œ∑) (
                           sym‚àº _ _ _ (ùï£-lim-self x y Œ¥ Œ∑))
              Œ¥ = ‚Ñö./4‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä Œ∏ (fst Œµ) (<·µ£‚Üí<‚Ñö _ _ xx'))
              www = ‚àº‚Üí< (abs·µ£ (rat q +·µ£ (-·µ£ lim x y)))
                      Œ∏
                      xx ((abs·µ£ (rat q +·µ£ (-·µ£ (x Œ¥)))))
                         (Œ¥ ‚Ñö‚Çä+ Œ¥)
                      (‚àº‚Üí‚àº' _ _ (Œ¥ ‚Ñö‚Çä+ Œ¥) (ww Œ¥ Œ¥))
                      
              wwwR = R Œ¥ ((Œ∏ , 0<Œ∏) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)) www
              zz : fst (Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö.+ (fst Œ¥ ‚Ñö.+ fst Œ¥) ‚â°
                     fst Œµ ‚Ñö.- Œ∏
              zz = dist‚Ñö! (fst Œµ ‚Ñö.- Œ∏)
                     ¬∑[ (ge[ [ 1 / 4 ] ] +ge ge[ [ 1 / 4 ] ]) +ge
                        (ge[ [ 1 / 4 ] ] +ge ge[ [ 1 / 4 ] ]) ‚â° ge1 ]
          in subst‚àº ( sym (‚Ñö.+Assoc _ _ _) ‚àô‚àô
                    cong (Œ∏ ‚Ñö.+_) zz ‚àô‚àô lem--05 {Œ∏} {fst Œµ} )
               (triangle‚àº wwwR (ùï£-lim-self x y Œ¥ Œ¥))) ‚àòS
          (dense‚Ñöin‚Ñù (abs·µ£ (rat q +·µ£ (-·µ£ lim x y))) (rat (fst Œµ)))
  w .Elim‚Ñù-Prop2Sym.lim-limA x y x' y' R Œµ =
      PT.rec (isProp‚àº _ _ _) ( Œª (Œ∏ , (xx , xx')) ‚Üí
        let 0<Œ∏ = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 Œ∏
                       (isTrans‚â§<·µ£ 0 _ (rat Œ∏)
                         (0‚â§abs·µ£ _) xx))
            ww : ‚àÄ Œ¥ Œ∑ ‚Üí abs·µ£ (lim x y +·µ£ (-·µ£ lim x' y'))
                        ‚àº[ (Œ¥ ‚Ñö‚Çä+ Œ∑) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ∑) ]
                         abs·µ£ ((x Œ¥) +·µ£ (-·µ£ (x' Œ¥))) 
            ww Œ¥ Œ∑ =
              let uu = abs·µ£-nonExpanding
                    ((lim x y +·µ£ (-·µ£ lim x' y')))
                    (x Œ¥ +·µ£ (-·µ£ x' Œ¥))
                        _
                         (NonExpanding‚ÇÇ.go‚àº‚ÇÇ sumR
                          _ _
                          (sym‚àº _ _ _ (ùï£-lim-self x y Œ¥ Œ∑))
                          (Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding
                                         _ (snd -·µ£R) _ _ _
                                          (sym‚àº _ _ _ (ùï£-lim-self x' y' Œ¥ Œ∑))))
              in uu
            Œ¥ = (‚Ñö.<‚Üí‚Ñö‚Çä Œ∏ (fst Œµ) (<·µ£‚Üí<‚Ñö _ _ xx')) ‚Ñö‚Çä¬∑ ([ 1 / 6 ] , _)
            www = ‚àº‚Üí< (abs·µ£ (lim x y +·µ£ (-·µ£ lim x' y')))
                      Œ∏
                      xx ((abs·µ£ (x Œ¥ +·µ£ (-·µ£ (x' Œ¥)))))
                         ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥))
                      (‚àº‚Üí‚àº' _ _ ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)) (ww Œ¥ Œ¥))
            wwwR = R Œ¥ Œ¥
                       ((Œ∏ , 0<Œ∏) ‚Ñö‚Çä+ ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)))
                         www

            zz = cong (Œª x ‚Üí (x ‚Ñö.+ x) ‚Ñö.+ x)
                  (‚Ñö.Œµ/6+Œµ/6‚â°Œµ/3 (fst Œµ ‚Ñö.- Œ∏))
                   ‚àô sym (‚Ñö.+Assoc _ _ _) ‚àô ‚Ñö.Œµ/3+Œµ/3+Œµ/3‚â°Œµ (fst Œµ ‚Ñö.- Œ∏)
         in uncurry (lim-lim _ _ _ Œ¥ Œ¥ _ _)
              (sŒ£‚Ñö< (‚Ñö.+CancelL- _ _ _
                        (sym (‚Ñö.+Assoc _ _ _) ‚àô‚àô
                    cong (Œ∏ ‚Ñö.+_) zz ‚àô‚àô lem--05 {Œ∏} {fst Œµ} )) wwwR)
       ) ‚àòS (dense‚Ñöin‚Ñù (abs·µ£ ((lim x y) +·µ£ (-·µ£ lim x' y'))) (rat (fst Œµ)))
  w .Elim‚Ñù-Prop2Sym.isSymA x y u Œµ =
    sym‚àº _ _ _ ‚àòS u Œµ ‚àòS subst (_<·µ£ rat (fst Œµ))
     (minusComm-abs·µ£ y x)
  w .Elim‚Ñù-Prop2Sym.isPropA _ _ = isPropŒ†2 Œª _ _ ‚Üí isProp‚àº _ _ _



‚àº‚âÉabs<Œµ : ‚àÄ u v  Œµ ‚Üí
  (u ‚àº[ Œµ ] v) ‚âÉ
    (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ))
‚àº‚âÉabs<Œµ u v Œµ =
  propBiimpl‚ÜíEquiv (isProp‚àº _ _ _) (squash‚ÇÅ)
   (Œª x ‚Üí 
    lem-11-3-44 ((u +·µ£ (-·µ£ v))) Œµ
      (‚àº‚Üí‚àº' _ _ _ $  (subst ((u +·µ£ (-·µ£ v)) ‚àº[ Œµ ]_) (+-·µ£ v)
       (+·µ£-‚àº u v (-·µ£ v) Œµ x)))) 
   (‚àº‚âÉabs<Œµ‚áê u v Œµ)

getClampsOnQ : (a : ‚Ñö) ‚Üí
      Œ£ ‚Ñï‚Çä‚ÇÅ (Œª n ‚Üí abs·µ£ (rat a) <·µ£ rat [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1+ 0 ])
getClampsOnQ = (map-snd (Œª {a} ‚Üí subst (_<·µ£ rat [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï a) / 1+ 0 ])
      (cong rat (‚Ñö.abs'‚â°abs _ ))
      ‚àòS (<‚Ñö‚Üí<·µ£ _ _))) ‚àò ‚Ñö.bound‚Ñï

getClamps : ‚àÄ u ‚Üí
   ‚àÉ[ n ‚àà ‚Ñï‚Çä‚ÇÅ ] abs·µ£ u <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n)
getClamps = Elim‚Ñù-Prop.go w
 where
  w : Elim‚Ñù-Prop _
  w .Elim‚Ñù-Prop.ratA =
    ‚à£_‚à£‚ÇÅ ‚àò getClampsOnQ
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   PT.map (Œª (1+ n , v) ‚Üí
   let z' = (subst‚àº {Œµ' = ‚Ñö./2‚Çä 1} ‚Ñö.dec‚Ñö? $ ùï£-lim-self x p (‚Ñö./4‚Çä 1) (‚Ñö./4‚Çä 1))
       z = ‚àº‚Üí< (abs·µ£ (x (‚Ñö./4‚Çä 1))) _ v (abs·µ£ (lim x p)) 1
              (‚àº‚Üí‚àº' _ _ _
               (‚àº-monotone< (‚Ñö.x/2<x 1) (abs·µ£-nonExpanding _ _ _ z')) )

       uu = ‚Ñ§.¬∑IdR _ ‚àô (sym $ ‚Ñ§.+Comm 1 (pos 1 ‚Ñ§.+ pos n ‚Ñ§.¬∑ pos 1))  
       
   in (suc‚Çä‚ÇÅ (1+ n)) , subst ((abs·µ£ (lim x p) <·µ£_) ‚àò rat) (eq/ _ _ uu) z) $ x‚ÇÅ (‚Ñö./4‚Çä 1)
  w .Elim‚Ñù-Prop.isPropA _ = squash‚ÇÅ

restrSq : ‚àÄ n ‚Üí Lipschitz-‚Ñö‚Üí‚Ñö-restr (fromNat (suc n))
                  ((2 ‚Ñö‚Çä¬∑ fromNat (suc n)))
                  Œª x ‚Üí x ‚Ñö.¬∑ x

restrSq n q r x x‚ÇÅ Œµ x‚ÇÇ =
  
  subst (‚Ñö._< 2 ‚Ñö.¬∑ fst (fromNat (suc n)) ‚Ñö.¬∑ fst Œµ)
    (‚Ñö.abs¬∑abs (q ‚Ñö.+ r) (q ‚Ñö.- r) ‚àô cong ‚Ñö.abs (lem--040 {q} {r})) z

 where
  zz : ‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.< 2 ‚Ñö.¬∑ fst (fromNat (suc n))
  zz = subst (‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.<_)
           (sym (‚Ñö.¬∑DistR+ 1 1 (fst (fromNat (suc n)))))
          (‚Ñö.isTrans‚â§< (‚Ñö.abs (q ‚Ñö.+ r)) (‚Ñö.abs q ‚Ñö.+ ‚Ñö.abs r)
            _ (‚Ñö.abs+‚â§abs+abs q r)
              (‚Ñö.<Monotone+ (‚Ñö.abs q) _ (‚Ñö.abs r) _ x x‚ÇÅ ))

  z : ‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r) ‚Ñö.<
        2 ‚Ñö.¬∑ fst (fromNat (suc n)) ‚Ñö.¬∑ fst Œµ
  z = ‚Ñö.<Monotone¬∑-onPos _ _ _ _ 
      zz x‚ÇÇ (‚Ñö.0‚â§abs (q ‚Ñö.+ r)) ((‚Ñö.0‚â§abs (q ‚Ñö.- r)))


0<‚Ñï‚Çä‚ÇÅ : ‚àÄ n m ‚Üí 0 ‚Ñö.< (_//_.[ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n , m ])
0<‚Ñï‚Çä‚ÇÅ n m = ‚Ñö.0<‚Üí< (_//_.[ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n , m ]) tt

1/n<sucK : ‚àÄ m n ‚Üí ‚Ñö.[ 1 / (suc‚Çä‚ÇÅ m) ] ‚Ñö.< (_//_.[ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n , 1 ])
1/n<sucK m n =
 subst (1 ‚Ñ§.<_) (‚Ñ§.pos¬∑pos _ _) (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos ))

<Œî : ‚àÄ n ‚Üí _//_.[ 1 , 4 ] ‚Ñö.< (_//_.[ pos (suc n) , 1 ])
<Œî n = 1/n<sucK 3 (1+ n)


clampedSq : ‚àÄ (n : ‚Ñï) ‚Üí Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (2 ‚Ñö‚Çä¬∑ fromNat (suc n)))  
clampedSq n = 
  let ex = Lipschitz-‚Ñö‚Üí‚Ñö-extend _
             _ _ (‚Ñö.[ (1 , 4) ] , _) (<Œî n) (restrSq n)
  in fromLipschitz _ (_ , Lipschitz-rat‚àò _ _ ex)

IsContinuous : (‚Ñù ‚Üí ‚Ñù) ‚Üí Type
IsContinuous f =
 ‚àÄ u Œµ ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v ‚Üí u ‚àº[ Œ¥ ] v ‚Üí f u ‚àº[ Œµ ] f v)

IsContinuousWithPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí
                        (‚àÄ r ‚Üí ‚ü® P r ‚ü© ‚Üí ‚Ñù) ‚Üí Type
IsContinuousWithPred P f =
  ‚àÄ u Œµ u‚ààP  ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí  f u u‚ààP ‚àº[ Œµ ] f v v‚ààP)

Lipschitz‚ÜíIsContinuous : ‚àÄ L f ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù L f ‚Üí  IsContinuous f
Lipschitz‚ÜíIsContinuous L f p u Œµ =
 ‚à£ (‚Ñö.inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ ,
   (Œª v ‚Üí subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ))
      ‚àòS p u v ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ)) ‚à£‚ÇÅ

AsContinuousWithPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí (f : ‚Ñù ‚Üí ‚Ñù)
                      ‚Üí IsContinuous f
                      ‚Üí IsContinuousWithPred P (Œª x _ ‚Üí f x)
AsContinuousWithPred P f x u Œµ _ =
  PT.map (map-snd (Œª y z _ ‚Üí y z)) (x u Œµ) 

IsContinuousWP‚àò : ‚àÄ P P' f g ‚Üí (h : ‚àÄ r x ‚Üí ‚ü® P (g r x) ‚ü©)
   ‚Üí (IsContinuousWithPred P f)
   ‚Üí (IsContinuousWithPred P' g )
   ‚Üí IsContinuousWithPred P'
     (Œª r x ‚Üí f (g r x) (h r x))
IsContinuousWP‚àò P P' f g h fC gC u Œµ u‚ààP =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , Œ¥‚àº) ‚Üí
      PT.map (map-snd Œª x v v‚ààP ‚Üí
          Œ¥‚àº (g v v‚ààP) (h v v‚ààP) ‚àò (x _ v‚ààP)) (gC u Œ¥ u‚ààP))
    ((fC (g u u‚ààP) Œµ (h _ u‚ààP)))

IsContinuous‚àò : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
                    ‚Üí IsContinuous (f ‚àò g)
IsContinuous‚àò f g fC gC u Œµ =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , Œ¥‚àº) ‚Üí
      PT.map (map-snd Œª x v ‚Üí Œ¥‚àº (g v) ‚àò  (x _)  ) (gC u Œ¥))
    (fC (g u) Œµ)

isPropIsContinuous : ‚àÄ f ‚Üí isProp (IsContinuous f)
isPropIsContinuous f = isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ

-- HoTT Lemma 11.3.39
‚â°Continuous : ‚àÄ f g ‚Üí IsContinuous f ‚Üí IsContinuous g
                ‚Üí (‚àÄ r ‚Üí f (rat r) ‚â° g (rat r))
                ‚Üí ‚àÄ u ‚Üí f u ‚â° g u
‚â°Continuous f g fC gC p = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop (Œª z ‚Üí f z ‚â° g z)
 w .Elim‚Ñù-Prop.ratA = p
 w .Elim‚Ñù-Prop.limA x p R = eq‚Ñù _ _ Œª Œµ ‚Üí
   let f' = fC (lim x p) (‚Ñö./2‚Çä Œµ)
       g' = gC (lim x p) (‚Ñö./2‚Çä Œµ)
   in PT.rec2
       (isProp‚àº _ _ _)
        (Œª (Œ∏ , Œ∏‚àº) (Œ∑ , Œ∑‚àº) ‚Üí
         let Œ¥ = ‚Ñö./2‚Çä (‚Ñö.min‚Çä Œ∏ Œ∑)
             zF : f (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥)
             zF = subst (f (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ]_)
                  (R _)
                 (Œ∏‚àº _ (‚àº-monotone‚â§ (
                     subst (‚Ñö._‚â§ fst Œ∏)
                      (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (‚Ñö.min‚Çä Œ∏ Œ∑))))
                       (‚Ñö.min‚â§ (fst Œ∏) (fst Œ∑)))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥)))))
             zG : g (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥)
             zG = Œ∑‚àº _ (‚àº-monotone‚â§ (subst (‚Ñö._‚â§ fst Œ∑)
                      (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (‚Ñö.min‚Çä Œ∏ Œ∑))))
                       (‚Ñö.min‚â§' (fst Œ∏) (fst Œ∑)))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥))))
         in subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) (triangle‚àº zF (sym‚àº _ _ _ zG)))
        f' g'
 w .Elim‚Ñù-Prop.isPropA _ = isSet‚Ñù _ _

openPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí hProp ‚Ñì-zero
openPred P = (‚àÄ x ‚Üí ‚ü® P x ‚ü© ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ y ‚Üí x ‚àº[ Œ¥ ] y ‚Üí ‚ü® P y ‚ü© ) )
   , isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ


<min-rr : ‚àÄ p q r ‚Üí p <·µ£ (rat q) ‚Üí p <·µ£ (rat r) ‚Üí p <·µ£ min·µ£ (rat q) (rat r)
<min-rr p =
 ‚Ñö.elimBy‚â§ (Œª x y R a b ‚Üí subst (p <·µ£_) (min·µ£Comm (rat x) (rat y)) (R b a))
   Œª x y x‚â§y p<x _ ‚Üí subst ((p <·µ£_) ‚àò rat)
    (sym (‚Ñö.‚â§‚Üímin _ _ x‚â§y) ) (p<x)


m¬∑n/m : ‚àÄ m n ‚Üí [ pos (suc m) / 1 ] ‚Ñö.¬∑ [ pos n / 1+ m ] ‚â° [ pos n / 1 ] 
m¬∑n/m m n =
  eq/ _ _ ((Œª i ‚Üí ‚Ñ§.¬∑IdR (‚Ñ§.¬∑Comm (pos (suc m)) (pos n) i) i)
       ‚àô cong ((pos n ‚Ñ§.¬∑_) ‚àò ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§) (sym (¬∑‚Çä‚ÇÅ-identityÀ° (1+ m))))

3¬∑x‚â°x+[x+x] : ‚àÄ x ‚Üí 3 ‚Ñö.¬∑ x ‚â° x ‚Ñö.+ (x ‚Ñö.+ x)
3¬∑x‚â°x+[x+x] x = ‚Ñö.¬∑Comm _ _ ‚àô
  dist‚Ñö! x ¬∑[ ge[ 3 ] ‚â° ge1 +ge (ge1 +ge ge1) ]

abs'q‚â§Œî‚ÇÅ : ‚àÄ q n ‚Üí abs·µ£ (rat q) <·µ£ rat [ pos (suc n) / 1+ 0 ]
     ‚Üí  ‚Ñö.abs' q ‚Ñö.‚â§ ([ pos (suc (suc (n))) / 1 ] ‚Ñö.- [ 1 / 4 ])
abs'q‚â§Œî‚ÇÅ q n n< = (‚Ñö.isTrans‚â§ (‚Ñö.abs' q) (fromNat (suc n)) _
          (‚Ñö.<Weaken‚â§ _ _ (<·µ£‚Üí<‚Ñö _ _ n<))
           (subst2 ‚Ñö._‚â§_
             ((‚Ñö.+IdR _))
               ((cong {x = [ 3 / 4 ]} {y = 1 ‚Ñö.- [ 1 / 4 ]}
                         ([ pos (suc n) / 1 ] ‚Ñö.+_)
                         (ùüö.toWitness
                          {Q = ‚Ñö.discrete‚Ñö [ 3 / 4 ] (1 ‚Ñö.- [ 1 / 4 ])}
                           _ ))
                          ‚àô‚àô ‚Ñö.+Assoc _ _ _ ‚àô‚àô
                            cong (‚Ñö._- [ pos 1 / 1+ 3 ])
                             (‚Ñö.+Comm [ pos (suc n) / 1 ]
                               1 ‚àô
                                ‚Ñö.‚Ñ§+‚Üí‚Ñö+ 1 (pos (suc n)) ‚àô
                                  cong [_/ 1 ]
                                   (sym (‚Ñ§.pos+ 1 (suc n)))))
             (‚Ñö.‚â§-o+ 0 [ 3 / 4 ] (fromNat (suc n))
               (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 3 / 4 ]} _ ))))

abs'q‚â§Œî‚ÇÅ' : ‚àÄ q n ‚Üí ‚Ñö.abs' q ‚Ñö.‚â§ [ pos (suc n) / 1+ 0 ]
     ‚Üí  ‚Ñö.abs' q ‚Ñö.‚â§ ([ pos (suc (suc (n))) / 1 ] ‚Ñö.- [ 1 / 4 ])
abs'q‚â§Œî‚ÇÅ' q n n< = (‚Ñö.isTrans‚â§ (‚Ñö.abs' q) (fromNat (suc n)) _
          (n<)
           (subst2 ‚Ñö._‚â§_
             ((‚Ñö.+IdR _))
               ((cong {x = [ 3 / 4 ]} {y = 1 ‚Ñö.- [ 1 / 4 ]}
                         ([ pos (suc n) / 1 ] ‚Ñö.+_)
                         (ùüö.toWitness
                          {Q = ‚Ñö.discrete‚Ñö [ 3 / 4 ] (1 ‚Ñö.- [ 1 / 4 ])}
                           _ ))
                          ‚àô‚àô ‚Ñö.+Assoc _ _ _ ‚àô‚àô
                            cong (‚Ñö._- [ pos 1 / 1+ 3 ])
                             (‚Ñö.+Comm [ pos (suc n) / 1 ]
                               1 ‚àô
                                ‚Ñö.‚Ñ§+‚Üí‚Ñö+ 1 (pos (suc n)) ‚àô
                                  cong [_/ 1 ]
                                   (sym (‚Ñ§.pos+ 1 (suc n)))))
             (‚Ñö.‚â§-o+ 0 [ 3 / 4 ] (fromNat (suc n))
               (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 3 / 4 ]} _ ))))


‚Ñöabs-abs‚â§abs- : (x y : ‚Ñö) ‚Üí (‚Ñö.abs x ‚Ñö.- ‚Ñö.abs y) ‚Ñö.‚â§ ‚Ñö.abs (x ‚Ñö.- y)
‚Ñöabs-abs‚â§abs- x y = 
 subst2 ‚Ñö._‚â§_
   (cong ((‚Ñö._+ (‚Ñö.- (‚Ñö.abs y))) ‚àò ‚Ñö.abs) lem--00 )
   (sym lem--034)
  (‚Ñö.‚â§-+o
   (‚Ñö.abs ((x ‚Ñö.- y) ‚Ñö.+ y))
   (‚Ñö.abs (x ‚Ñö.- y) ‚Ñö.+ ‚Ñö.abs y) (‚Ñö.- (‚Ñö.abs y)) (‚Ñö.abs+‚â§abs+abs (x ‚Ñö.- y) y))

IsContinuousAbs·µ£ : IsContinuous abs·µ£
IsContinuousAbs·µ£ = Lipschitz‚ÜíIsContinuous _ (fst abs·µ£L) (snd abs·µ£L)


IsContinuousMaxR : ‚àÄ x ‚Üí IsContinuous (Œª u ‚Üí max·µ£ u x)
IsContinuousMaxR x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL maxR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMaxL : ‚àÄ x ‚Üí IsContinuous (max·µ£ x)
IsContinuousMaxL x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR maxR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMinR : ‚àÄ x ‚Üí IsContinuous (Œª u ‚Üí min·µ£ u x)
IsContinuousMinR x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL minR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMinL : ‚àÄ x ‚Üí IsContinuous (min·µ£ x)
IsContinuousMinL x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR minR _ _ _ Œµ) ‚à£‚ÇÅ



IsContinuous-·µ£ : IsContinuous (-·µ£_)
IsContinuous-·µ£ = Lipschitz‚ÜíIsContinuous _ (fst -·µ£R) (snd -·µ£R)

contDiagNE‚ÇÇ : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  ‚Üí ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí NonExpanding‚ÇÇ.go ne (f x) (g x))
contDiagNE‚ÇÇ ne f g fC gC u Œµ = 
  PT.map2
    (Œª (x , x') (y , y') ‚Üí
      ‚Ñö.min‚Çä x y , (Œª v z ‚Üí
          subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
           (NonExpanding‚ÇÇ.go‚àº‚ÇÇ ne (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)
           (x' v (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst x) (fst y)) z))
           (y' v (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst x) (fst y)) z)))))
   (fC u (‚Ñö./2‚Çä Œµ)) (gC u (‚Ñö./2‚Çä Œµ))

contDiagNE‚ÇÇWP : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  ‚Üí ‚àÄ P f g
     ‚Üí (IsContinuousWithPred P f)
     ‚Üí (IsContinuousWithPred P  g)
  ‚Üí IsContinuousWithPred P (Œª x x‚àà ‚Üí NonExpanding‚ÇÇ.go ne (f x x‚àà) (g x x‚àà))
contDiagNE‚ÇÇWP ne P f g fC gC u Œµ u‚àà =
    PT.map2
    (Œª (x , x') (y , y') ‚Üí
       
      ‚Ñö.min‚Çä x y , (Œª v v‚àà z ‚Üí
          subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
           (NonExpanding‚ÇÇ.go‚àº‚ÇÇ ne (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)
           (x' v v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst x) (fst y)) z))
           (y' v v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst x) (fst y)) z))))
           )
   (fC u (‚Ñö./2‚Çä Œµ) u‚àà) (gC u (‚Ñö./2‚Çä Œµ) u‚àà)



cont‚ÇÇ+·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí f x +·µ£ g x)
cont‚ÇÇ+·µ£ = contDiagNE‚ÇÇ sumR

cont‚ÇÇmax·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí max·µ£ (f x) (g x))
cont‚ÇÇmax·µ£ = contDiagNE‚ÇÇ maxR

cont‚ÇÇmin·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí min·µ£ (f x) (g x))
cont‚ÇÇmin·µ£ = contDiagNE‚ÇÇ minR



IsContinuous+·µ£R : ‚àÄ x ‚Üí IsContinuous (_+·µ£ x)
IsContinuous+·µ£R x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL sumR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuous+·µ£L : ‚àÄ x ‚Üí IsContinuous (x +·µ£_)
IsContinuous+·µ£L x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR sumR _ _ _ Œµ) ‚à£‚ÇÅ


abs·µ£-triangle : (x y : ‚Ñù) ‚Üí abs·µ£ (x +·µ£ y) ‚â§·µ£ (abs·µ£ x +·µ£ abs·µ£ y)
abs·µ£-triangle x y =
 let z = IsContinuous‚àò _ _ (IsContinuous+·µ£R (abs·µ£ y)) IsContinuousAbs·µ£
      
 in ‚â°Continuous
    (Œª x ‚Üí max·µ£ (abs·µ£ (x +·µ£ y)) ((abs·µ£ x +·µ£ abs·µ£ y)))
    (Œª x ‚Üí (abs·µ£ x +·µ£ abs·µ£ y))
    (cont‚ÇÇmax·µ£ _ _
      (IsContinuous‚àò _ _ IsContinuousAbs·µ£ (IsContinuous+·µ£R y)) z)
    z
    (Œª r ‚Üí let z' = IsContinuous‚àò _ _ (IsContinuous+·µ£L (abs·µ£ (rat r)))
                IsContinuousAbs·µ£
     in ‚â°Continuous
    (Œª y ‚Üí max·µ£ (abs·µ£ ((rat r) +·µ£ y)) ((abs·µ£ (rat r) +·µ£ abs·µ£ y)))
    (Œª y ‚Üí (abs·µ£ (rat r) +·µ£ abs·µ£ y))
    (cont‚ÇÇmax·µ£ _ _
        ((IsContinuous‚àò _ _ IsContinuousAbs·µ£ (IsContinuous+·µ£L (rat r))))
          z' ) z'
    (Œª r' ‚Üí cong rat (‚Ñö.‚â§‚Üímax _ _
              (subst2 ‚Ñö._‚â§_ (‚Ñö.abs'‚â°abs _)
                (cong‚ÇÇ ‚Ñö._+_ (‚Ñö.abs'‚â°abs _) (‚Ñö.abs'‚â°abs _))
               (‚Ñö.abs+‚â§abs+abs r r') ) )) y) x


<·µ£Weaken‚â§·µ£ : ‚àÄ m n ‚Üí m <·µ£ n ‚Üí m ‚â§·µ£ n
<·µ£Weaken‚â§·µ£ m n = PT.rec (isSet‚Ñù _ _)
 Œª ((q , q') , x , x' , x'')
   ‚Üí isTrans‚â§·µ£ _ _ _ x (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ x')) x'')

‚â°·µ£Weaken‚â§·µ£ : ‚àÄ m n ‚Üí m ‚â° n ‚Üí m ‚â§·µ£ n
‚â°·µ£Weaken‚â§·µ£ m n p = cong (flip max·µ£ n) p ‚àô ‚â§·µ£-refl n

IsContinuousId : IsContinuous (Œª x ‚Üí x)
IsContinuousId u Œµ = ‚à£ Œµ , (Œª _ x ‚Üí x) ‚à£‚ÇÅ

IsContinuousConst : ‚àÄ x ‚Üí IsContinuous (Œª _ ‚Üí x)
IsContinuousConst x u Œµ = ‚à£ Œµ , (Œª _ _ ‚Üí refl‚àº _ _ ) ‚à£‚ÇÅ

+IdL : ‚àÄ x ‚Üí 0 +·µ£ x ‚â° x
+IdL = ‚â°Continuous _ _ (IsContinuous+·µ£L 0) IsContinuousId
  (cong rat ‚àò ‚Ñö.+IdL)

+IdR : ‚àÄ x ‚Üí x +·µ£ 0 ‚â° x
+IdR = ‚â°Continuous _ _ (IsContinuous+·µ£R 0) IsContinuousId
  (cong rat ‚àò ‚Ñö.+IdR)


+·µ£MaxDistr : ‚àÄ x y z ‚Üí (max·µ£ x y) +·µ£ z ‚â° max·µ£ (x +·µ£ z) (y +·µ£ z)   
+·µ£MaxDistr x y z =
  ‚â°Continuous _ _
     (IsContinuous‚àò _ _ (IsContinuous+·µ£R z) (IsContinuousMaxR y))
     (IsContinuous‚àò _ _ (IsContinuousMaxR (y +·µ£ z)) (IsContinuous+·µ£R z))
     (Œª x' ‚Üí
       ‚â°Continuous _ _
         (IsContinuous‚àò _ _ (IsContinuous+·µ£R z) (IsContinuousMaxL (rat x')))
         ((IsContinuous‚àò _ _ (IsContinuousMaxL (rat x' +·µ£ z))
                                (IsContinuous+·µ£R z)))
         (Œª y' ‚Üí ‚â°Continuous _ _
           (IsContinuous+·µ£L (max·µ£ (rat x') ( rat y')))
           (cont‚ÇÇmax·µ£ _ _ (IsContinuous+·µ£L (rat x'))
                          (IsContinuous+·µ£L (rat y')))
           (Œª z' ‚Üí cong rat $ ‚Ñö.+MaxDistr‚Ñö x' y' z')
           z)
         y)
     x



‚â§·µ£-+o : ‚àÄ m n o ‚Üí  m ‚â§·µ£ n ‚Üí (m +·µ£ o) ‚â§·µ£ (n +·µ£ o)
‚â§·µ£-+o m n o p = sym (+·µ£MaxDistr m n o) ‚àô cong (_+·µ£ o) p

‚â§·µ£-o+ : ‚àÄ m n o ‚Üí  m ‚â§·µ£ n ‚Üí (o +·µ£ m) ‚â§·µ£ (o +·µ£ n)
‚â§·µ£-o+ m n o = subst2 _‚â§·µ£_ (+·µ£Comm _ _) (+·µ£Comm _ _)  ‚àò ‚â§·µ£-+o m n o


‚â§·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí (m +·µ£ o) ‚â§·µ£ (n +·µ£ s)
‚â§·µ£Monotone+·µ£ m n o s m‚â§n o‚â§s =
  isTrans‚â§·µ£ _ _ _ (‚â§·µ£-+o m n o m‚â§n) (‚â§·µ£-o+ o s n o‚â§s)



 
lem--05·µ£ : ‚àÄ Œ¥ q ‚Üí  Œ¥ +·µ£ (q +·µ£ (-·µ£ Œ¥)) ‚â° q
lem--05·µ£ Œ¥ q = cong (Œ¥ +·µ£_) (+·µ£Comm _ _) ‚àô‚àô
   +·µ£Assoc _ _ _  ‚àô‚àô
    (cong (_+·µ£ q) (+-·µ£ Œ¥) ‚àô +IdL q) 

abs-max : ‚àÄ x ‚Üí abs·µ£ x ‚â° max·µ£ x (-·µ£ x)
abs-max = ‚â°Continuous _ _
  IsContinuousAbs·µ£
   (cont‚ÇÇmax·µ£ _ _ IsContinuousId IsContinuous-·µ£)
    Œª r¬†‚Üí cong rat (sym (‚Ñö.abs'‚â°abs r))

abs·µ£NonNeg : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí abs·µ£ x ‚â° x
abs·µ£NonNeg x p = abs-max x ‚àô‚àô max·µ£Comm _ _ ‚àô‚àô z
 where
   z : (-·µ£ x) ‚â§·µ£ x
   z = subst2 _‚â§·µ£_
     (+IdL (-·µ£ x))
     (sym (+·µ£Assoc _ _ _) ‚àô‚àô cong (x +·µ£_) (+-·µ£ x) ‚àô‚àô +IdR x)
     (‚â§·µ£-+o 0 (x +·µ£ x) (-·µ£ x)
      (‚â§·µ£Monotone+·µ£ 0 x 0 x p p))

abs·µ£Pos : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí abs·µ£ x ‚â° x
abs·µ£Pos x = abs·µ£NonNeg x ‚àò <·µ£Weaken‚â§·µ£ _ _
