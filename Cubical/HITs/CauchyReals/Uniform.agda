{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Uniform where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation


Integral'‚â° : ‚àÄ a b ‚Üí (a ‚â§·µ£ b) ‚Üí ‚àÄ f g s
  ‚Üí (‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí f x ‚â° g x)
  ‚Üí on[ a , b ]IntegralOf f is' s
  ‚Üí on[ a , b ]IntegralOf g is' s
Integral'‚â° a b x f g s p =
  (Œª {Œµ} ‚Üí PT.map (map-snd Œª X tp msh‚â§ ‚Üí
    isTrans‚â°<·µ£ _ _ _ (cong (abs·µ£ ‚àò (_-·µ£ s))
      (sym (riemannSum'‚â° (snd tp) f g p)))
     (X tp msh‚â§))) ‚àò_


IsUContinuous‚Ñô-transl : ‚àÄ P Œî f
 ‚Üí IsUContinuous‚Ñô (P ‚àò (_-·µ£ Œî)) f
 ‚Üí IsUContinuous‚Ñô P Œª x x‚àà ‚Üí f (x +·µ£ Œî) (subst-‚àà P (sym (ùêë'.plusMinus _ _)) x‚àà)
IsUContinuous‚Ñô-transl P Œî f =
 map-snd (Œª X u v u‚àà v‚àà u‚àºv ‚Üí
   X _ _ _ _ (+·µ£-‚àº _ _ _ _ u‚àºv)) ‚àò_

IsUContinuous‚Ñô+·µ£‚ÇÇ : ‚àÄ P f g ‚Üí IsUContinuous‚Ñô P f ‚Üí IsUContinuous‚Ñô P g ‚Üí
   IsUContinuous‚Ñô P Œª x x‚àà ‚Üí f x x‚àà +·µ£ g x x‚àà
IsUContinuous‚Ñô+·µ£‚ÇÇ P f g fuc guc Œµ =
  let (Œ¥ , X) = fuc (/2‚Çä Œµ)
      (Œ¥' , X') = guc (/2‚Çä Œµ)
  in ‚Ñö.min‚Çä Œ¥ Œ¥' ,
      Œª u v u‚àà v‚àà u‚àºv ‚Üí
       subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)
         (triangle‚àº
            (+·µ£-‚àº _ _ _ (/2‚Çä Œµ)
             (X u v u‚àà v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) u‚àºv)))
            (+·µ£-‚àº' _ _ _ (/2‚Çä Œµ)
             (X' u v u‚àà v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) u‚àºv))))

<Œµ-lemma : ‚àÄ x (y : ‚Ñù)  (Œµ y' : ‚Ñö‚Çä)
                   ‚Üí abs·µ£ y <·µ£ rat (fst y')
                   ‚Üí abs·µ£ x <·µ£ rat (fst Œµ ‚Ñö.¬∑ fst (inv‚Ñö‚Çä y'))
                   ‚Üí abs·µ£ (x ¬∑·µ£ y)  <·µ£ rat (fst Œµ) 
<Œµ-lemma x y Œµ y' ‚à£y‚à£<y' ‚à£x‚à£<Œµ/y' =
  let z = <·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _ (0‚â§abs·µ£ _) (0‚â§abs·µ£ _)
              ‚à£x‚à£<Œµ/y' ‚à£y‚à£<y' 
   in subst2 _<·µ£_
         (sym (¬∑abs·µ£ _ _))
         (sym (rat¬∑·µ£rat _ _)
        ‚àô cong rat
          (   sym (‚Ñö.¬∑Assoc _ _ _)
           ‚àô ùêê'.¬∑IdR' _ _ (‚Ñö.inv‚Ñö‚Çä[x]¬∑x _)))
         z


IsUContinuous‚Ñô¬∑·µ£‚ÇÇ : ‚àÄ P f g ‚Üí
   Bounded P f ‚Üí
   Bounded P g ‚Üí
   IsUContinuous‚Ñô P f ‚Üí
   IsUContinuous‚Ñô P g ‚Üí
   IsUContinuous‚Ñô P Œª x x‚àà ‚Üí f x x‚àà ¬∑·µ£ g x x‚àà
IsUContinuous‚Ñô¬∑·µ£‚ÇÇ P f g (bf , <bf) (bg , <bg) fuc guc Œµ =
  let Œ¥  , X  = fuc (/2‚Çä Œµ ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä bg))
      Œ¥' , X' = guc (/2‚Çä Œµ ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä bf))
      
  in ‚Ñö.min‚Çä Œ¥ Œ¥' ,
    Œª u v u‚àà v‚àà u‚àºv ‚Üí subst‚àº {Œµ = /2‚Çä Œµ ‚Ñö‚Çä+ /2‚Çä Œµ}
           {Œµ' = Œµ} (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) $
      let Y = isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (sym (ùêë'.¬∑DistL- _ _ _))
             ‚àô ¬∑abs·µ£ _ _)
            (isTrans‚â§<·µ£ _ _ _
              (((‚â§·µ£-o¬∑·µ£ _ _ _ (0‚â§abs·µ£ _) (<bg u u‚àà))))
              (isTrans‚â°<·µ£ _ _ _ (¬∑·µ£Comm _ _)
               $ fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _) (isTrans<‚â°·µ£ _ _ _
              (fst (‚àº‚âÉabs<Œµ _ _ _) $ X u v u‚àà v‚àà
                  (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥')) u‚àºv))
              (rat¬∑·µ£rat _ _ ‚àô cong‚ÇÇ _¬∑·µ£_ refl
                (sym (inv‚Ñù‚Çä-rat _))))))

          Y' = isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (sym (ùêë'.¬∑DistR- _ _ _))
             ‚àô (¬∑abs·µ£ _ _))
            (isTrans‚â§<·µ£ _ _ _
              (‚â§·µ£-¬∑·µ£o _ _ _ (0‚â§abs·µ£ _) (<bf v v‚àà))
              (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _) (isTrans<‚â°·µ£ _ _ _
              (fst (‚àº‚âÉabs<Œµ _ _ _) $ X' u v u‚àà v‚àà
              (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥')) u‚àºv))
              (rat¬∑·µ£rat _ _ ‚àô cong‚ÇÇ _¬∑·µ£_ refl
                (sym (inv‚Ñù‚Çä-rat _))))))
      in invEq (‚àº‚âÉabs<Œµ _ _ _)
         (isTrans‚â§<·µ£ _ _ _
           (isTrans‚â°‚â§·µ£ _ _ _
             (cong abs·µ£ (sym Lùêë.lem--060))
             (abs·µ£-triangle _ _))
           (isTrans<‚â°·µ£ _ _ _
             (<·µ£Monotone+·µ£ _ _ _ _
             
             Y
             Y')
             (+·µ£-rat _ _)))


IsUContinuous‚ÑôC¬∑·µ£ : ‚àÄ P (C : ‚Ñö) f ‚Üí IsUContinuous‚Ñô P f ‚Üí 
   IsUContinuous‚Ñô P Œª x x‚àà ‚Üí f x x‚àà ¬∑·µ£ rat C
IsUContinuous‚ÑôC¬∑·µ£ P C f X = 
  map-snd (Œª X u v u‚àà v‚àà ‚Üí ¬∑·µ£-‚àº _ _ _ _ _
   (isTrans‚â°‚â§·µ£ _ _ _
     (abs·µ£-rat C ‚àô cong rat (sym (‚Ñö.+IdR _)))
     (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§-o+ _ _ _ (‚Ñö.dec‚Ñö‚â§? {0} {1}))))
    ‚àò X u v u‚àà v‚àà )
    ‚àò X ‚àò (_‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.abs C ‚Ñö.+ 1 ,
      ‚Ñö.<‚Üí0< _ ((‚Ñö.‚â§<Monotone+ 0 _ 0 _
        (‚Ñö.0‚â§abs C) (‚Ñö.dec‚Ñö<? {0} {1})))))


IsUContinuous‚Ñô-·µ£‚àò : ‚àÄ P f ‚Üí IsUContinuous‚Ñô P f ‚Üí 
   IsUContinuous‚Ñô P Œª x x‚àà ‚Üí -·µ£ (f x x‚àà)
IsUContinuous‚Ñô-·µ£‚àò P f X = 
 subst (IsUContinuous‚Ñô P)
   (funExt‚ÇÇ Œª _ _ ‚Üí ¬∑·µ£Comm _ _ ‚àô sym (-·µ£‚â°[-1¬∑·µ£] _)) (IsUContinuous‚ÑôC¬∑·µ£ P -1 f X) 





IsUContinuousId : IsUContinuous (idfun _)
IsUContinuousId = _, Œª _ _ ‚Üí idfun _

IsUContinuous‚Ñô-const : ‚àÄ P C ‚Üí IsUContinuous‚Ñô P Œª _ _ ‚Üí C
IsUContinuous‚Ñô-const P C Œµ = 1 , Œª _ _ _ _ _ ‚Üí refl‚àº _ _


FTOC‚áí' : ‚àÄ a b ‚Üí a ‚â§·µ£ b 
          ‚Üí (f : ‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí  ‚Ñù)

          ‚Üí (ucf : IsUContinuous‚Ñô (interval‚Ñô a b) f)
          ‚Üí (uDerivativeOf‚Ñô (interval‚Ñô a b) ,
                        (Œª x (a‚â§x , x‚â§b) ‚Üí
                          fst (Integrate-UContinuous‚Ñô a x a‚â§x
                             (Œª x x‚àà ‚Üí f x (fst x‚àà , isTrans‚â§·µ£ _ _ _
                               (snd x‚àà) x‚â§b))
                           (map-snd
                             (Œª X ‚Üí Œª u v u‚àà v‚àà u‚àºv ‚Üí
                              X u v ((fst u‚àà , isTrans‚â§·µ£ _ _ _
                               (snd u‚àà) x‚â§b))
                               (((fst v‚àà , isTrans‚â§·µ£ _ _ _
                               (snd v‚àà) x‚â§b))) u‚àºv)
                             ‚àò ucf)))
                        is f)
FTOC‚áí' a b a‚â§b f ucf Œµ = do 
 (Œ¥ , X) ‚Üê FTOC‚áí a (Œª x ‚Üí f (clamp·µ£ a b x)
       (clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b x))
       (map-snd (Œª X u v u‚àºv ‚Üí
        X _ _ (clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b u)
              (clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b v)
               (clamp·µ£‚àº u‚àºv)) ‚àò ucf) Œµ
 ‚à£ Œ¥ , (Œª x x‚àà h h‚àà 0ÔºÉh ‚à£h‚à£<Œ¥ ‚Üí
    let z = X x (fst x‚àà) h (fst h‚àà)
            0ÔºÉh ‚à£h‚à£<Œ¥
     in isTrans‚â°<·µ£ _ _ _
         (cong abs·µ£
            (cong‚ÇÇ _-·µ£_
              (cong (uncurry f)
                (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                 (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a b x x‚àà)))
              (cong‚ÇÇ _¬∑·µ£_
               (cong‚ÇÇ _-·µ£_
                 (Integrate-UContinuous-‚â°-‚àà a _ _ _ _ _ _
                   Œª x' x'‚àà ‚Üí cong (uncurry f)
                       (Œ£‚â°Prop (‚àà-isProp _)
                         (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a _ x' x'‚àà)
                           ‚àô ‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a b x' (fst x'‚àà ,
                             isTrans‚â§·µ£ _ _ _ (snd x'‚àà) (snd h‚àà)))))
                 
                        ((Integrate-UContinuous-‚â°-‚àà a _ _ _ _ _ _
                   Œª x' x'‚àà ‚Üí cong (uncurry f)
                       (Œ£‚â°Prop (‚àà-isProp _)
                         (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a _ x' x'‚àà)
                           ‚àô ‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a b x' (fst x'‚àà ,
                             isTrans‚â§·µ£ _ _ _ (snd x'‚àà) (snd x‚àà)))))))
                refl)))
         z) ‚à£‚ÇÅ

isCauchySequence-‚àò+ : ‚àÄ s k
 ‚Üí IsCauchySequence' s
 ‚Üí IsCauchySequence' (s ‚àò (k ‚Ñï.+_))
isCauchySequence-‚àò+ s k =
  map-snd (Œª X m n <n <m ‚Üí
    X (k ‚Ñï.+ m) (k ‚Ñï.+ n)
      (‚Ñï.‚â§-trans <n ‚Ñï.‚â§SumRight)
      (‚Ñï.‚â§-trans <m ‚Ñï.‚â§SumRight)) ‚àò_



-1‚Åø : ‚Ñï ‚Üí ‚Ñö
-1‚Åø zero = 1
-1‚Åø (suc zero) = -1
-1‚Åø (suc (suc x)) = -1‚Åø x

abs·µ£[-1‚Åø]‚â°1 : ‚àÄ n ‚Üí abs·µ£ (rat (-1‚Åø n)) ‚â° 1
abs·µ£[-1‚Åø]‚â°1 zero = abs·µ£-rat _
abs·µ£[-1‚Åø]‚â°1 (suc zero) = abs·µ£-rat _
abs·µ£[-1‚Åø]‚â°1 (suc (suc n)) = abs·µ£[-1‚Åø]‚â°1 n

-1‚Åø¬∑ : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù
-1‚Åø¬∑ zero x = x
-1‚Åø¬∑ (suc zero) = -·µ£_
-1‚Åø¬∑ (suc (suc n)) = -1‚Åø¬∑ n

-1‚Åø¬∑-suc : ‚àÄ n x ‚Üí -1‚Åø¬∑ (suc n) x ‚â° -·µ£ (-1‚Åø¬∑ n x)
-1‚Åø¬∑-suc zero x = refl
-1‚Åø¬∑-suc (suc zero) x = sym (-·µ£Invol x)
-1‚Åø¬∑-suc (suc (suc n)) x = -1‚Åø¬∑-suc n x

-1‚Åø¬∑-¬∑2 : ‚àÄ n x ‚Üí -1‚Åø¬∑ (n ‚Ñï.¬∑ 2) x ‚â° x
-1‚Åø¬∑-¬∑2 zero x = refl
-1‚Åø¬∑-¬∑2 (suc n) x = -1‚Åø¬∑-¬∑2 n x

-1‚Åø-suc : ‚àÄ n ‚Üí rat (-1‚Åø (suc n)) ‚â° -·µ£ (rat (-1‚Åø n))
-1‚Åø-suc zero = sym (-·µ£-rat _)
-1‚Åø-suc (suc zero) = sym (-·µ£-rat _)
-1‚Åø-suc (suc (suc n)) = -1‚Åø-suc n

-1‚Åø¬∑‚â°¬∑ : ‚àÄ n x ‚Üí -1‚Åø¬∑ n x ‚â° rat (-1‚Åø n) ¬∑·µ£ x
-1‚Åø¬∑‚â°¬∑ zero x = sym (¬∑IdL _)
-1‚Åø¬∑‚â°¬∑ (suc zero) x = -·µ£‚â°[-1¬∑·µ£] _
-1‚Åø¬∑‚â°¬∑ (suc (suc n)) x = -1‚Åø¬∑‚â°¬∑ n x

abs·µ£‚àò-1‚Åø¬∑ : ‚àÄ n x ‚Üí abs·µ£ (-1‚Åø¬∑ n x) ‚â° abs·µ£ x  
abs·µ£‚àò-1‚Åø¬∑ zero x = refl
abs·µ£‚àò-1‚Åø¬∑ (suc zero) x = sym (-abs·µ£ _)
abs·µ£‚àò-1‚Åø¬∑ (suc (suc n)) x = abs·µ£‚àò-1‚Åø¬∑ n x


^‚Åø-odd : ‚àÄ n x ‚Üí -·µ£ (x ^‚Åø suc (n ‚Ñï.¬∑ 2)) ‚â° ((-·µ£ x) ^‚Åø suc (n ‚Ñï.¬∑ 2))
^‚Åø-even : ‚àÄ n x ‚Üí (x ^‚Åø (n ‚Ñï.¬∑ 2)) ‚â° ((-·µ£ x) ^‚Åø (n ‚Ñï.¬∑ 2))

^‚Åø-even zero x = refl
^‚Åø-even (suc n) x =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong‚ÇÇ _¬∑·µ£_ (^‚Åø-even n x) (sym (-·µ£¬∑-·µ£ _ _))
   ‚àô‚àô ¬∑·µ£Assoc _ _ _

^‚Åø-odd n x =  sym (¬∑-·µ£ _ _) ‚àô cong‚ÇÇ _¬∑·µ£_ (^‚Åø-even n x) refl

x¬∑x‚â°‚à£x‚à£¬∑‚à£x‚à£ : ‚àÄ x ‚Üí  x ¬∑·µ£ x ‚â° abs·µ£ x ¬∑·µ£ abs·µ£ x
x¬∑x‚â°‚à£x‚à£¬∑‚à£x‚à£ x = cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl ‚àô ‚â°Continuous _ _
  (IsContinuous^‚Åø 2)
  (IsContinuous‚àò _ _ (IsContinuous^‚Åø 2) IsContinuousAbs·µ£)
   (Œª q ‚Üí
    ^‚Åø-‚Ñö^‚Åø 2 q
     ‚àô‚àô cong rat
         (sym (‚Ñö.¬∑Assoc 1 _  _)
        ‚àô‚àô cong‚ÇÇ ‚Ñö._¬∑_ refl
         ( cong‚ÇÇ ‚Ñö._¬∑_ refl (
          (sym (‚Ñö.sign¬∑abs q) ‚àô
            (cong‚ÇÇ ‚Ñö._¬∑_ (‚Ñö.abs‚â°sign¬∑ q) refl))
          ‚àô ‚Ñö.¬∑Comm _ _) 
         ‚àô ‚Ñö.¬∑Assoc _ _ _)
        ‚àô‚àô ‚Ñö.¬∑Assoc 1 _ _)
     ‚àô sym (^‚Åø-‚Ñö^‚Åø 2 _)
     ‚àô‚àô cong (_^‚Åø 2) (cong rat (sym (‚Ñö.abs‚â°sign¬∑ q)) ‚àô sym (abs·µ£-rat q)))
    x
   ‚àô cong‚ÇÇ _¬∑·µ£_ (¬∑IdL _) refl

abs[x^¬≤‚Åø] : ‚àÄ n x ‚Üí x ^‚Åø (n ‚Ñï.¬∑ 2) ‚â° abs·µ£ (x ^‚Åø (n ‚Ñï.¬∑ 2))  
abs[x^¬≤‚Åø] zero x = sym (abs·µ£-rat 1)
abs[x^¬≤‚Åø] (suc n) x = sym (¬∑·µ£Assoc _ _ _) ‚àô
   cong‚ÇÇ _¬∑·µ£_ (abs[x^¬≤‚Åø] n x)
    (x¬∑x‚â°‚à£x‚à£¬∑‚à£x‚à£ x)
 ‚àô ¬∑·µ£Assoc _ _ _  
 ‚àô cong‚ÇÇ _¬∑·µ£_ (sym (¬∑abs·µ£ _ _)) refl
 ‚àô sym (¬∑abs·µ£ _ _)
  


sinSeries cosSeries : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù
sinSeries n x = -1‚Åø¬∑ n (expSeq x (suc (n ‚Ñï.¬∑ 2)))
cosSeries n x = -1‚Åø¬∑ n (expSeq x (n ‚Ñï.¬∑ 2))

seqŒ£‚àò¬∑2 : ‚àÄ s n ‚Üí seqŒ£ s (n ‚Ñï.¬∑ 2) ‚â°
                  seqŒ£ (Œª n ‚Üí s (n ‚Ñï.¬∑ 2) +·µ£ s (suc (n ‚Ñï.¬∑ 2))) n 
seqŒ£‚àò¬∑2 s zero = refl
seqŒ£‚àò¬∑2 s (suc n) =
    sym (+·µ£Assoc _ _ _)
  ‚àô cong‚ÇÇ _+·µ£_ (seqŒ£‚àò¬∑2 _ n) refl


expSeq' : ‚Ñù ‚Üí Seq
expSeq' x n =  (x ^‚Åø n) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (n !) / 1 ] ,
  ‚Ñö.<‚Üí0< ([ pos (n !) / 1 ])
   (‚Ñö.<‚Ñ§‚Üí<‚Ñö 0 _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! n))))


expSeq'‚â°expSeq : ‚àÄ x n ‚Üí expSeq' x n ‚â° expSeq x n
expSeq'‚â°expSeq x zero = cong‚ÇÇ _¬∑·µ£_ refl (cong fst (inv‚Ñù‚Çä1)) ‚àô ¬∑IdR 1
expSeq'‚â°expSeq x (suc n) =
    cong‚ÇÇ _¬∑·µ£_ refl
     (cong (fst ‚àò inv‚Ñù‚Çä)
          (‚Ñù‚Çä‚â° (cong rat (sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ (suc n) (n !)))
          ‚àô rat¬∑·µ£rat _ _))
      ‚àô cong fst (inv‚Ñù‚Çä¬∑ (‚Ñö‚Çä‚Üí‚Ñù‚Çä _)
       (‚Ñö‚Çä‚Üí‚Ñù‚Çä (_ , ‚Ñö.<‚Üí0< ([ pos (n !) / 1 ])
         (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos 0) _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! n))))))
      ‚àô ¬∑·µ£Comm _ _)
  ‚àô cong‚ÇÇ _¬∑·µ£_ refl (cong‚ÇÇ _¬∑·µ£_ refl (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° refl))) 
  ‚àô Lùêë.lem--086
  ‚àô cong‚ÇÇ _¬∑·µ£_ (expSeq'‚â°expSeq x n) refl
  ‚àô ¬∑·µ£Assoc _ _ _ 
  ‚àô sym (/n·µ£-Ôºè·µ£‚Çä _ _)


-- expSeqMon : ‚àÄ n ‚Üí ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí expSeq' x n ‚â§·µ£ expSeq' y n
-- expSeqMon zero x y x‚â§y = ‚â§·µ£-refl _
-- expSeqMon (suc n) x y x‚â§y = {!_^‚Åø_!}

expSeq'NonNeg : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí ‚àÄ n ‚Üí 0 ‚â§·µ£ expSeq' x n
expSeq'NonNeg x 0‚â§x n =
 isTrans‚â°‚â§·µ£ _ _ _
   (rat¬∑·µ£rat 0 0)
   (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
     (0‚â§x^‚Åø x n 0‚â§x) (‚â§·µ£-refl 0)
     (0‚â§x^‚Åø x n 0‚â§x)
      (<·µ£Weaken‚â§·µ£ _ _ $ snd (inv‚Ñù‚Çä
       (‚Ñö‚Çä‚Üí‚Ñù‚Çä
        ([ pos (n !) / 1+ 0 ] ,
         ‚Ñö.<‚Üí0< [ pos (n !) / 1+ 0 ]
         (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos 0) (pos (n !)) (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 1 (n !) (‚Ñï.0<! n))))))))

expSeqNonNeg : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí ‚àÄ n ‚Üí 0 ‚â§·µ£ expSeq x n
expSeqNonNeg x 0‚â§x n = isTrans‚â§‚â°·µ£ _ _ _
  (expSeq'NonNeg x 0‚â§x n) (expSeq'‚â°expSeq _ _)

abs·µ£^‚Åø : ‚àÄ x n ‚Üí abs·µ£ (x ^‚Åø n) ‚â° (abs·µ£ x ^‚Åø n)
abs·µ£^‚Åø x zero = abs·µ£-rat 1
abs·µ£^‚Åø x (suc n) =
  ¬∑abs·µ£ _ _ ‚àô cong‚ÇÇ _¬∑·µ£_ (abs·µ£^‚Åø x n) refl

abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ : ‚àÄ n x ‚Üí
   abs·µ£ (expSeq x n) ‚â° expSeq (abs·µ£ x) n
abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ n x =
     cong abs·µ£ (sym (expSeq'‚â°expSeq _ _))
  ‚àô‚àô ¬∑abs·µ£ _ _
     ‚àô cong‚ÇÇ _¬∑·µ£_
       (abs·µ£^‚Åø x n)
       (abs·µ£Pos _
         (snd (inv‚Ñù‚Çä
                  (‚Ñö‚Çä‚Üí‚Ñù‚Çä
           ([ pos (n !) / 1 ] ,
            ‚Ñö.<‚Üí0< [ pos (n !) / 1 ]
            (‚Ñö.<‚Ñ§‚Üí<‚Ñö 0 (pos (n !))
            (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (suc 0) (n !) (‚Ñï.0<! n))))))))
  ‚àô‚àô expSeq'‚â°expSeq _ _


sinSeq‚â§expSeq-1 : ‚àÄ n x ‚Üí seqŒ£ (flip sinSeries x) n ‚â§·µ£
                             seqŒ£ (expSeq (abs·µ£ x) ‚àò suc) (n ‚Ñï.¬∑ 2)
sinSeq‚â§expSeq-1 n x =
   isTrans‚â§‚â°·µ£ _ _ _
     (Seq'‚â§‚ÜíŒ£‚â§ _ _
      (Œª n ‚Üí
         isTrans‚â§·µ£ _ _ _
         (‚â§abs·µ£ _) (isTrans‚â°‚â§·µ£ _ _ _
           (abs·µ£‚àò-1‚Åø¬∑ _ _ ‚àô sym (+IdR _))
           (‚â§·µ£Monotone+·µ£ _ _ _ _
            (‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ _ _))
            (expSeqNonNeg _ (0‚â§abs·µ£ _) _)))) n)
     (sym (seqŒ£‚àò¬∑2 _ _))


cosSeq‚â§expSeq : ‚àÄ n x ‚Üí seqŒ£ (flip cosSeries x) n ‚â§·µ£
                             seqŒ£ (expSeq (abs·µ£ x)) (n ‚Ñï.¬∑ 2)
cosSeq‚â§expSeq n x =
   isTrans‚â§‚â°·µ£ _ _ _
     (Seq'‚â§‚ÜíŒ£‚â§ _ _
      (Œª n ‚Üí
         isTrans‚â§·µ£ _ _ _
         (‚â§abs·µ£ _) (isTrans‚â°‚â§·µ£ _ _ _
           (abs·µ£‚àò-1‚Åø¬∑ _ _ ‚àô sym (+IdR _))
           (‚â§·µ£Monotone+·µ£ _ _ _ _
            (‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ _ _))
            (expSeqNonNeg _ (0‚â§abs·µ£ _) _)))) n)
     (sym (seqŒ£‚àò¬∑2 _ _))

-cosSeq‚â§expSeq : ‚àÄ n x ‚Üí -·µ£ (seqŒ£ (flip cosSeries x) n) ‚â§·µ£
                             seqŒ£ (expSeq (abs·µ£ x)) (n ‚Ñï.¬∑ 2)
-cosSeq‚â§expSeq n x =
   isTrans‚â°‚â§·µ£ _ _ _
     (-seqŒ£' _ _ )
    (isTrans‚â§‚â°·µ£ _ _ _
     (Seq'‚â§‚ÜíŒ£‚â§ _ _
      (Œª n ‚Üí
         isTrans‚â§·µ£ _ _ _
         (isTrans‚â§‚â°·µ£ _ _ _
           (‚â§abs·µ£ _) (sym (-abs·µ£ _)))
         (isTrans‚â°‚â§·µ£ _ _ _
           (abs·µ£‚àò-1‚Åø¬∑ _ _ ‚àô sym (+IdR _))
           (‚â§·µ£Monotone+·µ£ _ _ _ _
            (‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ _ _))
            (expSeqNonNeg _ (0‚â§abs·µ£ _) _)))) n)
     (sym (seqŒ£‚àò¬∑2 _ _)))

expSeq'der : ‚àÄ n x ‚Üí
           derivativeOf flip expSeq' (suc n) at x is
             expSeq' x n
expSeq'der n x =
  let z = C¬∑Derivative (fst 1/n!) x (_^‚Åø suc n) _ (derivative-^‚Åø n x)
  in substDer‚ÇÇ (Œª x ‚Üí ¬∑·µ£Comm _ (x ^‚Åø suc n))
     (¬∑·µ£Assoc _ _ _  ‚àô ¬∑·µ£Comm _ _ ‚àô
       cong‚ÇÇ _¬∑·µ£_ refl
        (cong‚ÇÇ _¬∑·µ£_ (cong (fst ‚àò inv‚Ñù‚Çä)
           ((‚Ñù‚Çä‚â° (cong rat (sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ (suc n) (n !)))
             ‚àô rat¬∑·µ£rat _ _)))
           ‚àô cong fst (inv‚Ñù‚Çä¬∑ (‚Ñö‚Çä‚Üí‚Ñù‚Çä _)
             ((‚Ñö‚Çä‚Üí‚Ñù‚Çä (_ , ‚Ñö.<‚Üí0< ([ pos (n !) / 1 ])
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos 0) _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! n)))))))
                ‚àô ¬∑·µ£Comm _ _) refl
         ‚àô [x/‚Çäy]¬∑y·µ£ _ _)) z
 where
 1/n! = inv‚Ñù‚Çä $ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (suc n !) / 1 ] ,
  ‚Ñö.<‚Üí0< ([ pos ((suc n) !) / 1 ])
   (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos 0) _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! (suc n)))))

expSerDer : ‚àÄ n x ‚Üí
    derivativeOf (Œª x ‚Üí expSeq x (suc n))
               at x is (expSeq x      n)
expSerDer n x = substDer‚ÇÇ
  (Œª x ‚Üí expSeq'‚â°expSeq x (suc n))
  (expSeq'‚â°expSeq x n)
  (expSeq'der n x)


‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚Çä : ‚àÄ (x : ‚Ñù‚Çä) ‚Üí ‚àÉ[ q ‚àà ‚Ñö‚Çä ] fst x <·µ£ rat (fst q)
‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚Çä x = PT.map
  (Œª (q , x<q , _) ‚Üí
     (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 q (isTrans<·µ£ _ _ _ (snd x) x<q))) , x<q)
   (dense‚Ñöin‚Ñù (fst x) (fst x +·µ£ 1)
     (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR (fst x)))
        (<·µ£-o+ _ _ (fst x) (dec‚Ñö<·µ£? {0} {1}))))

‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚ÇÄ‚Çä : ‚àÄ (x : ‚Ñù‚ÇÄ‚Çä) ‚Üí ‚àÉ[ q ‚àà ‚Ñö‚Çä ] fst x <·µ£ rat (fst q)
‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚ÇÄ‚Çä x = PT.map
  (Œª (q , x<q , _) ‚Üí
     (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 q (isTrans‚â§<·µ£ _ _ _ (snd x) x<q))) , x<q)
   (dense‚Ñöin‚Ñù (fst x) (fst x +·µ£ 1)
     (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR (fst x)))
        (<·µ£-o+ _ _ (fst x) (dec‚Ñö<·µ£? {0} {1}))))

fromCauchySequence'‚ÇÅ-‚â°-lem : ‚àÄ s ics ics' ‚Üí
 fromCauchySequence'‚ÇÅ s ics ‚â° fromCauchySequence'‚ÇÅ s ics'
fromCauchySequence'‚ÇÅ-‚â°-lem s =
  PT.elim2 (Œª _ _ ‚Üí isSet‚Ñù _ _)
   (fromCauchySequence'-‚â°-lem s)

fromCauchySequence'‚ÇÅ-‚â° : ‚àÄ s s' ics ics' ‚Üí
  (‚àÄ n ‚Üí s n ‚â° s' n) ‚Üí
 fromCauchySequence'‚ÇÅ s ics ‚â° fromCauchySequence'‚ÇÅ s' ics'
fromCauchySequence'‚ÇÅ-‚â° s s' ics ics' p = PT.elim2
  (Œª ics ics' ‚Üí isSet‚Ñù
      (fromCauchySequence'‚ÇÅ s ics)
      (fromCauchySequence'‚ÇÅ s' ics'))
  (Œª ics ics' ‚Üí fromCauchySequence'-‚â° s s' ics ics' p)
  ics ics'

open ‚Ñö.HLP

module _ (P : ‚Ñô ‚Ñù) where
 FSeq : Type
 FSeq = ‚Ñï ‚Üí ‚àÄ x ‚Üí x ‚àà P  ‚Üí ‚Ñù


 IsUConvFSeries' : FSeq ‚Üí Type
 IsUConvFSeries' s =
     ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
      Œ£[ N ‚àà ‚Ñï ] ‚àÄ x x‚àà n m ‚Üí
        abs·µ£ (seqŒ£ (flip (flip s x) x‚àà ‚àò (‚Ñï._+ (n ‚Ñï.+ (suc N)))) m) <·µ£ rat (fst Œµ)

 IsUCauchyFSequence : FSeq ‚Üí Type
 IsUCauchyFSequence s =
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ x x‚àà m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
     abs·µ£ ((flip (flip s x) x‚àà n) +·µ£ (-·µ£ (flip (flip s x) x‚àà  m))) <·µ£ rat (fst Œµ))



 isCauchyFSequenceAt : ‚àÄ s ‚Üí IsUCauchyFSequence s ‚Üí
      ‚àÄ x x‚àà ‚Üí IsCauchySequence' (flip (flip s x) x‚àà)
 isCauchyFSequenceAt s icfs x x‚àà Œµ =
   map-snd ((_$ x‚àà)‚àò(_$ x)) (icfs Œµ)


 IsUConvSeries' : FSeq ‚Üí Type
 IsUConvSeries' s =
     ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
      Œ£[ N ‚àà ‚Ñï ] ‚àÄ x x‚àà n m ‚Üí
        abs·µ£ (seqŒ£ ((flip (flip s x) x‚àà)
          ‚àò (‚Ñï._+ (n ‚Ñï.+ (suc N)))) m) <·µ£ rat (fst Œµ)

    
 IsUConvSeries'SubSeq : ‚àÄ s
  ‚Üí (spd : ‚àÄ n ‚Üí Œ£ _ (n ‚Ñï.‚â§_))
  ‚Üí (‚àÄ k ‚Üí (fst (spd k) ‚Ñï.< fst (spd (suc k))))
  ‚Üí (‚àÄ n x x‚àà ‚Üí 0 ‚â§·µ£ s n x x‚àà) 
  ‚Üí IsUConvSeries' s
  ‚Üí IsUConvSeries' (s ‚àò fst ‚àò spd) 
 IsUConvSeries'SubSeq s spd sIncr 0‚â§s =
   (map-snd (Œª {N} X x x‚àà m m' ‚Üí
     let k , p = snd (spd (pred‚Ñï m' ‚Ñï.+ (m ‚Ñï.+ suc N)))
     in isTrans‚â§<·µ£ _ _ _
          (subst2 _‚â§·µ£_
            (sym (abs[seqŒ£]‚â°seqŒ£ _ _
               Œª n ‚Üí 0‚â§s (fst (spd (n ‚Ñï.+ (m ‚Ñï.+ suc N)))) _ _))
            (sym (abs[seqŒ£]‚â°seqŒ£ _ _ Œª n ‚Üí 0‚â§s (n ‚Ñï.+ (m ‚Ñï.+ suc N)) _ _))
            
            ((series-subSeqLemma (Œª n ‚Üí s n x x‚àà)
              (Œª n ‚Üí 0‚â§s n x x‚àà) spd sIncr (m ‚Ñï.+ suc N) m'))
              )
        (X x x‚àà m (m' ‚Ñï.+ k)))) ‚àò_


 IsUConvSeries'-fromConvBound : ‚àÄ fs fs'
    ‚Üí (‚àÄ n x x‚àà ‚Üí abs·µ£ (fs' n x x‚àà) ‚â§·µ£ fs n x x‚àà)
    ‚Üí IsUConvSeries' fs
    ‚Üí IsUConvSeries' fs'
 IsUConvSeries'-fromConvBound fs fs' ‚à£fs'‚à£<fs =
   map-snd (Œª X x x‚àà n m ‚Üí
     isTrans‚â§<·µ£ _ _ _
      (isTrans‚â§·µ£ _ _ _
        (abs[seqŒ£]‚â§seqŒ£[abs] _ _)
        (isTrans‚â§‚â°·µ£ _ _ _
          (Seq'‚â§‚ÜíŒ£‚â§ _ _ (Œª n' ‚Üí ‚à£fs'‚à£<fs (n' ‚Ñï.+ (n ‚Ñï.+ suc _)) x x‚àà) _)
          (sym (abs[seqŒ£]‚â°seqŒ£ _ _
           Œª n ‚Üí isTrans‚â§·µ£ _ _ _ (0‚â§abs·µ£ _)
            (‚à£fs'‚à£<fs _ _ _)))))
      (X x x‚àà n m))
    ‚àò_
 
 IsUContFSequence : FSeq ‚Üí Type
 IsUContFSequence s = ‚àÄ n ‚Üí IsUContinuous‚Ñô _ (s n)

 IsUContFSequenceŒ£Seq : ‚àÄ s ‚Üí IsUContFSequence s ‚Üí
             IsUContFSequence Œª n x x‚àà ‚Üí seqŒ£ (flip (flip s x) x‚àà ) n
 IsUContFSequenceŒ£Seq s x zero =
  restrIsUContinuous‚Ñô _ _ (IsUContinuousConst _)
 IsUContFSequenceŒ£Seq s x (suc n) =
   IsUContinuous‚Ñô+·µ£‚ÇÇ P _ _
    (IsUContFSequenceŒ£Seq s x n) (x n)



 opaque
  fromUCauchyFSequence : ‚àÄ s
        ‚Üí IsUCauchyFSequence s
        ‚Üí IsUContFSequence s
        ‚Üí Œ£[ f ‚àà (‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù) ] (IsUContinuous‚Ñô P f)
  fromUCauchyFSequence s icfs iucs = f , icf

   where
   f : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù
   f x x‚àà = fromCauchySequence' (Œª z ‚Üí s z x x‚àà) (isCauchyFSequenceAt s icfs x x‚àà)

   icf : IsUContinuous‚Ñô P f
   icf Œµ =
     let N , X = h (/2‚Çä (/2‚Çä Œµ))
         (Œ¥ , Y) = iucs (suc N) (/2‚Çä Œµ)
         
     in Œ¥ , Œª u v u‚àà v‚àà u‚àºv ‚Üí
          subst‚àº
            (cong‚ÇÇ ‚Ñö._+_ refl (‚Ñö.+Comm _ _) ‚àô ‚Ñö.+Assoc _ _ _ ‚àô
              cong‚ÇÇ ‚Ñö._+_ (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ))) refl
               ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
            (triangle‚àº (sym‚àº _ _ _ (X u u‚àà (suc N) ‚Ñï.‚â§-refl))
            (triangle‚àº (Y u v u‚àà v‚àà u‚àºv) (X v v‚àà (suc N) ‚Ñï.‚â§-refl)))
    where

     h : ‚àÄ Œµ ‚Üí Œ£[ N ‚àà ‚Ñï ]
            (‚àÄ x x‚àà n ‚Üí N ‚Ñï.< n ‚Üí
              s n x x‚àà ‚àº[ Œµ ] f x x‚àà)
     h Œµ =
      let (N' , X') = icfs (/2‚Çä (/2‚Çä Œµ))
      in N' , Œª x x‚àà n N<n ‚Üí
            
         let u = (ùï£-lim-self _
                (fromCauchySequence'-isCA _
                  (isCauchyFSequenceAt s icfs x x‚àà))
                  (/2‚Çä (/2‚Çä Œµ)) (/2‚Çä Œµ))
            
         in subst‚àº (‚Ñö.+Assoc _ _ _ ‚àô
               cong‚ÇÇ ‚Ñö._+_ (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ))) refl
               ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
              (triangle‚àº (invEq (‚àº‚âÉabs<Œµ _ _ (/2‚Çä (/2‚Çä Œµ)))
                    ((X'  x x‚àà _ _  N<n (‚Ñï.‚â§-refl {suc N'})) )) u)

  fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence : ‚àÄ (fs : ‚Ñï ‚Üí ‚àÄ x ‚Üí x ‚àà P  ‚Üí ‚Ñù) x x‚àà ‚Üí
     ‚àÄ fucs‚Çô fc‚Çô fcs  ‚Üí   
     fromCauchySequence'‚ÇÅ (flip (flip fs x ) x‚àà) fcs ‚â°
      fst (fromUCauchyFSequence fs fucs‚Çô fc‚Çô) x x‚àà
  fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence fs x x‚àà fucs‚Çô fc‚Çô = 
   PT.elim (Œª _ ‚Üí isSet‚Ñù _ _)
    Œª fcs ‚Üí fromCauchySequence'-‚â°-lem _ _ _


  IsUCauchyFSequence-lim :
    ‚àÄ s ‚Üí ‚àÄ iufs iucs ‚Üí 
        ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ]
    (‚àÄ x x‚àà n ‚Üí N ‚Ñï.< n ‚Üí 
      abs·µ£ ((s n x x‚àà) -·µ£ (fst (fromUCauchyFSequence s iufs iucs) x x‚àà))
        <·µ£ (rat (fst Œµ)))

  IsUCauchyFSequence-lim s iufs iucs Œµ =
     let (N , X) = iufs (/4‚Çä Œµ)
     in N , Œª x x‚àà n N<n ‚Üí
       let u = (ùï£-lim-self _ (fromCauchySequence'-isCA (Œª n ‚Üí s n x x‚àà)
                  (isCauchyFSequenceAt s iufs x x‚àà)) (/4‚Çä Œµ) (/4‚Çä Œµ))
           u' = fst (‚àº‚âÉabs<Œµ _ _ _)
                (triangle‚àº (invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ))
                  ((X  _ _  (suc N) n N<n (‚Ñï.‚â§-refl {suc N})) )) u)
       in isTrans<·µ£ _ _ _ u'
                (<‚Ñö‚Üí<·µ£ _ _
                  dist‚Ñö<! Œµ [ ge[ ‚Ñö.[ 1 / 4 ] ]
                                +ge  (ge[ ‚Ñö.[ 1 / 4 ] ]
                                +ge ge[ ‚Ñö.[ 1 / 4 ] ]) < ge1 ])
       
  opaque
   unfolding _+·µ£_
   fromUCauchyFSequence-+ : ‚àÄ s uca uc s' uca' uc' uca+ uc+
      ‚Üí ‚àÄ x x‚àà ‚Üí
        fst (fromUCauchyFSequence s uca uc) x x‚àà
          +·µ£ fst (fromUCauchyFSequence s' uca' uc') x x‚àà ‚â°
            fst (fromUCauchyFSequence
              (Œª n x x‚àà ‚Üí s n x x‚àà +·µ£ s' n x x‚àà )
              uca+
              uc+)
              x x‚àà
   fromUCauchyFSequence-+ s uca uc s' uca' uc' uca+ uc+ x x‚àà =
     snd (mapNE-fromCauchySequence' sumR _ _ _ _)
      ‚àô fromCauchySequence'-‚â°-lem _ _ _


  IsoIsUConvSeries'IsCauchy'SequenceSum : (s : FSeq) ‚Üí
    Iso (IsUConvSeries' s)
        (IsUCauchyFSequence
           Œª n x x‚àà ‚Üí seqŒ£ (flip (flip s x) x‚àà) n)
  IsoIsUConvSeries'IsCauchy'SequenceSum fs =
     codomainIsoDep Œª Œµ ‚Üí
       Œ£-cong-iso-snd Œª N ‚Üí
         isProp‚ÜíIso (isPropŒ†4 Œª _ _ _ _ ‚Üí isProp<·µ£ _ _)
         (isPropŒ†6 Œª _ _ _ _ _ _ ‚Üí isProp<·µ£ _ _)

         (Œª f x x‚àà ‚Üí let s = (flip (flip fs x) x‚àà) in
            ‚Ñï.elimBy‚â§
           (Œª n n' X <n <n' ‚Üí subst (_<·µ£ rat (fst Œµ))
             (minusComm-abs·µ£ _ _) (X <n' <n))
           Œª n n' n‚â§n' N<n' N<n ‚Üí
              subst ((_<·µ£ rat (fst Œµ)) ‚àò abs·µ£)
                 (cong (Œª x ‚Üí seqŒ£ (s ‚àò (‚Ñï._+ x)) (n' ‚à∏ n))
                    (‚Ñï.[n-m]+m (suc N) n N<n)
                   ‚àô‚àô sym (seriesDiff s n (n' ‚à∏ n)) ‚àô‚àô
                   cong (_+·µ£ (-·µ£ seqŒ£ s n))
                     (cong (seqŒ£ s)
                       (‚Ñï.[n-m]+m n n' n‚â§n')))
                 (f x x‚àà (n ‚à∏ (suc N)) (n' ‚à∏ n)))

         Œª f x x‚àà n m ‚Üí let s = (flip (flip fs x) x‚àà) in
           subst ((_<·µ£ rat (fst Œµ)) ‚àò abs·µ£)
             (seriesDiff s (n ‚Ñï.+ suc N) m)
               (f x x‚àà (n ‚Ñï.+ (suc N)) (m ‚Ñï.+ (n ‚Ñï.+ suc N))
               (subst (N ‚Ñï.<_) (sym (‚Ñï.+-assoc _ _ _))
                 (‚Ñï.‚â§SumRight {suc N} {m ‚Ñï.+ n}))
               (‚Ñï.‚â§SumRight {suc N} {n}))

 isUCauchyFSequence-·µ£ : ‚àÄ s ‚Üí IsUCauchyFSequence s
                            ‚Üí IsUCauchyFSequence (Œª n x x‚àà ‚Üí -·µ£ (s n x x‚àà))
 isUCauchyFSequence-·µ£ s =
    map-snd (Œª X _ _ _ _ n< m<
      ‚Üí isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (sym (-·µ£Distr _ _))
        ‚àô sym (-abs·µ£ _))
        (X _ _ _ _ n< m<)) ‚àò_

 isUCauchyFSequence+·µ£ : ‚àÄ s s'
    ‚Üí IsUCauchyFSequence s
    ‚Üí IsUCauchyFSequence s'
    ‚Üí IsUCauchyFSequence (Œª n x x‚àà ‚Üí (s n x x‚àà) +·µ£ (s' n x x‚àà))
 isUCauchyFSequence+·µ£ s s' iucs iucs' Œµ =
   let (N  , X) = iucs (/2‚Çä Œµ)
       (N' , X') = iucs' (/2‚Çä Œµ)
       N‚äîN' = ‚Ñï.max N N'
   in N‚äîN' , Œª x x‚àà m n <n <m ‚Üí
     isTrans‚â°<·µ£ _ _ _
      (cong abs·µ£ (Lùêë.lem--041))
      (isTrans‚â§<·µ£ _ _ _
       (abs·µ£-triangle _ _)
       (isTrans<‚â°·µ£ _ _ _
         (<·µ£Monotone+·µ£ _ _ _ _          
          (X _ _ _ _ (‚Ñï.‚â§<-trans (‚Ñï.left-‚â§-max {N} {N'}) <n)
           (‚Ñï.‚â§<-trans (‚Ñï.left-‚â§-max {N} {N'}) <m))
          (X' _ _ _ _
            (‚Ñï.‚â§<-trans (‚Ñï.right-‚â§-max {N'} {N}) <n)
            (‚Ñï.‚â§<-trans (‚Ñï.right-‚â§-max {N'} {N}) <m)))
         (+·µ£-rat _ _ ‚àô
          cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))))) 




x‚ààinterval-bound : ‚àÄ a b ‚Üí ‚àÄ x (x‚àà : x ‚àà interval‚Ñô a b) ‚Üí
                   abs·µ£ x ‚â§·µ£ max·µ£ (abs·µ£ a) (abs·µ£ b)
x‚ààinterval-bound a b x (a‚â§x , x‚â§b) =
   isTrans‚â°‚â§·µ£ _ _ _ (abs-max x)
     (max‚â§-lem _ _ _
       ((isTrans‚â§·µ£ _ _ _
         x‚â§b
         (isTrans‚â§·µ£ _ _ _
           (‚â§abs·µ£ _) (isTrans‚â§‚â°·µ£ _ _ _ (‚â§max·µ£ _ _) (max·µ£Comm _ _)))))
       (isTrans‚â§·µ£ _ _ _
         (-·µ£‚â§·µ£  _ _ a‚â§x)
         (isTrans‚â§·µ£ _ _ _
           (‚â§abs·µ£ _) (isTrans‚â°‚â§·µ£ _ _ _ (sym (-abs·µ£ _)) (‚â§max·µ£ _ _)))))


bounded-id : ‚àÄ a b ‚Üí 
             Bounded (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí x)
bounded-id a b = 
 (‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b) ‚Ñö.+ 1 ,
           ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _
             ((isTrans‚â°<·µ£ _ _ _
         (sym (+IdR 0))
         (isTrans<‚â°·µ£ _ _ _
           (‚â§<·µ£Monotone+·µ£ _ _ _ _
          (isTrans‚â§·µ£ _ _ _ (0‚â§abs·µ£ (rat a)) (‚â§max·µ£ _ _ ))
          (dec‚Ñö<·µ£? {0} {1}))
          (cong‚ÇÇ _+·µ£_ (cong‚ÇÇ max·µ£ (abs·µ£-rat a)
            ((abs·µ£-rat b))) refl  ‚àô +·µ£-rat _ _)))))) ,
   Œª x x‚àà ‚Üí isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _
     (x‚ààinterval-bound (rat a) (rat b) x x‚àà)
     (isTrans‚â°‚â§·µ£ _ _ _
         (sym (+IdR _))
         (‚â§·µ£-o+ _ _ _ (dec‚Ñö‚â§·µ£? {0} {1}))))
          (cong‚ÇÇ _+·µ£_ (cong‚ÇÇ max·µ£ (abs·µ£-rat _) (abs·µ£-rat _)) refl
           ‚àô  (+·µ£-rat _ _) )

bounded-+ : ‚àÄ P f g
           ‚Üí Bounded P f
           ‚Üí Bounded P g
           ‚Üí Bounded P (Œª x x‚àà ‚Üí f x x‚àà +·µ£ g x x‚àà)
bounded-+ P f g (bf , <bf) (bg , <bg) =
  (bf ‚Ñö‚Çä+ bg) , Œª x x‚àà ‚Üí 
     isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _
      (abs·µ£-triangle _ _)
      (‚â§·µ£Monotone+·µ£ _ _ _ _ (<bf x x‚àà) (<bg x x‚àà)))
      (+·µ£-rat _ _)

bounded-·µ£ : ‚àÄ P f g
           ‚Üí Bounded P f
           ‚Üí Bounded P g
           ‚Üí Bounded P (Œª x x‚àà ‚Üí f x x‚àà -·µ£ g x x‚àà)
bounded-·µ£ P f g (bf , <bf) (bg , <bg) =
  (bf ‚Ñö‚Çä+ bg) , Œª x x‚àà ‚Üí 
     isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _
      (isTrans‚â§‚â°·µ£ _ _ _ (abs·µ£-triangle _ _)
        (cong‚ÇÇ _+·µ£_ refl (sym (-abs·µ£ _))))
      (‚â§·µ£Monotone+·µ£ _ _ _ _ (<bf x x‚àà) (<bg x x‚àà)))
      (+·µ£-rat _ _)

-·µ£bounded : ‚àÄ P f
           ‚Üí Bounded P f
           ‚Üí Bounded P Œª x x‚àà ‚Üí -·µ£ (f x x‚àà)
-·µ£bounded P f (bf , <bf) =
  bf , Œª x x‚àà ‚Üí isTrans‚â°‚â§·µ£ _ _ _ (sym (-abs·µ£ _)) (<bf x x‚àà)

bounded-¬∑ : ‚àÄ P f g
           ‚Üí Bounded P f
           ‚Üí Bounded P g
           ‚Üí Bounded P (Œª x x‚àà ‚Üí f x x‚àà ¬∑·µ£ g x x‚àà)
bounded-¬∑ P f g (bf , <bf) (bg , <bg) =
  (bf ‚Ñö‚Çä¬∑ bg) , (Œª x x‚àà ‚Üí
    isTrans‚â°‚â§·µ£ _ _ _
      (¬∑abs·µ£ _ _)
      (isTrans‚â§‚â°·µ£ _ _ _
       (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§‚Ñö‚Çä bf)) (0‚â§abs·µ£ _)
         (<bf x x‚àà) (<bg x x‚àà))
       (sym (rat¬∑·µ£rat _ _))))

bounded-^‚Åø : ‚àÄ a b ‚Üí rat a ‚â§·µ£ rat b ‚Üí ‚àÄ n ‚Üí
             Bounded (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí (x ^‚Åø n))
bounded-^‚Åø a b a‚â§b zero = 1 ,
 Œª _ _ ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£Pos _ (dec‚Ñö<·µ£? {0} {1}))
bounded-^‚Åø a b a‚â§b (suc n) =
  bounded-¬∑ (interval‚Ñô (rat a) (rat b)) _ _
    (bounded-^‚Åø a b a‚â§b n) (bounded-id a b)





IsUContinuous‚Ñô^‚Åø : ‚àÄ a b ‚Üí rat a ‚â§·µ£ rat b ‚Üí ‚àÄ n ‚Üí
  IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b))
  (Œª x _ ‚Üí x ^‚Åø n)
IsUContinuous‚Ñô^‚Åø a b _ zero = restrIsUContinuous‚Ñô _ _ (IsUContinuousConst _)
IsUContinuous‚Ñô^‚Åø a b a‚â§b (suc n) =
  IsUContinuous‚Ñô¬∑·µ£‚ÇÇ (interval‚Ñô (rat a) (rat b)) _ _
    (bounded-^‚Åø a b a‚â§b n)
    (bounded-id a b)
    (IsUContinuous‚Ñô^‚Åø a b a‚â§b n)
    (restrIsUContinuous‚Ñô _ _ IsUContinuousId)

uConvExpSer : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí
  ‚à• IsUConvSeries' (interval‚Ñô a b) (Œª n x _ ‚Üí expSeq x n) ‚à•‚ÇÅ
uConvExpSer a b a<b = do
  (b' , b<b') ‚Üê ‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚ÇÄ‚Çä ((max·µ£ (abs·µ£ a) (abs·µ£ b)) ,
     isTrans‚â§·µ£ _ _ _ (0‚â§abs·µ£ _) (‚â§max·µ£ _ _))
  return
     ((Œª {u} ‚Üí map-snd Œª X x x‚àà ‚Üí
           (exp‚Ñù-convSeriesF x _ (isTrans‚â§<·µ£ _ _ _
              (x‚ààinterval-bound a b x x‚àà) b<b')
             u _ X))
       ‚àò expSeriesConvergesAt‚Ñö‚Çä (fst b') (‚Ñö.0<‚Ñö‚Çä b'))

uConvExpSer<‚Ñö : ‚àÄ a b ‚Üí 
  IsUConvSeries' (interval‚Ñô (rat a) (rat b)) (Œª n x _ ‚Üí expSeq x n) 
uConvExpSer<‚Ñö a b =
 let b' : ‚Ñö‚Çä
     b' = ‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b) ‚Ñö.+ 1 ,
           ‚Ñö.<‚Üí0< _
            ((‚Ñö.‚â§<Monotone+ 0 _ 0 _
             (‚Ñö.‚â§MonotoneMax
              0 _ 0 _
              (‚Ñö.0‚â§abs a) (‚Ñö.0‚â§abs b))
             (‚Ñö.dec‚Ñö<? {0} {1})))
     b<b' : ‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b) ‚Ñö.< fst b'
     b<b' = ‚Ñö.<+‚Ñö‚Çä' _ _ 1 (‚Ñö.isRefl‚â§ _)
  in (Œª {u} ‚Üí map-snd Œª X x x‚àà ‚Üí
           (exp‚Ñù-convSeriesF x _ 
             (isTrans‚â§<·µ£ _ _ _
              (x‚ààinterval-bound (rat a) (rat b) x x‚àà)
               (isTrans‚â°<·µ£ _ _ _ (cong‚ÇÇ max·µ£
                 (abs·µ£-rat _) (abs·µ£-rat _))
                (<‚Ñö‚Üí<·µ£ _ _ b<b')))
             u _ X))
       ‚àò expSeriesConvergesAt‚Ñö‚Çä (fst b') (‚Ñö.0<‚Ñö‚Çä b')

uConvExpSer<‚Ñö-abs·µ£ : ‚àÄ a b 
  ‚Üí IsUConvSeries' (interval‚Ñô (rat a) (rat b))
      (Œª n x _ ‚Üí expSeq (abs·µ£ x) n)
uConvExpSer<‚Ñö-abs·µ£ a b =
 let b' : ‚Ñö‚Çä
     b' = ‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b) ‚Ñö.+ 1 ,
           ‚Ñö.<‚Üí0< _
            ((‚Ñö.‚â§<Monotone+ 0 _ 0 _
             (‚Ñö.‚â§MonotoneMax
              0 _ 0 _
              (‚Ñö.0‚â§abs a) (‚Ñö.0‚â§abs b))
             (‚Ñö.dec‚Ñö<? {0} {1})))
     b<b' : ‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b) ‚Ñö.< fst b'
     b<b' = ‚Ñö.<+‚Ñö‚Çä' _ _ 1 (‚Ñö.isRefl‚â§ _)
  in (Œª {u} ‚Üí map-snd Œª X x x‚àà ‚Üí
           (exp‚Ñù-convSeriesF (abs·µ£ x) _ 
             (isTrans‚â§<·µ£ _ _ _
              (isTrans‚â°‚â§·µ£ _ _ _
              (abs·µ£Idemp x)
              (x‚ààinterval-bound (rat a) (rat b) x x‚àà))
               (isTrans‚â°<·µ£ _ _ _ (cong‚ÇÇ max·µ£
                 (abs·µ£-rat _) (abs·µ£-rat _))
                (<‚Ñö‚Üí<·µ£ _ _ b<b')))
             u _ X))
       ‚àò expSeriesConvergesAt‚Ñö‚Çä (fst b') (‚Ñö.0<‚Ñö‚Çä b')

IsUCauchyFSequence-‚àò+ : ‚àÄ P fs m
  ‚Üí IsUCauchyFSequence P fs
  ‚Üí IsUCauchyFSequence P (fs ‚àò (m ‚Ñï.+_))
IsUCauchyFSequence-‚àò+ P fs k X =
  map-snd (Œª X x x‚àà n m <m <n ‚Üí
    X x x‚àà _ _
     (‚Ñï.‚â§-+-< ‚Ñï.zero-‚â§ <m)
     (‚Ñï.‚â§-+-< ‚Ñï.zero-‚â§ <n)) ‚àò X

IsUContFSequence-‚àò+ : ‚àÄ P fs m
  ‚Üí IsUContFSequence P fs
  ‚Üí IsUContFSequence P (fs ‚àò (m ‚Ñï.+_))
IsUContFSequence-‚àò+ P fs k = _‚àò (k ‚Ñï.+_)
  

IsUCauchyFSequenceExp : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí 
               ‚à• (IsUCauchyFSequence (interval‚Ñô a b)
                      Œª n x _ ‚Üí seqŒ£ (expSeq x) n) ‚à•‚ÇÅ
IsUCauchyFSequenceExp a b a<b =
 PT.map (Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô a b) (Œª n x _ ‚Üí expSeq x n))) (uConvExpSer a b a<b )


uCauchy‚à´ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí
              (f‚Çô F‚Çô : ‚Ñï ‚Üí ‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí ‚Ñù)  
            ‚Üí (‚àÄ n x x‚àà ‚Üí
                on[ a , x ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f‚Çô n x (‚â§x ,
                  isTrans‚â§·µ£ _ _ _ x‚â§ (snd x‚àà)))
                  is (F‚Çô n) x x‚àà)
            ‚Üí (icf : IsUCauchyFSequence (interval‚Ñô a b) f‚Çô)
            ‚Üí ‚àÄ ucf 
            ‚Üí ‚àÄ iucF ucF ‚Üí ‚àÄ x x‚àà
            ‚Üí on[ a , x ]IntegralOf
                    (Œª x ‚â§x x‚â§ ‚Üí
                       fst (fromUCauchyFSequence _ _ icf ucf) x
                        (‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§ (snd x‚àà)))
                   is
                 (fst (fromUCauchyFSequence (interval‚Ñô a b) F‚Çô iucF ucF) x x‚àà)
                 
uCauchy‚à´ a b a‚â§b f‚Çô F‚Çô f‚Çô‚â°‚à´F‚Çô icf ucf iucF uF x x‚àà Œµ = do
  (Œ∑‚Çä , b-a<Œ∑‚Çä) ‚Üê ‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚ÇÄ‚Çä ((b -·µ£ a) , x‚â§y‚Üí0‚â§y-x _ _ a‚â§b)
  let Nf , Xf = IsUCauchyFSequence-lim (interval‚Ñô a b)
              f‚Çô icf ucf 
        ((/2‚Çä (/2‚Çä Œµ)) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ∑‚Çä)
      NF , XF = IsUCauchyFSequence-lim (interval‚Ñô a b) _
                 iucF uF (/2‚Çä (/2‚Çä Œµ))
      Nf‚äîNF = ‚Ñï.max Nf NF
  (Œ¥ , XŒ¥) ‚Üê f‚Çô‚â°‚à´F‚Çô (suc Nf‚äîNF) x x‚àà (/2‚Çä Œµ)
  return
    (Œ¥ , Œª tp msh‚â§ ‚Üí
          fst (‚àº‚âÉabs<Œµ _ _ Œµ)
              (subst‚àº (‚Ñö.+Comm _ _ ‚àô  (‚Ñö.+Assoc _ _ _)
                ‚àô cong‚ÇÇ ‚Ñö._+_ (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ))) refl
                 ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
                (triangle‚àº
                  (triangle‚àº {Œµ = (/2‚Çä (/2‚Çä Œµ))}
                     (sym‚àº _ _ _ $ invEq (‚àº‚âÉabs<Œµ _ _ (/2‚Çä (/2‚Çä Œµ)))
                        (isTrans‚â°<·µ£ _ _ _
                          (cong abs·µ£ (riemannSum- (snd tp) _ _
                           ‚àô riemannSum-clamp (snd tp) _))
                          (isTrans‚â§<·µ£ _ _ _
                            (isTrans‚â§·µ£ _ _ _
                             (riemannSum'-abs·µ£‚â§ (snd tp) _)
                             (riemannSum'‚â§ (snd tp) _ _
                               Œª r ‚â§x x‚â§ ‚Üí
                                <·µ£Weaken‚â§·µ£ _ _
                                  (Xf _ _ (suc Nf‚äîNF)
                                  (‚Ñï.left-‚â§-max {suc Nf} {suc NF}))))
                            (isTrans‚â°<·µ£ _ _ _
                              (riemannSum'Const (snd tp) _
                               ‚àô cong‚ÇÇ _¬∑·µ£_ (rat¬∑·µ£rat _ _) refl
                               ‚àô sym (¬∑·µ£Assoc _ _ _)
                               ‚àô cong‚ÇÇ _¬∑·µ£_ refl (¬∑·µ£Comm _ _))
                              (isTrans<‚â°·µ£ _ _ _
                                 (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä (/2‚Çä Œµ)))
                                  (isTrans‚â°<·µ£ _ _ _
                                    (cong‚ÇÇ _¬∑·µ£_ refl (sym (inv‚Ñù‚Çä-rat Œ∑‚Çä)))
                                    (invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _)
                                     (isTrans<‚â°·µ£ _ _ _
                                       (isTrans‚â§<·µ£ _ _ _
                                         (‚â§·µ£-+o _ _ (-·µ£ a) (snd x‚àà)) b-a<Œ∑‚Çä)
                                       (sym (¬∑IdR _))))))
                                 (¬∑IdR _))))))
                    (invEq (‚àº‚âÉabs<Œµ _ _ (/2‚Çä Œµ)) (XŒ¥ tp msh‚â§)))
                  (invEq (‚àº‚âÉabs<Œµ _ _ (/2‚Çä (/2‚Çä Œµ))) (XF x x‚àà (suc Nf‚äîNF)
                    (‚Ñï.right-‚â§-max {suc NF} {suc Nf}))))))

Integral-additive : ‚àÄ a b c a‚â§b b‚â§c ‚Üí ‚àÄ f s s' s+s' ‚Üí
  on[ a , b ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f x ‚â§x (isTrans‚â§·µ£ _ _ _ x‚â§ b‚â§c)) is s ‚Üí
  on[ b , c ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f x (isTrans‚â§·µ£ _ _ _ a‚â§b ‚â§x ) x‚â§) is s' ‚Üí
  on[ a , c ]IntegralOf f is s+s' ‚Üí
  s +·µ£ s' ‚â° s+s'
Integral-additive a b c a‚â§b b‚â§c f s s' s+s' ‚à´ab ‚à´bc ‚à´ac =
  Integral'-additive a b c a‚â§b b‚â§c
   (Œª x ‚Üí f (clamp·µ£ a c x)
     (‚â§clamp·µ£ a c x (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§c))
     (clamp‚â§·µ£ a c x))
   s s' s+s'
     (Integral'‚â° _ _ a‚â§b  _ _ 
         s (Œª x x‚àà@(‚â§x , x‚â§) ‚Üí
              cong (uncurry (uncurry ‚àò f))
         (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a c))
           (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a b x x‚àà) ‚àô
             ‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a c x
               (‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§ b‚â§c))))
         (invEq (clamp·µ£-IntegralOf' a b a‚â§b _ s) ‚à´ab))
        (Integral'‚â° _ _ b‚â§c  _ _ 
         s' (Œª x x‚àà@(‚â§x , x‚â§) ‚Üí
              cong (uncurry (uncurry ‚àò f))
         (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a c))
           ((sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  b c x x‚àà) ‚àô
             ‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â°  a c x
               (isTrans‚â§·µ£ _ _ _ a‚â§b ‚â§x , x‚â§ )))))
          (invEq (clamp·µ£-IntegralOf' b c b‚â§c _ s') ‚à´bc))
    (invEq (clamp·µ£-IntegralOf' a c (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§c)
     (uncurry ‚àò f) s+s') ‚à´ac)

FTOC‚áê'' : ‚àÄ a b (a<b : a <·µ£ b) (f F : ‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí ‚Ñù)
          ‚Üí (ucf : IsUContinuous‚Ñô (interval‚Ñô a b) f)
          ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) , F is f
          ‚Üí ‚àÄ x x‚àà
          ‚Üí on[ a , x ]IntegralOf
              (Œª x‚ÇÅ ‚â§x x‚â§ ‚Üí f x‚ÇÅ (‚â§x , isTrans‚â§·µ£ x‚ÇÅ x b x‚â§ (snd x‚àà))) is
              (F x x‚àà -·µ£ F a (‚â§·µ£-refl a , <·µ£Weaken‚â§·µ£ _ _ a<b ))
FTOC‚áê'' a b a<b f F ucf fd x x‚àà =
  PT.rec (isPropŒ† Œª _ ‚Üí squash‚ÇÅ)
    (‚äé.rec
     (Œª x<b ‚Üí
       let zz = FTOC‚áê x b x<b 
                (Œª x‚ÇÅ (‚â§x , x‚â§)
                  ‚Üí f x‚ÇÅ (isTrans‚â§·µ£ _ _ _  (fst x‚àà) ‚â§x , x‚â§))
                (Œª x‚ÇÅ (‚â§x , x‚â§)
                  ‚Üí F x‚ÇÅ (isTrans‚â§·µ£ _ _ _  (fst x‚àà) ‚â§x , x‚â§))
                  (IsUContinuous‚Ñô-restr _ _ _
                    (Œª x (‚â§x , x‚â§) ‚Üí isTrans‚â§·µ£ _ _ _  (fst x‚àà) ‚â§x , x‚â§) ucf)
                   (uDerivativeOf‚Ñô-restr _ _ _ _
                    (Œª x (‚â§x , x‚â§) ‚Üí isTrans‚â§·µ£ _ _ _  (fst x‚àà) ‚â§x , x‚â§) fd)
           zzzW = (snd (Integrate-UContinuous‚Ñô a x (fst x‚àà) _
                           ((IsUContinuous‚Ñô-restr _ _ _
                        (Œª x (‚â§x , x‚â§) ‚Üí
                         ‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§ (snd x‚àà)) ucf))))
           zzz = Integral-additive a x b (fst x‚àà) (snd x‚àà)
                        _ _ _ _
                        zzzW
                        zz
                        (FTOC‚áê a b a<b _ _ ucf fd)
       in subst (on[ a , x ]IntegralOf
              (Œª x‚ÇÅ ‚â§x x‚â§ ‚Üí f x‚ÇÅ (‚â§x , isTrans‚â§·µ£ x‚ÇÅ x b x‚â§ (snd x‚àà))) is_)
               (sym (ùêë'.plusMinus _ _)
                ‚àô‚àô cong‚ÇÇ _-·µ£_ zzz
                   (cong‚ÇÇ _-·µ£_
                     ((cong (uncurry F)
                        (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                         refl)))
                     ((cong (uncurry F)
                        (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                         refl))))
                ‚àô‚àô Lùêë.lem--062)
               zzzW)
      Œª a<x ‚Üí
       subst (on[ a , x ]IntegralOf _ is_)
        (cong‚ÇÇ _-·µ£_
         (cong (uncurry F)
                (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                 refl))
        (cong (uncurry F)
                (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b))
                 refl)))
        (FTOC‚áê a x a<x 
         (Œª x‚ÇÅ (‚â§x , x‚â§)
           ‚Üí f x‚ÇÅ (‚â§x , isTrans‚â§·µ£ x‚ÇÅ x b x‚â§ (snd x‚àà)))
         (Œª x‚ÇÅ (‚â§x , x‚â§)
           ‚Üí F x‚ÇÅ (‚â§x , isTrans‚â§·µ£ x‚ÇÅ x b x‚â§ (snd x‚àà)))
           (IsUContinuous‚Ñô-restr _ _ _
             (Œª x (‚â§x , x‚â§) ‚Üí ‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§ (snd x‚àà)) ucf)
            (uDerivativeOf‚Ñô-restr _ _ _ _
             (Œª x (‚â§x , x‚â§) ‚Üí ‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§ (snd x‚àà)) fd)))
    (Dichotomy‚Ñù' a x b a<b)


ointerval‚Ñô‚äÜinterval‚Ñô : ‚àÄ a b ‚Üí ointerval‚Ñô a b ‚äÜ interval‚Ñô a b
ointerval‚Ñô‚äÜinterval‚Ñô a b x z =
 <·µ£Weaken‚â§·µ£ a x (z .fst) , <·µ£Weaken‚â§·µ£ x b (z .snd)

uCauchyDer : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí ‚àÄ f‚Çô F‚Çô ‚Üí 
             ‚àÄ (icf : IsUCauchyFSequence (interval‚Ñô a b) f‚Çô)
               
             uf uF
             (icF : IsUCauchyFSequence (interval‚Ñô a b) F‚Çô)
             ‚Üí (‚àÄ n ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) , F‚Çô n is f‚Çô n)
             ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) ,
                  (fst (fromUCauchyFSequence _ _ icF uF))
                  is
                  (fst (fromUCauchyFSequence _ _ icf uf))
uCauchyDer a b a<b f‚Çô F‚Çô  icf uf uF icF F‚Çô'=f‚Çô = 
   uDerivative‚Ñô-cancelConst
   _ _ _ _ uzu2
 where
 a‚â§b = <·µ£Weaken‚â§·µ£ a b a<b
 F-F-ucfs : IsUContFSequence (interval‚Ñô a b)
      (Œª n x‚ÇÅ x‚àà‚ÇÅ ‚Üí F‚Çô n x‚ÇÅ x‚àà‚ÇÅ -·µ£ F‚Çô n a (‚â§·µ£-refl a , a‚â§b))
 F-F-ucfs n = IsUContinuous‚Ñô+·µ£‚ÇÇ _ _ _
    (uF n)
    (IsUContinuous‚Ñô-const _ _)

 icf-a = isUCauchyFSequence-·µ£ _ _
                   (map-snd (Œª X _ _ m n x‚ÇÉ x‚ÇÑ ‚Üí
                     X _ _ m n x‚ÇÉ x‚ÇÑ)
                     ‚àò icF)

 F-F-uchfs : IsUCauchyFSequence (interval‚Ñô a b)
      (Œª n x‚ÇÅ x‚àà‚ÇÅ ‚Üí F‚Çô n x‚ÇÅ x‚àà‚ÇÅ -·µ£ F‚Çô n a (‚â§·µ£-refl a , a‚â§b))
 F-F-uchfs = isUCauchyFSequence+·µ£ _ _ _
    icF icf-a
 
 icaFa : 
      IsCauchySequence' (Œª z ‚Üí -·µ£ F‚Çô z a (‚â§·µ£-refl a , a‚â§b))
 icaFa = 
   fst (map-fromCauchySequence'
  1 _ (isCauchyFSequenceAt _ _ icF a (‚â§·µ£-refl a , a‚â§b))
   _ -·µ£-lip)

 uzu2 : uDerivativeOf‚Ñô interval‚Ñô a b ,
        (Œª r z ‚Üí fst
           (fromUCauchyFSequence (interval‚Ñô a b)
            F‚Çô icF uF)
           r z +·µ£ _)
        is
        (fromUCauchyFSequence (interval‚Ñô a b) f‚Çô icf uf .fst)
 uzu2 = subst2 (uDerivativeOf‚Ñô (interval‚Ñô a b) ,_is_)
           (funExt‚ÇÇ Œª x x‚àà@(‚â§x , x‚â§) ‚Üí
              IntegralUniq a x (‚â§x) _ _ _ 
             (snd ((Integrate-UContinuous‚Ñô a x ‚â§x 
              (Œª x‚ÇÅ x‚àà‚ÇÅ ‚Üí
                 fromUCauchyFSequence (interval‚Ñô a b) f‚Çô icf uf .fst x‚ÇÅ
                 (fst x‚àà‚ÇÅ , isTrans‚â§·µ£ x‚ÇÅ x b (snd x‚àà‚ÇÅ) x‚â§))
              (map-snd
               (Œª X u v u‚àà v‚àà ‚Üí
                  X u v (fst u‚àà , isTrans‚â§·µ£ u x b (snd u‚àà) x‚â§)
                  (fst v‚àà , isTrans‚â§·µ£ v x b (snd v‚àà) (x‚àà .snd)))
               ‚àò snd (fromUCauchyFSequence (interval‚Ñô a b) f‚Çô icf uf)))))
             (uCauchy‚à´ _ _ a‚â§b f‚Çô
                     (Œª n x x‚àà ‚Üí F‚Çô n x x‚àà -·µ£ F‚Çô n a (‚â§·µ£-refl _ , a‚â§b))
                    (Œª n x x‚àà ‚Üí
                       FTOC‚áê'' a b a<b (f‚Çô n) (F‚Çô n) (uf n)
                     (F‚Çô'=f‚Çô n) x x‚àà)
                      icf uf
                      F-F-uchfs
                      F-F-ucfs
                      x x‚àà)
               ‚àô sym (fromUCauchyFSequence-+ (interval‚Ñô a b) _ _ _ _
                 icf-a
                 (Œª n ‚Üí IsUContinuous‚Ñô-const _ _ )
                 _ _
                    x _)
                 ‚àô cong‚ÇÇ _+·µ£_ refl
                  (sym
                   (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence
                    _ _ _ _ _ _ ‚à£ icaFa ‚à£‚ÇÅ))) 
           refl
           (FTOC‚áí' a b a‚â§b _
            (snd (fromUCauchyFSequence (interval‚Ñô a b) f‚Çô icf
                 uf)))

1+expSeq : ‚àÄ n x ‚Üí 1 +·µ£ (seqŒ£ (expSeq x ‚àò suc) n) ‚â° (seqŒ£ (expSeq x) (suc n))
1+expSeq n x = (cong (1 +·µ£_) (seqSumUpTo‚â°seqSumUpTo' _ _)
     ‚àô‚àô (sym (seqSumUpTo-suc (expSeq x) n))
     ‚àô‚àô (cong‚ÇÇ (_+·µ£_)
       (sym (seqSumUpTo‚â°seqSumUpTo' _ _))
       refl))

0^‚Åø :  ‚àÄ n ‚Üí 0 ^‚Åø (suc n) ‚â° 0
0^‚Åø n = ùêë'.0RightAnnihilates _ 

1^‚Åø :  ‚àÄ n ‚Üí 1 ^‚Åø n ‚â° 1
1^‚Åø zero = refl
1^‚Åø (suc n) = ¬∑IdR _ ‚àô 1^‚Åø n


exp‚Ñù0=1 : exp‚Ñù 0 ‚â° 1
exp‚Ñù0=1 = fromCauchySequence'‚ÇÅ‚â°
  (seqŒ£ (expSeq 0)) _ 1
   Œª Œµ ‚Üí ‚à£ 0 , (Œª n (n' , p) ‚Üí
    isTrans‚â°<·µ£ _ _ _
     (cong abs·µ£ (ùêë'.+InvR' _ _
       ((cong (seqŒ£ (expSeq 0)) (sym p ‚àô ‚Ñï.+-suc _ _))
          ‚àô sym (1+expSeq _ _)  ‚àô
          ùêë'.+IdR' _ _
            (seqSumUpTo‚â°seqSumUpTo' _ _ ‚àô
              (cong seqŒ£' (funExt Œª k ‚Üí sym (expSeq'‚â°expSeq _ _) ‚àô
                ùêë'.0LeftAnnihilates' _ _ (0^‚Åø _))
               ‚â°$ (n' ‚Ñï.+ 0)) ‚àô seqSumUpToConst 0 _ ‚àô
                ùêë'.0LeftAnnihilates _) )) ‚àô abs·µ£0)
     (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ
     

exp‚Ñö-bound : ‚àÄ (x : ‚Ñö) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí Œ£[ q ‚àà ‚Ñö‚Çä ] exp‚Ñù (rat x) <·µ£ rat (fst q)
exp‚Ñö-bound x = ‚äé.rec
   (Œª 0=x ‚Üí 2 , isTrans‚â°<·µ£ _ _ _
     (cong (exp‚Ñù ‚àò rat) (sym 0=x) ‚àô exp‚Ñù0=1)
       (dec‚Ñö<·µ£? {1} {2}))
   (Œª 0<x ‚Üí
     let N , X = fromCauchySequence'-lim _
             (fst (IsConvSeries'‚âÉIsCauchySequence'Sum (expSeq (rat x)))
               (expSeriesConvergesAt‚Ñö‚Çä x 0<x)) 1
         
         q , p = expSeries-rat x (suc N)
         Z : ‚Ñö.0< (1 ‚Ñö.+ ‚Ñö.abs q)
         Z = ‚Ñö.<‚Üí0< (1 ‚Ñö.+ ‚Ñö.abs q) (‚Ñö.<‚â§Monotone+ 0 _ 0 _
            (‚Ñö.dec‚Ñö<? {0} {1}) (‚Ñö.0‚â§abs q))
         ZZ = isTrans<‚â°·µ£ _ _ _
                
                 (isTrans<‚â§·µ£ _ _ _(a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                  (isTrans‚â°<·µ£ _ _ _ (minusComm-abs·µ£ _ _)
                   (X (suc N) (‚Ñï.‚â§-refl {suc N}))
                   )))
                   (‚â§·µ£-o+ _ _ _ (‚â§abs·µ£ _)))
                   (cong (1 +·µ£_) (cong abs·µ£ p ‚àô
                     abs·µ£-rat _)
                   ‚àô +·µ£-rat _ _ ) 
     in (_ , Z) ,
         isTrans‚â°<·µ£ _ _ _
          (fromCauchySequence'‚ÇÅ-‚â°-lem (seqŒ£ (expSeq (rat x))) _ ‚à£ _ ‚à£‚ÇÅ) ZZ)
   ‚àò (‚Ñö.‚â§‚Üí<‚äé‚â° 0 x)


monotone-exp‚Ñù : ‚àÄ a b ‚Üí 0 ‚â§·µ£ a ‚Üí a ‚â§·µ£ b ‚Üí exp‚Ñù a ‚â§·µ£ exp‚Ñù b
monotone-exp‚Ñù a b 0‚â§a a‚â§b =
  fromCauchySequence'‚ÇÅ‚â§ _ _ _ _
   Œª n ‚Üí subst2 _‚â§·µ£_
      (Œª i ‚Üí seqSumUpTo‚â°seqSumUpTo' (Œª n ‚Üí expSeq'‚â°expSeq a n i) n (~ i))
      (Œª i ‚Üí seqSumUpTo‚â°seqSumUpTo' (Œª n ‚Üí expSeq'‚â°expSeq b n i) n (~ i))
      (seqSumUpTo‚â§ _ _
       (Œª n ‚Üí
         ‚â§·µ£-¬∑·µ£o _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä _)))
          (^‚Åø-Monotone n 0‚â§a a‚â§b))
       n)

1‚â§exp‚Ñù[pos] : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí 1 ‚â§·µ£ exp‚Ñù x
1‚â§exp‚Ñù[pos] x 0‚â§x =
  isTrans‚â°‚â§·µ£ _ _ _
    (sym exp‚Ñù0=1) (monotone-exp‚Ñù 0 x (‚â§·µ£-refl 0) 0‚â§x)


exp‚Ñù-pos : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí 0 <·µ£ exp‚Ñù x
exp‚Ñù-pos x 0‚â§x = isTrans<‚â§·µ£ _ _ _
  (dec‚Ñö<·µ£? {0} {1}) (1‚â§exp‚Ñù[pos] x 0‚â§x)

expBounded : ‚àÄ a b ‚Üí 0 ‚â§·µ£ rat a ‚Üí  rat a ‚â§·µ£ rat b ‚Üí
  Bounded (interval‚Ñô (rat a) (rat b))
          (Œª x _  ‚Üí exp‚Ñù x)
expBounded a b 0‚â§a a‚â§b =
  let q‚Çä , X = exp‚Ñö-bound b (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ 0‚â§a a‚â§b) ) 
  in q‚Çä , Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _
        (isTrans‚â°‚â§·µ£ _ _ _
          (abs·µ£Pos _ (exp‚Ñù-pos x (isTrans‚â§·µ£ _ _ _ 0‚â§a (fst x‚àà)) ))
          (monotone-exp‚Ñù _ _ (isTrans‚â§·µ£ _ _ _ 0‚â§a (fst x‚àà))
            (snd x‚àà)))
        (<·µ£Weaken‚â§·µ£ _ _ X) 
  



uDerivativeOf‚Ñô^n : ‚àÄ a b ‚Üí rat a <·µ£ rat b
  ‚Üí ‚àÄ n
  ‚Üí uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª x _ ‚Üí x ^‚Åø (suc n))
    is Œª x _ ‚Üí fromNat (suc n) ¬∑·µ£ (x ^‚Åø n)
uDerivativeOf‚Ñô^n a b a<b zero =
  subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (¬∑IdL _))
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (¬∑IdL _))
    (uDerivative‚Ñô-id _) 
uDerivativeOf‚Ñô^n a b a<b (suc n) =
 subst (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª x _ ‚Üí x ^‚Åø (suc (suc n))) is_)    
    (funExt‚ÇÇ Œª x _ ‚Üí
      (+·µ£Comm _ _ ‚àô cong‚ÇÇ _+·µ£_
       refl (sym (¬∑·µ£Assoc _ _ _)) ‚àô
       sym (¬∑DistR+ _ _ _) ‚àô
        cong (_¬∑·µ£ ((x ^‚Åø n) ¬∑·µ£ idfun ‚Ñù x))
         (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _))))
    (uDerivativeOf‚Ñô¬∑ (rat a) (rat b) a<b
      _ _ _ _ (bounded-^‚Åø a b (<·µ£Weaken‚â§·µ£ (rat a) (rat b) a<b) (suc n))
              (bounded-id a b)
              (IsUContinuous‚Ñô^‚Åø a b (<·µ£Weaken‚â§·µ£ (rat a) (rat b) a<b) (suc n))
              (1 , Œª _ _ ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£-rat 1)) 
      (uDerivativeOf‚Ñô^n a b a<b n)
      (uDerivative‚Ñô-id _)) 


expSer'UDer : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí
      uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b)
                           , (Œª r _ ‚Üí expSeq' r (suc n)) is
                             (Œª r _ ‚Üí expSeq' r n)
expSer'UDer a b a<b n =
  let z = C¬∑uDerivative‚Ñô _ (fst 1/n!)
            _ _
            (uDerivativeOf‚Ñô^n a b a<b n)
  in subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí ¬∑·µ£Comm _ _)
    (funExt‚ÇÇ Œª _ _ ‚Üí
      ¬∑·µ£Assoc _ _ _  ‚àô ¬∑·µ£Comm _ _ ‚àô
       cong‚ÇÇ _¬∑·µ£_ refl
        (cong‚ÇÇ _¬∑·µ£_ (cong (fst ‚àò inv‚Ñù‚Çä)
           ((‚Ñù‚Çä‚â° (cong rat (sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ (suc n) (n !)))
             ‚àô rat¬∑·µ£rat _ _)))
           ‚àô cong fst (inv‚Ñù‚Çä¬∑ (‚Ñö‚Çä‚Üí‚Ñù‚Çä _)
             ((‚Ñö‚Çä‚Üí‚Ñù‚Çä (_ , ‚Ñö.<‚Üí0< ([ pos (n !) / 1 ])
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! n)))))))
                ‚àô ¬∑·µ£Comm _ _) refl
         ‚àô [x/‚Çäy]¬∑y·µ£ _ _))
    z

     
 where
 1/n! = inv‚Ñù‚Çä $ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (suc n !) / 1 ] ,
  ‚Ñö.<‚Üí0< ([ pos ((suc n) !) / 1 ])
   (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.0<! (suc n)))))


expSerUDer : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí 
      uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b)
                           , (Œª r _ ‚Üí expSeq r (suc n)) is
                             (Œª r _ ‚Üí expSeq r n)
expSerUDer a b a<b n =
  subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
   (funExt‚ÇÇ (Œª x _ ‚Üí expSeq'‚â°expSeq x (suc n)))
   (funExt‚ÇÇ (Œª x _ ‚Üí expSeq'‚â°expSeq x n))
   (expSer'UDer a b a<b n)

expSeqUDer : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí 
      uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b)
                           , (Œª r _ ‚Üí seqŒ£ (expSeq r) (suc n)) is
                             (Œª r _ ‚Üí seqŒ£ (expSeq r) n)
expSeqUDer a b a<b zero = uDerivative‚Ñô-const _ _
expSeqUDer a b a<b (suc n) =
  +uDerivative‚Ñô _ _ _ _ _
   (expSeqUDer a b a<b n) (expSerUDer a b a<b n)


isUContFSequenceExpSer : ‚àÄ a b ‚Üí rat a ‚â§·µ£ rat b ‚Üí
   IsUContFSequence (interval‚Ñô (rat a) (rat b))
      (Œª z x _ ‚Üí expSeq x z)
isUContFSequenceExpSer a b a‚â§b n =
  subst (IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)))
    (funExt‚ÇÇ Œª _ _ ‚Üí cong‚ÇÇ _¬∑·µ£_ refl (sym (inv‚Ñù‚Çä-rat  _))
       ‚àô expSeq'‚â°expSeq _ _)
    (IsUContinuous‚ÑôC¬∑·µ£ (interval‚Ñô (rat a) (rat b)) _ _
      (IsUContinuous‚Ñô^‚Åø a b a‚â§b n))


isUContFSequenceExp : ‚àÄ a b ‚Üí rat a ‚â§·µ£ rat b ‚Üí
   IsUContFSequence (interval‚Ñô (rat a) (rat b))
      (Œª z x _ ‚Üí seqŒ£ (expSeq x) z)
isUContFSequenceExp a b a‚â§b = IsUContFSequenceŒ£Seq 
 _ (Œª z x _ ‚Üí expSeq x z) (isUContFSequenceExpSer a b a‚â§b)

uDerivativeOf‚Ñô-exp‚Ñù : ‚àÄ a b ‚Üí (rat a) <·µ£ (rat b)
  
  ‚Üí uDerivativeOf‚Ñô (interval‚Ñô (rat a) (rat b))
        , (Œª x _ ‚Üí exp‚Ñù x) is (Œª x _ ‚Üí exp‚Ñù x)
uDerivativeOf‚Ñô-exp‚Ñù a b a<b = PT.rec (isPropŒ† Œª _ ‚Üí squash‚ÇÅ) (Œª x ‚Üí x) $ do
  z ‚Üê IsUCauchyFSequenceExp (rat a) (rat b) a<b
  let f = Œª n x _ ‚Üí seqŒ£ (expSeq x) n
      zz = uCauchyDer
           (rat a)
           (rat b)
           a<b
           f
            _
           
           z
           (isUContFSequenceExp a b (<·µ£Weaken‚â§·µ£ (rat a) (rat b) a<b))
           (IsUContFSequence-‚àò+ _ _ 1
             (isUContFSequenceExp a b (<·µ£Weaken‚â§·µ£ (rat a) (rat b) a<b)))
           (IsUCauchyFSequence-‚àò+ _ _ 1 z)
           (expSeqUDer a b a<b)
  return (subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí let ics = _ in
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _
          
          (PT.map (isCauchySequence-‚àò+ _ 1) ics))
       ‚àô sym (fromCauchySequence'‚ÇÅ-‚àò+ _ 1 ics _))
    (funExt‚ÇÇ Œª _ _ ‚Üí
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _))
    zz)
  

cosSer'=-sinSer : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí
   uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,
      (Œª r _ ‚Üí flip cosSeries r (suc n)) is
      (Œª r _ ‚Üí -·µ£ (flip sinSeries r n))
cosSer'=-sinSer a b a<b n = 
  subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (-1‚Åø¬∑‚â°¬∑ _ _))
    (funExt‚ÇÇ Œª _ _ ‚Üí cong‚ÇÇ _¬∑·µ£_  (-1‚Åø-suc n) refl
      ‚àô -·µ£¬∑ _ _ ‚àô cong -·µ£_ (sym (-1‚Åø¬∑‚â°¬∑ n _)))
    (C¬∑uDerivative‚Ñô _ (rat (-1‚Åø (suc n))) _ _
     (expSerUDer a b a<b (suc (n ‚Ñï.¬∑ 2))))
  


sinSer'=cosSer : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí
 uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª x _ ‚Üí (flip sinSeries x) n)
                             is (Œª x _ ‚Üí (flip cosSeries x) n)
sinSer'=cosSer a b a<b n =
  subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (-1‚Åø¬∑‚â°¬∑ _ _))
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (-1‚Åø¬∑‚â°¬∑ _ _))
    (C¬∑uDerivative‚Ñô _ (rat (-1‚Åø n)) _ _
     (expSerUDer a b a<b (n ‚Ñï.¬∑ 2)))



sinSeq'=cosSeq : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí
 uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª x _ ‚Üí seqŒ£ (flip sinSeries x) n)
                      is (Œª x _ ‚Üí seqŒ£ (flip cosSeries x) n)
sinSeq'=cosSeq a b a<b zero = uDerivative‚Ñô-const _ _ 
sinSeq'=cosSeq a b a<b (suc n) =
  +uDerivative‚Ñô _ _ _ _ _
    (sinSeq'=cosSeq a b a<b n) (sinSer'=cosSer a b a<b n)

cosSeq'=-sinSeq : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí ‚àÄ n ‚Üí
 uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª x _ ‚Üí seqŒ£ (flip cosSeries x) (suc n))
                      is (Œª x _ ‚Üí -·µ£ (seqŒ£ (flip sinSeries x) n))
cosSeq'=-sinSeq a b a<b zero = 
   subst (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) , (Œª _ _ ‚Üí 0 +·µ£ 1) is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£-rat 0))
    (uDerivative‚Ñô-const _ (0 +·µ£ 1))  
cosSeq'=-sinSeq a b a<b (suc n) =
   subst (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,
     (Œª x _ ‚Üí seqŒ£ (flip cosSeries x) (suc (suc n))) is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£Distr _ _))
  (+uDerivative‚Ñô _ _ _ _ _
    (cosSeq'=-sinSeq a b a<b n) (cosSer'=-sinSer a b a<b n))

sin-conv : ‚àÄ a b ‚Üí (rat a) <·µ£ (rat b) ‚Üí 
  IsUConvSeries' (interval‚Ñô (rat a) (rat b))
    Œª n x _ ‚Üí sinSeries n x
sin-conv a b a<b  =
  IsUConvSeries'-fromConvBound
    (interval‚Ñô (rat a) (rat b))
      (Œª n x _ ‚Üí expSeq (abs·µ£ x) (suc (n ‚Ñï.¬∑ 2))) (Œª n x _ ‚Üí sinSeries n x)
     (Œª n x x‚àà ‚Üí
       ‚â°·µ£Weaken‚â§·µ£ _ _
         (abs·µ£‚àò-1‚Åø¬∑ _ _ ‚àô abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ _ _))
     (IsUConvSeries'SubSeq (interval‚Ñô (rat a) (rat b))
       (Œª n x _ ‚Üí expSeq (abs·µ£ x) n)
       (Œª n ‚Üí (suc (n ‚Ñï.¬∑ 2)) ,
           subst (‚Ñï._‚â§ (suc (n ‚Ñï.¬∑ 2))) (¬∑-identity ≥ n)
            (‚Ñï.‚â§-suc (‚Ñï.‚â§-k¬∑ {1} {2} {n} (‚Ñï.‚â§-suc‚Ñï {1}))))
        (Œª k ‚Üí ‚Ñï.suc-‚â§-suc ‚Ñï.‚â§-suc‚Ñï)
            (Œª n x x‚àà ‚Üí expSeqNonNeg _ (0‚â§abs·µ£ x) n) (uConvExpSer<‚Ñö-abs·µ£ a b))

cos-conv : ‚àÄ a b ‚Üí (rat a) <·µ£ (rat b) ‚Üí 
  IsUConvSeries' (interval‚Ñô (rat a) (rat b))
    Œª n x _ ‚Üí cosSeries n x
cos-conv a b a<b =
  IsUConvSeries'-fromConvBound
    (interval‚Ñô (rat a) (rat b))
      (Œª n x _ ‚Üí expSeq (abs·µ£ x) ((n ‚Ñï.¬∑ 2))) (Œª n x _ ‚Üí cosSeries n x)
     (Œª n x x‚àà ‚Üí
       ‚â°·µ£Weaken‚â§·µ£ _ _
         (abs·µ£‚àò-1‚Åø¬∑ _ _ ‚àô
          abs·µ£‚àòexpSeq‚â°expSeq‚àòabs·µ£ _ _))
     (IsUConvSeries'SubSeq (interval‚Ñô (rat a) (rat b))
       (Œª n x _ ‚Üí expSeq (abs·µ£ x) n) 
       (Œª n ‚Üí (n ‚Ñï.¬∑ 2) ,
           subst (‚Ñï._‚â§ (n ‚Ñï.¬∑ 2)) (¬∑-identity ≥ n)
            ( (‚Ñï.‚â§-k¬∑ {1} {2} {n} (‚Ñï.‚â§-suc‚Ñï {1}))))
       (Œª k ‚Üí ‚Ñï.‚â§-suc‚Ñï)
            (Œª n x x‚àà ‚Üí expSeqNonNeg _ (0‚â§abs·µ£ x) n) (uConvExpSer<‚Ñö-abs·µ£ a b))



IsUConvSeries'on‚ÑöIntervals‚ÜíIsCauchySequence' :
  (s : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù) ‚Üí (‚àÄ a b ‚Üí (rat a) <·µ£ (rat b) ‚Üí
     IsUConvSeries'
       (interval‚Ñô (rat a) (rat b)) Œª n x‚àà _ ‚Üí s n x‚àà)
  ‚Üí ‚àÄ x ‚Üí ‚à• IsCauchySequence' (seqŒ£ (flip s x)) ‚à•‚ÇÅ 
IsUConvSeries'on‚ÑöIntervals‚ÜíIsCauchySequence' s ucs x = do
  (a , b) , _ , (a< , <b) ‚Üê ‚àÉrationalApprox x 1
  ‚à£ isCauchyFSequenceAt (interval‚Ñô (rat a) (rat b))
     (Œª n x _ ‚Üí (seqŒ£ (flip s x)) n)
       (Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) Œª z x‚ÇÅ _ ‚Üí s z x‚ÇÅ)
         (ucs a b (isTrans<·µ£ _ _ _ a< <b)))
     x (<·µ£Weaken‚â§·µ£ _ _ a< , <·µ£Weaken‚â§·µ£ _ _ <b) ‚à£‚ÇÅ


sin-ch : ‚àÄ x ‚Üí ‚à• IsCauchySequence' (seqŒ£ (Œª x‚ÇÅ ‚Üí sinSeries x‚ÇÅ x)) ‚à•‚ÇÅ
sin-ch = IsUConvSeries'on‚ÑöIntervals‚ÜíIsCauchySequence' _ sin-conv

cos-ch : ‚àÄ x ‚Üí ‚à• IsCauchySequence' (seqŒ£ (Œª x‚ÇÅ ‚Üí cosSeries x‚ÇÅ x)) ‚à•‚ÇÅ
cos-ch = IsUConvSeries'on‚ÑöIntervals‚ÜíIsCauchySequence' _ cos-conv

sin cos : ‚Ñù ‚Üí ‚Ñù
sin x = fromCauchySequence'‚ÇÅ (seqŒ£ (flip sinSeries x)) (sin-ch x)                
cos x = fromCauchySequence'‚ÇÅ (seqŒ£ (flip cosSeries x)) (cos-ch x)

cos0=1 : cos 0 ‚â° 1
cos0=1 = fromCauchySequence'‚ÇÅ‚â° (seqŒ£ (Œª x ‚Üí cosSeries x 0))
  (cos-ch 0) 1
   Œª Œµ ‚Üí ‚à£ 0 ,
    (Œª { zero <0 ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero <0)
       ; (suc n) _ ‚Üí isTrans‚â°<·µ£ _ _ _
               (cong abs·µ£ (ùêë'.+InvR' _ _
                ( seqSumUpTo‚â°seqSumUpTo' (Œª x ‚Üí cosSeries x 0) (suc n)
                 ‚àô ùêë'.+IdR' _ _
                  (seqŒ£'0‚â°0 _ _
                    Œª n ‚Üí
                      -1‚Åø¬∑‚â°¬∑ _ _ ‚àô
                       cong‚ÇÇ _¬∑·µ£_ refl (sym (expSeq'‚â°expSeq _ _))
                       ‚àô ùêë'.0RightAnnihilates' _ _
                        (ùêë'.0LeftAnnihilates' _ _
                         (0^‚Åø (suc (n ‚Ñï.¬∑ 2)))))))
                ‚àô abs·µ£0)
               (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))
       }) ‚à£‚ÇÅ

sin0=0 : sin 0 ‚â° 0
sin0=0 = fromCauchySequence'‚ÇÅ‚â° (seqŒ£ (Œª x ‚Üí sinSeries x 0))
  (sin-ch 0) 0
   Œª Œµ ‚Üí ‚à£ 0 ,
     (Œª n _ ‚Üí
       isTrans‚â°<·µ£ _ _ _
               (cong abs·µ£ (ùêë'.+InvR' _ _
                ( seqSumUpTo‚â°seqSumUpTo' (Œª x ‚Üí sinSeries x 0) n
                 ‚àô (seqŒ£'0‚â°0 _ _
                    Œª n ‚Üí
                      -1‚Åø¬∑‚â°¬∑ _ _ ‚àô
                       cong‚ÇÇ _¬∑·µ£_ refl (sym (expSeq'‚â°expSeq _ _))
                       ‚àô ùêë'.0RightAnnihilates' _ _
                        (ùêë'.0LeftAnnihilates' _ _
                         (0^‚Åø (n ‚Ñï.¬∑ 2))))))
                ‚àô abs·µ£0)
               (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ


sin-odd : ‚àÄ x ‚Üí -·µ£ (sin x) ‚â° sin (-·µ£ x)
sin-odd x =
  snd (map-fromCauchySequence'‚ÇÅ _ _ _ (-·µ£_) -·µ£-lip)
   ‚àô
   fromCauchySequence'‚ÇÅ-‚â° _ _ _ _
        Œª n ‚Üí
          (-·µ£_ ‚àò seqŒ£ (Œª x‚ÇÅ ‚Üí sinSeries x‚ÇÅ x)) n
            ‚â°‚ü® -seqŒ£' (Œª x‚ÇÅ ‚Üí sinSeries x‚ÇÅ x) n ‚ü© 
          (seqŒ£ (Œª x‚ÇÅ ‚Üí -·µ£ (sinSeries x‚ÇÅ x))) n ‚â°‚ü®
            
           cong seqŒ£ (funExt
             (Œª k ‚Üí  
                 cong (-·µ£_) (cong (-1‚Åø¬∑ k)
                     ((sym (expSeq'‚â°expSeq x (suc (k ‚Ñï.¬∑ 2)))))
                      ‚àô -1‚Åø¬∑‚â°¬∑ _ _ )
               ‚àô sym (¬∑-·µ£ _ _) 
               ‚àô sym (-1‚Åø¬∑‚â°¬∑ _ _)               
               ‚àô cong (-1‚Åø¬∑ k) (
                   (sym (-·µ£¬∑ _ _))
                 ‚àô cong‚ÇÇ _¬∑·µ£_ (^‚Åø-odd k x) refl
                 ‚àô expSeq'‚â°expSeq (-·µ£ x) (suc (k ‚Ñï.¬∑ 2)))
              ))
             ‚â°$ n
             ‚ü©
           seqŒ£ (Œª x‚ÇÅ ‚Üí sinSeries x‚ÇÅ (-·µ£ x)) n ‚àé

cos-even : ‚àÄ x ‚Üí cos x ‚â° cos (-·µ£ x)
cos-even x = fromCauchySequence'‚ÇÅ-‚â° _ _ _ _
        (cong seqŒ£ (funExt
         (Œª k ‚Üí cong (-1‚Åø¬∑ k)
          (sym (expSeq'‚â°expSeq x (k ‚Ñï.¬∑ 2)) ‚àô‚àô
           cong‚ÇÇ _¬∑·µ£_
            ( ^‚Åø-even k x)
            refl
           ‚àô‚àô expSeq'‚â°expSeq (-·µ£ x) (k ‚Ñï.¬∑ 2))))
         ‚â°$_)


IsUContFSequenceSin :  ‚àÄ a b ‚Üí (a<b : rat a <·µ£ rat b) ‚Üí
   IsUContFSequence (interval‚Ñô (rat a) (rat b))
      (Œª z x _ ‚Üí seqŒ£ (Œª x‚ÇÅ ‚Üí sinSeries x‚ÇÅ x) z)
IsUContFSequenceSin a b a<b =
  IsUContFSequenceŒ£Seq _ _
   (subst (IsUContFSequence (interval‚Ñô (rat a) (rat b)))
     (funExt‚ÇÉ Œª _ _ _ ‚Üí ¬∑·µ£Comm _ _ ‚àô sym (-1‚Åø¬∑‚â°¬∑ _ _))
     Œª n ‚Üí IsUContinuous‚ÑôC¬∑·µ£ _ (-1‚Åø n) _
      (isUContFSequenceExpSer a b (<·µ£Weaken‚â§·µ£ _ _ a<b) (suc (n ‚Ñï.¬∑ 2))))

IsUContFSequenceCos :  ‚àÄ a b ‚Üí (a<b : rat a <·µ£ rat b) ‚Üí
   IsUContFSequence (interval‚Ñô (rat a) (rat b))
      (Œª z x _ ‚Üí seqŒ£ (Œª x‚ÇÅ ‚Üí cosSeries x‚ÇÅ x) z)
IsUContFSequenceCos a b a<b =
  IsUContFSequenceŒ£Seq _ _
   (subst (IsUContFSequence (interval‚Ñô (rat a) (rat b)))
     (funExt‚ÇÉ Œª _ _ _ ‚Üí ¬∑·µ£Comm _ _ ‚àô sym (-1‚Åø¬∑‚â°¬∑ _ _))
     Œª n ‚Üí IsUContinuous‚ÑôC¬∑·µ£ _ (-1‚Åø n) _
      (isUContFSequenceExpSer a b (<·µ£Weaken‚â§·µ£ _ _ a<b) (n ‚Ñï.¬∑ 2)))

sin'=cos-uder : ‚àÄ a b ‚Üí (a<b : rat a <·µ£ rat b) ‚Üí
      uDerivativeOf‚Ñô (interval‚Ñô (rat a) (rat b)) ,
       (Œª x _ ‚Üí sin x) is (Œª x _ ‚Üí cos x)
sin'=cos-uder a b a<b =
   subst2 (uDerivativeOf‚Ñô (interval‚Ñô (rat a) (rat b)) ,_is_)
    (funExt‚ÇÇ Œª _ _ ‚Üí
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _))
    (funExt‚ÇÇ Œª _ _ ‚Üí
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _))
    (uCauchyDer (rat a) (rat b) a<b
         (Œª z x _ ‚Üí seqŒ£ (flip cosSeries x) z)
         (Œª z x _ ‚Üí seqŒ£ (flip sinSeries x) z)
         uconvcos uccos ucsin uconvsin
        (sinSeq'=cosSeq a b a<b))

    where
    ucsin : IsUContFSequence (interval‚Ñô (rat a) (rat b)) _
    ucsin = IsUContFSequenceSin a b a<b


    uconvcos : IsUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    uconvcos = 
      Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (cos-conv a b a<b)

    uconvsin : IsUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    uconvsin =
      Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (sin-conv a b a<b)


    uccos : IsUContFSequence (interval‚Ñô (rat a) (rat b)) _
    uccos = IsUContFSequenceCos a b a<b


cos'=-sin-uder : ‚àÄ a b ‚Üí (a<b : rat a <·µ£ rat b) ‚Üí
      uDerivativeOf‚Ñô (interval‚Ñô (rat a) (rat b)) ,
                (Œª x _ ‚Üí cos x)
              is (Œª x _ ‚Üí -·µ£ (sin x))
cos'=-sin-uder a b a<b =
  subst2 (uDerivativeOf‚Ñô (interval‚Ñô (rat a) (rat b)) ,_is_)
    (funExt‚ÇÇ Œª x x‚àà ‚Üí
      
        sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _
          uconvcos
          _
          (PT.map (fst ‚àò (cauchySequenceFaster
            (seqŒ£ Œª n ‚Üí cosSeries n x)
            Œª n ‚Üí (suc n) , (‚Ñï.‚â§-suc‚Ñï {n})))
           (cos-ch x)))
        ‚àô
        sym (fromCauchySequence'‚ÇÅ-‚àò+  _ 1 _ _)
      )
    (funExt‚ÇÇ Œª x x‚àà ‚Üí
       sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _)
       ‚àô 
       sym (snd (map-fromCauchySequence'‚ÇÅ
      1 (Œª n ‚Üí seqŒ£ (flip sinSeries x) n)
       (sin-ch x)
        _ -·µ£-lip)))
      
    (uCauchyDer (rat a) (rat b) a<b _ _
         (isUCauchyFSequence-·µ£ _ _ uconvsin)
         (Œª n ‚Üí
           subst (IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)))
              (funExt‚ÇÇ Œª _ _ ‚Üí ¬∑·µ£Comm _ _ ‚àô sym (-·µ£‚â°[-1¬∑·µ£] _))
            (IsUContinuous‚ÑôC¬∑·µ£ (interval‚Ñô (rat a) (rat b)) -1
            _ (IsUContFSequenceSin a b a<b n)) )
         (IsUContFSequenceCos a b a<b ‚àò suc)
         uconvcos
        (cosSeq'=-sinSeq a b a<b))

    where
    ucsin : IsUContFSequence (interval‚Ñô (rat a) (rat b)) _
    ucsin = IsUContFSequenceSin a b a<b


    uconvcos : IsUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    uconvcos = map-snd
      (Œª X x x‚àà m n <n <m ‚Üí
        X x x‚àà (suc m) (suc n) (‚Ñï.‚â§-suc <n) (‚Ñï.‚â§-suc <m))
      ‚àò (Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (cos-conv a b a<b))

    uconvsin : IsUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    uconvsin =
      Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (sin-conv a b a<b)


cos'=-sin-uder' : ‚àÄ a b ‚Üí (a<b : a <·µ£ b) ‚Üí
      uDerivativeOf‚Ñô (interval‚Ñô a b) ,
                (Œª x _ ‚Üí cos x)
              is (Œª x _ ‚Üí -·µ£ (sin x))
cos'=-sin-uder' a b a<b =
  PT.rec2
     (isPropŒ† Œª _ ‚Üí squash‚ÇÅ)
     (Œª (a' , _ , a'<a) (b' , b<b' , _) ‚Üí
       uDerivativeOf‚Ñô-restr (interval‚Ñô (rat a') (rat b'))
         (interval‚Ñô a b) _ _
         (Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ a'<a) (fst x‚àà) ,
                   isTrans‚â§·µ£ _ _ _ (snd x‚àà) (<·µ£Weaken‚â§·µ£ _ _ b<b'))
         (cos'=-sin-uder a' b' (isTrans<·µ£ _ _ _ a'<a
           (isTrans<·µ£ _ _ _ a<b b<b')))
         
           )
   (dense‚Ñöin‚Ñù (a +·µ£ (rat -1)) a (isTrans<‚â°·µ£ _ _ _
        
        (<·µ£-o+ _ _ a (dec‚Ñö<·µ£? { -1 } {0}))
        (+IdR a)))
   (dense‚Ñöin‚Ñù b (b +·µ£ 1) (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR b))
        (<·µ£-o+ _ _ b (dec‚Ñö<·µ£? {0} {1}))) )

sin'=cos-uder' : ‚àÄ a b ‚Üí (a<b : a <·µ£ b) ‚Üí
      uDerivativeOf‚Ñô (interval‚Ñô (a) (b)) ,
       (Œª x _ ‚Üí sin x) is (Œª x _ ‚Üí cos x)
sin'=cos-uder' a b a<b =
  PT.rec (isPropŒ† Œª _ ‚Üí squash‚ÇÅ)
    (Œª ((a' , b') , (a'‚â§a , b‚â§b')) ‚Üí
      uDerivativeOf‚Ñô-restr
        (interval‚Ñô (rat a') (rat b'))
        (interval‚Ñô a b)
        (Œª x _ ‚Üí sin x)
        (Œª r _ ‚Üí cos r)
       (Œª x x‚àà ‚Üí
          (isTrans‚â§·µ£ _ _ _ a'‚â§a (fst x‚àà))
         , (isTrans‚â§·µ£ _ _ _ (snd x‚àà) b‚â§b' ))
       (sin'=cos-uder a' b'
         ((isTrans‚â§<·µ£ _ _ _ a'‚â§a
           (isTrans<‚â§·µ£ _ _ _ a<b b‚â§b')))))
   (‚àÉenclosing‚ÑöInterval a b)

sinSeq‚â§expSeq : ‚àÄ n x ‚Üí seqŒ£ (flip sinSeries x) n ‚â§·µ£
                             seqŒ£ (expSeq (abs·µ£ x)) (suc (n ‚Ñï.¬∑ 2))
sinSeq‚â§expSeq n x = isTrans‚â§·µ£ _ _ _
  (sinSeq‚â§expSeq-1 n x)
  (isTrans‚â§‚â°·µ£ _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _
      (sym (+IdL _))
      (‚â§·µ£-+o _ _ _ (dec‚Ñö‚â§·µ£? {0} {1}) )) --(‚â§·µ£Monotone+·µ£ _ _ _ _ ? ?)
    (1+expSeq (n ‚Ñï.¬∑ 2) (abs·µ£ x) ))

sin‚â§exp : ‚àÄ x ‚Üí sin x ‚â§·µ£ exp‚Ñù (abs·µ£ x)
sin‚â§exp x =
  PT.elim2
    (Œª ich ich' ‚Üí
       isProp‚â§·µ£
        (fromCauchySequence'‚ÇÅ _ ich)
        (fromCauchySequence'‚ÇÅ (seqŒ£ (expSeq (abs·µ£ x))) ich'))
    (Œª ich ich' ‚Üí
      isTrans‚â§‚â°·µ£ _ _ _
        (fromCauchySequence'‚â§ _ _ _ _
          (flip sinSeq‚â§expSeq x))
        (sym (snd (cauchySequenceFaster (seqŒ£ (expSeq (abs·µ£ x)))
          (Œª n ‚Üí suc (n ‚Ñï.¬∑ 2) ,
           subst (‚Ñï._‚â§ suc (n ‚Ñï.¬∑ 2)) (¬∑-identity ≥ n)
            (‚Ñï.‚â§-suc (‚Ñï.‚â§-k¬∑ {1} {2} {n} (‚Ñï.‚â§-suc‚Ñï {1})))) ich'))))
    (sin-ch x)
    (exp‚Ñù-cauchySeq (abs·µ£ x)) 

cos‚â§exp : ‚àÄ x ‚Üí cos x ‚â§·µ£ exp‚Ñù (abs·µ£ x)
cos‚â§exp x =
   PT.elim2
    (Œª ich ich' ‚Üí
       isProp‚â§·µ£
        (fromCauchySequence'‚ÇÅ _ ich)
        (fromCauchySequence'‚ÇÅ (seqŒ£ (expSeq (abs·µ£ x))) ich'))
    (Œª ich ich' ‚Üí
      isTrans‚â§‚â°·µ£ _ _ _
        (fromCauchySequence'‚â§ _ _ _ _
          (flip cosSeq‚â§expSeq x))
        (sym (snd (cauchySequenceFaster (seqŒ£ (expSeq (abs·µ£ x)))
          (Œª n ‚Üí (n ‚Ñï.¬∑ 2) ,
           subst (‚Ñï._‚â§ (n ‚Ñï.¬∑ 2)) (¬∑-identity ≥ n)
            ( (‚Ñï.‚â§-k¬∑ {1} {2} {n} (‚Ñï.‚â§-suc‚Ñï {1})))) ich'))))
    (cos-ch x)
    (exp‚Ñù-cauchySeq (abs·µ£ x)) 


-cos‚â§exp : ‚àÄ x ‚Üí -·µ£ (cos x) ‚â§·µ£ exp‚Ñù (abs·µ£ x)
-cos‚â§exp x =
   isTrans‚â°‚â§·µ£ _ _ _
    (snd (map-fromCauchySequence'‚ÇÅ
      1 _ _
        _ -·µ£-lip))
    (PT.elim2
    (Œª ich ich' ‚Üí
       isProp‚â§·µ£
        (fromCauchySequence'‚ÇÅ _ ich)
        (fromCauchySequence'‚ÇÅ (seqŒ£ (expSeq (abs·µ£ x))) ich'))
    (Œª ich ich' ‚Üí
      isTrans‚â§‚â°·µ£ _ _ _
        (fromCauchySequence'‚â§ _ _ _ _
          (flip -cosSeq‚â§expSeq x))
        (sym (snd (cauchySequenceFaster (seqŒ£ (expSeq (abs·µ£ x)))
          (Œª n ‚Üí (n ‚Ñï.¬∑ 2) ,
           subst (‚Ñï._‚â§ (n ‚Ñï.¬∑ 2)) (¬∑-identity ≥ n)
            ( (‚Ñï.‚â§-k¬∑ {1} {2} {n} (‚Ñï.‚â§-suc‚Ñï {1})))) ich'))))
    (fst (map-fromCauchySequence'‚ÇÅ
      1 _ _
        _ -·µ£-lip))
    (exp‚Ñù-cauchySeq (abs·µ£ x)))



pre-bounded-sin : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí 
             Bounded (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí sin x)
pre-bounded-sin a b a<b =
  let (bd , ‚â§bd) = expBounded 0 (‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b))
                    (‚â§·µ£-refl _)
                    (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                      (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.0‚â§abs a) (‚Ñö.‚â§max _ _)))
  in bd , Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _
           (isTrans‚â§·µ£ _ _ _
             (isTrans‚â°‚â§·µ£ _ _ _ (abs-max (sin x))
               (max‚â§-lem _ _ _
                 (sin‚â§exp x)
                 (subst2 _‚â§·µ£_
                   (sym (sin-odd x))
                   (cong exp‚Ñù (sym (-abs·µ£ x)))
                   (sin‚â§exp (-·µ£ x)))))
             (‚â§abs·µ£ _))
          (‚â§bd (abs·µ£ x) (0‚â§abs·µ£ x ,
            isTrans‚â§‚â°·µ£ _ _ _
              (x‚ààinterval-bound _ _ x x‚àà)
              (cong‚ÇÇ max·µ£ (abs·µ£-rat a) (abs·µ£-rat b))))


pre-bounded-cos : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí 
             Bounded (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí cos x)
pre-bounded-cos a b a<b =
  let (bd , ‚â§bd) = expBounded 0 (‚Ñö.max (‚Ñö.abs a) (‚Ñö.abs b))
                    (‚â§·µ£-refl _)
                    (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                      (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.0‚â§abs a) (‚Ñö.‚â§max _ _)))
  in bd , Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _
           (isTrans‚â§·µ£ _ _ _
             (isTrans‚â°‚â§·µ£ _ _ _ (abs-max (cos x))                
               (max‚â§-lem _ _ _
                 (cos‚â§exp x)
                 (-cos‚â§exp x)))
             (‚â§abs·µ£ _))
           
          (‚â§bd (abs·µ£ x) (0‚â§abs·µ£ x ,
            isTrans‚â§‚â°·µ£ _ _ _
              (x‚ààinterval-bound _ _ x x‚àà)
              (cong‚ÇÇ max·µ£ (abs·µ£-rat a) (abs·µ£-rat b))))

pre-uContSin : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí
  IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)) (Œª x‚ÇÅ _ ‚Üí sin x‚ÇÅ)
pre-uContSin a b a<b =
 subst (IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)))
   ((funExt‚ÇÇ Œª _ _ ‚Üí
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _)))
   (snd (fromUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    (Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (sin-conv a b a<b))
    (IsUContFSequenceSin a b a<b)))


pre-uContCos : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí
  IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)) (Œª x‚ÇÅ _ ‚Üí cos x‚ÇÅ)
pre-uContCos a b a<b =
 subst (IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)))
   ((funExt‚ÇÇ Œª _ _ ‚Üí
      sym (fromCauchySequence'‚ÇÅ‚â°fromUCauchyFSequence _ _ _ _ _ _ _)))
   (snd (fromUCauchyFSequence (interval‚Ñô (rat a) (rat b)) _
    (Iso.fun (IsoIsUConvSeries'IsCauchy'SequenceSum
         (interval‚Ñô (rat a) (rat b)) _) (cos-conv a b a<b))
    (IsUContFSequenceCos a b a<b)))

IsUContinuous‚Ñô‚ÜíIsContinuous : ‚àÄ f ‚Üí
 (‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí
  IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí f x)) 
       ‚Üí IsContinuous f
IsUContinuous‚Ñô‚ÜíIsContinuous f ucf x Œµ = do
  (a , b) , _ , (a< , <b) ‚Üê ‚àÉrationalApprox x 1
  let x‚àà = (isTrans<·µ£ _ _ _
             (isTrans<‚â°·µ£ _  _ _ (<‚Ñö‚Üí<·µ£ _ _
               ((‚Ñö.<-o+ _ _ a (‚Ñö.dec‚Ñö<? { -1 } {0}))))
              (cong rat (‚Ñö.+IdR a))) a<) ,
             (isTrans<·µ£ _ _ _ <b
              (isTrans‚â°<·µ£ _  _ _ (cong rat (sym (‚Ñö.+IdR b)))
                (<‚Ñö‚Üí<·µ£ _ _  (‚Ñö.<-o+ _ _ b (‚Ñö.dec‚Ñö<? {0} {1})))))

      (Œ¥ , X) = ucf (a ‚Ñö.- 1) (b ‚Ñö.+ 1)
            (isTrans<·µ£ _ _ _ (fst x‚àà) (snd x‚àà)) Œµ  
  ‚à£ ‚Ñö.min‚Çä Œ¥ 1 , (Œª y x‚àºy ‚Üí
    let zz = fst (‚àº‚âÉabs<Œµ _ _ _) x‚àºy
    in X x y
       (ointerval‚Ñô‚äÜinterval‚Ñô (rat (a ‚Ñö.- 1)) (rat (b ‚Ñö.+ 1)) x x‚àà)
        (isTrans‚â§·µ£ _ _ _
          (isTrans‚â°‚â§·µ£ _ _ _
           (sym (+·µ£-rat _ _))
           (‚â§·µ£Monotone+·µ£ _ _ _ _
             (<·µ£Weaken‚â§·µ£ _ _ a<)
             (isTrans‚â°‚â§·µ£ _ _ _ (sym (-·µ£-rat 1))
              (-·µ£‚â§·µ£ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) 1))))))
          (<·µ£Weaken‚â§·µ£ _ _ (a-b<c‚áía-c<b _ _ _
           (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) zz)))
       , isTrans‚â§·µ£ _ _ _ (isTrans‚â§‚â°·µ£ _ _ _
        (a-b‚â§c‚áía‚â§c+b _ _ _
        (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _)
         (isTrans‚â°‚â§·µ£ _ _ _ (minusComm-abs·µ£ _ _) (<·µ£Weaken‚â§·µ£ _ _ zz))))
         (+·µ£Comm _ _))
           (isTrans‚â§‚â°·µ£ _ _ _
             (‚â§·µ£Monotone+·µ£ _ _ _ _
              (<·µ£Weaken‚â§·µ£ _ _ <b)
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) 1)))
             (+·µ£-rat _ _)))
       (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºy)) ‚à£‚ÇÅ

isContinuousSin : IsContinuous sin
isContinuousSin = IsUContinuous‚Ñô‚ÜíIsContinuous _ pre-uContSin

isContinuousCos : IsContinuous cos
isContinuousCos = IsUContinuous‚Ñô‚ÜíIsContinuous _ pre-uContCos


sin¬≤+cos¬≤=1 : ‚àÄ x ‚Üí ((sin x) ^‚Åø 2) +·µ£ ((cos x) ^‚Åø 2) ‚â° 1 
sin¬≤+cos¬≤=1 = ‚â°Continuous _ _
  (cont‚ÇÇ+·µ£  _ _
    (IsContinuous‚àò _ _ (IsContinuous^‚Åø 2) isContinuousSin)
    (IsContinuous‚àò _ _ (IsContinuous^‚Åø 2) isContinuousCos))
   (IsContinuousConst 1)
  ((_‚àô sin0¬≤+cos0¬≤‚â°1) ‚àò ‚Ñö.byTrichotomy 0 h)

  where

  h' : ‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí
    (sin (rat a) ^‚Åø 2) +·µ£ (cos (rat a) ^‚Åø 2)
      ‚â° (sin (rat b) ^‚Åø 2) +·µ£ (cos (rat b) ^‚Åø 2)
  h' a b a<b =
    nullDerivative‚Üíconst (rat a) (rat b)
       (‚â§·µ£-refl _ , <·µ£Weaken‚â§·µ£ _ _ a<b)
       (<·µ£Weaken‚â§·µ£ _ _ a<b , ‚â§·µ£-refl _)
      a<b
      _
      h

    where
    h : uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,
          (Œª x _ ‚Üí ((sin x) ^‚Åø 2) +·µ£ ((cos x) ^‚Åø 2)) is
        (Œª _ _ ‚Üí rat [ pos 0 / 1+ 0 ])
    h = subst2 (uDerivativeOf‚Ñô interval‚Ñô (rat a) (rat b) ,_is_)
      (funExt‚ÇÇ Œª _ _ ‚Üí
        cong‚ÇÇ _+·µ£_
          (cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl)
          (cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl))
      (funExt‚ÇÇ Œª _ _ ‚Üí
        cong‚ÇÇ _+·µ£_ (cong‚ÇÇ _+·µ£_ (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _))
           (cong‚ÇÇ _+·µ£_ (-·µ£¬∑ _ _) (-·µ£¬∑ _ _)
             ‚àô sym (-·µ£Distr _ _))
          ‚àô ùêë'.+InvR' _ _ refl)
      (+uDerivative‚Ñô _ _ _ _ _
        h1 h2)

       where
       h1 = (uDerivativeOf‚Ñô¬∑ (rat a) (rat b) a<b
          _ _ _ _
          (pre-bounded-sin a b a<b)
          (pre-bounded-sin a b a<b)
          (pre-uContSin a b a<b)
          (pre-bounded-cos a b a<b)
        (sin'=cos-uder a b a<b)
        (sin'=cos-uder a b a<b)
        )
       h2 = (uDerivativeOf‚Ñô¬∑ (rat a) (rat b) a<b
          _ _ _ _
          (pre-bounded-cos a b a<b) (pre-bounded-cos a b a<b)
          (pre-uContCos a b a<b)
          (map-snd (Œª X x x‚àà ‚Üí isTrans‚â°‚â§·µ£ _ _ _
               (sym (-abs·µ£ _)) (X x x‚àà)) (pre-bounded-sin a b a<b))
        (cos'=-sin-uder a b a<b) (cos'=-sin-uder a b a<b))

  sin0¬≤+cos0¬≤‚â°1 : (sin 0 ^‚Åø 2) +·µ£ (cos 0 ^‚Åø 2) ‚â° 1
  sin0¬≤+cos0¬≤‚â°1 = ùêë'.+IdL' _ _ (cong (_^‚Åø 2) sin0=0 ‚àô (0^‚Åø 1))
    ‚àô cong (_^‚Åø 2) cos0=1 ‚àô 1^‚Åø 2
  
  h : ‚Ñö.TrichotomyRec 0
       (Œª z ‚Üí (sin (rat z) ^‚Åø 2) +·µ£ (cos (rat z) ^‚Åø 2) ‚â°
        (sin 0 ^‚Åø 2) +·µ£ (cos 0 ^‚Åø 2))
  h .‚Ñö.TrichotomyRec.lt-case x x<0 =
    h' x 0 (<‚Ñö‚Üí<·µ£ _ _ x<0)
  h .‚Ñö.TrichotomyRec.eq-case = refl 
  h .‚Ñö.TrichotomyRec.gt-case x 0<x =
    sym (h' 0 x (<‚Ñö‚Üí<·µ£ _ _ 0<x)) 
