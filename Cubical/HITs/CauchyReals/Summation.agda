{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.Summation where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset
open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative

private
  variable
    ‚Ñì : Level
    A A' B B' : Type ‚Ñì

clampCases : ‚àÄ a b ‚Üí a ‚Ñö.‚â§ b ‚Üí ‚àÄ u v ‚Üí u ‚Ñö.‚â§ v ‚Üí
            (‚Ñö.clamp a b v ‚Ñö.- ‚Ñö.clamp a b u ‚â° 0)
              ‚äé ((a ‚Ñö.‚â§ v) √ó (u ‚Ñö.‚â§ b))
clampCases a b a‚â§b u v u‚â§v =
  ‚äé.rec (Œª a‚â§v ‚Üí
     ‚äé.rec (Œª u‚â§b ‚Üí inr (a‚â§v , u‚â§b))
       (Œª b<u ‚Üí inl (ùêê'.+InvR' (‚Ñö.clamp a b v) (‚Ñö.clamp a b u)
         (‚Ñö.minComm (‚Ñö.max a v) b ‚àô‚àô
           ‚Ñö.‚â§‚Üímin _ (‚Ñö.max a v) ((‚Ñö.isTrans‚â§ b u _ (‚Ñö.<Weaken‚â§ b u b<u)
            (‚Ñö.isTrans‚â§ u v _ u‚â§v (‚Ñö.‚â§max' a v )))) ‚àô
            sym (‚Ñö.‚â§‚Üímin b (‚Ñö.max a u)
              ((‚Ñö.isTrans‚â§ b u _ (‚Ñö.<Weaken‚â§ b u b<u)
            ((‚Ñö.‚â§max' a u )))))
             ‚àô‚àô ‚Ñö.minComm b (‚Ñö.max a u)  )) )
      (‚Ñö.Dichotomy‚Ñö u b))
   (Œª v<a ‚Üí inl (ùêê'.+InvR' (‚Ñö.clamp a b v) (‚Ñö.clamp a b u)
      (‚Ñö.minComm (‚Ñö.max a v) b ‚àô‚àô
        cong (‚Ñö.min b) (‚Ñö.maxComm a v ‚àô ‚Ñö.‚â§‚Üímax v a (‚Ñö.<Weaken‚â§ v a v<a) ‚àô
          sym (‚Ñö.‚â§‚Üímax u a (‚Ñö.isTrans‚â§  u v _ u‚â§v (‚Ñö.<Weaken‚â§ v a v<a)))
           ‚àô ‚Ñö.maxComm u a )
       ‚àô‚àô ‚Ñö.minComm b (‚Ñö.max a u))))
   (‚Ñö.Dichotomy‚Ñö a v)


‚äé-‚äé-√ó-rec : A ‚äé B ‚Üí A' ‚äé B' ‚Üí (A ‚äé A') ‚äé (B √ó B')
‚äé-‚äé-√ó-rec (inl x) _ = inl (inl x)
‚äé-‚äé-√ó-rec (inr _) (inl x) = inl (inr x)
‚äé-‚äé-√ó-rec (inr x) (inr x‚ÇÅ) = inr (x , x‚ÇÅ)

‚â§x‚Üíclamp : ‚àÄ L L' x ‚Üí L' ‚Ñö.‚â§ x ‚Üí ‚Ñö.clamp L L' x ‚â° L'
‚â§x‚Üíclamp L L' x L'‚â§x = ‚Ñö.minComm (‚Ñö.max L x) L'
  ‚àô ‚Ñö.‚â§‚Üímin L' (‚Ñö.max L x) (‚Ñö.isTrans‚â§ L' x _ L'‚â§x (‚Ñö.‚â§max' L x))

x‚â§‚Üíclamp : ‚àÄ L L' x ‚Üí L ‚Ñö.‚â§ L' ‚Üí x ‚Ñö.‚â§ L ‚Üí ‚Ñö.clamp L L' x ‚â° L
x‚â§‚Üíclamp L L' x L‚â§L' x‚â§L = ‚Ñö.‚â§‚Üímin (‚Ñö.max L x) L'
  (subst (‚Ñö.max L x ‚Ñö.‚â§_) (‚Ñö.maxIdem L')
   (‚Ñö.‚â§MonotoneMax L L' x L' L‚â§L' (‚Ñö.isTrans‚â§ x L L' x‚â§L L‚â§L')) ) ‚àô
  ‚Ñö.maxComm L x ‚àô ‚Ñö.‚â§‚Üímax x L x‚â§L


clampDegen : ‚àÄ a b x ‚Üí b ‚Ñö.‚â§ a ‚Üí ‚Ñö.clamp a b x ‚â° b
clampDegen a b x b‚â§a =
  ‚Ñö.minComm (‚Ñö.max a x) b ‚àô
   ‚Ñö.‚â§‚Üímin _ _ (‚Ñö.isTrans‚â§ b a _ b‚â§a (‚Ñö.‚â§max a x))



‚ÑöclampInterval-delta : ‚àÄ a b a' b'
          ‚Üí a  ‚Ñö.‚â§ b
          ‚Üí a' ‚Ñö.‚â§ b'
               ‚Üí ‚Ñö.clamp a  b  b' ‚Ñö.- ‚Ñö.clamp a  b  a'
               ‚â° ‚Ñö.clamp a' b' b  ‚Ñö.- ‚Ñö.clamp a' b' a
‚ÑöclampInterval-delta a b a' b' a‚â§b a'‚â§b' =
 ‚äé.rec (‚äé.rec
         (hhh a b a' b' a‚â§b a'‚â§b'  )
         (sym ‚àò hhh a' b' a b a'‚â§b' a‚â§b))
       (Œª (a‚â§b' , a'‚â§b) ‚Üí
          hhh' a b a' b' a‚â§b a'‚â§b' a‚â§b' a'‚â§b
           ‚àô‚àô cong‚ÇÇ ‚Ñö._-_ (‚Ñö.minComm b' b) (‚Ñö.maxComm a a') ‚àô‚àô
           sym (hhh' a' b' a b a'‚â§b' a‚â§b a'‚â§b a‚â§b') )
       (‚äé-‚äé-√ó-rec
          (‚Ñö.‚â§cases b' a)
          (‚Ñö.‚â§cases b a'))

  where

  hhh' : ‚àÄ a b a' b'
         ‚Üí a  ‚Ñö.‚â§ b
         ‚Üí a' ‚Ñö.‚â§ b'
         ‚Üí a ‚Ñö.‚â§ b' ‚Üí a' ‚Ñö.‚â§ b
              ‚Üí ‚Ñö.clamp a  b  b' ‚Ñö.- ‚Ñö.clamp a  b  a'
              ‚â° ‚Ñö.min b' b ‚Ñö.- ‚Ñö.max a a'
  hhh' a b a' b' a‚â§b a'‚â§b' a‚â§b' a'‚â§b =
    cong‚ÇÇ ‚Ñö._-_ (cong (flip ‚Ñö.min b) (‚Ñö.‚â§‚Üímax a b' a‚â§b'))
            (‚Ñö.‚â§‚Üímin (‚Ñö.max a a') b
             (subst (‚Ñö.max a a' ‚Ñö.‚â§_) (‚Ñö.maxIdem b)
              (‚Ñö.‚â§MonotoneMax a b a' b a‚â§b a'‚â§b)) )



  hhh : ‚àÄ a b a' b'
         ‚Üí a  ‚Ñö.‚â§ b
         ‚Üí a' ‚Ñö.‚â§ b'
         ‚Üí b' ‚Ñö.‚â§ a
              ‚Üí ‚Ñö.clamp a  b  b' ‚Ñö.- ‚Ñö.clamp a  b  a'
              ‚â° ‚Ñö.clamp a' b' b  ‚Ñö.- ‚Ñö.clamp a' b' a
  hhh a b a' b' a‚â§b a'‚â§b' b'‚â§a =
     cong‚ÇÇ ‚Ñö._-_ (x‚â§‚Üíclamp a b b' a‚â§b b'‚â§a)
                 (x‚â§‚Üíclamp a b a' a‚â§b (‚Ñö.isTrans‚â§ a' b' a a'‚â§b' b'‚â§a))
      ‚àô‚àô ‚Ñö.+InvR a ‚àô sym (‚Ñö.+InvR b') ‚àô‚àô
      cong‚ÇÇ ‚Ñö._-_
        (sym (‚â§x‚Üíclamp a' b' b (‚Ñö.isTrans‚â§ b' a b b'‚â§a a‚â§b)))
        (sym (‚â§x‚Üíclamp a' b' a b'‚â§a))

clamp-dist : ‚àÄ a b x y ‚Üí
  ‚Ñö.abs (‚Ñö.clamp a b x ‚Ñö.- ‚Ñö.clamp a b y) ‚Ñö.‚â§ ‚Ñö.abs (b ‚Ñö.- a)
clamp-dist a b =
  ‚äé.rec
    (Œª a‚â§b ‚Üí
      ‚Ñö.elimBy‚â§
       (Œª x y X ‚Üí
         subst (‚Ñö._‚â§ ‚Ñö.abs (b ‚Ñö.- a))
          (‚Ñö.absComm- (‚Ñö.clamp a b x) (‚Ñö.clamp a b y)) X)
       Œª x y x‚â§y ‚Üí
         subst (‚Ñö._‚â§ ‚Ñö.abs (b ‚Ñö.- a))
           (cong ‚Ñö.abs
             (sym (‚ÑöclampInterval-delta a b x y a‚â§b x‚â§y))
           ‚àô ‚Ñö.absComm- (‚Ñö.clamp a b y) (‚Ñö.clamp a b x))
           (‚Ñö.clampDist x y a b))
    (Œª b‚â§a x y ‚Üí
      subst (‚Ñö._‚â§ ‚Ñö.abs (b ‚Ñö.- a))
       (cong ‚Ñö.abs (sym (ùêê'.+InvR' _ _
         (clampDegen a b x b‚â§a ‚àô sym (clampDegen a b y b‚â§a)))))
       (‚Ñö.0‚â§abs (b ‚Ñö.- a)) )
   (‚Ñö.‚â§cases a b)

clamp·µ£-dist : ‚àÄ a b x y ‚Üí abs·µ£ (clamp·µ£ a b x -·µ£ clamp·µ£ a b y) ‚â§·µ£ abs·µ£ (b -·µ£ a)
clamp·µ£-dist a b x y = ‚â§Cont‚ÇÇ
 {f‚ÇÄ x y} {Œª a b ‚Üí abs·µ£ (b -·µ£ a)}
 (cont‚àò‚ÇÇ IsContinuousAbs·µ£
        (IsContinuous-‚ÇÇ‚àò (IsContinuousClamp‚ÇÇ _) (IsContinuousClamp‚ÇÇ _)))
   ((cont‚àò‚ÇÇ IsContinuousAbs·µ£
        (IsContinuous-‚ÇÇ‚àò

          ((Œª _ ‚Üí IsContinuousId) , ((Œª _ ‚Üí IsContinuousConst _)))
          (((Œª _ ‚Üí IsContinuousConst _)) ,
            (Œª _ ‚Üí IsContinuousId))) ))
  (Œª a‚Ñö b‚Ñö ‚Üí  let a = (rat a‚Ñö) ; b = (rat b‚Ñö) in
    ‚â§Cont‚ÇÇ {Œª x y ‚Üí f‚ÇÄ x y a b} {Œª _ _ ‚Üí abs·µ£ (b -·µ£ a)}
      (cont‚àò‚ÇÇ IsContinuousAbs·µ£
        (IsContinuous-‚ÇÇ‚àò
          (((Œª _ ‚Üí IsContinuousConst _)) ,
            (Œª _ ‚Üí IsContinuousClamp a b))
          ((Œª _ ‚Üí IsContinuousClamp a b) , ((Œª _ ‚Üí IsContinuousConst _)))) )
        ((Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousConst _))
      (Œª x y ‚Üí subst2 _‚â§·µ£_
        (sym (abs·µ£-rat _) ‚àô
           cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _) ))
        (sym (abs·µ£-rat _) ‚àô cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _) ))
        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (clamp-dist a‚Ñö b‚Ñö x y))) x y)
 a b
 where
 f‚ÇÄ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 f‚ÇÄ x y a b  = abs·µ£ (clamp·µ£ a b x -·µ£ clamp·µ£ a b y)


‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem : ‚àÄ n m ‚Üí n ‚â° ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï m ‚Üí (1+ pred‚Ñï n) ‚â° m
‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem zero m x = ‚ä•.rec (‚Ñï.znots x )
‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem (suc n) m x = cong 1+_ (‚Ñï.injSuc x)






substFin : ‚àÄ {n} {m} ‚Üí n ‚â° m ‚Üí Fin n ‚Üí Fin m
substFin p = map-snd (subst (_ ‚Ñï.<_) p)

foldFin+·µ£ : ‚àÄ n V (f : A ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) (x +·µ£ x') V ‚â°
   x +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x' V
foldFin+·µ£ zero V f x x' = refl
foldFin+·µ£ (suc n) V f x x' =
  foldFin+·µ£ n (V ‚àò fsuc) _ (x +·µ£ x') (f (V fzero)) ‚àô
   sym (+·µ£Assoc x _ _) ‚àô
   cong (x +·µ£_) (sym (foldFin+·µ£ n (V ‚àò fsuc) f x' (f (V fzero))))

foldFin+0·µ£ : ‚àÄ n V (f : A ‚Üí ‚Ñù) x ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V ‚â°
   x +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) 0 V
foldFin+0·µ£ n V f x =
 cong (Œª x ‚Üí foldlFin (Œª a y ‚Üí a +·µ£ f y) x V) (sym (+IdR _))
 ‚àô foldFin+·µ£ n V f x 0


zip-foldFin+·µ£ : ‚àÄ n V V' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V' ‚â°
   foldlFin {B = ‚Ñù} {n = n} (Œª a (y , y') ‚Üí a +·µ£ (f y +·µ£ f' y')) (x +·µ£ x')
    Œª x ‚Üí V x , V' x
zip-foldFin+·µ£ zero V V' f f' _ _ = refl
zip-foldFin+·µ£ (suc n) V V' f f' x x' =
  zip-foldFin+·µ£ n (V ‚àò fsuc) (V' ‚àò fsuc) f f'
     (x +·µ£ f (V fzero)) (x' +·µ£ f' (V' fzero))
   ‚àô cong (Œª xx ‚Üí foldlFin
      _
      xx
      (Œª x‚ÇÅ ‚Üí V (fsuc x‚ÇÅ) , V' (fsuc x‚ÇÅ)))
      (Lùêë.lem--087 {x} {f (V fzero)} {x'} {f' (V' fzero)})

zip-foldFin+·µ£' : ‚àÄ n V (f : A ‚Üí ‚Ñù) (f' : A ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V ‚â°
   foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ (f y +·µ£ f' y)) (x +·µ£ x')
    V
zip-foldFin+·µ£' zero V f f' _ _ = refl
zip-foldFin+·µ£' (suc n) V  f f' x x' =
  zip-foldFin+·µ£' n (V ‚àò fsuc) f f'
     (x +·µ£ f (V fzero)) (x' +·µ£ f' (V fzero))
   ‚àô cong (Œª xx ‚Üí foldlFin
      _
      xx
      (V ‚àò fsuc) )
      (Lùêë.lem--087 {x} {f (V fzero)} {x'} {f' (V fzero)})


foldFin¬∑DistL : ‚àÄ n (f : A ‚Üí ‚Ñù) Œ± x V ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) (Œ± ¬∑·µ£ x) V
      ‚â° Œ± ¬∑·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) (x) V
foldFin¬∑DistL zero f Œ± x V = refl
foldFin¬∑DistL (suc n) f Œ± x V =
  cong (Œª z ‚Üí foldlFin (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) z
      (Œª x‚ÇÅ ‚Üí V (fsuc x‚ÇÅ)))
       (sym (¬∑DistL+ _ _ _))
  ‚àô foldFin¬∑DistL n f Œ± (x +·µ£ f (V fzero)) (V ‚àò fsuc)


foldFin+map : ‚àÄ n x (f : A ‚Üí ‚Ñù) (g : B ‚Üí A) V ‚Üí
  foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ f y) x (g ‚àò V)
    ‚â° foldlFin {B = ‚Ñù} {A = B} {n = n} (Œª a y ‚Üí a +·µ£ f (g y)) x V
foldFin+map zero x f g V = refl
foldFin+map (suc n) x f g V =
 foldFin+map n (x +·µ£ f ((g ‚àò V) fzero)) f g (V ‚àò fsuc)


foldFin+transpose : ‚àÄ n n' (f : Fin n ‚Üí Fin n' ‚Üí ‚Ñù) x ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a k ‚Üí a +·µ£
      foldlFin {B = ‚Ñù} {n = n'} (Œª a k' ‚Üí a +·µ£
      f k k') (fromNat zero) (idfun _)) x (idfun _)
      ‚â° foldlFin {B = ‚Ñù} {n = n'} (Œª a k' ‚Üí a +·µ£
           foldlFin {B = ‚Ñù} {n = n} (Œª a k ‚Üí a +·µ£
           f k k') (fromNat zero) (idfun _)) x (idfun _)
foldFin+transpose zero zero f x = refl
foldFin+transpose (suc n) zero f x =
   foldFin+map n (x +·µ£ 0) _ fsuc (idfun _) ‚àô
    foldFin+transpose n zero (f ‚àò fsuc) _ ‚àô +IdR x
foldFin+transpose n (suc n') f x =
     ((cong (foldlFin {n = n})
        (funExt‚ÇÇ Œª a k ‚Üí
           cong (a +·µ£_)
            ((Œª i ‚Üí foldFin+map _ (+IdL (f k (idfun (Fin (suc n')) fzero)) i)
             (Œª k' ‚Üí f k k') fsuc (idfun _) i)
              ‚àô foldFin+0·µ£ n' (idfun _) _ _))
         ‚â°$ x) ‚â°$ (idfun (Fin n)))
   ‚àô ((Œª i ‚Üí foldFin+map n (+IdL x (~ i))
     (Œª z ‚Üí
        f (z .fst) 0 +·µ£
        foldlFin (Œª a‚ÇÅ k' ‚Üí a‚ÇÅ +·µ£ f (z .snd) (fsuc k')) 0 (idfun (Fin n')))
     (Œª x ‚Üí x , x) (idfun _) (~ i))
   ‚àô sym (zip-foldFin+·µ£ n _ _ _ _ 0 x)
   ‚àô sym (foldFin+·µ£ n _ _
      (foldlFin (Œª a k ‚Üí a +·µ£ f k 0) 0 (idfun _)) x))
    ‚àô (cong (foldlFin {n = n}
       (Œª a k ‚Üí
          a +·µ£
          foldlFin (Œª a‚ÇÅ k' ‚Üí a‚ÇÅ +·µ£ f k (fsuc k')) 0
          (idfun _)))
           (+·µ£Comm _ _) ‚â°$ (idfun (Fin n)))
  ‚àô foldFin+transpose n n' _ _
  ‚àô sym (foldFin+map n' _ _ fsuc (idfun _))



foldFin¬∑DistL' : ‚àÄ n (f : A ‚Üí ‚Ñù) Œ± V ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) 0 V
      ‚â° Œ± ¬∑·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) 0 V
foldFin¬∑DistL' n f Œ± V =
 cong  (Œª x ‚Üí   foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) x V)
     (sym (ùêë'.0RightAnnihilates _))
 ‚àô foldFin¬∑DistL n f Œ± 0 V



zip-foldFin-·µ£ : ‚àÄ n V V' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    -·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V' ‚â°
   foldlFin {B = ‚Ñù} {n = n} (Œª a (y , y') ‚Üí a +·µ£ (f y -·µ£ f' y')) (x -·µ£ x')
    Œª x ‚Üí V x , V' x
zip-foldFin-·µ£ n V V' f f' x x' =
 cong ((foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V) +·µ£_)
  (-·µ£‚â°[-1¬∑·µ£] (foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V')
   ‚àô sym (foldFin¬∑DistL n _ (-1) _ _)) ‚àô
  zip-foldFin+·µ£ n V V' f _ _ _ ‚àô
   ((cong‚ÇÇ foldlFin (funExt‚ÇÇ Œª a u ‚Üí cong ((a +·µ£_) ‚àò (f (fst u) +·µ£_))
    (sym (-·µ£‚â°[-1¬∑·µ£] _)))
     (cong (x +·µ£_) (sym (-·µ£‚â°[-1¬∑·µ£] _)))) ‚â°$ (Œª x‚ÇÅ ‚Üí V x‚ÇÅ , V' x‚ÇÅ))


foldFin+‚â§ : ‚àÄ n x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V' ‚Üí
   x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí f (V k) ‚â§·µ£ f' (V' k)) ‚Üí
  foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    ‚â§·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V'

foldFin+‚â§ zero x x' f f' V V' x‚â§x' f‚â§f' = x‚â§x'
foldFin+‚â§ (suc n) x x' f f' V V' x‚â§x' f‚â§f' =
  foldFin+‚â§ n _ _ f f' (V ‚àò fsuc) (V' ‚àò fsuc)
    (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (f‚â§f' fzero)) (f‚â§f' ‚àò fsuc)


foldFin+< : ‚àÄ n x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V' ‚Üí
   x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí f (V k) <·µ£ f' (V' k)) ‚Üí
  foldlFin {B = ‚Ñù} {A = A} {n = (suc n)} (Œª a y ‚Üí a +·µ£ f y) x V
    <·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = (suc n)} (Œª a y ‚Üí a +·µ£ f' y) x' V'

foldFin+< zero x x' f f' V V' x‚â§x' X = ‚â§<·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (X fzero)
foldFin+< (suc n) x x' f f' V V' x‚â§x' X =
 foldFin+< n _ _ f f' (V ‚àò fsuc) (V' ‚àò fsuc)
          (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (<·µ£Weaken‚â§·µ£ _ _ $ X fzero)) (X ‚àò fsuc)


foldFin+<-abs : ‚àÄ n ‚Üí zero ‚Ñï.< n ‚Üí ‚àÄ x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V'  ‚Üí
   abs·µ£ x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí abs·µ£ (f (V k)) <·µ£ f' (V' k)) ‚Üí
  abs·µ£ (foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V)
    <·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V'

foldFin+<-abs zero 0<n x x' f f' V V' x‚â§x' X = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)

foldFin+<-abs (suc zero) 0<n x x' f f' V V' x‚â§x' X =
 isTrans‚â§<·µ£ _ _ _ (abs·µ£-triangle _ _) (‚â§<·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (X fzero))
foldFin+<-abs (suc (suc n)) 0<n x x' f f' V V' x‚ÇÅ X =
  foldFin+<-abs (suc n) ‚Ñï.zero-<-suc (x +·µ£ f (V fzero)) (x' +·µ£ f' (V' fzero))
    f f' (V ‚àò fsuc) (V' ‚àò fsuc)
     (isTrans‚â§·µ£ _ _ _ (abs·µ£-triangle _ _)
       (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚ÇÅ (<·µ£Weaken‚â§·µ£ _ _ $ X fzero)))
       (X ‚àò fsuc)

foldFin+‚â§-abs : ‚àÄ n ‚Üí ‚àÄ x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V'  ‚Üí
   abs·µ£ x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí abs·µ£ (f (V k)) ‚â§·µ£ f' (V' k)) ‚Üí
  abs·µ£ (foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V)
    ‚â§·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V'

foldFin+‚â§-abs zero x x' f f' V V' x‚â§x' X = x‚â§x'

foldFin+‚â§-abs (suc zero) x x' f f' V V' x‚â§x' X =
 isTrans‚â§·µ£ _ _ _ (abs·µ£-triangle _ _) (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (X fzero))
foldFin+‚â§-abs (suc (suc n)) x x' f f' V V' x‚ÇÅ X =
  foldFin+‚â§-abs (suc n)  (x +·µ£ f (V fzero)) (x' +·µ£ f' (V' fzero))
    f f' (V ‚àò fsuc) (V' ‚àò fsuc)
     (isTrans‚â§·µ£ _ _ _ (abs·µ£-triangle _ _)
       (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚ÇÅ (X fzero)))
       (X ‚àò fsuc)


foldFin+Const : ‚àÄ n x V ‚Üí
  foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ x) 0 V
    ‚â° fromNat n ¬∑·µ£ x
foldFin+Const zero x V = sym (ùêë'.0LeftAnnihilates _)
foldFin+Const (suc n) x V =
      (Œª i ‚Üí foldFin+0·µ£ n (V ‚àò fsuc) (Œª _ ‚Üí x) (+IdL x i) i)
   ‚àô‚àô cong‚ÇÇ (_+·µ£_) (sym (¬∑IdL x)) (foldFin+Const n x (V ‚àò fsuc))
   ‚àô‚àô (sym (¬∑DistR+ 1 (fromNat n) x)
      ‚àô cong (_¬∑·µ£ x) (+·µ£-rat _ _  ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ 1 n )))

foldlFin-substN : ‚àÄ {n n'} ‚Üí (p : n ‚â° n') ‚Üí ‚àÄ f b v ‚Üí
            foldlFin {B = B} {A = A} {n} f b v ‚â°
              foldlFin {B = B} {A = A} {n'} f b (v ‚àò substFin (sym p))
foldlFin-substN {n = n} = J (Œª n' p ‚Üí ‚àÄ f b v ‚Üí
            foldlFin f b v ‚â°
              foldlFin f b (v ‚àò substFin (sym p)))
               Œª f b v ‚Üí cong (foldlFin {n = n} f b)
                 (funExt Œª x ‚Üí cong v (sym (transportRefl _)))


deltas-sum : ‚àÄ n (f : Fin (suc n) ‚Üí ‚Ñù) ‚Üí
 foldlFin {n = n} (Œª a k ‚Üí a +·µ£ (f (fsuc k) -·µ£ f (finj k))) 0 (idfun _) ‚â°
   f flast -·µ£ f fzero
deltas-sum zero f = sym (ùêë'.+InvR' _ _ (cong f (to‚Ñï-injective refl)))
deltas-sum (suc n) f =
 foldFin+0·µ£ n (fsuc) _ _
  ‚àô cong‚ÇÇ _+·µ£_
    (+IdL _)
    (foldFin+map n 0 _ fsuc (idfun _) ‚àô
       (cong (foldlFin {n = n})
        (funExt‚ÇÇ (Œª s k' ‚Üí
            cong ((s +·µ£_) ‚àò (_-·µ£_ (f (fsuc (fsuc k')))) ‚àò f)
              (to‚Ñï-injective refl)))
        ‚â°$ 0 ‚â°$ (idfun _))
     ‚àô deltas-sum n (f ‚àò fsuc))
  ‚àô Lùêë.lem--061 ‚àô cong‚ÇÇ _-·µ£_ (cong f (to‚Ñï-injective refl)) (cong f (to‚Ñï-injective refl))


‚Ñï^+ : ‚àÄ k n m ‚Üí k ‚Ñï.^ (n ‚Ñï.+ m) ‚â° (k ‚Ñï.^ n) ‚Ñï.¬∑ (k ‚Ñï.^ m)
‚Ñï^+ k zero m = sym (‚Ñï.+-zero _)
‚Ñï^+ k (suc n) m = cong (k ‚Ñï.¬∑_) (‚Ñï^+ k n m) ‚àô ‚Ñï.¬∑-assoc k _ _


2^ : ‚Ñï ‚Üí ‚Ñï
2^ zero = 1
2^ (suc x) = (2^ x) ‚Ñï.+ (2^ x)

2^-^ : ‚àÄ n ‚Üí 2^ n ‚â° 2 ^ n
2^-^ zero = refl
2^-^ (suc n) = cong‚ÇÇ ‚Ñï._+_ (2^-^ n) (2^-^ n)
 ‚àô cong ((2 ^ n) ‚Ñï.+_) (sym (‚Ñï.+-zero _))

2^+ : ‚àÄ n m ‚Üí 2^ (n ‚Ñï.+ m) ‚â° (2^ n) ‚Ñï.¬∑ (2^ m)
2^+ zero m = sym (‚Ñï.+-zero (2^ m))
2^+ (suc n) m = cong‚ÇÇ ‚Ñï._+_ (2^+ n m) (2^+ n m)
 ‚àô ¬∑-distrib ≥ (2^ n) _ (2^ m)

injectFin+ : {m n : ‚Ñï} ‚Üí Fin m ‚Üí Fin (n ‚Ñï.+ m)
injectFin+ {n = n} x = (n ‚Ñï.+ fst x) ,  ‚Ñï.<-k+ {k = n} (snd x)
-- injectFin+ {n = suc n} x = fsuc (injectFin+ x)


injectFin+' : {m n : ‚Ñï} ‚Üí Fin n ‚Üí Fin (n ‚Ñï.+ m)
injectFin+' {m} {n = n} x = fst x , ‚Ñï.<‚â§-trans (snd x) ‚Ñï.‚â§SumLeft

fsuc‚àòinj' : {n m : ‚Ñï} ‚Üí ‚àÄ x ‚Üí fsuc (injectFin+' {suc m} {n} x) ‚â°
                 injectFin+' (fsuc x)
fsuc‚àòinj' {n} x = to‚Ñï-injective refl

finj‚àòinj' : {n m : ‚Ñï} ‚Üí ‚àÄ x ‚Üí finj (injectFin+' {m} {n} x) ‚â°
            injectFin+' {m} {suc n} (finj x)
finj‚àòinj' x = to‚Ñï-injective refl


fsuc‚àòinj : {n m : ‚Ñï} ‚Üí ‚àÄ x p ‚Üí
                 fsuc (injectFin+ {m} {n} x) ‚â°
                 (fst (injectFin+ {suc m} {n} (fsuc x))
                   , p)
fsuc‚àòinj x p = to‚Ñï-injective (sym (+-suc _ _))

finj‚àòinj : {n m : ‚Ñï} ‚Üí ‚àÄ x p ‚Üí finj (injectFin+ {m} {n} x) ‚â°
            (fst (injectFin+ {suc m} {n} (finj x)) , p)
finj‚àòinj x p = to‚Ñï-injective refl




Fin+‚Üí‚äé : ‚àÄ n m ‚Üí Fin (n ‚Ñï.+ m) ‚Üí (Fin n ‚äé Fin m)
Fin+‚Üí‚äé zero m = inr
Fin+‚Üí‚äé (suc n) m (zero , snd‚ÇÅ) = inl fzero
Fin+‚Üí‚äé (suc n) m (suc k , l , p) =
 ‚äé.map fsuc
  (idfun _) (Fin+‚Üí‚äé n m (k , l ,
   cong pred‚Ñï (sym (‚Ñï.+-suc l (suc k)) ‚àô p)))


rec‚äé-injectFin+' : ‚àÄ {A : Type} {m} {n} f g x ‚Üí
  ‚äé.rec {C = A} f g (Fin+‚Üí‚äé n m (injectFin+' {m} {n} x))
                       ‚â° f x
rec‚äé-injectFin+' {n = zero} f g x = ‚ä•.rec (¬¨Fin0 x)
rec‚äé-injectFin+' {n = suc n} f g (zero , snd‚ÇÅ) = cong f (to‚Ñï-injective refl)
rec‚äé-injectFin+' {m = m} {n = suc n} f g (suc k , l , p) =
      (cong (Œª k ‚Üí ‚äé.rec f g
      (‚äé.map fsuc (Œª x ‚Üí x)
       (Fin+‚Üí‚äé n m k))) (to‚Ñï-injective refl)
       ‚àô (rec-map f g fsuc (idfun _) (Fin+‚Üí‚äé n m (injectFin+' k'))))
    ‚àô‚àô rec‚äé-injectFin+' {n = n} (f ‚àò fsuc) g k'
    ‚àô‚àô cong f (to‚Ñï-injective refl)
 where
 k' = (k , l , cong pred‚Ñï (sym (‚Ñï.+-suc l (suc k)) ‚àô p))


Fin+‚Üí‚äé‚àòinjectFin+' : ‚àÄ n m x ‚Üí inl x ‚â° Fin+‚Üí‚äé n m (injectFin+' {m} {n} x)
Fin+‚Üí‚äé‚àòinjectFin+' zero m x = ‚ä•.rec (¬¨Fin0 x)
Fin+‚Üí‚äé‚àòinjectFin+' (suc n) m (zero , _) =
  cong inl (to‚Ñï-injective refl)
Fin+‚Üí‚äé‚àòinjectFin+' (suc n) m (suc k , l , p) =
  cong inl (to‚Ñï-injective refl) ‚àô‚àô cong (‚äé.map fsuc (Œª x ‚Üí x))
    (Fin+‚Üí‚äé‚àòinjectFin+' n m (k , l ,
     injSuc (sym (+-suc l (suc k)) ‚àô p)))
    ‚àô‚àô cong (Œª p ‚Üí ‚äé.map fsuc (Œª x ‚Üí x)
      (Fin+‚Üí‚äé n m
       (k ,
        l ‚Ñï.+ m , p)))
         (isSet‚Ñï _ _ _ _)

Fin+‚Üí‚äé‚àòinjectFin+ : ‚àÄ n m x ‚Üí inr x ‚â° Fin+‚Üí‚äé n m (injectFin+ {m} {n} x)
Fin+‚Üí‚äé‚àòinjectFin+ zero m x = cong inr (to‚Ñï-injective refl)
Fin+‚Üí‚äé‚àòinjectFin+ (suc n) m x =
  cong (‚äé.map fsuc (Œª x ‚Üí x)) (Fin+‚Üí‚äé‚àòinjectFin+ n m x
   ‚àô cong (Fin+‚Üí‚äé n m) (to‚Ñï-injective refl))

rec‚äé-injectFin+ : ‚àÄ {A : Type} {m} {n} f g x ‚Üí
  ‚äé.rec {C = A} f g (Fin+‚Üí‚äé n m (injectFin+ {m} {n} x))
                       ‚â° g x
rec‚äé-injectFin+ {n = zero} f g x = cong g (to‚Ñï-injective refl)
rec‚äé-injectFin+ {m = m} {n = suc n} f g x =

  cong (Œª k ‚Üí ‚äé.rec f g
      (‚äé.map fsuc (Œª x‚ÇÅ ‚Üí x‚ÇÅ)
       (Fin+‚Üí‚äé n m k))) (to‚Ñï-injective refl)
   ‚àô (rec-map f g fsuc (idfun _) (Fin+‚Üí‚äé n m (injectFin+ x)))
  ‚àô rec‚äé-injectFin+ {n = n} (f ‚àò fsuc) g x

injectFin+'-flast : ‚àÄ n m k p p' ‚Üí
  Fin+‚Üí‚äé n m (injectFin+' {m} {n} (k , zero , p)) ‚â°
    inl (k , zero , p')

injectFin+'-flast zero m k p p' = ‚ä•.rec (‚Ñï.snotz p)
injectFin+'-flast (suc n) m zero p p' = cong inl (to‚Ñï-injective refl)
injectFin+'-flast (suc n) m (suc k) p p' =
  cong (‚äé.map fsuc (Œª x ‚Üí x))
    (cong (Fin+‚Üí‚äé n m) (to‚Ñï-injective refl)
     ‚àô injectFin+'-flast n m k (‚Ñï.injSuc p) (‚Ñï.injSuc p'))
   ‚àô cong inl (to‚Ñï-injective refl)


Iso-Fin+‚äé-leftInv : ‚àÄ n m a ‚Üí ‚äé.rec injectFin+' injectFin+ (Fin+‚Üí‚äé n m a) ‚â° a
Iso-Fin+‚äé-leftInv zero m a = to‚Ñï-injective refl
Iso-Fin+‚äé-leftInv (suc n) m (zero , l , p) = to‚Ñï-injective refl
Iso-Fin+‚äé-leftInv (suc n) m (suc k , l , p) =
     h
       (Fin+‚Üí‚äé n m
        (k , l , (Œª i ‚Üí pred‚Ñï (((Œª i‚ÇÅ ‚Üí +-suc l (suc k) (~ i‚ÇÅ)) ‚àô p) i))))
  ‚àô‚àô cong fsuc
     (Iso-Fin+‚äé-leftInv n m (k , l , injSuc (sym (+-suc l (suc k)) ‚àô p)))
  ‚àô‚àô to‚Ñï-injective refl
 where

 h : ‚àÄ x ‚Üí
       ‚äé.rec (injectFin+' {m} {suc n}) (injectFin+ {m} {suc n})
           (‚äé.map fsuc (idfun (Fin m)) x)
       ‚â°
       fsuc (‚äé.rec injectFin+' injectFin+ x)
 h (inl x) = to‚Ñï-injective refl
 h (inr x) = to‚Ñï-injective refl

Iso-Fin+‚äé : ‚àÄ n m ‚Üí Iso (Fin (n ‚Ñï.+ m)) (Fin n ‚äé Fin m)
Iso-Fin+‚äé n m .Iso.fun = Fin+‚Üí‚äé n m
Iso-Fin+‚äé n m .Iso.inv = ‚äé.rec (injectFin+' {m} {n}) (injectFin+ {m} {n})
Iso-Fin+‚äé n m .Iso.rightInv (inl x) = sym (Fin+‚Üí‚äé‚àòinjectFin+' _ _ _)
Iso-Fin+‚äé n m .Iso.rightInv (inr x) = sym (Fin+‚Üí‚äé‚àòinjectFin+ _ _ _)
Iso-Fin+‚äé n m .Iso.leftInv = Iso-Fin+‚äé-leftInv n m

injectFin+'-flast‚â°injectFin+-fzero :
 ‚àÄ n m ‚Üí
  fst (injectFin+' {m} {suc n} flast) ‚â°
  fst (injectFin+ {suc m} {n} fzero)
injectFin+'-flast‚â°injectFin+-fzero n m = sym (+-zero _)

injectFin+'-flast-S : ‚àÄ n m k p ‚Üí
     inr fzero ‚â° Fin+‚Üí‚äé (suc n) (suc (suc m))
       (k , suc m , p)
injectFin+'-flast-S n m zero p =
  ‚ä•.rec (‚Ñï.znots {n}
   (‚Ñï.inj-+m {m = suc (suc m)} (cong suc (sym (+-comm m 1)) ‚àô p)))
injectFin+'-flast-S zero m (suc zero) p =
 cong inr (to‚Ñï-injective refl)
injectFin+'-flast-S zero m (suc (suc k)) p =
 ‚ä•.rec (‚Ñï.snotz {k} (‚Ñï.inj-+m {m = suc (suc (suc m))}
       (cong suc (
         (‚Ñï.+-assoc k 3 m ‚àô
          cong (‚Ñï._+ m) (+-comm k 3))
        ‚àô +-comm (suc (suc (suc k))) m) ‚àô p)))

injectFin+'-flast-S (suc n) m (suc k) p =
 cong (‚äé.map fsuc (Œª x ‚Üí x)) (injectFin+'-flast-S n m k _)

foldFin¬∑2 : ‚àÄ n m ‚Üí (f : B ‚Üí A ‚Üí B) ‚Üí (b : B) ‚Üí
              (V : Fin (n ‚Ñï.+ m) ‚Üí A) ‚Üí
             foldlFin {n = n ‚Ñï.+ m} f b V ‚â°
               foldlFin {n = m} f
                 (foldlFin {n = n} f b (V ‚àò injectFin+'))
                  (V ‚àò injectFin+)
foldFin¬∑2 zero m f b V =
 cong (foldlFin {n = m} f b)
  (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl) )
foldFin¬∑2 {B = B} {A = A} (suc n) m f b V =
 foldFin¬∑2 n m f (f b (V fzero)) (V ‚àò fsuc)
  ‚àô cong‚ÇÇ (foldlFin {_} {B} {_} {A} {m} f)
    (cong‚ÇÇ (foldlFin {_} {B} {_} {A} {n} f)
      (cong (f b) (cong V (to‚Ñï-injective refl)))
        (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl)))
     (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl))


foldFin-sum-concat : ‚àÄ n m ‚Üí (f : Fin (n ‚Ñï.+ m) ‚Üí ‚Ñù) ‚Üí
     foldlFin (Œª a y ‚Üí a +·µ£ f y) 0 (idfun _)
      ‚â° foldlFin (Œª a y ‚Üí a +·µ£ f (injectFin+' {m} {n} y)) 0 (idfun _)
      +·µ£ foldlFin (Œª a y ‚Üí a +·µ£ f (injectFin+ {m} {n} y)) 0 (idfun _)

foldFin-sum-concat n m f =
  foldFin¬∑2 n m (Œª a y ‚Üí a +·µ£ f y) 0 (idfun _)
   ‚àô foldFin+0·µ£ m (idfun _  ‚àò injectFin+) f _
   ‚àô cong‚ÇÇ _+·µ£_
     (foldFin+map n _ _ injectFin+' (idfun _))
     (foldFin+map m _ _ injectFin+ (idfun _))

0<2^ : ‚àÄ n ‚Üí 0 ‚Ñï.< 2^ n
0<2^ zero = ‚Ñï.zero-<-suc
0<2^ (suc n) = ‚Ñï.<-+-< (0<2^ n) (0<2^ n)


Fin^2¬∑ : ‚àÄ n m ‚Üí (Fin (2^ n) √ó Fin (2^ m))
                      ‚Üí (Fin (2^ (n ‚Ñï.+ m)))
Fin^2¬∑ n m ((l , l<) , (k , k<)) =
 (((2^ m) ‚Ñï.¬∑ l) ‚Ñï.+ k) ,
  (2^ m ‚Ñï.¬∑ l ‚Ñï.+ k
      <‚â§‚ü® ‚Ñï.<-k+ {k = 2^ m ‚Ñï.¬∑ l} k< ‚ü©
     _ ‚â°‚â§‚ü® (Œª i ‚Üí ‚Ñï.+-comm (‚Ñï.¬∑-comm (2^ m) l i) (2^ m) i) ‚ü©
    _ ‚â§‚â°‚ü® ‚Ñï.‚â§-¬∑k {k = 2^ m} l< ‚ü©
         sym (2^+ n m))

 where open ‚Ñï.<-Reasoning

Fin^2¬∑-injectFin+' : ‚àÄ n m x y ‚Üí
  (injectFin+' (Fin^2¬∑ n m (x , y))) ‚â°
    (Fin^2¬∑ (suc n) m (injectFin+' x , y))
Fin^2¬∑-injectFin+' n m (fst‚ÇÅ , snd‚ÇÅ) y = to‚Ñï-injective refl

Fin^2¬∑-injectFin+ : ‚àÄ n m x y ‚Üí (injectFin+ (Fin^2¬∑ n m (x , y)))
    ‚â° (Fin^2¬∑ (suc n) m (injectFin+ x , y))
Fin^2¬∑-injectFin+ n m x y =
 to‚Ñï-injective
  (cong (‚Ñï._+ (2^ m ‚Ñï.¬∑ x .fst ‚Ñï.+ y .fst)) (2^+ n m ‚àô ‚Ñï.¬∑-comm (2^ n) (2^ m) )
    ‚àô (‚Ñï.+-assoc (2^ m ‚Ñï.¬∑ 2^ n) _ (fst y) ‚àô
      cong (‚Ñï._+ fst y) (¬∑-distribÀ° (2^ m) _ _)))

foldFin¬∑2^ : ‚àÄ n m ‚Üí (f : B ‚Üí A ‚Üí B) ‚Üí (b : B) ‚Üí
              (V : Fin (2^ (n ‚Ñï.+ m)) ‚Üí A) ‚Üí
             foldlFin f b V ‚â°
               foldlFin {n = 2^ n} (foldlFin {n = 2^ m} f)
                 b (curry (V ‚àò Fin^2¬∑ n m ))
foldFin¬∑2^ zero m f b V = cong (foldlFin {n = 2^ m} f b)
  (funExt Œª x ‚Üí cong V (to‚Ñï-injective
    (cong (‚Ñï._+ fst x) (‚Ñï.0‚â°m¬∑0 (2^ m)))))
foldFin¬∑2^ (suc n) m f b V =
  foldFin¬∑2 (2^ (n ‚Ñï.+ m)) (2^ (n ‚Ñï.+ m)) f b V
   ‚àô foldFin¬∑2^ n m _ _ _
    ‚àô cong {x = (foldlFin {n = 2^ (n ‚Ñï.+ m)}
            f b (V ‚àò injectFin+'))} (Œª z ‚Üí foldlFin (foldlFin f) z
         (curry ((V ‚àò injectFin+) ‚àò Fin^2¬∑ n m)))
         (foldFin¬∑2^ n m _ _ _)

    ‚àô (Œª i ‚Üí foldlFin {n = 2^ n} ff'
       (foldlFin {n = 2^ n} ff' b
        (Œª x y ‚Üí V (Fin^2¬∑-injectFin+' n m x y i)))
       (Œª x y ‚Üí V (Fin^2¬∑-injectFin+ n m x y i))) ‚àô
      sym (foldFin¬∑2 (2^ n) (2^ n) ff' _ _)
 where
 ff' = (foldlFin {n = 2^ m} f)


record ElimFinSS (A : Type) (n : ‚Ñï) : Type where
 no-eta-equality
 field
  a‚ÇÄ : A
  f : Fin n ‚Üí A
  a‚Çô : A

 go : Fin (2 ‚Ñï.+ n) ‚Üí A
 go (zero , l , p) = a‚ÇÄ
 go (suc k , zero , p) = a‚Çô
 go (suc k , suc l , p) =
   f (k , l , cong (pred‚Ñï ‚àò pred‚Ñï) (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p))
