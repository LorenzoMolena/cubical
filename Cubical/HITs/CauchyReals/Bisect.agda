{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Bisect where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence



‚â§^n : ‚àÄ N n ‚Üí N ‚Ñï.< n ‚Üí
        ([ 1 / 2 ] ‚Ñö^‚Åø n) ‚Ñö.‚â§ ([ 1 / 2 ] ‚Ñö^‚Åø N)
‚â§^n N zero x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
‚â§^n zero (suc zero) x = ‚Ñö.dec‚Ñö‚â§? {[ 1 / 2 ] ‚Ñö.¬∑ 1} {1}
‚â§^n zero (suc (suc n)) x = ‚Ñö.isTrans‚â§
  (([ 1 / 2 ] ‚Ñö^‚Åø (suc n)) ‚Ñö.¬∑ [ 1 / 2 ] )
  (([ 1 / 2 ] ‚Ñö^‚Åø n) ‚Ñö.¬∑ [ 1 / 2 ])
  _
  (‚Ñö.‚â§-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]})
    (‚â§^n n (suc n) ‚Ñï.‚â§-refl))
  (‚â§^n zero (suc n) (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§))
‚â§^n (suc N) (suc n) x =
 ‚Ñö.‚â§-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]})
   (‚â§^n N n (‚Ñï.pred‚Ñï-‚â§-pred‚Ñï x))

Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô : ‚Ñö‚Çä ‚Üí (P : ‚Ñô ‚Ñö) ‚Üí (‚àÄ x ‚Üí x ‚àà P  ‚Üí ‚Ñù) ‚Üí Type
Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô L P f =
  (‚àÄ q q‚àà r r‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚Ñö.abs (q ‚Ñö.- r) ‚Ñö.< (fst Œµ) ‚Üí abs·µ£ (f q q‚àà -·µ£ f r r‚àà)
     <·µ£ rat (fst (L ‚Ñö‚Çä¬∑ Œµ  )))


Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô : ‚Ñö‚Çä ‚Üí (P : ‚Ñô ‚Ñö) ‚Üí (‚àÄ x ‚Üí x ‚àà P  ‚Üí ‚Ñö) ‚Üí Type
Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô K P f =
  (‚àÄ q q‚àà r r‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
        ‚Ñö.abs' (f q q‚àà ‚Ñö.- f r r‚àà) ‚Ñö.< (fst Œµ)
     ‚Üí ‚Ñö.abs' (q ‚Ñö.- r) ‚Ñö.< fst (K ‚Ñö‚Çä¬∑ Œµ ) )


‚Ñöinterval‚Ñô : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñô ‚Ñö 
‚Ñöinterval‚Ñô a b x = ((a ‚Ñö.‚â§ x) √ó (x ‚Ñö.‚â§ b)) ,
  isProp√ó (‚Ñö.isProp‚â§ _ _)  (‚Ñö.isProp‚â§ _ _)



bisect : ‚àÄ K a b ‚Üí (a<b : a ‚Ñö.< b) ‚Üí ‚àÄ f
           ‚Üí Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô K (‚Ñöinterval‚Ñô a b) f

           ‚Üí Œ£ _ (Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô (K ‚Ñö.‚Ñö‚Çä¬∑ 2) (‚Ñöinterval‚Ñô
                 (f a (‚Ñö.isRefl‚â§ _  , ‚Ñö.<Weaken‚â§ a b a<b))
                 (f b (‚Ñö.<Weaken‚â§ _ _ a<b , (‚Ñö.isRefl‚â§ _)))))
           
bisect K a b a<b f il  =
  f‚Åª¬π , L-f‚Åª¬π

 where
 
 a‚â§b = ‚Ñö.<Weaken‚â§ _ _ a<b
 Œî‚ÇÄ = b ‚Ñö.- a 

 record Step (y Œî : ‚Ñö) : Type where
  field
   a' b' : ‚Ñö
   a'‚â§b' : a' ‚Ñö.‚â§ b'
   b'-a'‚â§Œî : b' ‚Ñö.- a' ‚Ñö.‚â§ Œî 
   a'‚àà : a' ‚àà ‚Ñöinterval‚Ñô a b
   b'‚àà : b' ‚àà ‚Ñöinterval‚Ñô a b
   a'‚â§ : f a' a'‚àà ‚Ñö.‚â§ y
   ‚â§b' : y ‚Ñö.‚â§ f b' b'‚àà 


 -- stepSubstHelp : ‚àÄ y {Œî Œî'} ‚Üí (p : Œî ‚â° Œî') ‚Üí (s : Step y Œî) ‚Üí
 --                    Step.a' s ‚â° Step.a' (subst (Step y) p s) 
 -- stepSubstHelp y p s = {!transportRefl _!}

 record Step‚äÉStep {y Œî ŒîS : _} (s : Step y Œî) (sS : Step y ŒîS) : Type where
  
  field
   a'‚â§a'S : Step.a' s ‚Ñö.‚â§ Step.a' sS 
   bS‚â§b' : Step.b' sS ‚Ñö.‚â§ Step.b' s
   -- distA' : (Step.a' sS) ‚Ñö.‚â§ Œî ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ (Step.a' s)
 
 module _ (y : ‚Ñö) (y‚àà : y ‚àà _) where
   
  step0 : Step y Œî‚ÇÄ
  step0 .Step.a' = a
  step0 .Step.b' = b
  step0 .Step.a'‚â§b' = a‚â§b
  step0 .Step.b'-a'‚â§Œî = ‚Ñö.isRefl‚â§ _
  step0 .Step.a'‚àà = ‚Ñö.isRefl‚â§ _  , a‚â§b
  step0 .Step.b'‚àà = a‚â§b , (‚Ñö.isRefl‚â§ _)
  step0 .Step.a'‚â§ = fst y‚àà
  step0 .Step.‚â§b' = snd y‚àà

  stepS' : ‚àÄ Œî ‚Üí (s : Step y Œî) ‚Üí Œ£ (Step y (Œî ‚Ñö.¬∑ [ 1 / 2 ])) (Step‚äÉStep s)
  stepS' Œî s = w (‚Ñö.Dichotomy‚Ñö y fMid)
   where
   open Step s

   mid : ‚Ñö
   mid = b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ a' ‚Ñö.¬∑ [ 1 / 2 ]

   p = ‚Ñö.‚â§-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) a'‚â§b'

   a'‚â§mid : a' ‚Ñö.‚â§ mid
   a'‚â§mid = ‚Ñö.isTrans‚â§ _ _ _
     (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑IdR a') ‚àô cong (a' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
       ‚Ñö.¬∑DistL+ a' _ _))
     (‚Ñö.‚â§-+o _ _ (a' ‚Ñö.¬∑ [ 1 / 2 ]) p) 

   mid‚â§b' : mid ‚Ñö.‚â§ b' 
   mid‚â§b' = ‚Ñö.isTrans‚â§ _ _ _    
     (‚Ñö.‚â§-o+ _ _ (b' ‚Ñö.¬∑ [ 1 / 2 ]) p) 
     (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑DistL+ b' _ _) ‚àô cong (b' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
       ‚Ñö.¬∑IdR b'))
   mid‚àà : mid ‚àà ‚Ñöinterval‚Ñô a b
   mid‚àà = ‚Ñö.isTrans‚â§ _ _ _ (fst (a'‚àà)) a'‚â§mid ,
           ‚Ñö.isTrans‚â§ _ _ _ mid‚â§b' (snd b'‚àà)

   fMid = f mid mid‚àà
   a'-mid‚â§Œî/2 : (mid ‚Ñö.- a') ‚Ñö.‚â§ Œî ‚Ñö.¬∑ [ 1 / 2 ]
   a'-mid‚â§Œî/2 = 
     ‚Ñö.isTrans‚â§ _ _ _
      (‚Ñö.‚â°Weaken‚â§ (mid ‚Ñö.- a') ((b' ‚Ñö.- a') ‚Ñö.¬∑ [ 1 / 2 ])
        (sym (‚Ñö.+Assoc _ _ _) ‚àô
         cong (b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_)
          (cong (a' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_) (‚Ñö.¬∑Comm -1 a')
           ‚àô sym (‚Ñö.¬∑DistL+ a' _ _) ‚àô
            ‚Ñö.¬∑Comm _ _ ‚àô
             sym (‚Ñö.¬∑Assoc [ 1 / 2 ] -1 a') ‚àô  ‚Ñö.¬∑Comm [ 1 / 2 ] _)
          ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))
      (‚Ñö.‚â§-¬∑o _ _ _ (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) b'-a'‚â§Œî)

   w : (y ‚Ñö.‚â§ fMid) ‚äé (fMid ‚Ñö.< y) ‚Üí Œ£ (Step y (Œî ‚Ñö.¬∑ [ 1 / 2 ]))
             (Step‚äÉStep s) 
   w (inl x) .fst .Step.a' = a'
   w (inl x) .fst .Step.b' = mid
   w (inl x) .fst .Step.a'‚â§b' = a'‚â§mid
   w (inl x) .fst .Step.b'-a'‚â§Œî = a'-mid‚â§Œî/2
   w (inl x) .fst .Step.a'‚àà = a'‚àà
   w (inl x) .fst .Step.b'‚àà = mid‚àà 
   w (inl x) .fst .Step.a'‚â§ = a'‚â§
   w (inl x) .fst .Step.‚â§b' = x
   w (inl x) .snd .Step‚äÉStep.a'‚â§a'S = ‚Ñö.isRefl‚â§ a'
   w (inl x) .snd .Step‚äÉStep.bS‚â§b' = mid‚â§b'
   w (inr x) .fst .Step.a' = mid
   w (inr x) .fst .Step.b' = b'
   w (inr x) .fst .Step.a'‚â§b' = mid‚â§b'
   w (inr x) .fst .Step.b'-a'‚â§Œî =
     ‚Ñö.isTrans‚â§ _ _ _
        (‚Ñö.‚â°Weaken‚â§ (b' ‚Ñö.- mid)
                    ((b' ‚Ñö.- a') ‚Ñö.¬∑ [ 1 / 2 ])
                      ((cong (b' ‚Ñö.+_) (‚Ñö.-Distr _ _ ) ‚àô
                       ‚Ñö.+Assoc _ _ _ ‚àô
                        cong‚ÇÇ ‚Ñö._+_
                        (cong‚ÇÇ ‚Ñö._+_ (sym (‚Ñö.¬∑IdR b'))
                         (‚Ñö.¬∑Comm -1 _ ‚àô sym (‚Ñö.¬∑Assoc _ _ _))
                         ‚àô sym (‚Ñö.¬∑DistL+ b' 1 [ -1 / 2 ]))
                         (‚Ñö.¬∑Assoc -1 _ _))
                       ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))
          (‚Ñö.‚â§-¬∑o _ _ _ (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) b'-a'‚â§Œî)

   w (inr x) .fst .Step.a'‚àà = mid‚àà
   w (inr x) .fst .Step.b'‚àà = b'‚àà
   w (inr x) .fst .Step.a'‚â§ = ‚Ñö.<Weaken‚â§ _ _ x
   w (inr x) .fst .Step.‚â§b' = ‚â§b'
   w (inr x) .snd .Step‚äÉStep.a'‚â§a'S = a'‚â§mid
   w (inr x) .snd .Step‚äÉStep.bS‚â§b' = ‚Ñö.isRefl‚â§ b'
   
  stepS : ‚àÄ Œî ‚Üí Step y Œî ‚Üí Step y (Œî ‚Ñö.¬∑ [ 1 / 2 ])
  stepS Œî s = fst (stepS' Œî s)
  
  ww : ‚àÄ n ‚Üí Step y (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n))
  ww zero = subst (Step y) (sym (‚Ñö.¬∑IdR Œî‚ÇÄ)) step0
  ww (suc n) = subst (Step y) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS _ (ww n))

  s = Step.a' ‚àò ww


  ss‚â§-suc : ‚àÄ n (z : Step y (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n))) ‚Üí Step.a' z ‚Ñö.‚â§
      Step.a' (subst (Step y) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS
       (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n)) z))
  ss‚â§-suc n z = ‚Ñö.isTrans‚â§ _ _ _ (Step‚äÉStep.a'‚â§a'S (snd (stepS'
       (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n)) z)))
         (‚Ñö.‚â°Weaken‚â§ _ _ (sym (transportRefl _)))
  
  ss‚â§ : ‚àÄ n m ‚Üí s n ‚Ñö.‚â§ s (m ‚Ñï.+ n) 
  ss‚â§ n zero = ‚Ñö.isRefl‚â§ _ 
  ss‚â§ n (suc m) = ‚Ñö.isTrans‚â§ _ _ _ (ss‚â§ n m) (ss‚â§-suc (m ‚Ñï.+ n) (ww (m ‚Ñï.+ n)))


  ww‚äÇ : ‚àÄ n m ‚Üí (s (m ‚Ñï.+ n) ‚Ñö.- s n) ‚Ñö.‚â§ Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n)
  ww‚äÇ = {!!}
  
  www : {Œµ : ‚Ñö‚Çä} ‚Üí (Œ£[ n ‚àà ‚Ñï ] [ 1 / 2 ] ‚Ñö^‚Åø n ‚Ñö.<
            fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))
         ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
            ‚Ñö.abs ((s n) ‚Ñö.- (s m)) ‚Ñö.< (fst Œµ)   )
  www (N , P) .fst = N
  www {Œµ} (N , P) .snd = ‚Ñï.elimBy‚â§+
    (Œª n m X m< n< ‚Üí subst (‚Ñö._< fst Œµ) (‚Ñö.absComm- _ _) (X n< m<))
    Œª n m p N<n ‚Üí
      let P' : Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø N) ‚Ñö.< fst Œµ
          P' = ‚Ñö.isTrans<‚â§ _ _ (fst Œµ) (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.-< a b a<b) P)
                 (‚Ñö.‚â°Weaken‚â§ _ _
                    ((cong (fst (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b) ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _))
                     ‚àô ‚Ñö.y¬∑[x/y] (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b) (fst Œµ)))
      in ‚Ñö.isTrans‚â§< _ _ _
          (‚Ñö.isTrans‚â§ _ ((s (m ‚Ñï.+ n)) ‚Ñö.- (s n)) _
            (‚Ñö.‚â°Weaken‚â§ _ _ (‚Ñö.absNonNeg (s (m ‚Ñï.+ n) ‚Ñö.- s n)
              (‚Ñö.-‚â§ (s n) (s (m ‚Ñï.+ n)) (ss‚â§ n m))))
              (ww‚äÇ n m))
          (‚Ñö.isTrans‚â§< _ (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø (N))) _
            (‚Ñö.‚â§-o¬∑ _ _ Œî‚ÇÄ (‚Ñö.-‚â§ a b a‚â§b) (‚â§^n N n N<n)) P')

  f‚Åª¬π-aprox-S : _
  f‚Åª¬π-aprox-S = ww ‚àò fst ‚àò 1/2‚Åø<Œµ ‚àò
    (Œª Œµ ‚Üí Œµ ‚Ñö.‚Ñö‚Çä¬∑ ‚Ñö.inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
  
  f‚Åª¬π-aprox : ‚Ñö‚Çä ‚Üí ‚Ñö
  f‚Åª¬π-aprox = Step.a' ‚àò f‚Åª¬π-aprox-S

  f‚Åª¬π-aprox' : ‚Ñö‚Çä ‚Üí ‚Ñö
  f‚Åª¬π-aprox' = (Step.b' ‚àò ww ‚àò fst) ‚àò 1/2‚Åø<Œµ ‚àò
    (Œª Œµ ‚Üí Œµ ‚Ñö.‚Ñö‚Çä¬∑ ‚Ñö.inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))


  f‚Åª¬π-cauchy' : ‚àÄ Œµ Œ¥ ‚Üí fst Œµ ‚Ñö.‚â§ fst Œ¥ ‚Üí
    ‚Ñö.abs' (f‚Åª¬π-aprox Œ¥ ‚Ñö.- f‚Åª¬π-aprox Œµ) ‚Ñö.< fst (Œ¥ ‚Ñö‚Çä+ Œµ)
  f‚Åª¬π-cauchy' = {!!}
  
  f‚Åª¬π-cauchy : ‚àÄ Œµ Œ¥ ‚Üí ‚Ñö.abs' (f‚Åª¬π-aprox Œ¥ ‚Ñö.- f‚Åª¬π-aprox Œµ) ‚Ñö.< fst (Œ¥ ‚Ñö‚Çä+ Œµ)
  f‚Åª¬π-cauchy = {!‚Ñö.elimBy‚â§ ? ? !}
  -- subst (_<·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
  --   {!!}
  --   {!!}
  
  f‚Åª¬π : ‚Ñù
  f‚Åª¬π = lim (rat ‚àò f‚Åª¬π-aprox) 
   Œª Œ¥ Œµ ‚Üí  invEq (‚àº‚âÉabs<Œµ _ _ _) (<‚Ñö‚Üí<·µ£ _ _ (f‚Åª¬π-cauchy Œµ Œ¥)) 


 L-f‚Åª¬π : Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô (K ‚Ñö.‚Ñö‚Çä¬∑ 2)
           (‚Ñöinterval‚Ñô (f a _)
            (f b _))
           f‚Åª¬π
 L-f‚Åª¬π q q‚àà r r‚àà Œµ q-r<Œµ =
  isTrans‚â§<·µ£ _ _ _ lipL (<‚Ñö‚Üí<·µ£ _ _ lf)
  where

  lf : ‚Ñö.abs' (f‚Åª¬π-aprox' r r‚àà Œµ ‚Ñö.- f‚Åª¬π-aprox q q‚àà Œµ) ‚Ñö.<
           fst ((K ‚Ñö.‚Ñö‚Çä¬∑ 2) ‚Ñö‚Çä¬∑ Œµ)
  lf = {!!}
   where
    lf' : ‚Ñö.abs' (f‚Åª¬π-aprox' r r‚àà Œµ ‚Ñö.- f‚Åª¬π-aprox q q‚àà Œµ) ‚Ñö.<
            fst (K ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œµ))
    lf' = il (f‚Åª¬π-aprox' r r‚àà Œµ) (Step.b'‚àà (f‚Åª¬π-aprox-S r r‚àà Œµ))
          (f‚Åª¬π-aprox q q‚àà Œµ) (Step.a'‚àà (f‚Åª¬π-aprox-S q q‚àà Œµ)) (2 ‚Ñö.‚Ñö‚Çä¬∑ Œµ)
           {!!}


 
  f‚Åª¬π‚â§f‚Åª¬π-aprox' : ‚àÄ z z‚àà ‚Üí f‚Åª¬π z z‚àà ‚â§·µ£ rat (f‚Åª¬π-aprox' z z‚àà Œµ) 
  f‚Åª¬π‚â§f‚Åª¬π-aprox' = {!!}
  
  f‚Åª¬π-aprox‚â§f‚Åª¬π : ‚àÄ z z‚àà ‚Üí rat (f‚Åª¬π-aprox z z‚àà Œµ)  ‚â§·µ£ f‚Åª¬π z z‚àà
  f‚Åª¬π-aprox‚â§f‚Åª¬π = {!!}


  lipL' : ‚àÄ q q‚àà r r‚àà ‚Üí (f‚Åª¬π r r‚àà -·µ£ f‚Åª¬π q q‚àà) ‚â§·µ£
           (rat (f‚Åª¬π-aprox' r r‚àà Œµ) -·µ£ rat (f‚Åª¬π-aprox q q‚àà Œµ))  
  lipL' q q‚àà r r‚àà = 
    ‚â§·µ£Monotone+·µ£ _ _ _ _ (f‚Åª¬π‚â§f‚Åª¬π-aprox' r r‚àà)
      (-·µ£‚â§·µ£ _ _ (f‚Åª¬π-aprox‚â§f‚Åª¬π q q‚àà))
      


  lipL : abs·µ£ (f‚Åª¬π q q‚àà -·µ£ f‚Åª¬π r r‚àà) ‚â§·µ£
        abs·µ£ (rat (f‚Åª¬π-aprox' r r‚àà Œµ) -·µ£ rat (f‚Åª¬π-aprox q q‚àà Œµ))  
  lipL = {!!}
  


 -- L-f‚Åª¬π : Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô K
 --           (‚Ñöinterval‚Ñô (f a _)
 --            (f b _))
 --           f‚Åª¬π
 -- L-f‚Åª¬π q q‚àà r r‚àà = {!!}


-- -- bisect : ‚àÄ K a b ‚Üí (a<b : a ‚Ñö.< b) ‚Üí ‚àÄ f ‚Üí Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô K (‚Ñöinterval‚Ñô a b) f
-- --            ‚Üí (y : ‚Ñö)
-- --            ‚Üí y ‚àà ‚Ñöinterval‚Ñô (f a (‚Ñö.isRefl‚â§ _  , ‚Ñö.<Weaken‚â§ _ _ a<b))
-- --                             (f b (‚Ñö.<Weaken‚â§ _ _ a<b , (‚Ñö.isRefl‚â§ _)))
-- --            ‚Üí Œ£ _ IsCauchySequence'‚Ñö
-- -- bisect K a b a<b f il y y‚àà =
-- --   s , (Œª {Œµ} ‚Üí www {Œµ}) ‚àò 1/2‚Åø<Œµ ‚àò
-- --     (Œª Œµ ‚Üí Œµ ‚Ñö.‚Ñö‚Çä¬∑ ‚Ñö.inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
-- --  where
-- --  a‚â§b = ‚Ñö.<Weaken‚â§ _ _ a<b
-- --  Œî‚ÇÄ = b ‚Ñö.- a 

-- --  record Step (Œî : ‚Ñö) : Type where
-- --   field
-- --    a' b' : ‚Ñö
-- --    a'‚â§b' : a' ‚Ñö.‚â§ b'
-- --    b'-a'‚â§Œî : b' ‚Ñö.- a' ‚Ñö.‚â§ Œî 
-- --    a'‚àà : a' ‚àà ‚Ñöinterval‚Ñô a b
-- --    b'‚àà : b' ‚àà ‚Ñöinterval‚Ñô a b
-- --    a'‚â§ : f a' a'‚àà ‚Ñö.‚â§ y
-- --    ‚â§b' : y ‚Ñö.‚â§ f b' b'‚àà 

-- --  step0 : Step Œî‚ÇÄ
-- --  step0 .Step.a' = a
-- --  step0 .Step.b' = b
-- --  step0 .Step.a'‚â§b' = a‚â§b
-- --  step0 .Step.b'-a'‚â§Œî = ‚Ñö.isRefl‚â§ _
-- --  step0 .Step.a'‚àà = ‚Ñö.isRefl‚â§ _  , a‚â§b
-- --  step0 .Step.b'‚àà = a‚â§b , (‚Ñö.isRefl‚â§ _)
-- --  step0 .Step.a'‚â§ = fst y‚àà
-- --  step0 .Step.‚â§b' = snd y‚àà

-- --  stepS : ‚àÄ Œî ‚Üí Step Œî ‚Üí Step (Œî ‚Ñö.¬∑ [ 1 / 2 ])
-- --  stepS Œî s = w (‚Ñö.Dichotomy‚Ñö y fMid)
-- --   where
-- --   open Step s

-- --   mid : ‚Ñö
-- --   mid = b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ a' ‚Ñö.¬∑ [ 1 / 2 ]

-- --   p = ‚Ñö.‚â§-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) a'‚â§b'

-- --   a'‚â§mid : a' ‚Ñö.‚â§ mid
-- --   a'‚â§mid = ‚Ñö.isTrans‚â§ _ _ _
-- --     (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑IdR a') ‚àô cong (a' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
-- --       ‚Ñö.¬∑DistL+ a' _ _))
-- --     (‚Ñö.‚â§-+o _ _ (a' ‚Ñö.¬∑ [ 1 / 2 ]) p) 

-- --   mid‚â§b' : mid ‚Ñö.‚â§ b' 
-- --   mid‚â§b' = ‚Ñö.isTrans‚â§ _ _ _    
-- --     (‚Ñö.‚â§-o+ _ _ (b' ‚Ñö.¬∑ [ 1 / 2 ]) p) 
-- --     (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑DistL+ b' _ _) ‚àô cong (b' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
-- --       ‚Ñö.¬∑IdR b'))
-- --   mid‚àà : mid ‚àà ‚Ñöinterval‚Ñô a b
-- --   mid‚àà = ‚Ñö.isTrans‚â§ _ _ _ (fst (a'‚àà)) a'‚â§mid ,
-- --           ‚Ñö.isTrans‚â§ _ _ _ mid‚â§b' (snd b'‚àà)

-- --   fMid = f mid mid‚àà
-- --   a'-mid‚â§Œî/2 : (mid ‚Ñö.- a') ‚Ñö.‚â§ Œî ‚Ñö.¬∑ [ 1 / 2 ]
-- --   a'-mid‚â§Œî/2 = 
-- --     ‚Ñö.isTrans‚â§ _ _ _
-- --      (‚Ñö.‚â°Weaken‚â§ (mid ‚Ñö.- a') ((b' ‚Ñö.- a') ‚Ñö.¬∑ [ 1 / 2 ])
-- --        (sym (‚Ñö.+Assoc _ _ _) ‚àô
-- --         cong (b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_)
-- --          (cong (a' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_) (‚Ñö.¬∑Comm -1 a')
-- --           ‚àô sym (‚Ñö.¬∑DistL+ a' _ _) ‚àô
-- --            ‚Ñö.¬∑Comm _ _ ‚àô
-- --             sym (‚Ñö.¬∑Assoc [ 1 / 2 ] -1 a') ‚àô  ‚Ñö.¬∑Comm [ 1 / 2 ] _)
-- --          ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))
-- --      (‚Ñö.‚â§-¬∑o _ _ _ (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) b'-a'‚â§Œî)

-- --   w : (y ‚Ñö.‚â§ fMid) ‚äé (fMid ‚Ñö.< y) ‚Üí Step (Œî ‚Ñö.¬∑ [ 1 / 2 ])
-- --   w (inl x) .Step.a' = a'
-- --   w (inl x) .Step.b' = mid
-- --   w (inl x) .Step.a'‚â§b' = a'‚â§mid
-- --   w (inl x) .Step.b'-a'‚â§Œî = a'-mid‚â§Œî/2
-- --   w (inl x) .Step.a'‚àà = a'‚àà
-- --   w (inl x) .Step.b'‚àà = mid‚àà 
-- --   w (inl x) .Step.a'‚â§ = a'‚â§
-- --   w (inl x) .Step.‚â§b' = x
-- --   w (inr x) .Step.a' = mid
-- --   w (inr x) .Step.b' = b'
-- --   w (inr x) .Step.a'‚â§b' = mid‚â§b'
-- --   w (inr x) .Step.b'-a'‚â§Œî =
-- --     ‚Ñö.isTrans‚â§ _ _ _
-- --        (‚Ñö.‚â°Weaken‚â§ (b' ‚Ñö.- mid)
-- --                    ((b' ‚Ñö.- a') ‚Ñö.¬∑ [ 1 / 2 ])
-- --                      ((cong (b' ‚Ñö.+_) (‚Ñö.-Distr _ _ ) ‚àô
-- --                       ‚Ñö.+Assoc _ _ _ ‚àô
-- --                        cong‚ÇÇ ‚Ñö._+_
-- --                        (cong‚ÇÇ ‚Ñö._+_ (sym (‚Ñö.¬∑IdR b'))
-- --                         (‚Ñö.¬∑Comm -1 _ ‚àô sym (‚Ñö.¬∑Assoc _ _ _))
-- --                         ‚àô sym (‚Ñö.¬∑DistL+ b' 1 [ -1 / 2 ]))
-- --                         (‚Ñö.¬∑Assoc -1 _ _))
-- --                       ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))
-- --          (‚Ñö.‚â§-¬∑o _ _ _ (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) b'-a'‚â§Œî)
    
-- --   w (inr x) .Step.a'‚àà = mid‚àà
-- --   w (inr x) .Step.b'‚àà = b'‚àà
-- --   w (inr x) .Step.a'‚â§ = ‚Ñö.<Weaken‚â§ _ _ x
-- --   w (inr x) .Step.‚â§b' = ‚â§b'

-- --  ww : ‚àÄ n ‚Üí Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n))
-- --  ww zero = subst Step (sym (‚Ñö.¬∑IdR Œî‚ÇÄ)) step0
-- --  ww (suc n) = subst Step (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS _ (ww n))

-- --  s = Step.a' ‚àò ww

-- --  ss‚â§ : ‚àÄ n m ‚Üí s n ‚Ñö.‚â§ s (m ‚Ñï.+ n) 
-- --  ss‚â§ = {!!}
 
-- --  ww‚äÇ : ‚àÄ n m ‚Üí (s (m ‚Ñï.+ n) ‚Ñö.- s n) ‚Ñö.‚â§ Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø n)
-- --  ww‚äÇ n m = {!!}

-- --  www : {Œµ : ‚Ñö‚Çä} ‚Üí (Œ£[ n ‚àà ‚Ñï ] [ 1 / 2 ] ‚Ñö^‚Åø n ‚Ñö.<
-- --            fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))
-- --         ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
-- --            ‚Ñö.abs ((s n) ‚Ñö.- (s m)) ‚Ñö.< (fst Œµ)   )
-- --  www (N , P) .fst = N
-- --  www {Œµ} (N , P) .snd = ‚Ñï.elimBy‚â§+
-- --    (Œª n m X m< n< ‚Üí subst (‚Ñö._< fst Œµ) (‚Ñö.absComm- _ _) (X n< m<))
-- --    Œª n m p N<n ‚Üí
-- --      let P' : Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø N) ‚Ñö.< fst Œµ
-- --          P' = ‚Ñö.isTrans<‚â§ _ _ (fst Œµ) (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.-< a b a<b) P)
-- --                 (‚Ñö.‚â°Weaken‚â§ _ _
-- --                    ((cong (fst (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b) ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _))
-- --                     ‚àô ‚Ñö.y¬∑[x/y] (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b) (fst Œµ)))
-- --      in ‚Ñö.isTrans‚â§< _ _ _
-- --          (‚Ñö.isTrans‚â§ _ ((s (m ‚Ñï.+ n)) ‚Ñö.- (s n)) _
-- --            (‚Ñö.‚â°Weaken‚â§ _ _ (‚Ñö.absNonNeg (s (m ‚Ñï.+ n) ‚Ñö.- s n)
-- --              (‚Ñö.-‚â§ (s n) (s (m ‚Ñï.+ n)) (ss‚â§ n m))))
-- --              (ww‚äÇ n m))
-- --          (‚Ñö.isTrans‚â§< _ (Œî‚ÇÄ ‚Ñö.¬∑ ([ 1 / 2 ] ‚Ñö^‚Åø N)) _
-- --            (‚Ñö.‚â§-o¬∑ _ _ Œî‚ÇÄ (‚Ñö.-‚â§ a b a‚â§b) (‚â§^n N n N<n)) P')
