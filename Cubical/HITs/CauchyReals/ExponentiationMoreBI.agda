{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.ExponentiationMore where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Transport

open import Cubical.Functions.FunExtEquiv

open import Cubical.Relation.Nullary

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos; ‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
open import Cubical.HITs.CauchyReals.BisectApprox
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Derivative

open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer

import Cubical.Algebra.CommRing.Instances.Int as ‚Ñ§CRing
open import Cubical.Algebra.Ring.Properties
open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties 
import Cubical.Algebra.CommRing as CR


interval‚Ñô‚Üídist< : ‚àÄ a b x y ‚Üí x ‚àà interval‚Ñô a b ‚Üí y ‚àà interval‚Ñô a b
                   ‚Üí abs·µ£ (x -·µ£ y) ‚â§·µ£ b -·µ£ a
interval‚Ñô‚Üídist< a b x y (a‚â§x , x‚â§b) (a‚â§y , y‚â§b) =
  isTrans‚â°‚â§·µ£ _ _ _ (abs-max _ ‚àô cong (max·µ£ _) (-[x-y]‚â°y-x _ _) )
    (max‚â§-lem _ _ _ (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§b (-·µ£‚â§·µ£ _ _ a‚â§y))
                    ((‚â§·µ£Monotone+·µ£ _ _ _ _ y‚â§b (-·µ£‚â§·µ£ _ _ a‚â§x))))

clampDist·µ£' : ‚àÄ L L' x y ‚Üí
    abs·µ£ (clamp·µ£ (rat L) (rat L') y -·µ£ clamp·µ£ (rat L) (rat L') x) ‚â§·µ£ abs·µ£ (y -·µ£ x)
clampDist·µ£' L L' = ‚â§Cont‚ÇÇ
          (cont‚àò‚ÇÇ IsContinuousAbs·µ£
            (contNE‚ÇÇ‚àò sumR ((Œª _ ‚Üí IsContinuousClamp (rat L) (rat L')) , Œª _ ‚Üí IsContinuousConst _)
              ((Œª _ ‚Üí IsContinuousConst _) , Œª _ ‚Üí IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuousClamp (rat L) (rat L')))))
          (cont‚àò‚ÇÇ IsContinuousAbs·µ£
             (contNE‚ÇÇ‚àò sumR ((Œª _ ‚Üí IsContinuousId) , Œª _ ‚Üí IsContinuousConst _)
              ((Œª _ ‚Üí IsContinuousConst _) , Œª _ ‚Üí IsContinuous-·µ£ )))
          Œª u u' ‚Üí
             subst2 _‚â§·µ£_ (cong rat (‚Ñö.abs'‚â°abs _)) (cong rat (‚Ñö.abs'‚â°abs _))
               (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.clampDist L L' u u'))



‚Ñö1‚â§x‚äî1/x : ‚àÄ x ‚Üí 1 ‚Ñö.‚â§ ‚Ñö.max (fst x) (fst (inv‚Ñö‚Çä x))
‚Ñö1‚â§x‚äî1/x x = 
  ‚äé.rec
     (Œª 1‚â§x ‚Üí
       ‚Ñö.isTrans‚â§ _ _ _ 1‚â§x (‚Ñö.‚â§max (fst x) (fst (inv‚Ñö‚Çä x))) )
     (Œª x<1 ‚Üí
       ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.inv‚Ñö‚â§inv‚Ñö 1 _
         (‚Ñö.<Weaken‚â§ _ _ x<1))
         (‚Ñö.‚â§max' (fst x) (fst (inv‚Ñö‚Çä x))))
   (‚Ñö.Dichotomy‚Ñö 1 (fst x))



1‚â§x‚äî1/x : ‚àÄ x ‚Üí 1 ‚â§·µ£ max·µ£ (fst x) (fst (inv‚Ñù‚Çä x))
1‚â§x‚äî1/x = 
  uncurry (<‚Üí‚â§ContPos'pred {0}
    (AsContinuousWithPred _ _
      (IsContinuousConst _))
       (contDiagNE‚ÇÇWP maxR _ _ _
         (AsContinuousWithPred _ _
           IsContinuousId) (snd inv‚Ñù'))
             Œª u 0<u ‚Üí
               subst (1 ‚â§·µ£_) (cong (max·µ£ (rat u))
                 (sym (inv‚Ñù'-rat _ _ _)))
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
                  (‚Ñö1‚â§x‚äî1/x (u , ‚Ñö.<‚Üí0< u (<·µ£‚Üí<‚Ñö _ _ 0<u))))))


0<pos[sucN]¬≤ : ‚àÄ n ‚Üí 0 ‚Ñ§.< (‚Ñ§.pos (suc n)) ‚Ñ§.¬∑ (‚Ñ§.pos (suc n))
0<pos[sucN]¬≤ n = ‚Ñ§.<-¬∑o {0} {‚Ñ§.pos (suc n)} {n} (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)

0<x¬≤ : ‚àÄ n ‚Üí ¬¨ (n ‚â° 0) ‚Üí 0 ‚Ñ§.< n ‚Ñ§.¬∑ n
0<x¬≤ (pos zero) x = ‚ä•.elim (x refl)
0<x¬≤ (pos (suc n)) _ = 0<pos[sucN]¬≤ n
0<x¬≤ (‚Ñ§.negsuc n) _ = subst (0 ‚Ñ§.<_) (sym (‚Ñ§.negsuc¬∑negsuc n n))
  (0<pos[sucN]¬≤ n)

mn<m¬≤+n¬≤ : (a b : ‚Ñï) ‚Üí pos (suc a) ‚Ñ§.¬∑ pos (suc b) ‚Ñ§.<
                    (pos (suc a) ‚Ñ§.¬∑ pos (suc a))
                      ‚Ñ§.+ (pos (suc b) ‚Ñ§.¬∑ pos (suc b))
mn<m¬≤+n¬≤ a b =
  ‚Ñ§.<-+pos-trans {k = a ‚Ñï.¬∑ suc b} h'
 where
 a' = pos (suc a)
 b' = pos (suc b)
 h : ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b')) ‚Ñ§.‚â§
         (a' ‚Ñ§.¬∑ a' ‚Ñ§.+ b' ‚Ñ§.¬∑ b')
 h = subst2 (‚Ñ§._‚â§_)
       (ùêô'.+IdL' _ _ refl)
       (cong (‚Ñ§._+ ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b'))) (Lùêô.lem--073 {a'} {b'})
        ‚àô ùêô'.minusPlus _ _)
       (‚Ñ§.‚â§-+o {o = ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b'))} (‚Ñ§.0‚â§x¬≤ (a' ‚Ñ§.- b')))

 h' = ‚Ñ§.<‚â§-trans (‚Ñ§.<-o+ (subst (‚Ñ§._< a' ‚Ñ§.¬∑ b')
     (sym (‚Ñ§.pos¬∑pos _ _)) (‚Ñ§.<-¬∑o {k = b}
       ‚Ñ§.isRefl‚â§))) h 


‚Ñö1<x+1/x : ‚àÄ x ‚Üí 1 ‚Ñö.< fst x ‚Ñö.+ fst (inv‚Ñö‚Çä x) 
‚Ñö1<x+1/x = uncurry (SQ.ElimProp.go w)
 where
 w : ElimProp (Œª z ‚Üí (y : 0< z) ‚Üí 1 ‚Ñö.< z ‚Ñö.+ fst (inv‚Ñö‚Çä (z , y)))
 w .ElimProp.isPropB _ = isPropŒ† Œª _ ‚Üí ‚Ñö.isProp< _ _
 w .ElimProp.f (pos (suc n) , (1+ m)) y =
    subst2 ‚Ñ§._<_
      (sym (‚Ñ§.pos¬∑pos  _ _)) (‚Ñ§.+Comm _ _ ‚àô sym (‚Ñ§.¬∑IdR _))
     (mn<m¬≤+n¬≤ m n)

1‚â§x+1/x : ‚àÄ x ‚Üí 1 ‚â§·µ£ fst x +·µ£ fst (inv‚Ñù‚Çä x) 
1‚â§x+1/x =
  uncurry (<‚Üí‚â§ContPos'pred {0}
    (AsContinuousWithPred _ _
      (IsContinuousConst _))
       (contDiagNE‚ÇÇWP sumR _ _ _
         (AsContinuousWithPred _ _
           IsContinuousId) (snd inv‚Ñù'))
             Œª u 0<u ‚Üí
               subst (1 ‚â§·µ£_) (cong (rat u +·µ£_)
                 (sym (inv‚Ñù'-rat _ _ _)))
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ 1 _
                  (‚Ñö1<x+1/x (u , ‚Ñö.<‚Üí0< u (<·µ£‚Üí<‚Ñö _ _ 0<u))))))

pasting : (x‚ÇÄ : ‚Ñù) ‚Üí (f< : ‚àÄ x ‚Üí x ‚â§·µ£ x‚ÇÄ ‚Üí ‚Ñù)
                  ‚Üí (<f : ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí ‚Ñù)
                  ‚Üí f< x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) ‚â° <f x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) 
                  ‚Üí Œ£[ f ‚àà (‚Ñù ‚Üí ‚Ñù) ]
                        (‚àÄ x x‚â§x‚ÇÄ ‚Üí f x ‚â° f< x x‚â§x‚ÇÄ)
                         √ó (‚àÄ x x‚ÇÄ‚â§x ‚Üí f x ‚â° <f x x‚ÇÄ‚â§x)
pasting x‚ÇÄ f< <f p =
  (Œª x ‚Üí (<f (max·µ£ x‚ÇÄ x) (‚â§max·µ£ _ _)
      +·µ£ f< (min·µ£ x‚ÇÄ x) (min‚â§·µ£ _ _))
       -·µ£ f< x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ))
  , (Œª x x‚â§x‚ÇÄ ‚Üí 
      let z = min·µ£Comm _ _ ‚àô ‚â§‚Üímin·µ£ _ _ x‚â§x‚ÇÄ
      in cong‚ÇÇ _-·µ£_ (cong‚ÇÇ _+·µ£_
             (cong (uncurry <f) (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
               (max·µ£Comm _ _ ‚àô x‚â§x‚ÇÄ)))
             (cong (uncurry f<) (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _) z)) ) p ‚àô
          Lùêë.lem--063)
  , Œª x x‚ÇÄ‚â§x ‚Üí
       ùêë'.plusMinus' _ _ _ (cong (uncurry f<)
        (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _) (‚â§‚Üímin·µ£ _ _ x‚ÇÄ‚â§x))) ‚àô
        (cong (uncurry <f)
        (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _) x‚ÇÄ‚â§x))   




pasting‚â§ : ‚àÄ b x‚ÇÄ b‚â§x‚ÇÄ  
                  ‚Üí (f< : ‚àÄ x ‚Üí b ‚â§·µ£ x ‚Üí x ‚â§·µ£ x‚ÇÄ ‚Üí ‚Ñù)
                  ‚Üí (<f : ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí ‚Ñù)
                  ‚Üí f< x‚ÇÄ b‚â§x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) ‚â° <f x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) 
                  ‚Üí Œ£[ f ‚àà (‚àÄ x ‚Üí b ‚â§·µ£ x ‚Üí ‚Ñù) ]
                        (‚àÄ x b‚â§x x‚â§x‚ÇÄ ‚Üí f x b‚â§x ‚â° f< x b‚â§x x‚â§x‚ÇÄ)
                         √ó (‚àÄ x b‚â§x x‚ÇÄ‚â§x ‚Üí f x b‚â§x ‚â° <f x x‚ÇÄ‚â§x)
pasting‚â§ b x‚ÇÄ b‚â§x‚ÇÄ f< <f p =
  (Œª x _ ‚Üí (fst h) x)
  , (Œª x b‚â§x x‚â§x‚ÇÄ ‚Üí fst (snd h) x x‚â§x‚ÇÄ ‚àô q b‚â§x)
  ,  const ‚àò snd (snd h)
 where

 q : ‚àÄ {y y' : Œ£[ x ‚àà ‚Ñù ] (b ‚â§·µ£ x) √ó (x ‚â§·µ£ x‚ÇÄ)}
         ‚Üí (a : (fst y) ‚â° (fst y')) ‚Üí _ ‚â° _
 q {y} {y'} = cong {x = y} {y = y'} (uncurry $ uncurry ‚àò f<) ‚àò
         (Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (isSet‚Ñù _ _) (isSet‚Ñù _ _)))
         
 h = pasting x‚ÇÄ
       (Œª x x‚â§x‚ÇÄ ‚Üí f< (max·µ£ b x) (‚â§max·µ£ _ _)
         (max‚â§-lem _ _ _ b‚â§x‚ÇÄ x‚â§x‚ÇÄ))
       <f (q b‚â§x‚ÇÄ ‚àô p)



slope-lower-bound : (z : ‚Ñù‚Çä) (B : ‚Ñö‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (y‚ÇÄ y‚ÇÅ : ‚Ñö )
  ‚Üí (y‚ÇÄ<y‚ÇÅ : y‚ÇÄ ‚Ñö.< y‚ÇÅ)
  ‚Üí (y‚ÇÄ‚àà : y‚ÇÄ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B))
  ‚Üí (y‚ÇÅ‚àà : y‚ÇÅ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B)) ‚Üí     
  fst (z ^‚Ñö (‚Ñö.- fst B)) ¬∑·µ£
       ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)
      <·µ£
  ((fst (z ^‚Ñö y‚ÇÅ) -·µ£ fst (z ^‚Ñö y‚ÇÄ))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  y‚ÇÄ<y‚ÇÅ ))
slope-lower-bound z B 1<z y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ (-B‚â§y‚ÇÄ , y‚ÇÄ‚â§B) (-B‚â§y‚ÇÅ , y‚ÇÅ‚â§B) =
  isTrans<‚â°·µ£ _ _ _
    (‚â§<·µ£‚ÇäMonotone¬∑·µ£
      ((z ^‚Ñö (‚Ñö.- (fst B)))) (fst (z ^‚Ñö y‚ÇÄ))
      (_ ,
        isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.0LeftAnnihilates _))
           (‚â§·µ£-¬∑·µ£o 0 _ _
            (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä (fst z , z .snd))))
             (<·µ£Weaken‚â§·µ£ _ _ (x<y‚Üí0<y-x _ _ 1<z))))
              ((fst (z ^‚Ñö (fst h‚Çä)) -·µ£ 1) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)
       
      (^‚Ñö-MonotoneR {z} (‚Ñö.- (fst B)) y‚ÇÄ -B‚â§y‚ÇÄ (<·µ£Weaken‚â§·µ£ _ _ 1<z))
      
       (invEq (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x _ _ _ _)
          brn )
       )   
      (¬∑·µ£Assoc _ _ _
       ‚àô cong (_¬∑·µ£
        fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)))
         (sym (factor-x·µÉ-x·µá z _ _) ))

 where
  h‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ

  brn : fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä) ¬∑·µ£ (fst z -·µ£ 1)   <·µ£
        fst z ¬∑·µ£ (fst (z ^‚Ñö fst h‚Çä) -·µ£ rat [ pos 1 / 1+ 0 ])
         
  brn = isTrans<‚â°·µ£ _ _ _ (a+c<b‚áía<b-c _ _ _ (isTrans‚â°<·µ£ _ _ _ (sym (¬∑DistR+ (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)) 1 _))
         (a+c<b‚áía<b-c _ _ 1
          (isTrans‚â°<·µ£ _ _ _
           (+·µ£Comm (rat (fst h‚Çä ‚Ñö.+ [ pos 1 / 1+ 0 ]) ¬∑·µ£
      (fst z -·µ£ rat [ pos 1 / 1+ 0 ])) 1) (bernoulli's-ineq-^‚Ñö z (fst h‚Çä ‚Ñö.+ 1)
            1<z (subst (1 ‚Ñö.<_) (‚Ñö.+Comm 1 (fst h‚Çä))
             (‚Ñö.<+‚Ñö‚Çä' _ _ h‚Çä (‚Ñö.isRefl‚â§ 1))) )))))
            (sym (+·µ£Assoc (fst (z ^‚Ñö (fst h‚Çä ‚Ñö.+ 1))) _ _) ‚àô
             cong‚ÇÇ _+·µ£_
               (cong fst (sym (^‚Ñö-+ z (fst h‚Çä) 1))
                 ‚àô ¬∑·µ£Comm _ _ ‚àô
                   cong (_¬∑·µ£ (z ^‚Ñö fst h‚Çä) .fst) (cong fst (^‚Ñö-1 _) ))
               ((sym (-·µ£Distr _ _) ‚àô
                 cong (-·µ£_) (cong (1 +·µ£_) (¬∑IdL _)
                  ‚àô Lùêë.lem--05 ‚àô sym (¬∑IdL _))
                 ) ‚àô sym (-·µ£¬∑ _ _) ‚àô ¬∑·µ£Comm _ _)
              ‚àô sym (¬∑DistL+ _ _ _) )


slope-upper-bound : (z : ‚Ñù‚Çä) (B : ‚Ñö‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (y‚ÇÄ y‚ÇÅ : ‚Ñö )
  ‚Üí (y‚ÇÄ<y‚ÇÅ : y‚ÇÄ ‚Ñö.< y‚ÇÅ)
  ‚Üí (y‚ÇÄ‚àà : y‚ÇÄ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B))
  ‚Üí (y‚ÇÅ‚àà : y‚ÇÅ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B)) ‚Üí     
  ((fst (z ^‚Ñö y‚ÇÅ) -·µ£ fst (z ^‚Ñö y‚ÇÄ))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  y‚ÇÄ<y‚ÇÅ ))
     <·µ£ fst (z ^‚Ñö (fst B)) ¬∑·µ£ (fst z -·µ£ 1)
slope-upper-bound z B 1<z y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ (-B‚â§y‚ÇÄ , y‚ÇÄ‚â§B) (-B‚â§y‚ÇÅ , y‚ÇÅ‚â§B) =
  isTrans<‚â°·µ£ _ _ _
    (slope-monotone-strict z 1<z
      y‚ÇÄ y‚ÇÅ (fst B) (fst B ‚Ñö.+ 1)
       y‚ÇÄ<y‚ÇÅ B<B+1 y‚ÇÄ‚â§B
         (‚Ñö.isTrans‚â§< _ _ _ y‚ÇÅ‚â§B B<B+1))
    (ùêë'.¬∑IdR' _ _ (cong (fst ‚àò inv‚Ñù‚Çä)
      (‚Ñù‚Çä‚â° (cong rat lem--063)) ‚àô cong fst inv‚Ñù‚Çä1) ‚àô
       factor-x·µÉ-x·µá z (fst B ‚Ñö.+ 1) (fst B) ‚àô
         cong (Œª u ‚Üí fst (z ^‚Ñö fst B) ¬∑·µ£ (fst u -·µ£ 1))
           (cong (z ^‚Ñö_) lem--063 ‚àô ^‚Ñö-1 z))
  
 where
  h‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ
  B<B+1 = ‚Ñö.<+‚Ñö‚Çä' _ _ 1 (‚Ñö.isRefl‚â§ (fst B))

-- ‚Ñö^-lipsh : {!!}
-- ‚Ñö^-lipsh = {!!}


-- lowBnd-1/‚Ñï : (Œµ : ‚Ñù‚Çä) ‚Üí ‚àÉ[ k ‚àà ‚Ñï‚Çä‚ÇÅ ] rat [ 1 / k ] <·µ£ fst Œµ 
-- lowBnd-1/‚Ñï = {!!}


-- ceil‚Ñö‚Çä q = 1+ (fst (fst (floor-frac‚Ñö‚Çä q))) ,
--    subst2 (_<_) --  (fromNat (suc (fst (fst (floor-frac‚Ñö‚Çä q)))))
--       (‚Ñö.+Comm _ _ ‚àô fst (snd (floor-frac‚Ñö‚Çä q)))
--       (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _)
--        (<-+o _ _ (fromNat (fst (fst (floor-frac‚Ñö‚Çä q))))
--          (snd (snd (snd (floor-frac‚Ñö‚Çä q)))))



module BDL (z : ‚Ñù‚Çä) (Z : ‚Ñï)
          (z<Z : fst z <·µ£ fromNat (suc (suc Z)))
          (1+1/Z<z : rat (1 ‚Ñö.+ [ 1 / 1+ (suc Z) ]) <·µ£ fst z )where


 monotone^‚Ñö' : ‚àÄ q q' q'' 
  ‚Üí q ‚Ñö.‚â§ q'
  ‚Üí q' ‚Ñö.‚â§ q''
  ‚Üí ‚àÄ u 0<u
  ‚Üí min·µ£ (fst ((rat u , 0<u) ^‚Ñö q)) (fst ((rat u , 0<u) ^‚Ñö q'')) ‚â§·µ£
    fst ((rat u , 0<u) ^‚Ñö q')
 monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u =
  ‚äé.rec
    (Œª 1‚â§u ‚Üí
      isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ (fst ((rat u , 0<u) ^‚Ñö q))
             (fst ((rat u , 0<u) ^‚Ñö q'')))
         (^‚Ñö-MonotoneR {(rat u , 0<u)} q q'
            q‚â§q'
         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 1‚â§u)))
    (Œª u<1 ‚Üí isTrans‚â§·µ£ _ _ _
      (min‚â§·µ£' (fst ((rat u , 0<u) ^‚Ñö q))
             (fst ((rat u , 0<u) ^‚Ñö q'')))
        let xx = (^‚Ñö-MonotoneR {inv‚Ñù‚Çä (rat u , 0<u)}
                _ _  (‚Ñö.minus-‚â§ _ _ q'‚â§q'')
                    (isTrans‚â§‚â°·µ£ _ _ _
                     (invEq (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x 1 1 (rat u , 0<u))
                       (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdR _)
                         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ u<1))))
                     (¬∑IdL _)))
        in subst2 _‚â§·µ£_
             (cong fst (sym (^‚Ñö-minus _ _)))
             (cong fst (sym (^‚Ñö-minus _ _)))
             xx)
    (‚Ñö.Dichotomy‚Ñö 1 u)


 monotone^‚Ñö : ‚àÄ q q' q'' 
  ‚Üí q ‚Ñö.‚â§ q'
  ‚Üí q' ‚Ñö.‚â§ q''
  ‚Üí ‚àÄ z 
  ‚Üí min·µ£ (fst (z ^‚Ñö q)) (fst (z ^‚Ñö q'')) ‚â§·µ£ fst (z ^‚Ñö q')
 monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' =
   uncurry (<‚Üí‚â§ContPos'pred {0}
     (contDiagNE‚ÇÇWP minR _ _ _
       (IsContinuous^‚Ñö q)
       (IsContinuous^‚Ñö q''))
     (IsContinuous^‚Ñö q')
     Œª u 0<u ‚Üí monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u)


 slUpBd : ‚Ñï ‚Üí ‚Ñö‚Çä
 slUpBd m = (fromNat (suc (suc Z)) ‚Ñö‚Çä^‚Åø (suc m)) ‚Ñö‚Çä¬∑ fromNat (suc Z)  

 slUpBdInv : ‚Ñï ‚Üí ‚Ñö‚Çä
 slUpBdInv m = (fromNat (suc (suc Z))) ‚Ñö‚Çä^‚Åø (suc (suc (suc m)))
     -- ‚Ñö‚Çä¬∑ ((inv‚Ñö‚Çä (fromNat (suc (suc Z)))) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fromNat (suc (suc Z))))  
-- ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)

 slpBdIneq : ‚àÄ n ‚Üí fst (inv‚Ñö‚Çä (slUpBdInv n)) ‚Ñö.‚â§
    fst (slUpBd n)
 slpBdIneq n = ‚Ñö.isTrans‚â§ _ 1 _
   (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 _)
     (‚Ñö.1‚â§x^‚Åø (fromNat (suc (suc Z)))
          (suc (suc (suc n)))
          (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc (suc Z)))
            (‚Ñ§.suc-‚â§-suc {0} {pos (suc Z)}
             (‚Ñ§.zero-‚â§pos {suc Z})))))
   (‚Ñö.‚â§Monotone¬∑-onNonNeg 1 _ 1 _
    ((‚Ñö.1‚â§x^‚Åø (fromNat (suc (suc Z)))
          ((suc n))
          (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc (suc Z)))
            (‚Ñ§.suc-‚â§-suc {0} {pos (suc Z)}
             (‚Ñ§.zero-‚â§pos {suc Z})))))
    ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc Z))
            (‚Ñ§.suc-‚â§-suc {0} {pos Z}
             (‚Ñ§.zero-‚â§pos {Z}))))
    (‚Ñö.dec‚Ñö‚â§? {0} {1})
    (‚Ñö.dec‚Ñö‚â§? {0} {1}))
 
 1<z : 1 <·µ£ (fst z)
 1<z = isTrans<·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ _ (‚Ñö.isRefl‚â§ 1))) 1+1/Z<z

 bdl : boundedLipschitz (fst ‚àò z ^‚Ñö_) slUpBd
 bdl n = ‚Ñö.elimBy‚â°‚äé<
  (Œª x y X y‚àà x‚àà ‚Üí subst2 _‚â§·µ£_
       (minusComm-abs·µ£ _ _)
       (cong (rat ‚àò (fst (slUpBd n) ‚Ñö.¬∑_)) (‚Ñö.absComm- _ _))
       (X x‚àà y‚àà)  )
  (Œª x _ _ ‚Üí subst2 _‚â§·µ£_
     (cong abs·µ£ (sym (+-·µ£ _)))
     (cong rat (sym (ùêê'.0RightAnnihilates' _ _ (cong ‚Ñö.abs (‚Ñö.+InvR x)))))
     (‚â§·µ£-refl 0))
  Œª y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ y‚ÇÄ‚àà y‚ÇÅ‚àà ‚Üí
   isTrans‚â°‚â§·µ£ _ _ _ (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
         (^‚Ñö-MonotoneR _ _ (‚Ñö.<Weaken‚â§ _ _ y‚ÇÄ<y‚ÇÅ) (<·µ£Weaken‚â§·µ£ _ _ 1<z) )))
     (isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _
    (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _) (slope-upper-bound z (fromNat (suc n))
    1<z y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ
     (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÄ y‚ÇÄ‚àà)
     (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÅ y‚ÇÅ‚àà))))
      (‚â§·µ£-o¬∑ _ _ _ (‚Ñö.<Weaken‚â§ 0 _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))
       (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
         (<·µ£Weaken‚â§·µ£ _ _ $ snd (fromNat (suc (suc Z)) ^‚Ñö fst (fromNat (suc n))))
         (x‚â§y‚Üí0‚â§y-x _ _ (<·µ£Weaken‚â§·µ£ _ _ 1<z))
         (^‚Ñö-Monotone {y = fromNat (suc (suc Z))}
          (fromNat (suc n)) (<·µ£Weaken‚â§·µ£ _ _ z<Z))
         (‚â§·µ£-+o _ _ (-1) (<·µ£Weaken‚â§·µ£ _ _ z<Z)))))
      (¬∑·µ£Comm _ _ ‚àô
       cong‚ÇÇ (_¬∑·µ£_)
         (cong‚ÇÇ (_¬∑·µ£_) (^‚Åø-‚Ñö^‚Åø _ _) (cong rat (‚Ñö.‚Ñ§+‚Üí‚Ñö+ _ _))
          ‚àô sym (rat¬∑·µ£rat _ _) )
         (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))))
        ‚àô sym (rat¬∑·µ£rat _ _)))
     

 open BoundedLipsch (fst ‚àò z ^‚Ñö_) slUpBd bdl public

 bdlInv-lem : ( fst (fromNat (suc (suc Z))
                   ^‚Ñö -2)) ‚â§·µ£ ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)
 bdlInv-lem = isTrans‚â°‚â§·µ£ _ _ _
   (cong fst (^‚Ñö-minus' _ 2 ‚àô sym (^‚Ñö-+ _ 1 1)) ‚àô
    cong‚ÇÇ _¬∑·µ£_ (
        cong fst (^‚Ñö-1 (inv‚Ñù‚Çä (fromNat (suc (suc Z)))))
      ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö _) 
     ‚àô inv‚Ñù‚Çä-rat (fromNat (suc (suc Z))))
        (cong fst (^‚Ñö-1 (inv‚Ñù‚Çä (fromNat (suc (suc Z)))))
      ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö _)) )
   (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat _) _ _ _
    (<·µ£Weaken‚â§·µ£ _ _ (x<y‚Üí0<y-x _ _ 1<z))
    (<·µ£Weaken‚â§·µ£ _ _ $
     snd (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (suc (suc Z)) , 1 ] , tt)))) (
    <·µ£Weaken‚â§·µ£ _ _
     (a+c<b‚áía<b-c _ _ _
       (isTrans‚â°<·µ£ _ _ _ (+·µ£Comm (rat [ 1 / 1+ (suc Z) ]) 1) 1+1/Z<z)))
     (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä _) _) (<·µ£Weaken‚â§·µ£ _ _ z<Z))) 
 
 bdlInv : boundedInvLipschitz slUpBdInv
 bdlInv n = ‚Ñö.elimBy‚â°‚äé<
  (Œª x y X y‚àà x‚àà ‚Üí subst2 _‚â§·µ£_
       (cong rat (‚Ñö.absComm- _ _))
       (cong (rat (fst (slUpBdInv n)) ¬∑·µ£_) (minusComm-abs·µ£ _ _))
       (X x‚àà y‚àà)  )
  ((Œª x _ _ ‚Üí subst2 _‚â§·µ£_
     (cong rat (sym (cong ‚Ñö.abs (‚Ñö.+InvR x))))
     (sym (ùêë'.0RightAnnihilates' _ _ (cong abs·µ£ (+-·µ£ _))))
     (‚â§·µ£-refl 0)))
  Œª y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ y‚ÇÄ‚àà y‚ÇÅ‚àà ‚Üí
   subst2 _‚â§·µ£_
     (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))))
     (cong (rat (fst (slUpBdInv n)) ¬∑·µ£_)
      (sym (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
         (^‚Ñö-MonotoneR _ _ (‚Ñö.<Weaken‚â§ _ _ y‚ÇÄ<y‚ÇÅ) (<·µ£Weaken‚â§·µ£ _ _ 1<z) )))))
     (isTrans‚â°‚â§·µ£ _ _ _ (sym (¬∑IdR _))
      (fst (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ))
            (‚Ñö‚Çä‚Üí‚Ñù‚Çä (slUpBdInv n)))
        (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdL _)
         (isTrans‚â§·µ£ _ _ _
           (isTrans‚â°‚â§·µ£ _ _ _
             (inv‚Ñù‚Çä-rat _ ‚àô cong fst (
               ( (sym (^‚Ñ§-rat (fromNat (suc (suc Z)))
                   (‚Ñ§.negsuc (1 ‚Ñï.+ suc n)))
                   ‚àô cong (_^‚Ñö [ ‚Ñ§.negsuc (1 ‚Ñï.+ suc n) / 1 ])
                    (‚Ñù‚Çä‚â° refl))
           ‚àô cong (fromNat (suc (suc Z)) ^‚Ñö_)
            (cong [_/ 1 ] (‚Ñ§.negsuc+ _ _) ‚àô sym (‚Ñö.‚Ñ§+‚Üí‚Ñö+ _ _)))
               ‚àô sym (^‚Ñö-+ _ _ _)) ‚àô ¬∑·µ£Comm _ _)
             (‚â§·µ£‚ÇäMonotone¬∑·µ£
               (fst (fromNat (suc (suc Z))
                   ^‚Ñö (‚Ñö.- [ pos (suc n) , (1+ 0) ])))
               _
               _
               _
               (<·µ£Weaken‚â§·µ£ _ _
                 $ snd (z ^‚Ñö (‚Ñö.- [ pos (suc n) , (1+ 0) ])))
               (<·µ£Weaken‚â§·µ£ _ _
                 $ snd (fromNat (fromNat (suc (suc Z))) ^‚Ñö -2))
               (subst2 _‚â§·µ£_
                 (cong fst (sym (^‚Ñö-minus' _ _)))
                 (cong fst (sym (^‚Ñö-minus' _ _)))
                 (^‚Ñö-Monotone (fromNat (suc n))
                  (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
                   (<·µ£Weaken‚â§·µ£ _ _ z<Z))))
               bdlInv-lem))
          (<·µ£Weaken‚â§·µ£ _ _
           (slope-lower-bound z (fromNat (suc n)) 1<z
            _ _ y‚ÇÄ<y‚ÇÅ
            (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÄ y‚ÇÄ‚àà)
            (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÅ y‚ÇÅ‚àà))
     )))))

 open BoundedInvLipsch slUpBdInv bdlInv public

 mid-ùíá : ‚àÄ q q' q'' ‚Üí q ‚Ñö.‚â§ q' ‚Üí q' ‚Ñö.‚â§ q'' ‚Üí
    min·µ£ (ùíá (rat q))
         (ùíá (rat q'')) ‚â§·µ£ ùíá (rat q')
 mid-ùíá q q' q'' q‚â§q' q'‚â§q'' =
   subst2 _‚â§·µ£_
     (cong‚ÇÇ min·µ£ (sym (ùíá-rat q)) (sym (ùíá-rat q'')))
     (sym (ùíá-rat q'))
     (monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' _)


 0<powBL : ‚àÄ x ‚Üí 0 <·µ£ ùíá x
 0<powBL x = PT.rec squash‚ÇÅ
  (Œª ((q , q') , q'-q<1 , q<x , x<q') ‚Üí
    let q‚äìq' = (min·µ£‚Çä (z ^‚Ñö q) (z ^‚Ñö q')) 
    in PT.rec squash‚ÇÅ
       (Œª (Œµ , 0<Œµ , Œµ<q‚äìq') ‚Üí
         PT.rec squash‚ÇÅ
         (Œª (Œ¥ , X) ‚Üí
          PT.rec squash‚ÇÅ
            (Œª (r , r-x‚â§Œ¥ , x‚â§r) ‚Üí
               let r' = ‚Ñö.clamp q q' r
                   r'-x‚â§Œ¥ = isTrans‚â§·µ£ _ _ _
                             (‚â§·µ£-+o _ _ (-·µ£ x)
                               (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                            (‚Ñö.clamped‚â§ q q' r
                              (‚Ñö.<Weaken‚â§ _ _
                                (<·µ£‚Üí<‚Ñö _ _ (isTrans<‚â§·µ£ _ _ _ q<x x‚â§r))))) ) r-x‚â§Œ¥
                   x‚â§r' = ‚â§min-lem _ (rat (‚Ñö.max q r)) (rat q')
                            (isTrans‚â§·µ£ _ _ _ x‚â§r
                             (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' q r)))
                            (<·µ£Weaken‚â§·µ£ _ _ x<q')
                   |fx-fr|<Œµ = fst (‚àº‚âÉabs<Œµ _ _ _)
                       (sym‚àº _ _ _ (X (rat r') (sym‚àº _ _ _
                         ((invEq (‚àº‚âÉabs<Œµ _ _ _)
                        (isTrans‚â°<·µ£ _ _ _
                          (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ x‚â§r'))
                           (isTrans‚â§<·µ£ _ _ _
                               r'-x‚â§Œ¥ (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥))))))) ))
                   zzz =
                        mid-ùíá q r' q'
                         (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                          (<·µ£Weaken‚â§·µ£ _ _ q<x) x‚â§r'))
                         (‚Ñö.clamp‚â§ q q' r)
                   zzz' = isTrans<‚â§·µ£ _ _ _
                            (isTrans<‚â°·µ£ _ _ _ Œµ<q‚äìq'
                              (cong‚ÇÇ min·µ£
                                (sym (ùíá-rat _)) (sym (ùíá-rat _))))
                             zzz
               in isTrans‚â°<·µ£ _ _ _ (sym (CR‚Ñù.+InvR _)) (a-b<c‚áía-c<b _ _ _
                     (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                    (isTrans<·µ£ _ _ _ |fx-fr|<Œµ zzz')))
              ) (‚àÉrationalApprox‚â§ x (/2‚Çä Œ¥)))
         
         (ùíá-cont x (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ)))
         )
      (dense‚Ñöin‚Ñù 0 _ (snd q‚äìq')) )
   (‚àÉrationalApprox x 1)


 fl‚Çô‚â°ùíá : ‚àÄ x n ‚Üí (x ‚àà interval‚Ñô (fromNeg (suc n)) (fromNat (suc n)))
           ‚Üí  fst (fst (fl‚Çô n)) x ‚â° ùíá x 
 fl‚Çô‚â°ùíá x n x‚àà = ‚â°Continuous (fst (fst (fl‚Çô n)))
           (ùíá ‚àò clamp·µ£ (fromNeg (suc n)) (fromNat (suc n)))
     (snd (fl‚Çô n)) (IsContinuous‚àò _ _ ùíá-cont
          (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))
       (Œª r ‚Üí sym (ùíá-rat _))
       x
   ‚àô cong ùíá (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ x x‚àà))


 ùíá-monotone : ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí ùíá x ‚â§·µ£ ùíá y
 ùíá-monotone x y x‚â§y =
  (‚â°Cont‚ÇÇ (cont‚ÇÇ‚àò (contNE‚ÇÇ maxR) ùíá-cont ùíá-cont)
    (cont‚àò‚ÇÇ ùíá-cont (contNE‚ÇÇ maxR) )
    (‚Ñö.elimBy‚â§
       (Œª u u' X ‚Üí max·µ£Comm _ _ ‚àô‚àô X ‚àô‚àô cong ùíá (max·µ£Comm _ _))
       Œª u u' u‚â§u' ‚Üí
         cong‚ÇÇ max·µ£ (ùíá-rat _) (ùíá-rat _)
          ‚àô‚àô ^‚Ñö-MonotoneR u u' u‚â§u' (<·µ£Weaken‚â§·µ£ _ _ 1<z) ‚àô
           cong (fst ‚àò (z ^‚Ñö_)) (sym (‚Ñö.‚â§‚Üímax u u' u‚â§u')) ‚àô‚àô
          sym (ùíá-rat _))
        x y)
   ‚àô cong ùíá x‚â§y


 ùíá-monotone-str : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí ùíá x <·µ£ ùíá y
 ùíá-monotone-str x y = PT.rec squash‚ÇÅ
    Œª ((q , q') , (‚â§q , q<q' , q'‚â§)) ‚Üí
      isTrans‚â§<·µ£ _ _ _ (ùíá-monotone x (rat q) ‚â§q)
        (isTrans<‚â§·µ£ _ _ _ (
           subst2 _<·µ£_ (sym (ùíá-rat _)) (sym (ùíá-rat _))
            (^‚Ñö-StrictMonotoneR 1<z q q' q<q'))
          (ùíá-monotone (rat q') y q'‚â§))


 module _ (n : ‚Ñï) where


  incr^ : isIncrasing‚Ñô·µ£
            (interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n))))
            (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
  incr^ x x‚àà y y‚àà x<y =
    subst2 _<·µ£_
      (sym (fl‚Çô‚â°ùíá x n x‚àà))
      (sym (fl‚Çô‚â°ùíá y n y‚àà))
      (ùíá-monotone-str  x y x<y)


  nondecr^ : isNondecrasing‚Ñô·µ£
      (interval‚Ñô (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
       (rat [ pos (suc n) / 1+ 0 ]))
      (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
  nondecr^ x x‚àà y y‚àà x‚â§y =
    subst2 _‚â§·µ£_
      (sym (fl‚Çô‚â°ùíá x n x‚àà))
      (sym (fl‚Çô‚â°ùíá y n y‚àà))
      (ùíá-monotone x y x‚â§y)



 open expPreDer Z z z<Z 1<z public

 expDerAt0 : derivativeOf ùíá at 0 is preLn
 expDerAt0 Œµ =
  PT.rec
    squash‚ÇÅ
    (Œª (Œµ' , 0<Œµ' , <Œµ) ‚Üí
      let Œµ'‚Çä = (Œµ' , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ'))
          
          (N , X) =  seqŒî Œµ'‚Çä 
      in  ‚à£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2+ (suc N) ] , _) ,
             (Œª r 0ÔºÉr ‚à£r‚à£<1/N ‚Üí
               let d‚â§lnSeq : differenceAt ùíá 0 r 0ÔºÉr ‚â§·µ£ lnSeq z (suc N)
                   d‚â§lnSeq = ‚â§ContWPÔºÉ‚â§ [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))
                             (IsContinuousWithPred-differenceAt 0 _ ùíá-cont)
                             ((AsContinuousWithPred _ _
                              (IsContinuousConst (lnSeq z (suc N)))))
                             (Œª u u‚àà u‚â§ ‚Üí
                               subst2 _‚â§·µ£_
                                ((cong‚ÇÇ _¬∑·µ£_ (cong‚ÇÇ _-·µ£_
                             (cong (fst ‚àò (z ^‚Ñö_)) (sym (‚Ñö.+IdL _)) ‚àô sym (ùíá-rat _))
                             (sym (ùíá-rat _)))
                                ((cong‚ÇÇ inv‚Ñù (+IdR _) (toPathP (isPropÔºÉ _ _ _ _))))))
                                (cong‚ÇÇ _¬∑·µ£_
                                  refl ((inv‚Ñù‚Çä-rat _ ‚àô cong rat
                              (cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° {y = [ 1 / 2+ (suc N) ] , _ }
                                 (‚Ñö.+IdR _))))))
                                (slope-monotoneÔºÉ ((z)) 1<z 0 u
                                  0 [ 1 / 2+ (suc N) ]
                                  u‚àà (‚Ñö.0<pos 0 _) (‚Ñö.isRefl‚â§ 0) u‚â§))
                             r 0ÔºÉr
                             (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ r)
                                (isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£ (sym (+IdR _))
                                 ‚àô minusComm-abs·µ£ _ _) (<·µ£Weaken‚â§·µ£ (abs·µ£ (0 -·µ£ r)) _ ‚à£r‚à£<1/N)))


                   lnSeq'‚â§d : lnSeq' z (suc N) ‚â§·µ£ differenceAt ùíá 0 r 0ÔºÉr
                   lnSeq'‚â§d = ‚â§ContWPÔºÉ‚â§' (‚Ñö.- [ 1 / 2+ suc N ])
                                  ((‚Ñö.minus-< 0 [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))))
                              ((AsContinuousWithPred _ _
                              (IsContinuousConst (lnSeq' z (suc N)))))
                              (IsContinuousWithPred-differenceAt 0 _ ùíá-cont)
                               (Œª u u‚àà u‚â§ ‚Üí subst2 _‚â§·µ£_
                                  ((cong‚ÇÇ _¬∑·µ£_ refl ((inv‚Ñù‚Çä-rat _ ‚àô cong rat
                                    (cong (fst ‚àò inv‚Ñö‚Çä)
                                      (‚Ñö‚Çä‚â° {x = (0 ‚Ñö.- (‚Ñö.- [ 1 / 2+ suc N ])) , _}
                                           {y = [ 1 / 2+ (suc N) ] , _ }
                                        (‚Ñö.+IdL _ ‚àô ‚Ñö.-Invol _)))))))
                                  (sym (-·µ£¬∑-·µ£ _ _) ‚àô cong‚ÇÇ _¬∑·µ£_
                                    (-[x-y]‚â°y-x _ _ ‚àô
                                      cong‚ÇÇ _-·µ£_ (sym (ùíá-rat _) ‚àô cong ùíá (sym (+IdL _)))
                                        (sym (ùíá-rat _)))
                                    (-inv‚Ñù _ _ ‚àô cong‚ÇÇ inv‚Ñù (cong -·µ£_ (+IdL _) ‚àô -·µ£Invol _)
                                      (toPathP (isPropÔºÉ _ _ _ _))))
                                   
                                  (slope-monotoneÔºÉ' ((z)) 1<z
                                    (‚Ñö.- [ 1 / 2+ (suc N) ]) 0 u 0                                    
                                    ((‚Ñö.minus-< 0 [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))))
                                    (isSymÔºÉ _ _ u‚àà) u‚â§ (‚Ñö.isRefl‚â§ 0)))
                               r 0ÔºÉr
                             (isTrans‚â§·µ£ _ _ _
                               (-·µ£‚â§·µ£ _ _ (<·µ£Weaken‚â§·µ£ (abs·µ£ (0 -·µ£ r)) _ ‚à£r‚à£<1/N))
                               (‚â§·µ£-·µ£ _ _ (isTrans‚â§‚â°·µ£ _ _ _ (‚â§abs·µ£ (-·µ£ r))
                                 (cong abs·µ£ (sym (+IdL _)) ‚àô sym (-·µ£Invol _)))))
                   

               in isTrans‚â§<·µ£ _ _ _
                    (interval‚Ñô‚Üídist< _ _ _ _
                       (<·µ£Weaken‚â§·µ£ _ _ (lnSeq'<preLn _) , (preLn‚â§lnSeq _))
                       (lnSeq'‚â§d , d‚â§lnSeq))
                    (isTrans<·µ£ _ _ _ (X (suc N) ‚Ñï.‚â§-refl) <Œµ)

                ) ‚à£‚ÇÅ )
    (dense‚Ñöin‚Ñù 0 _ (snd Œµ)) 

 ùíá¬∑ : ‚àÄ x y ‚Üí ùíá x ¬∑·µ£ ùíá y ‚â° ùíá (x +·µ£ y) 
 ùíá¬∑ = ‚â°Cont‚ÇÇ
      (cont‚ÇÇ‚àò IsContinuous‚ÇÇ¬∑·µ£ ùíá-cont ùíá-cont )
      (cont‚àò‚ÇÇ ùíá-cont (contNE‚ÇÇ sumR))
      Œª u u' ‚Üí cong‚ÇÇ _¬∑·µ£_ (ùíá-rat _) (ùíá-rat _)
         ‚àô cong fst (^‚Ñö-+ _ _ _) ‚àô sym (ùíá-rat _) 
 

 differenceAtùíá-Œî : ‚àÄ x r 0ÔºÉr ‚Üí ùíá x ¬∑·µ£ differenceAt ùíá 0 r 0ÔºÉr ‚â° (differenceAt ùíá x r 0ÔºÉr)
 differenceAtùíá-Œî x r 0ÔºÉr = ¬∑·µ£Assoc _ _ _ ‚àô
   cong (_Ôºè·µ£[ r , 0ÔºÉr ]) (ùêë'.¬∑DistR- _ _ _ ‚àô
     cong‚ÇÇ _-·µ£_
       (ùíá¬∑ _ (0 +·µ£ r) ‚àô cong ùíá (cong (x +·µ£_) (+IdL r)))
       (ùíá¬∑ _ _ ‚àô cong ùíá (+IdR x)))
 

 expDerA : ‚àÄ x ‚Üí derivativeOf ùíá at x is (ùíá x ¬∑·µ£ preLn)
 expDerA x = 
  subst (at (rat [ pos zero / 1+ zero ]) limitOf_is (ùíá x ¬∑·µ£ preLn))
   (funExt‚ÇÇ Œª r 0ÔºÉr ‚Üí
     differenceAtùíá-Œî _ _ _ )
   (¬∑-lim
   _ _ _ _ _
   (const-lim (ùíá x) 0) expDerAt0)  



seq-^-intervals : Seq‚äÜ
seq-^-intervals .Seq‚äÜ.ùï° Z =
 ointerval‚Ñô
   (rat (1 ‚Ñö.+ [ 1 / 1+ (suc Z) ]))
   (fromNat (suc (suc Z)))
seq-^-intervals .Seq‚äÜ.ùï°‚äÜ Z x (<x , x<) =
     isTrans<·µ£ _ _ _
      (<‚Ñö‚Üí<·µ£ _ _  (‚Ñö.<-o+ [ pos 1 / 2+ (suc Z) ] _ _
        (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä
            (fromNat (suc (suc Z)))
            (fromNat (suc (suc (suc Z))))) (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-refl)) )))
      <x
  , isTrans<·µ£ _ _ _ x< (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-refl)))

seq-^-intervals‚ààPos : seq-^-intervals Seq‚äÜ.s‚äá pred1<
seq-^-intervals‚ààPos x x<1 =
  PT.map2 (Œª (1+ n , N) (1+ m , M) ‚Üí
        let m‚äîn = ‚Ñï.max n m
            M' = isTrans‚â°<·µ£ _ _ _ (¬∑IdL _
              ‚àô sym (abs·µ£Pos _ (snd (inv‚Ñù‚Çä (x -·µ£ 1 , x<y‚Üí0<y-x 1 x x<1)))))
                   (isTrans<‚â§·µ£ _ _ _ M
                     ((‚â§‚Ñö‚Üí‚â§·µ£ (fromNat (suc m)) (fromNat (suc (suc m‚äîn))) 
                      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc (‚Ñï.right-‚â§-max {suc m} {suc n})))))))
            
            ii = isTrans‚â°<·µ£ _ _ _ (( sym (inv‚Ñù‚Çä-rat _) ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° refl))
                    ‚àô sym (¬∑IdL _))
                 (invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (2+ m‚äîn))))
                 (isTrans<‚â°·µ£ _ _ _ (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _) M') (¬∑·µ£Comm _ _)))
        in m‚äîn
            , b<c-b‚áía+b<c _ _ _ ii
            , isTrans<‚â§·µ£ _ _ _
               (isTrans‚â§<·µ£ _ _ _
                 (‚â§abs·µ£ _) 
                 N) ((‚â§‚Ñö‚Üí‚â§·µ£ (fromNat (suc n)) _
                      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc ((‚Ñï.left-‚â§-max {suc n} {suc m})))))))
        )
    (getClamps x)
    (getClamps (fst (inv‚Ñù‚Çä ((x -·µ£ 1) , x<y‚Üí0<y-x _ _ x<1))))
  

-- -- FnWith


Seq-^ : Seq‚äÜ‚Üí ((‚Ñù ‚Üí ‚Ñù) √ó ‚Ñù) seq-^-intervals
Seq-^ .Seq‚äÜ‚Üí.fun x Z (<x , x<) = F.ùíá , F.preLn
 where
 module F = BDL (x , isTrans<·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (1 ‚Ñö‚Çä+ ([ pos 1 / 2+ Z ] , _)))) <x) Z x< <x
Seq-^ .Seq‚äÜ‚Üí.fun‚äÜ x n m (<x , x<) (<x' , x<') n<m = cong‚ÇÇ _,_ 
  (funExt (‚â°Continuous _ _ F.ùíá-cont F'.ùíá-cont
       Œª r ‚Üí F.ùíá-rat r ‚àô‚àô cong (fst ‚àò (_^‚Ñö r)) (‚Ñù‚Çä‚â° refl) ‚àô‚àô sym (F'.ùíá-rat r)))
        Œª i ‚Üí fromCauchySequence'-‚â°-lem (lnSeq (x , xp i))
              (icP i) (icP' i) i
        
 where
 module F = BDL (x , isTrans<·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (1 ‚Ñö‚Çä+ ([ pos 1 / 2+ n ] , _)))) <x) n x< <x
 module F' = BDL (x , isTrans<·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (1 ‚Ñö‚Çä+ ([ pos 1 / 2+ m ] , _)))) <x')
             m x<' <x'

 0<x = isTrans<·µ£ (rat [ pos 0 / 1+ 0 ])
         (‚Ñö‚Çä‚Üí‚Ñù‚Çä (([ pos 1 , (1+ 0) ] , tt) ‚Ñö‚Çä+ ([ pos 1 / 2+ n ] , tt))
          .fst)
         x
         (snd
          (‚Ñö‚Çä‚Üí‚Ñù‚Çä (([ pos 1 , (1+ 0) ] , tt) ‚Ñö‚Çä+ ([ pos 1 / 2+ n ] , tt))))
         <x
 0<x' = isTrans<·µ£ (rat [ pos 0 / 1+ 0 ])
         (‚Ñö‚Çä‚Üí‚Ñù‚Çä (([ pos 1 , (1+ 0) ] , tt) ‚Ñö‚Çä+ ([ pos 1 / 2+ m ] , tt))
          .fst)
         x
         (snd
          (‚Ñö‚Çä‚Üí‚Ñù‚Çä (([ pos 1 , (1+ 0) ] , tt) ‚Ñö‚Çä+ ([ pos 1 / 2+ m ] , tt))))
         <x'
 xp : 0<x ‚â° 0<x'        
 xp = isProp<·µ£ 0 x 0<x 0<x'

 icP : PathP (Œª i ‚Üí IsCauchySequence' (lnSeq (x , xp i))) F.ca-lnSeq _
 icP = toPathP refl

 icP' : PathP (Œª i ‚Üí IsCauchySequence' (lnSeq (x , xp i))) _ F'.ca-lnSeq
 icP' = symP (toPathP refl)



module Seq-^-FI = Seq‚äÜ‚Üí.FromIntersection Seq-^
   (isSet√ó (isSet‚Üí isSet‚Ñù) isSet‚Ñù) pred1< seq-^-intervals‚ààPos

module Pos^ where
 open Seq-^-FI

 pre^ : ‚àÄ x ‚Üí 1 <·µ£ x ‚Üí ‚Ñù ‚Üí ‚Ñù 
 pre^ x 1<x = fst (‚à©$ x 1<x)

 preLn' : ‚àÄ x ‚Üí 1 <·µ£ x ‚Üí ‚Ñù
 preLn' x 1<x = snd (‚à©$ x 1<x)

 pre^-der : ‚àÄ x x‚àà y ‚Üí derivativeOf (pre^ x x‚àà) at y is (pre^ x x‚àà y ¬∑·µ£ preLn' x x‚àà)
 pre^-der x x‚àà = ‚à©$-elimProp x x‚àà
     {Œª (g , d) ‚Üí (y : ‚Ñù) ‚Üí
       derivativeOf g at y is (g y ¬∑·µ£ d)}
    (Œª _ ‚Üí isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ)
     Œª n (a , b) ‚Üí BDL.expDerA (x , _) n b a 

-- -- -- 

-- -- -- Seq-^-rat : ?
-- -- -- Seq-^-rat = ?


-- -- module PowBL‚Åª¬π Z (z : ‚Ñö‚Çä)
-- --           (z<Z : fst z ‚Ñö.< fromNat (suc (suc Z)))
-- --           (1/Z<z : 1 ‚Ñö.+ [ 1 / 1+ (suc Z) ] ‚Ñö.< fst z )
          
-- --            where

-- --  open BDL (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) Z (<‚Ñö‚Üí<·µ£ _ _ z<Z) (<‚Ñö‚Üí<·µ£ _ _ 1/Z<z)

-- --  approx-^ : ‚ÑöApprox‚Ñô' ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- --       (Œª x _ ‚Üí ùíá x , 0<powBL x)
-- --  approx-^ y =
-- --       let ((p , q) , (_ , p/q‚â°y)) = ‚Ñö.reduced y
-- --       in subst (Œª y ‚Üí (q‚ààP : rat y ‚àà ‚ä§Pred) ‚Üí 
-- --       ‚ÑöApprox‚Ñô'Num ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- --            (Œª x _ ‚Üí ùíá x , 0<powBL x) y q‚ààP)
-- --            p/q‚â°y (w p q)
-- --   where
-- --     w : ‚àÄ p q ‚Üí (q‚ààP : rat [ p / q ] ‚àà ‚ä§Pred)
-- --           ‚Üí ‚ÑöApprox‚Ñô'Num ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- --              (Œª x _ ‚Üí ùíá x , 0<powBL x) [ p / q ] q‚ààP 
-- --     w p q q‚ààP =
-- --        fst wwW
-- --      , fst (snd wwW)
-- --      , fst (snd (snd wwW))
-- --      , snd (snd (snd wwW)) ‚àô‚àô cong fst (sym (pow-root-comm (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) p q))
-- --             ‚àô‚àô sym (ùíá-rat [ p / q ])

-- --      where
-- --      www : ‚ÑöApprox‚Ñô' (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- --              (curry
-- --               (((Œª p‚ÇÅ ‚Üí fst (root q (p‚ÇÅ .fst , p‚ÇÅ .snd)) , root q p‚ÇÅ .snd))
-- --                ‚àò uncurry (curry (_^‚Ñ§ p))))
-- --      www = ‚ÑöApprox‚Ñô''‚Üí‚ÑöApprox‚Ñô' _ _ _
-- --        (‚ÑöApprox‚Ñô‚àò (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) _ (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- --         (curry (root q))
-- --         (curry (_^‚Ñ§ p))
-- --         (uContRoot q)
-- --         (‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' _ _ _ (‚ÑöApprox‚Ñô-root q))
-- --         (^‚Ñ§-‚ÑöApprox‚Ñô'' p)) 

-- --      wwW = www (fst z) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z))




-- --  z^n : ‚àÄ z n ‚Üí fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö (fromNat (suc n))) ‚â°
-- --            rat (fst z ‚Ñö^‚Åø (suc n))
-- --  z^n z zero = sym (rat¬∑·µ£rat _ _)
-- --  z^n z (suc n) = cong (_¬∑·µ£ rat (fst z)) (z^n z n) ‚àô sym (rat¬∑·µ£rat _ _)


-- -- -- -- -- -- -- -- --  module Inv‚Çô (n : ‚Ñï) where




-- -- -- -- -- -- -- -- --   open IsBilipschitz' (‚Ñö.- (fromNat (suc n))) (fromNat (suc n))
-- -- -- -- -- -- -- -- --          (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.negsuc<pos)
-- -- -- -- -- -- -- -- --          (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
-- -- -- -- -- -- -- -- --          (AsContinuousWithPred _ _ (snd (fl‚Çô n)))
-- -- -- -- -- -- -- -- --          (incr^ n)
-- -- -- -- -- -- -- -- --          (nondecr^  n)
-- -- -- -- -- -- -- -- --          public

-- -- -- -- -- -- -- -- --   fa' = fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n

-- -- -- -- -- -- -- -- --   fa‚â° : fa ‚â° rat fa'
-- -- -- -- -- -- -- -- --   fa‚â° =  fl‚Çô‚â°ùíá (fromNeg (suc n)) n a‚àà
-- -- -- -- -- -- -- -- --        ‚àô ùíá-rat (fromNeg (suc n))
-- -- -- -- -- -- -- -- --         ‚àô cong fst (^‚Ñö-minus (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) (fromNeg (suc n))
-- -- -- -- -- -- -- -- --           ‚àô cong (_^‚Ñö fromNat (suc n)) (‚Ñù‚Çä‚â°
-- -- -- -- -- -- -- -- --            (inv‚Ñù‚Çä‚â°inv‚Ñù (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)))
-- -- -- -- -- -- -- -- --            ‚àô inv‚Ñù-rat _ _ (inl (‚Ñö.0<‚Ñö‚Çä z)) ‚àô
-- -- -- -- -- -- -- -- --              cong rat (‚Ñö.inv‚Ñö‚Çä‚â°inv‚Ñö _ _))))
-- -- -- -- -- -- -- -- --         ‚àô z^n (inv‚Ñö‚Çä z) n

-- -- -- -- -- -- -- -- --   fb' = (fst z ‚Ñö^‚Åø suc n)
 
-- -- -- -- -- -- -- -- --   fb‚â° : fb ‚â° rat fb'
-- -- -- -- -- -- -- -- --   fb‚â° =  fl‚Çô‚â°ùíá  (fromNat (suc n)) n b‚àà
-- -- -- -- -- -- -- -- --     ‚àô ùíá-rat _ ‚àô z^n z n

-- -- -- -- -- -- -- -- --   1<‚Ñöz : 1 ‚Ñö.< (fst z)
-- -- -- -- -- -- -- -- --   1<‚Ñöz = <·µ£‚Üí<‚Ñö 1 (fst z) 1<z

-- -- -- -- -- -- -- -- --   fa'‚â§fb' : fa' ‚Ñö.‚â§ fb'
-- -- -- -- -- -- -- -- --   fa'‚â§fb' = ‚Ñö.isTrans‚â§ _ 1 _
-- -- -- -- -- -- -- -- --     (‚Ñö.x^‚Åø‚â§1 _ (suc n) (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä z)) (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 z)
-- -- -- -- -- -- -- -- --      (‚Ñö.<Weaken‚â§ 1 (fst z) 1<‚Ñöz)))
-- -- -- -- -- -- -- -- --     (‚Ñö.1‚â§x^‚Åø _ (suc n) (‚Ñö.<Weaken‚â§ 1 (fst z) 1<‚Ñöz) ) 
  
-- -- -- -- -- -- -- -- --   approx-^‚Ñô : ‚ÑöApprox‚Ñô'
-- -- -- -- -- -- -- -- --      ((interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n)))))
-- -- -- -- -- -- -- -- --      (interval‚Ñô fa fb)
-- -- -- -- -- -- -- -- --      f'
-- -- -- -- -- -- -- -- --   approx-^‚Ñô x x‚àà =
-- -- -- -- -- -- -- -- --       ‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n) (fst z ‚Ñö^‚Åø suc n) ‚àò fst ww
-- -- -- -- -- -- -- -- --     , (Œª Œµ ‚Üí subst2
-- -- -- -- -- -- -- -- --        (Œª fa fb ‚Üí
-- -- -- -- -- -- -- -- --          (rat (‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n) (fst z ‚Ñö^‚Åø suc n) (fst ww Œµ)))
-- -- -- -- -- -- -- -- --           ‚àà (interval‚Ñô fa fb))
-- -- -- -- -- -- -- -- --           (sym fa‚â° ) (sym fb‚â°)
-- -- -- -- -- -- -- -- --         (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _
-- -- -- -- -- -- -- -- --           (clam‚àà‚Ñöinterval‚Ñô fa' fb' fa'‚â§fb' (fst ww Œµ)) ))
-- -- -- -- -- -- -- -- --     , (Œª Œ¥ Œµ ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _)
-- -- -- -- -- -- -- -- --          let u = (<·µ£‚Üí<‚Ñö _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) (fst (snd (snd ww)) Œ¥ Œµ)))
-- -- -- -- -- -- -- -- --          in <‚Ñö‚Üí<·µ£ _ _
-- -- -- -- -- -- -- -- --                (‚Ñö.isTrans‚â§< _ _ _ (
-- -- -- -- -- -- -- -- --                   subst2 ‚Ñö._‚â§_ (‚Ñö.abs'‚â°abs _) (‚Ñö.abs'‚â°abs _)
-- -- -- -- -- -- -- -- --                    (‚Ñö.clampDist _ _ _ _) ) u))
-- -- -- -- -- -- -- -- --     , ssw

-- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- --     ww = approx-^ x _


-- -- -- -- -- -- -- -- --     z^clmp-x = fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö
-- -- -- -- -- -- -- -- --              ‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)

-- -- -- -- -- -- -- -- --     ssww' : lim (Œª x‚ÇÅ ‚Üí rat (fst ww x‚ÇÅ)) _ ‚â° z^clmp-x
-- -- -- -- -- -- -- -- --     ssww' = snd (snd (snd ww))
-- -- -- -- -- -- -- -- --       ‚àô ùíá-rat _ ‚àô cong (fst ‚àò (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö_))
-- -- -- -- -- -- -- -- --         (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° _ _ x (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ x‚àà))

-- -- -- -- -- -- -- -- --     ssw-lem1 : fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö [ ‚Ñ§.negsuc n / 1+ 0 ]) ‚â§·µ£ z^clmp-x
-- -- -- -- -- -- -- -- --     ssw-lem1 = ((^‚Ñö-MonotoneR {‚Ñö‚Çä‚Üí‚Ñù‚Çä z} (fromNeg (suc n))
-- -- -- -- -- -- -- -- --                                  (‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)
-- -- -- -- -- -- -- -- --                                    (‚Ñö.‚â§clamp _ _ _ (‚Ñö.neg‚â§pos (suc n) (suc n))) 
-- -- -- -- -- -- -- -- --                                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ 1<‚Ñöz))))

-- -- -- -- -- -- -- -- --     ssw-lem2 : z^clmp-x ‚â§·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö [ pos (suc n) / 1+ 0 ])
-- -- -- -- -- -- -- -- --     ssw-lem2 = ((^‚Ñö-MonotoneR {‚Ñö‚Çä‚Üí‚Ñù‚Çä z} 
-- -- -- -- -- -- -- -- --                                  (‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)
-- -- -- -- -- -- -- -- --                                   (fromNat (suc n))
-- -- -- -- -- -- -- -- --                                   (‚Ñö.clamp‚â§ (‚Ñö.- [ pos (suc n) / 1+ 0 ]) _ x) 
-- -- -- -- -- -- -- -- --                                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ 1<‚Ñöz))))

-- -- -- -- -- -- -- -- --     ssw : lim (Œª x‚ÇÅ ‚Üí
-- -- -- -- -- -- -- -- --                   rat
-- -- -- -- -- -- -- -- --                   (‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n)
-- -- -- -- -- -- -- -- --                     (fst z ‚Ñö^‚Åø suc n) (fst ww x‚ÇÅ))) _ ‚â° z^clmp-x
-- -- -- -- -- -- -- -- --     ssw = invEq (lim‚â°‚âÉ‚àº _ _ _) Œª Œµ ‚Üí
-- -- -- -- -- -- -- -- --         let zz = isTrans‚â°‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- --                  (sym (cong abs·µ£ (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- --                    (clamp-lim _ _ _ (fst (snd (snd ww)))  ‚àô congLim _ _ _ _
-- -- -- -- -- -- -- -- --                       (Œª _ ‚Üí refl) )
-- -- -- -- -- -- -- -- --                          (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _
-- -- -- -- -- -- -- -- --                            ( (isTrans‚â°‚â§·µ£ _ _ _ (sym (z^n ((inv‚Ñö‚Çä z)) _) ‚àô
-- -- -- -- -- -- -- -- --                               cong fst (^‚Ñö-minus _ _ ‚àô
-- -- -- -- -- -- -- -- --                                 cong {y = ‚Ñö‚Çä‚Üí‚Ñù‚Çä z} (_^‚Ñö (fromNeg (suc n)))
-- -- -- -- -- -- -- -- --                                    (cong inv‚Ñù‚Çä (‚Ñù‚Çä‚â° (sym (inv‚Ñù‚Çä-rat _))) ‚àô inv‚Ñù‚ÇäInvol _)))
-- -- -- -- -- -- -- -- --                                ssw-lem1)
-- -- -- -- -- -- -- -- --                            , isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- --                                ssw-lem2 (z^n _ _)))))))
                 
-- -- -- -- -- -- -- -- --                  ((clampDist·µ£' ((fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø (suc n))) ((fst z ‚Ñö^‚Åø (suc n)))
-- -- -- -- -- -- -- -- --                     z^clmp-x (lim (Œª x‚ÇÅ ‚Üí rat (fst ww x‚ÇÅ)) _)))
-- -- -- -- -- -- -- -- --         in isTrans‚â§<·µ£ _ _ _ zz (fst (lim‚â°‚âÉ‚àº _ _ _) ssww' Œµ)




-- -- -- -- -- -- -- -- --   open Inv 
-- -- -- -- -- -- -- -- --          approx-^‚Ñô
-- -- -- -- -- -- -- -- --          (slUpBd n) (slUpBdInv n)
-- -- -- -- -- -- -- -- --          (lipF‚Çô n)
-- -- -- -- -- -- -- -- --          (slpBdIneq n)
-- -- -- -- -- -- -- -- --          (invLipF‚Çô n) public


-- -- -- -- -- -- -- -- --   A‚Ñô = ointerval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (fromNat (suc n))


-- -- -- -- -- -- -- -- --   A : Type
-- -- -- -- -- -- -- -- --   A = Œ£ ‚Ñù (_‚àà A‚Ñô)


-- -- -- -- -- -- -- -- --   B‚Ñô = ointerval‚Ñô
-- -- -- -- -- -- -- -- --     (fst (fst (fl‚Çô n)) (rat (‚Ñö.- fromNat (suc n))))
-- -- -- -- -- -- -- -- --     (fst (fst (fl‚Çô n)) (rat (fromNat (suc n))))


-- -- -- -- -- -- -- -- --   B = Œ£ ‚Ñù (_‚àà B‚Ñô)

-- -- -- -- -- -- -- -- --   B‚Ñô' = ointerval‚Ñô
-- -- -- -- -- -- -- -- --     (ùíá (rat (‚Ñö.- fromNat (suc n))))
-- -- -- -- -- -- -- -- --     (ùíá (rat (fromNat (suc n))))

-- -- -- -- -- -- -- -- --   B' = Œ£ ‚Ñù (_‚àà B‚Ñô')

-- -- -- -- -- -- -- -- --   isEquiv‚Çô : isEquiv {A = A} {B = B} (Œª (x , x‚àà) ‚Üí fst (fst (fl‚Çô n)) x , _) 
-- -- -- -- -- -- -- -- --   isEquiv‚Çô = isEquivFo

-- -- -- -- -- -- -- -- --   ùíá-‚àà‚Çô : ‚àÄ x (x‚àà : x ‚àà A‚Ñô)  ‚Üí ùíá x ‚àà B‚Ñô'    
-- -- -- -- -- -- -- -- --   ùíá-‚àà‚Çô x (<x , x<) =
-- -- -- -- -- -- -- -- --        ùíá-monotone-str _ _ <x
-- -- -- -- -- -- -- -- --      , ùíá-monotone-str _ _ x<

-- -- -- -- -- -- -- -- --   fa‚â°‚Çô : (fst (fst (fl‚Çô n)) (rat (‚Ñö.- fromNat (suc n))))
-- -- -- -- -- -- -- -- --           ‚â° (ùíá (rat (‚Ñö.- fromNat (suc n))))
-- -- -- -- -- -- -- -- --   fa‚â°‚Çô = cong (fst ‚àò (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö_))
-- -- -- -- -- -- -- -- --    (sym (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° ((‚Ñö.- fromNat (suc n))) (fromNat (suc n)) _
-- -- -- -- -- -- -- -- --       (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ a‚àà)))
-- -- -- -- -- -- -- -- --      ‚àô sym (ùíá-rat (‚Ñö.- fromNat (suc n)))


-- -- -- -- -- -- -- -- --   fb‚â°‚Çô : (fst (fst (fl‚Çô n)) (rat (fromNat (suc n))))
-- -- -- -- -- -- -- -- --           ‚â° (ùíá (rat (fromNat (suc n))))
-- -- -- -- -- -- -- -- --   fb‚â°‚Çô = cong (fst ‚àò (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö_))
-- -- -- -- -- -- -- -- --    (sym (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° ((‚Ñö.- fromNat (suc n))) (fromNat (suc n)) _
-- -- -- -- -- -- -- -- --       (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ b‚àà)))
-- -- -- -- -- -- -- -- --      ‚àô sym (ùíá-rat (fromNat (suc n)))


-- -- -- -- -- -- -- -- --   isEquiv‚Çô' : isEquiv {A = A} {B = B'} (Œª (x , x‚àà) ‚Üí ùíá x , ùíá-‚àà‚Çô x x‚àà) 
-- -- -- -- -- -- -- -- --   isEquiv‚Çô' = subst {A = Œ£ (‚Ñù √ó ‚Ñù)
-- -- -- -- -- -- -- -- --         (Œª rr ‚Üí A ‚Üí Œ£ ‚Ñù (_‚àà ointerval‚Ñô (fst rr) (snd rr)))}
-- -- -- -- -- -- -- -- --         (Œª (_ , f) ‚Üí isEquiv f)
-- -- -- -- -- -- -- -- --         (Œ£PathP
-- -- -- -- -- -- -- -- --           (Œ£PathP (fa‚â°‚Çô , fb‚â°‚Çô)
-- -- -- -- -- -- -- -- --            , funExt Œª x ‚Üí Œ£PathPProp
-- -- -- -- -- -- -- -- --               (Œª x ‚Üí ‚àà-isProp (ointerval‚Ñô _ _) x)
-- -- -- -- -- -- -- -- --                (sym (‚à©$-‚àà‚Çô (fst x) _ n (snd x))) ))
-- -- -- -- -- -- -- -- --           isEquiv‚Çô

-- -- -- -- -- -- -- -- --  module EFR = EquivFromRestr
-- -- -- -- -- -- -- -- --    ùíá
-- -- -- -- -- -- -- -- --    Inv‚Çô.ùíá-‚àà‚Çô
-- -- -- -- -- -- -- -- --    Inv‚Çô.isEquiv‚Çô'

-- -- -- -- -- -- -- -- --  ùíá‚Çä : ‚Ñù ‚Üí ‚Ñù‚Çä
-- -- -- -- -- -- -- -- --  ùíá‚Çä x = ùíá x , 0<powBL x


-- -- -- -- -- -- -- -- -- --  preùíá‚âÉ‚àà : ‚àÄ x ‚Üí (x ‚àà EFR.B‚Ñô) ‚âÉ (0 <·µ£ x)
-- -- -- -- -- -- -- -- -- --  preùíá‚âÉ‚àà x = propBiimpl‚ÜíEquiv (‚àà-isProp EFR.B‚Ñô x) (isProp<·µ£ _ _)
-- -- -- -- -- -- -- -- -- --   (PT.rec (isProp<·µ£ _ _)
-- -- -- -- -- -- -- -- -- --     (Œª (n , <x , _) ‚Üí
-- -- -- -- -- -- -- -- -- --         isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- --          (0<powBL (rat (‚Ñö.- fromNat (suc n)))) <x))
-- -- -- -- -- -- -- -- -- --   Œª 0<x ‚Üí
-- -- -- -- -- -- -- -- -- --     PT.map2
-- -- -- -- -- -- -- -- -- --       (Œª (n , N) (m , M) ‚Üí
-- -- -- -- -- -- -- -- -- --         (‚Ñï.max n m) , ({!!} ,
-- -- -- -- -- -- -- -- -- --            (isTrans<‚â§·µ£ _ _ _ N
-- -- -- -- -- -- -- -- -- --              (isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- --                {!N!}
-- -- -- -- -- -- -- -- -- --                (sym (ùíá-rat (fromNat (suc (‚Ñï.max n m)))))))))
-- -- -- -- -- -- -- -- -- --       (expBnd x) (expBnd (-·µ£ x))

-- -- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- -- --     expBnd : ‚àÄ x ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] x <·µ£ fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö {!!}) 
-- -- -- -- -- -- -- -- -- --     expBnd x =
-- -- -- -- -- -- -- -- -- --       PT.map {!!}
-- -- -- -- -- -- -- -- -- --        (EFR.clamp' x)
-- -- -- -- -- -- -- -- -- -- --  preùíá‚âÉ : ‚Ñù ‚âÉ ‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- --  preùíá‚âÉ = (_ , EFR.equiv-fromRestr) ‚àô‚Çë Œ£-cong-equiv-snd preùíá‚âÉ‚àà
 
 
-- -- -- -- -- -- -- -- -- -- --  isEquiv-ùíá : isEquiv ùíá‚Çä
-- -- -- -- -- -- -- -- -- -- --  isEquiv-ùíá =
-- -- -- -- -- -- -- -- -- -- --    subst {A = ‚àÄ x ‚Üí 0 <·µ£ ùíá x}
-- -- -- -- -- -- -- -- -- -- --      {x = Œª x ‚Üí snd (fst preùíá‚âÉ x)} {y = 0<powBL}
-- -- -- -- -- -- -- -- -- -- --      (Œª f‚àà' ‚Üí isEquiv {A = ‚Ñù} {B = ‚Ñù‚Çä} (Œª x ‚Üí ùíá x , f‚àà' x))
-- -- -- -- -- -- -- -- -- -- --      (isPropŒ† (Œª _ ‚Üí isProp<·µ£ 0 _) _ _) (snd preùíá‚âÉ ) 

-- -- -- -- -- -- -- -- -- -- --  log‚Ñö : ‚Ñù‚Çä ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- --  log‚Ñö = invEq (_ , isEquiv-ùíá)
 
-- -- -- -- -- -- -- -- -- -- -- module Log (y : ‚Ñù‚Çä) where

-- -- -- -- -- -- -- -- -- -- -- -- PowBL‚Åª¬π (z : ‚Ñö‚Çä) Z
-- -- -- -- -- -- -- -- -- -- -- --           (z<Z : fst z ‚Ñö.< fromNat (suc (suc Z)))
-- -- -- -- -- -- -- -- -- -- -- --           (1/Z<z : 1 ‚Ñö.+ [ 1 / 1+ (suc Z) ] ‚Ñö.< fst z )


-- -- -- -- -- -- -- -- -- -- --  pre-log : ‚àÄ n (x : ‚Ñö) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (rat x ‚àà ointerval‚Ñô (rat (1 ‚Ñö.+ [ 1 / 1+ (suc n) ]))
-- -- -- -- -- -- -- -- -- -- --             (fromNat (suc (suc n)))) ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- --  pre-log n x (<x , x<) =
-- -- -- -- -- -- -- -- -- -- --   PowBL‚Åª¬π.log‚Ñö n (x , ‚Ñö.<‚Üí0< _
-- -- -- -- -- -- -- -- -- -- --     (‚Ñö.isTrans< 0 ([ pos 1 / 1+ 0 ] ‚Ñö.+ [ pos 1 / 2+ n ]) _
-- -- -- -- -- -- -- -- -- -- --      (‚Ñö.0<‚Ñö‚Çä (1 ‚Ñö‚Çä+ ([ pos 1 / 2+ n ] , _)))
-- -- -- -- -- -- -- -- -- -- --       (<·µ£‚Üí<‚Ñö _ _ <x))) (<·µ£‚Üí<‚Ñö _ _ x<) (<·µ£‚Üí<‚Ñö _ _ <x) y
 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --  f‚Çô+ : (n : ‚Ñï) (x : ‚Ñù)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (x‚àà : Œ£ (fromNeg (suc n) <·µ£ x) (Œª _ ‚Üí x <·µ£ fromNat (suc n))) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       fst (fst (fl‚Çô n)) x ‚àà
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ointerval‚Ñô (ùíá (fromNeg (suc n))) (ùíá (fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --  f‚Çô+ = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  equiv‚Çô : (n : ‚Ñï) ‚Üí isEquiv
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       {A = Œ£ ‚Ñù (_‚àà ointerval‚Ñô (fromNeg (suc n)) (fromNat (suc n)))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       {B = Œ£ ‚Ñù (_‚àà ointerval‚Ñô (ùíá (fromNeg (suc n))) (ùíá (fromNat (suc n))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (Œª (x , x‚àà) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          fst (fst (fl‚Çô n)) (x) ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          f‚Çô+ n x x‚àà)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  equiv‚Çô n = (subst {A = ( (Œ£ Type Œª B ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (Œ£ ‚Ñù (_‚àà ointerval‚Ñô (fromNeg (suc n)) (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚Üí B))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª (B , f) ‚Üí isEquiv
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         {A = (Œ£ ‚Ñù (_‚àà ointerval‚Ñô (fromNeg (suc n)) (fromNat (suc n))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         {B = B} f)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ( (Œ£PathP ({!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            , {!?!}))))
       
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Inv‚Çô.isEquivFo n)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  open Equivùíá‚Çä f‚Çô+
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       equiv‚Çô {!!} {!!}  

  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ (z : ‚Ñù‚Çä) (z‚â§1 : fst z ‚â§·µ£ 1)  where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (B B' : ‚Ñö‚Çä) (B<B' : fst B ‚Ñö.< fst B') where


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   boundMonInv : (z' : ‚Ñù‚Çä) ‚Üí fst z ‚â§·µ£ fst z'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (fst (z' ^‚Ñö (fst B')) -·µ£ fst (z' ^‚Ñö (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚â§·µ£ (fst (z ^‚Ñö (fst B')) -·µ£ fst (z ^‚Ñö (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   boundMonInv z' z‚â§z' =  {!!}





-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ (z : ‚Ñù‚Çä) (1‚â§z : 1 ‚â§·µ£ fst z)  where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (B : ‚Ñö‚Çä) where


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   boundMon : (z' : ‚Ñù‚Çä) ‚Üí fst z ‚â§·µ£ fst z'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (fst (z ^‚Ñö (2 ‚Ñö.¬∑ (fst B))) -·µ£ fst (z ^‚Ñö (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚â§·µ£ (fst (z' ^‚Ñö (2 ‚Ñö.¬∑ (fst B))) -·µ£ fst (z' ^‚Ñö (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   boundMon z' z‚â§z' =  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (sym (factor-x·µÉ-x·µá z (2 ‚Ñö.¬∑ fst B) (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (sym (factor-x·µÉ-x·µá z' (2 ‚Ñö.¬∑ fst B) (fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (<·µ£Weaken‚â§·µ£ _ _ (snd (z' ^‚Ñö fst B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (x‚â§y‚Üí0‚â§y-x _ _ (1‚â§^‚Ñö _ h 1‚â§z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (^‚Ñö-Monotone B z‚â§z')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (‚â§·µ£-+o _ _ _ (^‚Ñö-Monotone h  z‚â§z')))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     h = (‚Ñö.<‚Üí‚Ñö‚Çä (fst B) (2 ‚Ñö.¬∑ fst B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (subst (‚Ñö._< 2 ‚Ñö.¬∑ fst B) (‚Ñö.¬∑IdL (fst B))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (‚Ñö.<-¬∑o 1 _ _ (‚Ñö.0<‚Ñö‚Çä B) ‚Ñö.dec‚Ñö<?)))




-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ Z (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z))) where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   bound<bound‚Ñö : ‚àÄ n ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (bound z (fromNat (suc n))) ‚â§·µ£ rat (fst (bound‚Ñö Z n))  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   bound<bound‚Ñö n =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚â§·µ£-¬∑·µ£o _ _ _ (<·µ£Weaken‚â§·µ£ _ _ $ snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (suc n)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (boundMon _ _ z‚â§Z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (cong‚ÇÇ _¬∑·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   ((cong (fst ‚àò (fromNat (suc (suc Z)) ^‚Ñö_))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     ‚àô ^‚Åø-‚Ñö^‚Åø _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   (^‚Åø-‚Ñö^‚Åø _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 refl ‚àô sym (rat¬∑·µ£rat _ _))
 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ineq'' : ‚àÄ (B : ‚Ñö‚Çä) x y ‚Üí ‚Ñö.abs x ‚Ñö.‚â§ fst B ‚Üí ‚Ñö.abs y ‚Ñö.‚â§ fst B ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àÄ z ‚Üí abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             bound (max·µ£‚Çä (inv‚Ñù‚Çä z) z) B ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))   
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ineq'' B x y absx‚â§B absy‚â§B =   
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uncurry $ <‚Üí‚â§ContPos'pred
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (IsContinuousWP‚àò' _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          IsContinuousAbs·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (contDiagNE‚ÇÇWP sumR _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (IsContinuous^‚Ñö y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (IsContinuousWP‚àò' _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              IsContinuous-·µ£ (IsContinuous^‚Ñö x ))))       
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (IsContinuousWP‚àò' _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (IsContinuous¬∑·µ£R (rat (‚Ñö.abs' (y ‚Ñö.- x))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (IsContinuousWP‚àò _ _ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (contBound B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (contDiagNE‚ÇÇWP maxR _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (snd inv‚Ñù')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (AsContinuousWithPred _ _ IsContinuousId))))    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        Œª u 0<u ‚Üí w u 0<u (‚Ñö.‚â°‚äé# u 1)
     
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  x‚â§B : x ‚Ñö.‚â§ fst B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  x‚â§B = ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§abs _) absx‚â§B 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  y‚â§B : y ‚Ñö.‚â§ fst B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  y‚â§B = ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§abs _) absy‚â§B 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w : ‚àÄ u (0<u : 0 <·µ£ rat u) ‚Üí ((u ‚â° 1) ‚äé (u ‚Ñö.# 1)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           abs·µ£ (fst ((rat u , 0<u) ^‚Ñö y) -·µ£ fst ((rat u , 0<u) ^‚Ñö x)) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        bound (max·µ£‚Çä (inv‚Ñù‚Çä (rat u , 0<u)) (rat u , 0<u)) B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w u 0<u (inl u=1) = ‚â°·µ£Weaken‚â§·µ£ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (cong abs·µ£ (ùêë'.+InvR' _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong (fst ‚àò (_^‚Ñö y)) (‚Ñù‚Çä‚â° {_ , 0<u} {_ , dec‚Ñö<·µ£? {0} {1}}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (cong rat u=1))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          ‚àô‚àô (cong fst (1^‚Ñö‚â°1 _) ‚àô cong fst (sym (1^‚Ñö‚â°1 _))) ‚àô‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           cong (fst ‚àò (_^‚Ñö x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (‚Ñù‚Çä‚â° {_ , dec‚Ñö<·µ£? {0} {1}} {_ , 0<u} (cong rat (sym u=1)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      ‚àô sym (ùêë'.0LeftAnnihilates' _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (cong (flip bound B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (‚Ñù‚Çä‚â° (cong‚ÇÇ max·µ£ (inv‚Ñù'-rat _ (‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<u)) _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ‚àô (cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° u=1)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (cong rat u=1) ‚àô max·µ£Idem _)) ‚àô bound1‚â°0 B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w u 0<u (inr (inl u<1)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    isTrans‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (isTrans‚â°‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (cong abs·µ£ (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong fst (^‚Ñö-minus _ _) ‚àô 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           cong (fst ‚àò (_^‚Ñö (‚Ñö.- y))) (‚Ñù‚Çä‚â° (inv‚Ñù'-rat _ _ _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong fst (^‚Ñö-minus _ _) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          cong (fst ‚àò (_^‚Ñö (‚Ñö.- x))) (‚Ñù‚Çä‚â° (inv‚Ñù'-rat _ _ _))))) h)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (cong (bound 1/u‚Çä B ¬∑·µ£_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (cong rat (cong ‚Ñö.abs' (sym (‚Ñö.-[x-y]‚â°y-x _ _)) ‚àô sym (‚Ñö.-abs' _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                ‚àô cong ‚Ñö.abs' (‚Ñö.+Comm _ _ ‚àô cong (‚Ñö._- x) (‚Ñö.-Invol y))))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚â§·µ£-¬∑o _ _ _ (subst (0 ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs _) (‚Ñö.0‚â§abs (y ‚Ñö.- x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ((‚â§·µ£-¬∑o _ _ ((fst (inv‚Ñö‚Çä B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä B))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (boundMon 1/u‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (<·µ£Weaken‚â§·µ£ _ _ 1<1/u‚Çä)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (isTrans‚â°‚â§·µ£ _ _ _  (sym (inv‚Ñù'-rat _ _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (‚â§max·µ£ _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ))))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   1/u‚Çä : ‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   1/u‚Çä = ‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (u , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<u)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   1<1/u‚Çä : 1 <·µ£ (fst 1/u‚Çä)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   1<1/u‚Çä =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     let z = subst (1 ‚Ñö.<_) (‚Ñö.¬∑IdL _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             $ ‚Ñö.y¬∑x<z‚Üíx<z¬∑inv‚Ñö‚Çäy 1 1 ((u , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<u)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (subst (‚Ñö._< 1) (sym (‚Ñö.¬∑IdR u)) u<1)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     in <‚Ñö‚Üí<·µ£ _ _ z
    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   h : abs·µ£ (fst (1/u‚Çä ^‚Ñö (‚Ñö.- y)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- x))) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         bound 1/u‚Çä B ¬∑·µ£ rat (‚Ñö.abs' ((‚Ñö.- y) ‚Ñö.- (‚Ñö.- x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   h = ExpSlopeBound.ineq-abs 1/u‚Çä 1<1/u‚Çä B (‚Ñö.- x) (‚Ñö.- y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§abs _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (subst (‚Ñö._‚â§ fst B) (‚Ñö.-abs _) absx‚â§B))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§abs _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (subst (‚Ñö._‚â§ fst B) (‚Ñö.-abs _) absy‚â§B))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w u 0<u (inr (inr 1<u)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    isTrans‚â§·µ£ _ _ _ h
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚â§·µ£-¬∑o _ _ _ (subst (0 ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs _) (‚Ñö.0‚â§abs _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (‚â§·µ£-¬∑o _ _ ((fst (inv‚Ñö‚Çä B)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä B))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ((boundMon u‚Çä  (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ 1<u))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        B  ((max·µ£‚Çä (inv‚Ñù‚Çä (rat u , 0<u)) (rat u , 0<u)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (isTrans‚â§‚â°·µ£ _ _ _ (‚â§max·µ£ _ _) (max·µ£Comm _ _)))) ))
       
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   u‚Çä : ‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   u‚Çä = rat u , 0<u

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   h : abs·µ£ (fst (u‚Çä ^‚Ñö y) -·µ£ fst (u‚Çä ^‚Ñö x)) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         bound u‚Çä B ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   h = ExpSlopeBound.ineq-abs u‚Çä (<‚Ñö‚Üí<·µ£ _ _ 1<u) B x y x‚â§B y‚â§B 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ineq''-inv : ‚àÄ (B : ‚Ñö‚Çä) x y ‚Üí ‚Ñö.abs x ‚Ñö.‚â§ fst B ‚Üí ‚Ñö.abs y ‚Ñö.‚â§ fst B ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àÄ z ‚Üí abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             bound (max·µ£‚Çä (inv‚Ñù‚Çä z) z) B ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))   
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ineq''-inv B x y absx‚â§B absy‚â§B =   ?

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- monotone^‚Ñö' : ‚àÄ q q' q'' 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí q ‚Ñö.‚â§ q'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí q' ‚Ñö.‚â§ q''
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí ‚àÄ u 0<u
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí min·µ£ (fst ((rat u , 0<u) ^‚Ñö q)) (fst ((rat u , 0<u) ^‚Ñö q'')) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    fst ((rat u , 0<u) ^‚Ñö q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚äé.rec
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (Œª 1‚â§u ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ (fst ((rat u , 0<u) ^‚Ñö q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (fst ((rat u , 0<u) ^‚Ñö q'')))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (^‚Ñö-MonotoneR {(rat u , 0<u)} q q'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            q‚â§q'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 1‚â§u)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (Œª u<1 ‚Üí isTrans‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (min‚â§·µ£' (fst ((rat u , 0<u) ^‚Ñö q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (fst ((rat u , 0<u) ^‚Ñö q'')))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        let xx = (^‚Ñö-MonotoneR {inv‚Ñù‚Çä (rat u , 0<u)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                _ _  (‚Ñö.minus-‚â§ _ _ q'‚â§q'')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (invEq (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x 1 1 (rat u , 0<u))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdR _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ u<1))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (¬∑IdL _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        in subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (cong fst (sym (^‚Ñö-minus _ _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (cong fst (sym (^‚Ñö-minus _ _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             xx)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (‚Ñö.Dichotomy‚Ñö 1 u)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- monotone^‚Ñö : ‚àÄ q q' q'' 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí q ‚Ñö.‚â§ q'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí q' ‚Ñö.‚â§ q''
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí ‚àÄ z 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Üí min·µ£ (fst (z ^‚Ñö q)) (fst (z ^‚Ñö q'')) ‚â§·µ£ fst (z ^‚Ñö q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uncurry (<‚Üí‚â§ContPos'pred {0}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (contDiagNE‚ÇÇWP minR _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (IsContinuous^‚Ñö q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (IsContinuous^‚Ñö q''))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (IsContinuous^‚Ñö q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     Œª u 0<u ‚Üí monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module PowBL (z : ‚Ñù‚Çä) Z
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (z<Z : fst z <·µ£ fromNat (suc (suc Z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (1/Z<z : rat [ 1 / 1+ (suc Z) ] <·µ£ fst z )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  z' = max·µ£‚Çä (inv‚Ñù‚Çä z) z

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  hh : fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos 1 / 2+ Z ] , tt))) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       rat [ pos (suc (suc Z)) / 1+ 0 ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  hh = inv‚Ñù'-rat [ pos 1 / 2+ Z ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      tt (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 1+ (suc Z) ] , tt)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  1/z‚â§2+Z : fst (inv‚Ñù‚Çä z) ‚â§·µ£ fromNat (suc (suc Z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  1/z‚â§2+Z = isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â°‚â§·µ£ _ _ _ (sym (¬∑IdL _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (invEq (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x 1 1 (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 1+ (suc Z) ] , _)) z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (subst2 _‚â§·µ£_ (sym (¬∑IdR _)) (sym (¬∑IdR _)) (<·µ£Weaken‚â§·µ£ _ _  1/Z<z))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ((¬∑IdL _) ‚àô hh)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  bound‚â§bound‚Ñö : ‚àÄ n ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (bound z' (fromNat (suc n))) ‚â§·µ£ rat (fst (bound‚Ñö Z n))  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  bound‚â§bound‚Ñö n = bound<bound‚Ñö z'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (subst (1 ‚â§·µ£_) (max·µ£Comm _ _) (1‚â§x‚äî1/x z)) Z
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (max‚â§-lem _ _ _ 1/z‚â§2+Z (<·µ£Weaken‚â§·µ£ _ _ z<Z)) n

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  blPow : boundedLipschitz (Œª x ‚Üí fst (z ^‚Ñö x)) (bound‚Ñö Z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  blPow n x y absx< absy< =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     isTrans‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (ineq'' (fromNat (suc n)) x y absx< absy< z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (‚â§·µ£-¬∑o _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (subst (0 ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs _) (‚Ñö.0‚â§abs _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (bound‚â§bound‚Ñö n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (cong (rat (fst (bound‚Ñö Z n)) ¬∑·µ£_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (cong rat (sym (‚Ñö.abs'‚â°abs _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àô sym (rat¬∑·µ£rat _ _)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  open BoundedLipsch
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (fst ‚àò z ^‚Ñö_) (bound‚Ñö Z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      blPow public


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  mid-ùíá : ‚àÄ q q' q'' ‚Üí q ‚Ñö.‚â§ q' ‚Üí q' ‚Ñö.‚â§ q'' ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     min·µ£ (ùíá (rat q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (ùíá (rat q'')) ‚â§·µ£ ùíá (rat q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  mid-ùíá q q' q'' q‚â§q' q'‚â§q'' =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (cong‚ÇÇ min·µ£ (sym (ùíá-rat q)) (sym (ùíá-rat q'')))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (sym (ùíá-rat q'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' _)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  0<powBL : ‚àÄ x ‚Üí 0 <·µ£ ùíá x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  0<powBL x = PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œª ((q , q') , q'-q<1 , q<x , x<q') ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     let q‚äìq' = (min·µ£‚Çä (z ^‚Ñö q) (z ^‚Ñö q')) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     in PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª (Œµ , 0<Œµ , Œµ<q‚äìq') ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (Œª (Œ¥ , X) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (Œª (r , r-x‚â§Œ¥ , x‚â§r) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                let r' = ‚Ñö.clamp q q' r
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    r'-x‚â§Œ¥ = isTrans‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                              (‚â§·µ£-+o _ _ (-·µ£ x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                (‚â§‚Ñö‚Üí‚â§·µ£ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             (‚Ñö.clamped‚â§ q q' r
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               (‚Ñö.<Weaken‚â§ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 (<·µ£‚Üí<‚Ñö _ _ (isTrans<‚â§·µ£ _ _ _ q<x x‚â§r))))) ) r-x‚â§Œ¥
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    x‚â§r' = ‚â§min-lem _ (rat (‚Ñö.max q r)) (rat q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             (isTrans‚â§·µ£ _ _ _ x‚â§r
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' q r)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             (<·µ£Weaken‚â§·µ£ _ _ x<q')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    |fx-fr|<Œµ = fst (‚àº‚âÉabs<Œµ _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (sym‚àº _ _ _ (X (rat r') (sym‚àº _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                          ((invEq (‚àº‚âÉabs<Œµ _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                         (isTrans‚â°<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ x‚â§r'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            (isTrans‚â§<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                r'-x‚â§Œ¥ (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥))))))) ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    zzz =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                         mid-ùíá q r' q'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                          (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           (<·µ£Weaken‚â§·µ£ _ _ q<x) x‚â§r'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                          (‚Ñö.clamp‚â§ q q' r)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    zzz' = isTrans<‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             (isTrans<‚â°·µ£ _ _ _ Œµ<q‚äìq'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               (cong‚ÇÇ min·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 (sym (ùíá-rat _)) (sym (ùíá-rat _))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                              zzz
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                in isTrans‚â°<·µ£ _ _ _ (sym (CR‚Ñù.+InvR _)) (a-b<c‚áía-c<b _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (isTrans<·µ£ _ _ _ |fx-fr|<Œµ zzz')))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ) (‚àÉrationalApprox‚â§ x (/2‚Çä Œ¥)))
         
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (ùíá-cont x (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (dense‚Ñöin‚Ñù 0 _ (snd q‚äìq')) )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (‚àÉrationalApprox x 1)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (1‚â§z : 1 ‚â§·µ£ fst z) where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíá-monotone : ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí ùíá x ‚â§·µ£ ùíá y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíá-monotone x y x‚â§y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (‚â°Cont‚ÇÇ (cont‚ÇÇ‚àò (contNE‚ÇÇ maxR) ùíá-cont ùíá-cont)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (cont‚àò‚ÇÇ ùíá-cont (contNE‚ÇÇ maxR) )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚Ñö.elimBy‚â§
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (Œª u u' X ‚Üí max·µ£Comm _ _ ‚àô‚àô X ‚àô‚àô cong ùíá (max·µ£Comm _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         Œª u u' u‚â§u' ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           cong‚ÇÇ max·µ£ (ùíá-rat _) (ùíá-rat _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            ‚àô‚àô ^‚Ñö-MonotoneR u u' u‚â§u' 1‚â§z ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             cong (fst ‚àò (z ^‚Ñö_)) (sym (‚Ñö.‚â§‚Üímax u u' u‚â§u')) ‚àô‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            sym (ùíá-rat _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          x y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ‚àô cong ùíá x‚â§y

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (1<z : 1 <·µ£ fst z) where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíá-monotone-str : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí ùíá x <·µ£ ùíá y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíá-monotone-str x y = PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      Œª ((q , q') , (‚â§q , q<q' , q'‚â§)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        isTrans‚â§<·µ£ _ _ _ (ùíá-monotone (<·µ£Weaken‚â§·µ£ _ _ 1<z) x (rat q) ‚â§q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (isTrans<‚â§·µ£ _ _ _ (
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             subst2 _<·µ£_ (sym (ùíá-rat _)) (sym (ùíá-rat _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (^‚Ñö-StrictMonotoneR 1<z q q' q<q'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (ùíá-monotone (<·µ£Weaken‚â§·µ£ _ _ 1<z) (rat q') y q'‚â§))
           
 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- x y x‚â§ y‚â§ =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  let zz : abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£ {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      zz = isTrans‚â°‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --             (cong abs·µ£ (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --                 (cong fst (^‚Ñö-minus z y))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --                 (cong fst (^‚Ñö-minus z x)) ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --            (ineq'' (fromNat (suc n)) (‚Ñö.- x) (‚Ñö.- y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --             (subst (‚Ñö._‚â§ fromNat (suc n)) (‚Ñö.-abs x) x‚â§)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --             (subst (‚Ñö._‚â§ fromNat (suc n)) (‚Ñö.-abs y) y‚â§) (inv‚Ñù‚Çä z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  in {!zz!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (n : ‚Ñï) (1<z : 1 <·µ£ fst z) where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fl‚Çô‚â°ùíá : ‚àÄ x n ‚Üí (x ‚àà interval‚Ñô (fromNeg (suc n)) (fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             ‚Üí  fst (fst (fl‚Çô n)) x ‚â° ùíá x 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fl‚Çô‚â°ùíá x n x‚àà = ‚â°Continuous (fst (fst (fl‚Çô n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (ùíá ‚àò clamp·µ£ (fromNeg (suc n)) (fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (snd (fl‚Çô n)) (IsContinuous‚àò _ _ ùíá-cont
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (Œª r ‚Üí sym (ùíá-rat _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ‚àô cong ùíá (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ x x‚àà))



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   incr^ : isIncrasing‚Ñô·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   incr^ x x‚àà y y‚àà x<y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     subst2 _<·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (sym (fl‚Çô‚â°ùíá x n x‚àà))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (sym (fl‚Çô‚â°ùíá y n y‚àà))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (ùíá-monotone-str 1<z x y x<y)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   nondecr^ : isNondecrasing‚Ñô·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (interval‚Ñô (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (rat [ pos (suc n) / 1+ 0 ]))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   nondecr^ x x‚àà y y‚àà x‚â§y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (sym (fl‚Çô‚â°ùíá x n x‚àà))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (sym (fl‚Çô‚â°ùíá y n y‚àà))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (ùíá-monotone (<·µ£Weaken‚â§·µ£ _ _ 1<z) x y x‚â§y)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module PowBL‚Åª¬π (z : ‚Ñö‚Çä) Z
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (z<Z : fst z ‚Ñö.< fromNat (suc (suc Z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (1/Z<z : [ 1 / 1+ (suc Z) ] ‚Ñö.< fst z )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (1<z : 1 ‚Ñö.< fst z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  open PowBL (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) Z (<‚Ñö‚Üí<·µ£ _ _ z<Z) (<‚Ñö‚Üí<·µ£ _ _ 1/Z<z)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- zzz : fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä z)) <·µ£ rat [ pos (suc (suc Z)) / 1+ 0 ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- zzz = isTrans<‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --    (<‚Ñö‚Üí<·µ£ (fst (inv‚Ñö‚Çä z)) _ (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä _ z) 1/Z<z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --    (cong rat (‚Ñö.inv‚Ñö‚Çä-invol (fromNat (suc (suc Z)))))



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- pre-bil^ : ‚àÄ n x y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     ‚Üí ( fromNeg (suc n) ) ‚Ñö.‚â§ x 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     ‚Üí ( fromNeg (suc n) ) ‚Ñö.‚â§ y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     ‚Üí x ‚Ñö.‚â§ y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     ‚Üí rat (y ‚Ñö.- x) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      rat (fst (inv‚Ñö‚Çä (bound‚Ñö Z n))) ¬∑·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö y) -·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- pre-bil^ n x y x‚àà y‚àà x‚â§y = {!blPow n x y ? ?!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  wzw : {!!} ‚â§·µ£ {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  wzw = subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     (abs·µ£NonPos _ {!!} ‚àô {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --     {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --    (PBL‚Åª¬π.blPow n y x {!!} {!!})


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  z^n : ‚àÄ z n ‚Üí fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö (fromNat (suc n))) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            rat (fst z ‚Ñö^‚Åø (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  z^n z zero = sym (rat¬∑·µ£rat _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  z^n z (suc n) = cong (_¬∑·µ£ rat (fst z)) (z^n z n) ‚àô sym (rat¬∑·µ£rat _ _)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  bil^ : boundedInvLipschitz (inv‚Ñö‚Çä ‚àò bound‚ÑöInv Z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  bil^ n x y x‚àà y‚àà =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    isTrans‚â§·µ£ _ _ _ wzw (‚â§·µ£-¬∑·µ£o _ _ _ (0‚â§abs·µ£ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      zwz)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open ExpSlopeBound (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) (<‚Ñö‚Üí<·µ£ _ _ 1<z)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   0<-b : 0 <·µ£ (-·µ£ (bound (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   0<-b = subst (0 <·µ£_) (ùêë'.-DistL¬∑ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚Ñù‚Çä¬∑ (_ , subst (0 <·µ£_) (
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          cong‚ÇÇ (_-·µ£_) (cong fst (sym (inv‚Ñù‚Çä^‚Ñ§' (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (fromNat (suc n)))) ‚àô sym (-·µ£Invol _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (cong fst (cong ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñ§_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (cong (‚Ñ§.-_ ‚àò  ‚Ñ§.suc‚Ñ§) (‚Ñ§.pos+ (suc n) n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              ‚àô sym (inv‚Ñù‚Çä^‚Ñ§' _ _)))
         
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚àô +·µ£Comm _ _ ‚àô ùêë'.-Dist _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (x<y‚Üí0<y-x _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (^‚Åø-StrictMonotoneR (suc n) _ (<‚Ñö‚Üí<·µ£ _ _ 1<z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (subst2 (‚Ñï._<_) (‚Ñï.¬∑-identityÀ° _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 (‚Ñï.¬∑-comm 2 (suc n) ‚àô cong (2 ‚Ñï.+_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (‚Ñï.¬∑-comm n 2 ‚àô cong (n ‚Ñï.+_) (‚Ñï.+-zero _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 (‚Ñï.<-¬∑sk {1} {2} {n} ‚Ñï.‚â§-refl))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (suc n)))))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   wzw : 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           rat (‚Ñö.abs (y ‚Ñö.- x)) ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              fst (inv‚Ñù‚Çä (_ , 0<-b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ¬∑·µ£ (abs·µ£ (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö y) -·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö x)))
            
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   wzw = isTrans‚â§‚â°·µ£ _ _ _ (invEq (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ (_ , 0<-b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (ineqInv-abs (fromNat (suc n)) x y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (fst (‚Ñö.absTo‚â§√ó‚â§ _ _ x‚àà))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (fst (‚Ñö.absTo‚â§√ó‚â§ _ _ y‚àà))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (¬∑·µ£Comm _ _)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   zwz : fst (inv‚Ñù‚Çä (-·µ£ bound (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) (fromNat (suc n)) , 0<-b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚â§·µ£ rat (fst (inv‚Ñö‚Çä (bound‚ÑöInv Z n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   zwz = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       (-·µ£ bound (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) (fromNat (suc n)) , 0<-b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       (‚Ñö‚Çä‚Üí‚Ñù‚Çä (bound‚ÑöInv Z n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      (isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       (isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         (‚â§·µ£-¬∑o _ _ _ (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --          (subst2 _‚â§·µ£_ pp pp'

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               hIneq
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            -- (‚â§·µ£‚ÇäMonotone¬∑·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt) ^‚Ñö (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .fst , inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .snd) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --       (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --       (fromNat (suc n) ‚Ñö.- (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      -·µ£ 1)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .fst , inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .snd) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --       (fromNat (suc n) ‚Ñö.- (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --      -·µ£ 1)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    -- (<·µ£Weaken‚â§·µ£ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    --  (snd ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .fst , inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) .snd) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    --     (2 ‚Ñö.¬∑ fromNat (suc n)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --            --    {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --          ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --        (-·µ£¬∑ _ _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (inv‚Ñù‚Çä-rat _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     ppLHS : _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     ppLHS = fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt) ^‚Ñö (2 ‚Ñö.¬∑ fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              ¬∑·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                (fromNat (suc n) ‚Ñö.- (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               -·µ£ 1)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp'LHS : _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp'LHS = fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               (2 ‚Ñö.¬∑ fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              ¬∑·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                (fromNat (suc n) ‚Ñö.- (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               -·µ£ 1)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     hIneq : ppLHS ‚â§·µ£ pp'LHS
               
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     hIneq = ‚â§·µ£‚ÇäMonotone¬∑·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      _ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      (<·µ£Weaken‚â§·µ£ _ _ (snd
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --          (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö (2 ‚Ñö.¬∑ [ pos (suc n) / 1+ 0 ]))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      (x‚â§y‚Üí0‚â§y-x 1 (fst
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                     ((‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                      ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                      (fromNat (suc n) ‚Ñö.- ((2 ‚Ñö.¬∑ fromNat (suc n))))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      (subst2 _‚â§·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         (cong fst (sym (inv‚Ñù‚Çä^‚Ñö (‚Ñö‚Çä‚Üí‚Ñù‚Çä (fromNat (2 ‚Ñï.+ Z))) (2 ‚Ñö.¬∑ fromNat (suc n)))) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --           cong (fst ‚àò (_^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              (2 ‚Ñö.¬∑ fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               (‚Ñù‚Çä‚â° (inv‚Ñù‚Çä-rat _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         (cong fst (sym (inv‚Ñù‚Çä^‚Ñö _ _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --           (^‚Ñö-Monotone ((2 ‚Ñö¬∑ fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --             (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ z<Z)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      (‚â§·µ£-+o _ _ (-1) {!!})

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp : ppLHS ‚â° _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp = (sym (factor-x·µÉ-x·µá (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                    (fromNat (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                    (2 ‚Ñö.¬∑ fromNat (suc n))) ‚àô (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                 (^‚Åø-‚Ñö^‚Åø _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                 (cong (Œª q ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                       fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , tt) ^‚Ñö q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                        (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _) ‚àô ^‚Åø-‚Ñö^‚Åø _ _)))
             

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp' : pp'LHS ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --              -·µ£ (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö (2 ‚Ñö.¬∑ fst (fromNat (suc n)))) -·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                         fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^‚Ñö fst (fromNat (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     pp' = (sym (factor-x·µÉ-x·µá _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               (fromNat (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --               (2 ‚Ñö.¬∑ fromNat (suc n))) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                 {!!}) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     -- ineq1 : 0 ‚â§·µ£
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     --            fst ((inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)) ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     --             (2 ‚Ñö.¬∑ fromNat (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     -- ineq1 = <·µ£Weaken‚â§·µ£ _ _ {!!}
      
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  approx-^ : ‚ÑöApprox‚Ñô' ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (Œª x _ ‚Üí ùíá x , 0<powBL x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  approx-^ y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       let ((p , q) , (_ , p/q‚â°y)) = ‚Ñö.reduced y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       in subst (Œª y ‚Üí (q‚ààP : rat y ‚àà ‚ä§Pred) ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ‚ÑöApprox‚Ñô'Num ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (Œª x _ ‚Üí ùíá x , 0<powBL x) y q‚ààP)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            p/q‚â°y (w p q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     w : ‚àÄ p q ‚Üí (q‚ààP : rat [ p / q ] ‚àà ‚ä§Pred)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚Üí ‚ÑöApprox‚Ñô'Num ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (Œª x _ ‚Üí ùíá x , 0<powBL x) [ p / q ] q‚ààP 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     w p q q‚ààP =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        fst wwW
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , fst (snd wwW)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , fst (snd (snd wwW))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , snd (snd (snd wwW)) ‚àô‚àô cong fst (sym (pow-root-comm (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) p q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             ‚àô‚àô sym (ùíá-rat [ p / q ])

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      www : ‚ÑöApprox‚Ñô' (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (curry
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (((Œª p‚ÇÅ ‚Üí fst (root q (p‚ÇÅ .fst , p‚ÇÅ .snd)) , root q p‚ÇÅ .snd))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                ‚àò uncurry (curry (_^‚Ñ§ p))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      www = ‚ÑöApprox‚Ñô''‚Üí‚ÑöApprox‚Ñô' _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (‚ÑöApprox‚Ñô‚àò (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) _ (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (curry (root q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (curry (_^‚Ñ§ p))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (uContRoot q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' _ _ _ (‚ÑöApprox‚Ñô-root q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (^‚Ñ§-‚ÑöApprox‚Ñô'' p)) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      wwW = www (fst z) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z))

            
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  open BoundedInvLipsch (inv‚Ñö‚Çä ‚àò bound‚ÑöInv Z) bil^


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (n : ‚Ñï) where


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open IsBilipschitz' (‚Ñö.- (fromNat (suc n))) (fromNat (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.negsuc<pos)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (AsContinuousWithPred _ _ (snd (fl‚Çô n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (incr^ n (<‚Ñö‚Üí<·µ£ _ _ 1<z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (nondecr^  n (<‚Ñö‚Üí<·µ£ _ _ 1<z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          public

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fa' = fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fa‚â° : fa ‚â° rat fa'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fa‚â° =  fl‚Çô‚â°ùíá n (<‚Ñö‚Üí<·µ£ _ _ 1<z) (fromNeg (suc n)) n a‚àà
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚àô ùíá-rat (fromNeg (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ‚àô cong fst (^‚Ñö-minus (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) (fromNeg (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àô cong (_^‚Ñö fromNat (suc n)) (‚Ñù‚Çä‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (inv‚Ñù‚Çä‚â°inv‚Ñù (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            ‚àô inv‚Ñù-rat _ _ (inl (‚Ñö.0<‚Ñö‚Çä z)) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              cong rat (‚Ñö.inv‚Ñö‚Çä‚â°inv‚Ñö _ _))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ‚àô z^n (inv‚Ñö‚Çä z) n

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fb' = (fst z ‚Ñö^‚Åø suc n)
 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fb‚â° : fb ‚â° rat fb'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fb‚â° =  fl‚Çô‚â°ùíá n (<‚Ñö‚Üí<·µ£ _ _ 1<z) (fromNat (suc n)) n b‚àà
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ‚àô ùíá-rat _ ‚àô z^n z n

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fa'‚â§fb' : fa' ‚Ñö.‚â§ fb'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fa'‚â§fb' = ‚Ñö.isTrans‚â§ _ 1 _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (‚Ñö.x^‚Åø‚â§1 _ (suc n) (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä z)) (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚Ñö.<Weaken‚â§ 1 (fst z) 1<z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (‚Ñö.1‚â§x^‚Åø _ (suc n) (‚Ñö.<Weaken‚â§ 1 (fst z) 1<z) ) 
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   approx-^‚Ñô : ‚ÑöApprox‚Ñô'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      ((interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (interval‚Ñô fa fb)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      f'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   approx-^‚Ñô x x‚àà =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n) (fst z ‚Ñö^‚Åø suc n) ‚àò fst ww
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     , (Œª Œµ ‚Üí subst2
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª fa fb ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (rat (‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n) (fst z ‚Ñö^‚Åø suc n) (fst ww Œµ)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àà (interval‚Ñô fa fb))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (sym fa‚â° ) (sym fb‚â°)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (clam‚àà‚Ñöinterval‚Ñô fa' fb' fa'‚â§fb' (fst ww Œµ)) ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     , (Œª Œ¥ Œµ ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          let u = (<·µ£‚Üí<‚Ñö _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) (fst (snd (snd ww)) Œ¥ Œµ)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          in <‚Ñö‚Üí<·µ£ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (‚Ñö.isTrans‚â§< _ _ _ (
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   subst2 ‚Ñö._‚â§_ (‚Ñö.abs'‚â°abs _) (‚Ñö.abs'‚â°abs _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (‚Ñö.clampDist _ _ _ _) ) u))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     , ssw

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ww = approx-^ x _


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     z^clmp-x = fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              ‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssww' : lim (Œª x‚ÇÅ ‚Üí rat (fst ww x‚ÇÅ)) _ ‚â° z^clmp-x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssww' = snd (snd (snd ww))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ‚àô ùíá-rat _ ‚àô cong (fst ‚àò (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö_))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° _ _ x (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ x‚àà))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw-lem1 : fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö [ ‚Ñ§.negsuc n / 1+ 0 ]) ‚â§·µ£ z^clmp-x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw-lem1 = ((^‚Ñö-MonotoneR {‚Ñö‚Çä‚Üí‚Ñù‚Çä z} (fromNeg (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                  (‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                    (‚Ñö.‚â§clamp _ _ _ (‚Ñö.neg‚â§pos (suc n) (suc n))) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ 1<z))))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw-lem2 : z^clmp-x ‚â§·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^‚Ñö [ pos (suc n) / 1+ 0 ])
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw-lem2 = ((^‚Ñö-MonotoneR {‚Ñö‚Çä‚Üí‚Ñù‚Çä z} 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                  (‚Ñö.clamp (‚Ñö.- [ pos (suc n) / 1+ 0 ]) [ pos (suc n) / 1+ 0 ] x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                   (fromNat (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                   (‚Ñö.clamp‚â§ (‚Ñö.- [ pos (suc n) / 1+ 0 ]) _ x) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ 1<z))))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw : lim (Œª x‚ÇÅ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   rat
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   (‚Ñö.clamp (fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø suc n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (fst z ‚Ñö^‚Åø suc n) (fst ww x‚ÇÅ))) _ ‚â° z^clmp-x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ssw = invEq (lim‚â°‚âÉ‚àº _ _ _) Œª Œµ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         let zz = isTrans‚â°‚â§·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (sym (cong abs·µ£ (cong‚ÇÇ _-·µ£_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (clamp-lim _ _ _ (fst (snd (snd ww)))  ‚àô congLim _ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       (Œª _ ‚Üí refl) )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                          (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            ( (isTrans‚â°‚â§·µ£ _ _ _ (sym (z^n ((inv‚Ñö‚Çä z)) _) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               cong fst (^‚Ñö-minus _ _ ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 cong {y = ‚Ñö‚Çä‚Üí‚Ñù‚Çä z} (_^‚Ñö (fromNeg (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                    (cong inv‚Ñù‚Çä (‚Ñù‚Çä‚â° (sym (inv‚Ñù‚Çä-rat _))) ‚àô inv‚Ñù‚ÇäInvol _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                ssw-lem1)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            , isTrans‚â§‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                ssw-lem2 (z^n _ _)))))))
                 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  ((clampDist·µ£' ((fst (inv‚Ñö‚Çä z) ‚Ñö^‚Åø (suc n))) ((fst z ‚Ñö^‚Åø (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     z^clmp-x (lim (Œª x‚ÇÅ ‚Üí rat (fst ww x‚ÇÅ)) _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         in isTrans‚â§<·µ£ _ _ _ zz (fst (lim‚â°‚âÉ‚àº _ _ _) ssww' Œµ)
    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   zzzz : fst (inv‚Ñö‚Çä (inv‚Ñö‚Çä (bound‚ÑöInv Z n))) ‚Ñö.‚â§ fst (bound‚Ñö Z n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   zzzz = subst (‚Ñö._‚â§ fst (bound‚Ñö Z n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (sym (‚Ñö.inv‚Ñö‚Çä-invol (bound‚ÑöInv Z n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (‚Ñö.<Weaken‚â§ _ _ (bound‚ÑöInv<bound‚Ñö Z n))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   lip‚Çô : Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô (bound‚Ñö Z n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ((interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   lip‚Çô u _ v _ = snd (fst (fl‚Çô n)) u v
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open Inv 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          approx-^‚Ñô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (bound‚Ñö Z n) (inv‚Ñö‚Çä (bound‚ÑöInv Z n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          lip‚Çô zzzz
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (invLipF‚Çô n) public


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module Pow·µ£ (y : ‚Ñù) where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ff : (z : ‚Ñù) (Z : ‚Ñï) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       z ‚àà ointerval‚Ñô (rat  [ 1 / 1+ (suc Z) ]) (fromNat (suc (suc Z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ff z Z (<z , z<) = PowBL.ùíá (z , isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) <z) Z  z< <z y



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  0<ff : ‚àÄ x n x‚àà ‚Üí rat [ pos 0 / 1+ 0 ] <·µ£ ff x n x‚àà
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  0<ff z Z (<z , z<) = PowBL.0<powBL (z , isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) <z) Z  z< <z y
 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ1< : Seq‚äÜ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ1< .Seq‚äÜ.ùï° Z = ointerval‚Ñô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (rat  [ 1 / 1+ (suc Z) ]) (fromNat (suc (suc Z)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ1< .Seq‚äÜ.ùï°‚äÜ Z _ (<z , z<) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      isTrans‚â§<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.inv‚Ñö‚Çä‚â§inv‚Ñö‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          ([ pos (suc (suc (suc Z))) / 1 ] , _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          ([ pos (suc (suc Z)) / 1 ] , _)  h))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        <z
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    , isTrans<‚â§·µ£ _ _ _ z<
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (‚â§‚Ñö‚Üí‚â§·µ£ _ _ h)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   h = (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-suc‚Ñï))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ‚Üí : Seq‚äÜ‚Üí ‚Ñù pow-seq‚äÜ1<
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun = ff 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pow-seq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun‚äÜ x n m x‚àà x‚àà' n<m =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    cong (Œª 0<x ‚Üí PowBL.ùíá (x , 0<x) n _ _ y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (squash‚ÇÅ _ _) ‚àô boundedLipsch-coh _ (bound‚Ñö n) (bound‚Ñö m)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      ((PowBL.blPow _ n (x‚àà .snd) (x‚àà .fst)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      _ _

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pos‚äÜpow-seq‚äÜ1< : pow-seq‚äÜ1< Seq‚äÜ.s‚äá
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pos‚äÜpow-seq‚äÜ1< x 0<x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    PT.map2 (Œª (1+ N , x<N) (1+ N' , 1/x<N') ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      ‚Ñï.max (suc N) (suc N') ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        subst2 _<·µ£_ (¬∑IdR _) (¬∑IdR _) (fst (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x 1 1
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (3 ‚Ñï.+ ‚Ñï.max N N')] , _)) (x , 0<x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (subst2 _<·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                ((isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) 1/x<N'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 (isTrans<‚â°·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   ((<‚Ñö‚Üí<·µ£ (fromNat (1 ‚Ñï.+ N'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      (fromNat _) (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (2 ‚Ñï.+ N') _ 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (‚Ñï.‚â§-trans ‚Ñï.‚â§-suc‚Ñï
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (‚Ñï.right-‚â§-max {3 ‚Ñï.+ N'} {3 ‚Ñï.+ N} ))))) )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (cong fst (sym (inv‚Ñù‚ÇäInvol _) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      cong (inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (inv‚Ñù'-rat _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       ((<‚Ñö‚Üí<·µ£ 0 (fromNat (3 ‚Ñï.+ (max N N')))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           (‚Ñö.0<pos _ _)))))))))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        , (isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) x<N)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (‚Ñï.‚â§-trans ‚Ñï.‚â§-suc‚Ñï
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (‚Ñï.left-‚â§-max {3 ‚Ñï.+ N} {3 ‚Ñï.+ N'} )))))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (getClamps x) (getClamps (fst (inv‚Ñù‚Çä (x , 0<x))))  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  open Seq‚äÜ‚Üí.FromIntersection pow-seq‚äÜ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        isSet‚Ñù (Œª x ‚Üí (0 <·µ£ x ) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         pos‚äÜpow-seq‚äÜ1< public

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^ : ‚Ñù‚Çä ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^ = uncurry ‚à©$

 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^-rat : ‚àÄ x q ‚Üí y ‚â° rat q ‚Üí pre^ x ‚â° fst (x ^‚Ñö q)  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^-rat (x , 0<x) q p =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   PT.rec (isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (Œª (Z , (<z , z<) , v) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       v ‚àô cong (PowBL.ùíá (x , isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) <z) Z  z< <z) p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚àô PowBL.ùíá-rat (x , isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) <z) Z  z< <z q
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ‚àô (cong (fst ‚àò (_^‚Ñö q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (‚Ñù‚Çä‚â° {(x ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              isTrans<·µ£ (rat [ pos 0 / 1+ 0 ]) (rat [ pos 1 / 2+ Z ]) x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (<‚Ñö‚Üí<·µ£ [ pos 0 / 1+ 0 ] [ pos 1 / 2+ Z ] (‚Ñö.0<pos 0 (2+ Z))) <z)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              {x , 0<x}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               refl)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (‚à©$-lem x 0<x)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^-pos : ‚àÄ x ‚Üí 0 <·µ£ pre^ x 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  pre^-pos (x , 0<x) = ‚à©$-elimProp x 0<x  {0 <·µ£_} (Œª _ ‚Üí squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (0<ff x)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- _^ ≥_ : ‚Ñù‚Çä ‚Üí ‚Ñù ‚Üí ‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- x ^ ≥ y = _ , Pow·µ£.pre^-pos y x

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsContinuous^ ≥ : ‚àÄ x ‚Üí IsContinuous (fst ‚àò (x ^ ≥_))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsContinuous^ ≥ (x , 0<x) y Œµ =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   PT.rec squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (Œª (Z , (<z , z<) , v) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        PT.map
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (Œª (Œ¥ , X) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             Œ¥ , Œª y' y‚àºy' ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               subst2 (_‚àº[ Œµ ]_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (sym v)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (sym (Pow·µ£.‚à©$-‚àà‚Çô y' x 0<x Z (<z , z<)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 (X y' y‚àºy')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (PowBL.ùíá-cont (x , isTrans<·µ£ _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) <z) Z  z< <z y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          Œµ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (Pow·µ£.‚à©$-lem y x 0<x)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^ ≥-rat : ‚àÄ x y ‚Üí x ^ ≥ (rat y) ‚â° (x ^‚Ñö y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^ ≥-rat x y = ‚Ñù‚Çä‚â° (Pow·µ£.pre^-rat (rat y) x y refl)



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +IsGroup : IsGroup 0 _+·µ£_ (-·µ£_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +IsGroup = CR‚Ñù.+IsGroup

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ¬∑IsGroup : IsGroup 1 _‚Çä¬∑·µ£_ inv‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ¬∑IsGroup = makeIsGroup
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   isSet‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œª _ _ _ ‚Üí ‚Ñù‚Çä‚â° (¬∑·µ£Assoc _ _ _ ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œª _ ‚Üí ‚Ñù‚Çä‚â° (¬∑IdR _)) (Œª _ ‚Üí ‚Ñù‚Çä‚â° (¬∑IdL _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œª (x , 0<x) ‚Üí ‚Ñù‚Çä‚â° (¬∑inv‚Ñù' x 0<x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œª (x , 0<x) ‚Üí ‚Ñù‚Çä‚â° (¬∑·µ£Comm _ _ ‚àô ¬∑inv‚Ñù' x 0<x))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^ ≥-at1-split : ‚àÄ (x : ‚Ñù‚Çä) y ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^ ≥-at1-split = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ (z : ‚Ñö‚Çä)  where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- (1‚â§z : 1 ‚â§·µ£ rat (fst z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          ( ^ ≥-MonotoneR : (q r : ‚Ñù) ‚Üí q ‚â§·µ£ r
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚Üí fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^ ≥ q) ‚â§·µ£ fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^ ≥ r))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- ^ ≥-MonotoneR  q r q‚â§r 1‚â§x = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- ^ ≥-‚ÑöApprox' : (a : ‚Ñö‚Çä) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- ^ ≥-‚ÑöApprox' = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ^ ≥-‚ÑöApprox : ‚ÑöApprox‚Ñô' ‚ä§Pred
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (Œª x x‚àà ‚Üí (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) ^ ≥ x )

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ^ ≥-‚ÑöApprox y = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    let ((p , q) , (_ , p/q‚â°y)) = ‚Ñö.reduced y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    in subst (Œª y ‚Üí (q‚ààP : rat y ‚àà ‚ä§Pred) ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚ÑöApprox‚Ñô'Num _ _ (Œª v _ ‚Üí ‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^ ≥ v) y q‚ààP)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         p/q‚â°y (w p q)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    w : ‚àÄ p q ‚Üí (q‚ààP : rat [ p / q ] ‚àà ‚ä§Pred)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚Üí ‚ÑöApprox‚Ñô'Num _ _ (Œª v _ ‚Üí ‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^ ≥ v) [ p / q ] q‚ààP 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    w p q q‚ààP =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        fst wwW
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , fst (snd wwW)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , fst (snd (snd wwW))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , snd (snd (snd wwW)) ‚àô cong fst pp
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     www : ‚ÑöApprox‚Ñô' (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (curry
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (((Œª p‚ÇÅ ‚Üí fst (root q (p‚ÇÅ .fst , p‚ÇÅ .snd)) , root q p‚ÇÅ .snd))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ‚àò uncurry (curry (_^‚Ñ§ p))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     www = ‚ÑöApprox‚Ñô''‚Üí‚ÑöApprox‚Ñô' _ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (‚ÑöApprox‚Ñô‚àò (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ) _ (Œª x ‚Üí (0 <·µ£ x) , squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (curry (root q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (curry (_^‚Ñ§ p))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (uContRoot q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' _ _ _ (‚ÑöApprox‚Ñô-root q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (^‚Ñ§-‚ÑöApprox‚Ñô'' p)) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     wwW = www (fst z) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     pp : (curry
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ((Œª p‚ÇÅ ‚Üí fst (root q (p‚ÇÅ .fst , p‚ÇÅ .snd)) , root q p‚ÇÅ .snd) ‚àò
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         uncurry (curry (_^‚Ñ§ p)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (rat (fst z)) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä z))) ‚â° (‚Ñö‚Çä‚Üí‚Ñù‚Çä z ^ ≥ rat [ p / q ])
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     pp = (sym (pow-root-comm (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) p q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            ‚àô sym (^ ≥-rat (‚Ñö‚Çä‚Üí‚Ñù‚Çä z) [ p / q ]))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  module _ (z : ‚Ñö‚Çä) (1<z : 1 <·µ£ rat (fst z))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (a‚Çä : ‚Ñö‚Çä) where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   a = fst a‚Çä

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Lipschitz-^ ≥ : Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô {!!} (interval‚Ñô (rat (‚Ñö.- a)) (rat a)) {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Lipschitz-^ ≥ = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^-+ : ‚àÄ x a b ‚Üí fst ((x ^ ≥ a) ‚Çä¬∑·µ£ (x ^ ≥ b)) ‚â° fst (x ^ ≥ (a +·µ£ b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^-+ x a =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚â°Continuous _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^-¬∑ : ‚àÄ x a b ‚Üí fst ((x ^ ≥ a) ^ ≥ b) ‚â° fst (x ^ ≥ (a ¬∑·µ£ b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^-¬∑ x = {!!}
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- ‚â°Continuous _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   {!!}



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- x^-groupMorphism : ‚àÄ x ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   IsGroupHom (groupstr _ _ _ +IsGroup)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (x  ^ ≥_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (groupstr _ _ _ ¬∑IsGroup)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- x^-groupMorphism x = makeIsGroupHom
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- open BoundedLipsch {!!} {!!} {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Iso^ ≥ : ‚àÄ y ‚Üí 0 ÔºÉ y  ‚Üí Iso ‚Ñù‚Çä ‚Ñù‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Iso^ ≥ y 0ÔºÉy .Iso.fun = _^ ≥ y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Iso^ ≥ y 0ÔºÉy .Iso.inv = _^ ≥ (inv‚Ñù (y , 0ÔºÉy))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Iso^ ≥ y 0ÔºÉy .Iso.rightInv (x , 0<x) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚Ñù‚Çä‚â° (^-¬∑ _ _ _ ‚àô ?)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Iso^ ≥ y 0ÔºÉy .Iso.leftInv = {!!}
