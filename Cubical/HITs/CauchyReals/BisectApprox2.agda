{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.BisectApprox2 where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
import Cubical.Functions.Logic as L
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Structure

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
open import Cubical.HITs.CauchyReals.Exponentiation



‚â§Weaken<+·µ£ : ‚àÄ x y (z : ‚Ñù‚Çä) ‚Üí
       x ‚â§·µ£ y ‚Üí x <·µ£ y +·µ£ fst z 
‚â§Weaken<+·µ£ x y z x‚â§y =
  isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
   (‚â§<·µ£Monotone+·µ£ x y 0 (fst z) x‚â§y (snd z))

Dichotomy‚Ñù : ‚àÄ (Œµ : ‚Ñö‚Çä) x y ‚Üí
    ‚ü® ((x  <·µ£ y +·µ£ rat (fst Œµ)) , squash‚ÇÅ)
       L.‚äî ((y <·µ£ x +·µ£ rat (fst Œµ)) , squash‚ÇÅ) ‚ü©
Dichotomy‚Ñù Œµ x x' =
     (PT.map2 
         (Œª (r , x<r , r<x+Œµ/2) (r' , x'-Œµ/2<r' , r'<x') ‚Üí
           ‚äé.map

              (Œª r‚â§r' ‚Üí isTrans<·µ£ _ _ _
                 x<r (isTrans‚â§<·µ£ _ _ _
                   (‚â§‚Ñö‚Üí‚â§·µ£ r r' r‚â§r') r'<x'))
              (Œª r'<r ‚Üí 
                 isTrans<·µ£ _ _ _
                  (isTrans<·µ£ _ _ _ x'-Œµ/2<r' (<‚Ñö‚Üí<·µ£ r' r r'<r))
                  r<x+Œµ/2 )
             (‚Ñö.Dichotomy‚Ñö r r'))
        (dense‚Ñöin‚Ñù x (x +·µ£ rat (fst (Œµ)))
          (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _)))
        (dense‚Ñöin‚Ñù x' (x' +·µ£ rat (fst (Œµ)))
         ((‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _)))))


-- isIncrasing‚Üíinjective‚Ñù : ‚àÄ f ‚Üí IsContinuous f  ‚Üí
--      isIncrasing f ‚Üí
--       ‚àÄ x x' ‚Üí f x ‚â° f x' ‚Üí x ‚â° x' 
      
-- isIncrasing‚Üíinjective‚Ñù f fC incrF x x' p = {!!}
 -- eq‚Ñù _ _ Œª Œµ ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _)
 --     (PT.rec2 squash‚ÇÅ
 --         (Œª (r , x<r , r<x+Œµ/2) (r' , x'<r' , r'<x'+Œµ/2) ‚Üí
 --           ‚äé.rec

 --              (Œª r‚â§r' ‚Üí {!!}
 --                 -- let fx<fx' = incrF x x' $ isTrans<·µ£ _ _ _
 --                 --         x<r
 --                 --         (isTrans‚â§<·µ£ _ _ _
 --                 --           (‚â§‚Ñö‚Üí‚â§·µ£ r r' r‚â§r')
 --                 --           r'<x')
 --                 -- in ‚ä•.rec (isIrrefl<·µ£ (f x) (subst (f x <·µ£_) (sym p)
 --                 --          fx<fx'))
 --                          )
 --              (Œª r'<r ‚Üí {!!}
 --                -- let z = isTrans<·µ£ _ _ _
 --                --       x'-Œµ/2<r'
 --                --         (isTrans<·µ£ _ _ _
 --                --            (<‚Ñö‚Üí<·µ£ r' r r'<r)
 --                --             r<x+Œµ/2)
 --                --     z' = {!!}
 --                -- in {!!}
 --                )
 --             (‚Ñö.Dichotomy‚Ñö r r'))
 --        (dense‚Ñöin‚Ñù x (x +·µ£ rat (fst (/2‚Çä Œµ))) {!!})
 --        (dense‚Ñöin‚Ñù x' (x' +·µ£ rat (fst (/2‚Çä Œµ))) {!!}))


isIncrasing‚Ñô·µ£ : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ (x : ‚Ñù) ‚Üí x ‚àà P ‚Üí ‚Ñù) ‚Üí Type
isIncrasing‚Ñô·µ£ P f =
 ‚àÄ (x : ‚Ñù) (x‚àà : x ‚àà P) (y : ‚Ñù) (y‚àà : y ‚àà P) ‚Üí x <·µ£ y ‚Üí f x x‚àà <·µ£ f y y‚àà

isNondecrasing‚Ñô·µ£ : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ (x : ‚Ñù) ‚Üí x ‚àà P ‚Üí ‚Ñù) ‚Üí Type
isNondecrasing‚Ñô·µ£ P f =
 ‚àÄ (x : ‚Ñù) (x‚àà : x ‚àà P) (y : ‚Ñù) (y‚àà : y ‚àà P) ‚Üí x ‚â§·µ£ y ‚Üí f x x‚àà ‚â§·µ£ f y y‚àà



opaque
 _<·µ£'_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
 _<·µ£'_ = _<·µ£_

 <·µ£'‚âÉ<·µ£ : ‚àÄ x y ‚Üí (x <·µ£' y) ‚âÉ (x <·µ£ y) 
 <·µ£'‚âÉ<·µ£ _ _ = idEquiv _

 _‚â§·µ£'_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
 _‚â§·µ£'_ = _‚â§·µ£_

 ‚â§·µ£'‚âÉ‚â§·µ£ : ‚àÄ x y ‚Üí (x ‚â§·µ£' y) ‚âÉ (x ‚â§·µ£ y) 
 ‚â§·µ£'‚âÉ‚â§·µ£ _ _ = idEquiv _

 isProp‚â§·µ£' : ‚àÄ x y ‚Üí isProp (x ‚â§·µ£' y)
 isProp‚â§·µ£' = isProp‚â§·µ£
 
 interval‚Ñô' : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñô ‚Ñù 
 interval‚Ñô' a b x = ((a ‚â§·µ£' x) √ó (x ‚â§·µ£' b)) ,
   isProp√ó (isSet‚Ñù _ _)  (isSet‚Ñù _ _)


 interval‚Ñô'‚äÜinterval‚Ñô : ‚àÄ a b ‚Üí interval‚Ñô' a b ‚äÜ interval‚Ñô a b
 interval‚Ñô'‚äÜinterval‚Ñô a b _ (<x , x<) =
   fst (‚â§·µ£'‚âÉ‚â§·µ£ _ _) <x  , fst (‚â§·µ£'‚âÉ‚â§·µ£ _ _) x<


 interval‚Ñô‚äÜinterval‚Ñô' : ‚àÄ a b ‚Üí interval‚Ñô a b ‚äÜ interval‚Ñô' a b
 interval‚Ñô‚äÜinterval‚Ñô' a b _ (<x , x<) =
   invEq (‚â§·µ£'‚âÉ‚â§·µ£ _ _) <x  , invEq (‚â§·µ£'‚âÉ‚â§·µ£ _ _) x<



<^n' : ‚àÄ N n (q : ‚Ñö‚Çä) ‚Üí fst q ‚Ñö.< 1 ‚Üí N ‚Ñï.< n ‚Üí
        (fst q ‚Ñö^‚Åø n) ‚Ñö.< (fst q ‚Ñö^‚Åø N)
<^n' N n q q<1 N<n =
  let z' = (^‚Ñö-StrictMonotoneR
           {‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä q)}
             (<‚Ñö‚Üí<·µ£ _ _
               (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä q 1) q<1))
             (fromNat N) (fromNat n)
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _ N<n)))
      z = <·µ£‚Üí<‚Ñö _ _ $ subst2 _<·µ£_
          (^‚Åø-‚Ñö^‚Åø _ _ ‚àô cong rat (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _)))
          (^‚Åø-‚Ñö^‚Åø _ _ ‚àô cong rat (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _)))
           z'
  in invEq (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä _ _) z 


isIncrasing‚Ñô‚ÜíisNondecrasing‚Ñô·µ£ : ‚àÄ P f
               ‚Üí isIncrasing‚Ñô·µ£ P f
               ‚Üí isNondecrasing‚Ñô·µ£ P f 
isIncrasing‚Ñô‚ÜíisNondecrasing‚Ñô·µ£ P f incF x x‚àà y y‚àà =
  {!!}


-- apartFrom-Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô : ‚àÄ L P f ‚Üí
--     Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L P f ‚Üí
--      (‚àÄ u u‚àà v v‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
--          rat (fst (L ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (f u u‚àà -·µ£ f v v‚àà)   ‚Üí
--            rat (fst Œµ) ‚â§·µ£ abs·µ£ (u -·µ£ v))
-- apartFrom-Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô = {!!}



-- apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô** : ‚àÄ K P f ‚Üí
--     Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K P f ‚Üí
--     isIncrasing‚Ñô·µ£ P f ‚Üí 
--      (‚àÄ u u‚àà v v‚àà ‚Üí v <·µ£ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
--          rat (fst (K ‚Ñö‚Çä¬∑ Œµ)) +·µ£ v ‚â§·µ£ u   ‚Üí
--            rat (fst Œµ) +·µ£ f v v‚àà ‚â§·µ£ f u u‚àà )
-- apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô** K P f X incr u u‚àà v v‚àà v<u œÅ Y =
--     x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí
--      let Œî = f u u‚àà -·µ£ f v v‚àà 
--          Œµ* = {!!}
--          Y' = {!Y!}
--      in PT.rec {!!}
--          (Œª (r , Œî<r , _) ‚Üí
--            let zz = X u u‚àà v v‚àà (r , {!!})
--                      (invEq (‚àº‚âÉabs<Œµ _ _ _)
--                         (isTrans‚â°<·µ£ _ _ _ (abs·µ£Pos _
--                           (x<y‚Üí0<y-x _ _
--                             (incr _ _ _ _ v<u))) Œî<r))
--            in {!fst (‚àº‚âÉabs<Œµ _ _ _) zz!})
--          (dense‚Ñöin‚Ñù Œî (Œî +·µ£ rat (fst (Œµ*)))
--           (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ*)) (‚â§·µ£-refl _)))
--      -- let Œµ* = {!!}
--      --     zz = X u u‚àà v v‚àà {!!}
--      --           (invEq (‚àº‚âÉabs<Œµ _ _ _)
--      --             {!!})
--      --           -- x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí
--      -- in {!zz!}  


apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô : ‚àÄ K P f ‚Üí
    Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K P f ‚Üí
     (‚àÄ u u‚àà v v‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
         rat (fst (K ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (u -·µ£ v)   ‚Üí
           rat (fst Œµ) ‚â§·µ£ abs·µ£ (f u u‚àà -·µ£ f v v‚àà))
apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K P f X u u‚àà v v‚àà œÅ Y =
 let Œî = abs·µ£ (f u u‚àà -·µ£ f v v‚àà)
 in x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí 
      PT.rec squash‚ÇÅ -- u ‚àº[ K ‚Ñö‚Çä¬∑ (q , ?3) ] v
        (Œª (q , Œî<q , q<Œî+Œµ) ‚Üí
          let 0<q = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 q
                     (isTrans‚â§<·µ£ _ _ _
                       (0‚â§abs·µ£ _) Œî<q))
              zzz : (fst (K ‚Ñö‚Çä¬∑ œÅ)) ‚Ñö.< (fst (K ‚Ñö‚Çä¬∑ (q , 0<q)))
              zzz = <·µ£‚Üí<‚Ñö _ _ $ isTrans‚â§<·µ£ _ _ _
                       Y
                       (fst (‚àº‚âÉabs<Œµ _ _ _)
                      $ X u u‚àà v v‚àà (q , 0<q)
                       (invEq (‚àº‚âÉabs<Œµ _ _ _)
                         Œî<q))
              zzz' = ‚Ñö.<-¬∑o-cancel _ _ _ 
                         (‚Ñö.0<‚Ñö‚Çä K)
                      (subst2 ‚Ñö._<_ (‚Ñö.¬∑Comm _ _) (‚Ñö.¬∑Comm _ _)
                          zzz)
              zz : rat (fst œÅ) <·µ£ Œî +·µ£ rat (fst Œµ)
              zz = isTrans<·µ£ _ _ _
                      (<‚Ñö‚Üí<·µ£ _ _ zzz')
                       q<Œî+Œµ
          in zz
          )
        ((dense‚Ñöin‚Ñù Œî (Œî +·µ£ rat (fst (Œµ)))
             (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _))))

a‚â§b-c‚áía+c‚â§b : ‚àÄ a b c ‚Üí a ‚â§·µ£ b -·µ£ c ‚Üí a +·µ£ c ‚â§·µ£ b
a‚â§b-c‚áía+c‚â§b a b c p =
   subst ((a +·µ£ c) ‚â§·µ£_)
        (Lùêë.lem--00 {b} {c})
     (‚â§·µ£-+o _ _ c p)

a-b‚â§c‚áía‚â§c+b : ‚àÄ a b c ‚Üí a -·µ£ b ‚â§·µ£ c  ‚Üí a ‚â§·µ£ c +·µ£ b
a-b‚â§c‚áía‚â§c+b a b c p =
  subst (_‚â§·µ£ (c +·µ£ b))
    (Lùêë.lem--00 {a} {b})
     (‚â§·µ£-+o _ _ b p)

open ‚Ñï.Minimal


log‚Çò‚Ñï : ‚àÄ n m ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< m ^ k))
log‚Çò‚Ñï n = {!!}

-- w n n ‚Ñï.‚â§-refl
--  where

--   w : ‚àÄ N n ‚Üí n ‚Ñï.‚â§ N
--           ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 ^ k))
--   w N zero x = 0 , (‚Ñï.‚â§-refl , Œª k' q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero q))
--   w N (suc zero) x = 1 , (‚Ñï.‚â§-refl ,
--      Œª { zero q ‚Üí ‚Ñï.<-asym (‚Ñï.suc-‚â§-suc ‚Ñï.‚â§-refl)
--       ; (suc k') q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred q))})
--   w zero (suc (suc n)) x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
--   w (suc N) (suc (suc n)) x =
--    let (k , (X , Lst)) = w N
--           (‚Ñï.quotient 2 ‚Ñï.+ n / 2)
--           (‚Ñï.‚â§-trans (‚Ñï.pred-‚â§-pred (‚Ñï.2‚â§x‚Üíquotient[x/2]<x n))
--              (‚Ñï.pred-‚â§-pred x))
--        z = ‚Ñï.‚â°remainder+quotient 2 (2 ‚Ñï.+ n)
--        zz = ‚Ñï.<-+-‚â§ X X
--        zzz : suc (suc n) ‚Ñï.< (2 ^ suc k)
--        zzz = subst2 (‚Ñï._<_)
--            (‚Ñï.+-comm _ _
--               ‚àô sym (‚Ñï.+-assoc ((‚Ñï.remainder 2 ‚Ñï.+ n / 2)) _ _)
--                ‚àô cong ((‚Ñï.remainder 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
--              ((cong ((‚Ñï.quotient 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
--               (sym (‚Ñï.+-zero (‚Ñï.quotient 2 ‚Ñï.+ n / 2)))))
--              ‚àô z)
--            (cong ((2 ^ k) ‚Ñï.+_) (sym (‚Ñï.+-zero (2 ^ k))))
--            (‚Ñï.‚â§<-trans
--              (‚Ñï.‚â§-k+ (‚Ñï.‚â§-+k (‚Ñï.pred-‚â§-pred (‚Ñï.mod< 1 (2 ‚Ñï.+ n))))) zz)
--    in (suc k)
--        , zzz
--         , Œª { zero 0'<sk 2+n<2^0' ‚Üí
--                 ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred 2+n<2^0'))
--             ; (suc k') k'<sk 2+n<2^k' ‚Üí
--                Lst k' (‚Ñï.pred-‚â§-pred k'<sk)
--                 (<-¬∑sk-cancel {k = 1}
--                     (subst2 ‚Ñï._<_ (‚Ñï.¬∑-comm _ _) (‚Ñï.¬∑-comm _ _)
--                       (‚Ñï.‚â§<-trans (_ , z)
--                          2+n<2^k' )))}


‚ÑïŒµ<k‚Åø : ‚àÄ p q r s ‚Üí 0 ‚Ñï.< q ‚Üí  s ‚Ñï.< r ‚Üí Œ£[ n ‚àà ‚Ñï ]
           p ‚Ñï.¬∑ s ‚Ñï.^ n ‚Ñï.< q ‚Ñï.¬∑ r ‚Ñï.^ n
‚ÑïŒµ<k‚Åø = {!!}

Œµ<k‚Åø : (Œµ q : ‚Ñö‚Çä) ‚Üí 1 ‚Ñö.< fst q  ‚Üí Œ£[ n ‚àà ‚Ñï ] fst Œµ ‚Ñö.< (fst q) ‚Ñö^‚Åø n
Œµ<k‚Åø Œµ q q<1 = {!!}
   -- let n = fst (log‚Çò‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ))) in n ,
   --       subst (fst Œµ ‚Ñö.<_) (sym (‚Ñö.fromNat-^ _ _))
   --        (‚Ñö.isTrans< _ _ (fromNat (2 ^ n))
   --                ((snd (‚Ñö.ceil‚Ñö‚Çä Œµ)))
   --                 (‚Ñö.<‚Ñ§‚Üí<‚Ñö (‚Ñ§.pos ((fst (‚Ñö.ceil‚Ñö‚Çä Œµ))))
   --                   _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
   --                  (fst (snd (log2‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ))))))))


1/m‚Åø<Œµ : ‚àÄ m (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] [ pos (suc m) / 2+ m ] ‚Ñö^‚Åø n ‚Ñö.< fst Œµ
1/m‚Åø<Œµ m Œµ = 
 let (n , 1/Œµ<n) = Œµ<k‚Åø (inv‚Ñö‚Çä Œµ) ([ pos (suc (suc m)) / 1+ m ] , _)
                     {!!}

 in n , invEq (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä (([ pos (suc m) / 2+ m ] , _) ‚Ñö‚Çä^‚Åø n) Œµ)
         (subst (fst (inv‚Ñö‚Çä Œµ) ‚Ñö.<_)
           (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø ([ pos (suc m) / 2+ m ] , _) n)) 1/Œµ<n)


module IsBilipschitz' (a b : ‚Ñö)  (a<b : a ‚Ñö.< b)
         (f : ‚àÄ (x : ‚Ñù) ‚Üí x ‚àà (interval‚Ñô (rat a) (rat b)) ‚Üí ‚Ñù) 
          (incrF : isIncrasing‚Ñô·µ£ (interval‚Ñô (rat a) (rat b)) f)
          (y : ‚Ñö)

          where

 nondF = isIncrasing‚Ñô‚ÜíisNondecrasing‚Ñô·µ£ (interval‚Ñô (rat a) (rat b)) f incrF

 a‚àà : rat a ‚àà (interval‚Ñô (rat a) (rat b))
 
 a‚àà = (‚â§·µ£-refl (rat a) , <·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b))
 b‚àà : rat b ‚àà (interval‚Ñô (rat a) (rat b)) 
 b‚àà = (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b) , ‚â§·µ£-refl (rat b))
 
 fa = f (rat a) a‚àà
 fb = f (rat b) b‚àà

 f‚àà : ‚àÄ x x‚àà ‚Üí f x x‚àà ‚àà (interval‚Ñô fa fb)
 f‚àà x x‚àà = 
   nondF (rat a) _ x x‚àà (fst x‚àà) ,
    nondF x x‚àà  (rat b) _ (snd x‚àà)

 f' : ‚àÄ x x‚àà ‚Üí Œ£ ‚Ñù (_‚àà interval‚Ñô fa fb) 
 f' x x‚àà = _ , f‚àà x x‚àà


 fa<fb : fa <·µ£ fb
 fa<fb = incrF
   (rat a) a‚àà
   (rat b) b‚àà
   (<‚Ñö‚Üí<·µ£ _ _ a<b)

 a‚â§b = ‚Ñö.<Weaken‚â§ _ _ a<b

 Œî‚ÇÄ = b ‚Ñö.- a
 Œî‚ÇÄ‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b 



 module _
    (approxF : ‚ÑöApprox‚Ñô' (interval‚Ñô (rat a) (rat b)) (interval‚Ñô fa fb) f')
    (L K : ‚Ñö‚Çä)
    (1/K‚â§L : fst (inv‚Ñö‚Çä K) ‚Ñö.‚â§ fst L)
    (lipF : Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L (interval‚Ñô (rat a) (rat b)) f)
    (lip‚Åª¬πF : Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K (interval‚Ñô (rat a) (rat b)) f)

   where

  module _ (y : ‚Ñö) (y‚àà : rat y ‚àà (interval‚Ñô fa fb))  where

   record Step (Œî : ‚Ñö) : Type where
    field
     a' b' : ‚Ñö
     a'<b' : a' ‚Ñö.< b'
     b'-a'‚â§Œî : b' ‚Ñö.- a' ‚Ñö.‚â§ Œî 
     a'‚àà : a' ‚àà ‚Ñöinterval‚Ñô a b
     b'‚àà : b' ‚àà ‚Ñöinterval‚Ñô a b
     a'‚â§ : f (rat a') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ a'‚àà) ‚â§·µ£' rat y
     ‚â§b' : rat y ‚â§·µ£' f (rat b') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ b'‚àà)

    a'‚â§b' : a' ‚Ñö.‚â§ b'
    a'‚â§b' = ‚Ñö.<Weaken‚â§ _ _ a'<b'
    mid : ‚Ñö
    mid = b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ a' ‚Ñö.¬∑ [ 1 / 2 ]

    Œî‚Çä : ‚Ñö‚Çä
    Œî‚Çä = Œî , ‚Ñö.<‚Üí0< _ (‚Ñö.isTrans<‚â§ 0 _ _ (‚Ñö.-< a' b' a'<b') b'-a'‚â§Œî)



    p = ‚Ñö.<-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö<? {0} {[ 1 / 2 ]}) a'<b'

    a'<mid : a' ‚Ñö.< mid
    a'<mid = ‚Ñö.isTrans‚â§< _ _ _
      (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑IdR a') ‚àô cong (a' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
        ‚Ñö.¬∑DistL+ a' _ _))
      (‚Ñö.<-+o _ _ (a' ‚Ñö.¬∑ [ 1 / 2 ]) p) 

    mid<b' : mid ‚Ñö.< b' 
    mid<b' = ‚Ñö.isTrans<‚â§ _ _ _    
      (‚Ñö.<-o+ _ _ (b' ‚Ñö.¬∑ [ 1 / 2 ]) p) 
      ((‚Ñö.‚â°Weaken‚â§ _ _ ((sym (‚Ñö.¬∑DistL+ b' _ _) ‚àô cong (b' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
        ‚Ñö.¬∑IdR b'))))

    mid‚àà : mid ‚àà ‚Ñöinterval‚Ñô a b
    mid‚àà = ‚Ñö.isTrans‚â§ _ _ _ (fst (a'‚àà)) (‚Ñö.<Weaken‚â§ _ _ a'<mid) ,
            ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.<Weaken‚â§ _ _ mid<b') (snd b'‚àà)

    mid‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ mid‚àà)

    fMid·µ£ = f (rat mid) mid‚àà'



   record Step‚äÉStep {Œî ŒîS : _} (s : Step Œî) (sS : Step ŒîS) : Type where

    field
     a'‚â§a'S : Step.a' s ‚Ñö.‚â§ Step.a' sS 
     bS‚â§b' : Step.b' sS ‚Ñö.‚â§ Step.b' s
     -- distA' : (Step.a' sS) ‚Ñö.‚â§ Œî ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ (Step.a' s)

   step0 : Step Œî‚ÇÄ
   step0 .Step.a' = a
   step0 .Step.b' = b
   step0 .Step.a'<b' = a<b
   step0 .Step.b'-a'‚â§Œî = ‚Ñö.isRefl‚â§ _
   step0 .Step.a'‚àà = ‚Ñö.isRefl‚â§ _  , a‚â§b
   step0 .Step.b'‚àà = a‚â§b , (‚Ñö.isRefl‚â§ _)
   step0 .Step.a'‚â§ = 
         subst (_‚â§·µ£' _)
           (cong (f (rat a)) (snd (interval‚Ñô _ _ _) _ _)) (invEq (‚â§·µ£'‚âÉ‚â§·µ£ _ _) (fst y‚àà)) 
   step0 .Step.‚â§b' =
         subst (_ ‚â§·µ£'_)
           (cong (f (rat b)) (snd (interval‚Ñô _ _ _) _ _)) (invEq (‚â§·µ£'‚âÉ‚â§·µ£ _ _) (snd y‚àà)) 

   stepS' : ‚àÄ Œî ‚Üí (s : Step Œî) ‚Üí Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])) (Step‚äÉStep s)
   stepS' Œî s = w (‚Ñö.Dichotomy‚Ñö y fMid)
    where
    open Step s


    Œî‚Çä* : ‚Ñö‚Çä
    Œî‚Çä* = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ a'<b'

    Œî* : ‚Ñö
    Œî* = fst Œî‚Çä*


    Œî*‚â§Œî : Œî* ‚Ñö.‚â§ Œî  
    Œî*‚â§Œî = b'-a'‚â§Œî

    Œ¶ : ‚Ñö‚Çä
    Œ¶ = /2‚Çä (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*)

    fMid = fst (approxF mid mid‚àà') Œ¶

    fMidDist : rat fMid ‚àº[ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*) ] f (rat mid) mid‚àà'
    fMidDist =
      subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) (subst (rat fMid ‚àº[ Œ¶ ‚Ñö‚Çä+ Œ¶ ]_)
                (snd (snd (snd (approxF mid mid‚àà'))))
                 (ùï£-lim-self _ _ Œ¶ Œ¶))


    a'-mid‚â°Œî/2 : (mid ‚Ñö.- a') ‚â° Œî* ‚Ñö.¬∑ [ 1 / 2 ]
    a'-mid‚â°Œî/2 = 
       ((sym (‚Ñö.+Assoc _ _ _) ‚àô
          cong (b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_)
           (cong (a' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_) (‚Ñö.¬∑Comm -1 a')
            ‚àô sym (‚Ñö.¬∑DistL+ a' _ _) ‚àô
             ‚Ñö.¬∑Comm _ _ ‚àô
              sym (‚Ñö.¬∑Assoc [ 1 / 2 ] -1 a') ‚àô  ‚Ñö.¬∑Comm [ 1 / 2 ] _)
           ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))

    w : (y ‚Ñö.‚â§ fMid) ‚äé (fMid ‚Ñö.< y) ‚Üí Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ]))
              (Step‚äÉStep s)
    w (inl x) = ww
     where

     ab-dist = ‚Ñö.isTrans‚â§
      ((mid ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ])) ‚Ñö.- a') _ _
       (‚Ñö.‚â°Weaken‚â§ _ _
         (cong (‚Ñö._- a') (‚Ñö.+Comm _ _) ‚àô sym (‚Ñö.+Assoc _ _ _)))
        ((‚Ñö.isTrans‚â§ _ _ _
          (‚Ñö.‚â§-o+ _ _ _ (‚Ñö.‚â°Weaken‚â§ _ _ a'-mid‚â°Œî/2))
            (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑DistL+ Œî* _ _) ‚àô
              cong (Œî* ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö?))))

     newb' = mid ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ])


     newb'+Œî/4‚â°b' : newb' ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ]) ‚â° b'  
     newb'+Œî/4‚â°b' = sym (‚Ñö.+Assoc _ _ _) ‚àô
       {!!}

     y‚â§fnewb' : rat y ‚â§·µ£ f (rat newb') _  
     y‚â§fnewb' = 
      (isTrans‚â§·µ£ _ _ _
        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x) (isTrans‚â§·µ£ _ _ _
           (a-b‚â§c‚áía‚â§c+b _ _ _
             (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _ )
               (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) fMidDist)))) mid-dist))
        where
         mid-dist : rat (fst (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*))
                      +·µ£ f (rat mid) mid‚àà' ‚â§·µ£
                      f _ _ 
         mid-dist = a‚â§b-c‚áía+c‚â§b _ _ _ $ isTrans‚â§‚â°·µ£ _ _ _
          (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF _ _ (rat mid) mid‚àà'
             (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ (/4‚Çä Œî‚Çä*))
                (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                  (subst2 ‚Ñö._‚â§_ (sym (‚Ñö.y¬∑[x/y] K (fst (/4‚Çä Œî‚Çä*))))
                    (cong ‚Ñö.abs' (sym lem--063))
                  (‚Ñö.‚â§abs' _)))
                  )
              (abs·µ£Pos _ (x<y‚Üí0<y-x _ _
                (incrF _ mid‚àà' _ _
                    (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' mid mid ((Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _))) (‚Ñö.isRefl‚â§ mid) )))))

     a'<newb' : a' ‚Ñö.< newb'
     a'<newb' =  ‚Ñö.isTrans‚â§< _ _ _
         (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.+IdR _))) (‚Ñö.<Monotone+ _ _ 0 (Œî* ‚Ñö.¬∑ [ 1 / 4 ]) 
              a'<mid (‚Ñö.0<‚Ñö‚Çä (Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _))))

     newb'‚â§b' : newb' ‚Ñö.‚â§ b'
     newb'‚â§b' = 
      subst (newb' ‚Ñö.‚â§_) newb'+Œî/4‚â°b'
       (‚Ñö.‚â§+‚Ñö‚Çä _ _ (Œî‚Çä* ‚Ñö‚Çä¬∑ _) (‚Ñö.isRefl‚â§ _))



     newb'‚àà : newb' ‚àà ‚Ñöinterval‚Ñô a b
     newb'‚àà = ‚Ñö.isTrans‚â§ _ _ _
              (fst a'‚àà) (‚Ñö.<Weaken‚â§ _ _ a'<newb')
       , ‚Ñö.isTrans‚â§ _ _ _ newb'‚â§b' (snd b'‚àà)


     ww : Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])) (Step‚äÉStep s)
     ww .fst .Step.a' = a'
     ww .fst .Step.b' = newb'
     ww .fst .Step.a'<b' = a'<newb' 
     ww .fst .Step.b'-a'‚â§Œî = ‚Ñö.isTrans‚â§
           _ _ _ ab-dist (‚Ñö.‚â§-¬∑o Œî* Œî [ 3 / 4 ]
             (‚Ñö.<Weaken‚â§ 0 [ 3 / 4 ] (‚Ñö.0<pos 2 4)) Œî*‚â§Œî)
     ww .fst .Step.a'‚àà = a'‚àà
     ww .fst .Step.b'‚àà = newb'‚àà
     ww .fst .Step.a'‚â§ = a'‚â§
     ww .fst .Step.‚â§b' = invEq (‚â§·µ£'‚âÉ‚â§·µ£ _ _) y‚â§fnewb'
     ww .snd .Step‚äÉStep.a'‚â§a'S = ‚Ñö.isRefl‚â§ a'
     ww .snd .Step‚äÉStep.bS‚â§b' = newb'‚â§b'
    w (inr x) = {!!}

   
   stepS : ‚àÄ Œî ‚Üí Step Œî ‚Üí Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])
   stepS Œî s = fst (stepS' Œî s)

   ww : ‚àÄ n ‚Üí Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))
   ww zero = subst (Step) (sym (‚Ñö.¬∑IdR Œî‚ÇÄ)) step0
   ww (suc n) = subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS _ (ww n))

   s : ‚Ñï ‚Üí ‚Ñö
   s = Step.a' ‚àò ww

   s' : ‚Ñï ‚Üí ‚Ñö
   s' = Step.b' ‚àò ww

   ss‚â§-suc : ‚àÄ n (z : Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))) ‚Üí Step.a' z ‚Ñö.‚â§
       Step.a' (subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))
   ss‚â§-suc n z = ‚Ñö.isTrans‚â§ _ _ _ (Step‚äÉStep.a'‚â§a'S (snd (stepS'
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z)))
          (‚Ñö.‚â°Weaken‚â§ _ _ (sym (transportRefl _)))

   ‚â§ss'-suc : ‚àÄ n (z : Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))) ‚Üí  
        Step.b' (subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))
       ‚Ñö.‚â§
        Step.b' z
   ‚â§ss'-suc n z =  ‚Ñö.isTrans‚â§ _ _ _ 
          (‚Ñö.‚â°Weaken‚â§ _ _  (transportRefl _))
            ((Step‚äÉStep.bS‚â§b' (snd (stepS'
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))))
   ss‚â§ : ‚àÄ n m ‚Üí s n ‚Ñö.‚â§ s (m ‚Ñï.+ n) 
   ss‚â§ n zero = ‚Ñö.isRefl‚â§ _ 
   ss‚â§ n (suc m) = ‚Ñö.isTrans‚â§ _ _ _ (ss‚â§ n m) (ss‚â§-suc (m ‚Ñï.+ n) (ww (m ‚Ñï.+ n)))

   ‚â§ss' : ‚àÄ n m ‚Üí  s' (m ‚Ñï.+ n) ‚Ñö.‚â§ s' n 
   ‚â§ss' n zero = ‚Ñö.isRefl‚â§ _ 
   ‚â§ss' n (suc m) = ‚Ñö.isTrans‚â§ _ _ _
     (‚â§ss'-suc (m ‚Ñï.+ n) (ww (m ‚Ñï.+ n))) (‚â§ss' n m)



   ww‚äÇ : ‚àÄ n m ‚Üí (s (m ‚Ñï.+ n) ‚Ñö.- s n) ‚Ñö.‚â§ Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)
   ww‚äÇ n m = ‚Ñö.isTrans‚â§
     (s (m ‚Ñï.+ n) ‚Ñö.- s n) (s' n ‚Ñö.- s n) _
       (‚Ñö.‚â§-+o (s (m ‚Ñï.+ n)) (s' n) (‚Ñö.- (s n))
        (‚Ñö.isTrans‚â§ _ _ _ (Step.a'‚â§b' (ww (m ‚Ñï.+ n))) (‚â§ss' n m)))
    (Step.b'-a'‚â§Œî (ww n))

   www : {Œµ : ‚Ñö‚Çä} ‚Üí (Œ£[ n ‚àà ‚Ñï ] [ 3 / 4 ] ‚Ñö^‚Åø n ‚Ñö.<
             fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))
          ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
               abs·µ£ (rat (s n) -·µ£ rat (s m)) <·µ£ rat (fst Œµ)   )
   www (N , P) .fst = N
   www {Œµ} (N , P) .snd = ‚Ñï.elimBy‚â§+
     (Œª n m X m< n< ‚Üí subst (_<·µ£ (rat (fst Œµ)))
       (minusComm-abs·µ£ (rat (s m)) (rat (s n))) (X n< m<))
     Œª n m p N<n ‚Üí
       let P' : Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø N) ‚Ñö.< fst Œµ
           P' = ‚Ñö.isTrans<‚â§ _ _ (fst Œµ) (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.-< a b a<b) P)
                  (‚Ñö.‚â°Weaken‚â§ _ _
                     ((cong (fst (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b) ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _))
                      ‚àô ‚Ñö.y¬∑[x/y] (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b) (fst Œµ)))
           zz = ‚Ñö.isTrans‚â§< _ _ _
                   (‚Ñö.isTrans‚â§ _ ((s (m ‚Ñï.+ n)) ‚Ñö.- (s n)) _
                     (‚Ñö.‚â°Weaken‚â§ _ _ (‚Ñö.absNonNeg (s (m ‚Ñï.+ n) ‚Ñö.- s n)
                       (‚Ñö.-‚â§ (s n) (s (m ‚Ñï.+ n)) (ss‚â§ n m))))
                       (ww‚äÇ n m))
                   (‚Ñö.isTrans< _ (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø (N))) _
                     (‚Ñö.<-o¬∑ _ _ Œî‚ÇÄ (‚Ñö.-< a b a<b)
                      (<^n' N n _ ‚Ñö.dec‚Ñö<? N<n)) P')
       in isTrans‚â°<·µ£ _ _ _ (cong rat (sym (‚Ñö.abs'‚â°abs _)))
            (<‚Ñö‚Üí<·µ£ _ _ zz) 


   f‚Åª¬π : ‚Ñù
   f‚Åª¬π = fromCauchySequence' (rat ‚àò s)
         Œª Œµ ‚Üí www {Œµ} (1/m‚Åø<Œµ 2 (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))




   f‚Åª¬π‚àà : f‚Åª¬π ‚àà interval‚Ñô (rat a) (rat b)
   f‚Åª¬π‚àà = ((‚â§lim _ _ _
            Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ fst (Step.a'‚àà
             (ww (suc (1/m‚Åø<Œµ 2 (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst))))))
      , (lim‚â§ _ _ _
            Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ snd (Step.a'‚àà
             (ww (suc (1/m‚Åø<Œµ 2 (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst)))))


   s‚àà : ‚àÄ n ‚Üí rat (s n) ‚àà interval‚Ñô (rat a) (rat b)
   s‚àà n = ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ fst (Step.a'‚àà
             (ww n))))
      , (‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ snd (Step.a'‚àà
             (ww n)))


   s~y : (Œµ : ‚Ñö‚Çä) ‚Üí
           ‚àÉ-syntax ‚Ñï
           (Œª N ‚Üí
              (n : ‚Ñï) ‚Üí
              N ‚Ñï.< n ‚Üí
              abs·µ£ (f (rat (s n)) (s‚àà n) -·µ£ rat y) <·µ£ rat (fst Œµ))
   s~y Œµ = 
     let (N , X) = (1/m‚Åø<Œµ 2 (inv‚Ñö‚Çä (L ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä) ‚Ñö‚Çä¬∑ Œµ))

     in ‚à£ suc N ,
        (Œª { zero x ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero x)
           ; (suc n) x ‚Üí
              let ùíî = ww (suc n)
                  XX : ([ 3 / 4 ] ‚Ñö^‚Åø N) ‚Ñö.< fst (inv‚Ñö‚Çä (L ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä) ‚Ñö‚Çä¬∑ Œµ)
                  XX = {!X!}
                 
              in {!X!}
           }) ‚à£‚ÇÅ


   f‚àòf‚Åª¬π : f f‚Åª¬π f‚Åª¬π‚àà
       ‚â° rat y
   f‚àòf‚Åª¬π = 
      snd (map-fromCauchySequence'
          L (rat ‚àò s)
            (Œª Œµ ‚Üí www {Œµ} (1/m‚Åø<Œµ 2  (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b))))
             {!f'!}
              {!!}) ‚àô
               fromCauchySequence'‚â° _ _ _
          s~y



  f‚Åª¬π-L : Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô K (interval‚Ñô fa fb) f‚Åª¬π
  f‚Åª¬π-L y y‚àà r r‚àà Œµ x =
    let zz = lip‚Åª¬πF _ _ _ _ Œµ
             (subst2 _‚àº[ Œµ ]_
               (sym (f‚àòf‚Åª¬π y y‚àà))
               (sym (f‚àòf‚Åª¬π r r‚àà)) (invEq (‚àº‚âÉabs<Œµ _ _ _)
                  (<‚Ñö‚Üí<·µ£ (‚Ñö.abs' (y ‚Ñö.- r)) (fst Œµ)
                    (subst (‚Ñö._< fst Œµ) (‚Ñö.abs'‚â°abs (y ‚Ñö.- r)) x))))
        
    in fst (‚àº‚âÉabs<Œµ (f‚Åª¬π y y‚àà) (f‚Åª¬π r r‚àà) _) zz





  -- -- -- ext-f‚Åª¬π : ?
  -- -- -- ext-f‚Åª¬π = extend-Lipshitz‚Ñö‚Üí‚Ñù K fa fb (‚Ñö.<Weaken‚â§ _ _ fa<fb) f‚Åª¬π f‚Åª¬π-L
  


  -- --  -- s~y : (Œµ : ‚Ñö‚Çä) ‚Üí
  -- --  --         ‚àÉ-syntax ‚Ñï
  -- --  --         (Œª N ‚Üí
  -- --  --            (n : ‚Ñï) ‚Üí
  -- --  --            N ‚Ñï.< n ‚Üí
  -- --  --            abs·µ£ {!!} <·µ£ rat (fst Œµ))
  -- --  -- s~y Œµ = {!!}
   
  -- --  -- f‚Åª¬π‚àà : f‚Åª¬π ‚àà interval‚Ñô (rat a) (rat b)
  -- --  -- f‚Åª¬π‚àà = ((‚â§lim _ _ _
  -- --  --          Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ fst (Step.a'‚àà
  -- --  --           (ww (suc (1/2‚Åø<Œµ (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst))))))
  -- --  --    , (lim‚â§ _ _ _
  -- --  --          Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ snd (Step.a'‚àà
  -- --  --           (ww (suc (1/2‚Åø<Œµ (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst)))))


  -- --  -- f‚àòf‚Åª¬π : ? --fst fl-ebl f‚Åª¬π
  -- --  --     ‚â° rat y
  -- --  -- f‚àòf‚Åª¬π = snd (map-fromCauchySequence'
  -- --  --     L (rat ‚àò s)
  -- --  --       (Œª Œµ ‚Üí www {Œµ} (1/2‚Åø<Œµ (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b))))
  -- --  --        ( fst fl-ebl) (snd fl-ebl)) ‚àô
  -- --  --          fromCauchySequence'‚â° _ _ _
  -- --  --     s~y
