{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.CircleMore where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Path

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Surjection
open import Cubical.Functions.Embedding


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad


open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.ExponentiationMore
open import Cubical.HITs.CauchyReals.Uniform
open import Cubical.HITs.CauchyReals.PiNumber
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Summation

open import Cubical.Algebra.Ring.BigOps

open import Cubical.Algebra.AbGroup
open import Cubical.Algebra.Group
open import Cubical.Algebra.CommRing.Properties
open import Cubical.Algebra.CommRing.Base
import Cubical.Data.FinData as FD

open import Cubical.HITs.CauchyReals.TrigonometricIdentities
open import Cubical.HITs.CauchyReals.ArcSin

open import Cubical.HITs.SetQuotients as SQ renaming ([_] to [_]/)
open import Cubical.Relation.Binary.Base
open import Cubical.HITs.CauchyReals.Circle

open import Cubical.Tactics.CommRingSolver


cDistInj : ‚àÄ x y ‚Üí cDist x y ‚â° 0 ‚Üí x ‚â° y
cDistInj = SQ.ElimProp2.go w
 where
 w : ElimProp2 (Œª z z‚ÇÅ ‚Üí cDist z z‚ÇÅ ‚â° 0 ‚Üí z ‚â° z‚ÇÅ)
 w .ElimProp2.isPropB _ _ = isPropŒ† Œª _ ‚Üí isSetCircle _ _
 w .ElimProp2.f a a' 1-cosŒî=0 =
   let w = cos=1‚áí (a -·µ£ a') (cong cos (¬∑·µ£Assoc _ _ _)
            ‚àô sym (ùêë'.equalByDifference _ _ 1-cosŒî=0))
    in eq/ a a' (map-snd
         (Œª p ‚Üí solve! ‚Ñùring ‚àô p) w) 


cDist‚â°‚Ñù¬≤-dist : ‚àÄ x y ‚Üí 2 ¬∑·µ£ cDist x y ‚â°
      (sinFromCircle x -·µ£ sinFromCircle y) ^‚Åø 2
   +·µ£ ((cosFromCircle x -·µ£ cosFromCircle y) ^‚Åø 2)
cDist‚â°‚Ñù¬≤-dist = SQ.ElimProp2.go w
 where
 w : ElimProp2 _
 w .ElimProp2.isPropB _ _ = isSet‚Ñù _ _
 w .ElimProp2.f x y = 
     ùêë'.¬∑DistR- _ _ _
   ‚àô cong‚ÇÇ _-·µ£_
     (sym (x+x‚â°2x _)
      ‚àô cong‚ÇÇ _+·µ£_ (sym (sin¬∑sin+cos¬∑cos=1 (x CR‚Ñù.¬∑ (2 ¬∑·µ£ œÄ-number))))
                   (sym (sin¬∑sin+cos¬∑cos=1 (y CR‚Ñù.¬∑ (2 ¬∑·µ£ œÄ-number)))))
     (cong (2 ¬∑·µ£_) (cong cos (sym (¬∑·µ£Assoc _ _ _)
          ‚àô ùêë'.¬∑DistL- _ _ _) ‚àô
           cosOfSum _ _ ‚àô cong‚ÇÇ _-·µ£_ 
             (cong‚ÇÇ _¬∑·µ£_ refl (sym (cos-even _)) )
             (cong‚ÇÇ _¬∑·µ£_ refl (sym (sin-odd _))))
       ‚àô sym (x+x‚â°2x _)) 
   ‚àô solve! ‚Ñùring
   ‚àô cong‚ÇÇ _+·µ£_
    (cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl)
    (cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl)
    
Circle‚Üí[sin,cos]-inj : ‚àÄ x y ‚Üí
                ((sinFromCircle x ‚â° sinFromCircle y)
                √ó (cosFromCircle x ‚â° cosFromCircle y))
                 ‚Üí x ‚â° y
Circle‚Üí[sin,cos]-inj x y (sinx‚â°siny , cosx‚â°cosy) =
  cDistInj x y (
       (sym (ùêë'.¬∑IdL' _ _ (sym (rat¬∑·µ£rat _ _)
        ‚àô dec‚Ñö‚â°·µ£?)) ‚àô sym (¬∑·µ£Assoc _ _ _))
    ‚àô‚àô cong (rat [ 1 / 2 ] ¬∑·µ£_) (cDist‚â°‚Ñù¬≤-dist x y ‚àô
   cong‚ÇÇ _+·µ£_
    (cong (_^‚Åø 2) (ùêë'.+InvR' _ _ sinx‚â°siny) ‚àô 0^‚Åø 1)
    (cong (_^‚Åø 2) (ùêë'.+InvR' _ _ cosx‚â°cosy) ‚àô 0^‚Åø 1)
   ‚àô +·µ£-rat 0 0) ‚àô‚àô (sym (rat¬∑·µ£rat _ _)
        ‚àô dec‚Ñö‚â°·µ£?)) 
  

isEquivCircle‚ÜídistCircle : isEquiv Circle‚ÜídistCircle
isEquivCircle‚ÜídistCircle =
  isEmbedding√óisSurjection‚ÜíisEquiv
    (injEmbedding isSetDistCircle
      (Œª {x} {y} p ‚Üí
         Circle‚Üí[sin,cos]-inj x y
           (PathPŒ£ (cong fst p)))
    , Circle‚Üí[sin,cos]-surj)


Circle‚âÉdistCircle : Circle ‚âÉ distCircle
Circle‚âÉdistCircle = Circle‚ÜídistCircle , isEquivCircle‚ÜídistCircle


module Stiching {‚Ñì} (A : Type ‚Ñì) (a b : ‚Ñù) (a<b : a <·µ£ b)
           (f : ‚àÄ x ‚Üí x <·µ£ b ‚Üí A)
           (g : ‚àÄ x ‚Üí a <·µ£ x ‚Üí A)
            where


 w‚ÇÇ : (‚àÄ x x< <x ‚Üí f x x< ‚â° g x <x) ‚Üí ‚àÄ x ‚Üí 2-Constant (‚äé.rec (f x) (g x)) 
 w‚ÇÇ f=g x (inl u) (inl v)  = cong (f x) (isProp<·µ£ _ _ u v)
 w‚ÇÇ f=g x (inl u) (inr v) = f=g x u v
 w‚ÇÇ f=g x (inr u) (inl v) = sym (f=g x v u)
 w‚ÇÇ f=g x (inr u) (inr v) = cong (g x) (isProp<·µ£ _ _ u v)


 stichSetFns : isSet A ‚Üí (‚àÄ x x< <x ‚Üí f x x< ‚â° g x <x) ‚Üí ‚Ñù ‚Üí A
 stichSetFns isSetA f=g x = PT.rec‚ÜíSet isSetA
     (‚äé.rec (f x) (g x))
     (w‚ÇÇ f=g x)
    (Dichotomy‚Ñù' a x b a<b)

open Stiching public using (stichSetFns)

CircleOverlap‚ÜíCircle-inj : ‚àÄ Œµ ‚Üí ‚àÄ x y ‚Üí 
   CircleOverlap[ Œµ ]‚ÜíCircle x ‚â°  CircleOverlap[ Œµ ]‚ÜíCircle y
   ‚Üí x ‚â° y
CircleOverlap‚ÜíCircle-inj Œµ = SQ.ElimProp2.go w
 where
 w : ElimProp2
      (Œª z z‚ÇÅ ‚Üí
         CircleOverlap[ Œµ ]‚ÜíCircle z ‚â° CircleOverlap[ Œµ ]‚ÜíCircle z‚ÇÅ ‚Üí
         z ‚â° z‚ÇÅ)
 w .ElimProp2.isPropB _ _ = isPropŒ† Œª _ ‚Üí squash/ _ _
 w .ElimProp2.f x y x‚ÇÅ = eq/ _ _
   (SQ.effective isPropCircle-rel isEquivRelCircleRel _ _ x‚ÇÅ)


CircleOverlap‚Üí[sin,cos]-surj : ‚àÄ Œµ ‚Üí isSurjection
  (Circle‚ÜídistCircle ‚àò CircleOverlap[ Œµ ]‚ÜíCircle)
CircleOverlap‚Üí[sin,cos]-surj Œµ ((x , y) , x¬≤+y¬≤‚â°1) = 
  PT.map (Œª (œÜ , œÜ‚àà , sinœÜ‚â°x , cosœÜ‚â°y) ‚Üí
    [ (œÜ Ôºè·µ£‚Çä (2 ‚Çä¬∑·µ£ œÄ-number‚Çä) +·µ£ fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä 2))) ,
      subst2 _<·µ£_
        (cong‚ÇÇ _+·µ£_ (-·µ£¬∑ _ _ ‚àô cong -·µ£_
         (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ _ _))
          refl ‚àô ùêë'.+InvL' _ _ refl)
        (cong‚ÇÇ _+·µ£_ (cong‚ÇÇ _¬∑·µ£_ refl (cong fst (sym (inv‚Ñù‚Çä¬∑ _ _)))) refl
          )
        (<·µ£-+o _ _ (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä 2)))
          (<·µ£-¬∑·µ£o _ _ (inv‚Ñù‚Çä 2 ‚Çä¬∑·µ£ inv‚Ñù‚Çä œÄ-number‚Çä) (fst œÜ‚àà)))
     , isTrans<‚â°·µ£ _ _ _
        (<·µ£-+o _ _ (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä 2)))
          (<·µ£-¬∑·µ£o _ _ (inv‚Ñù‚Çä (2 ‚Çä¬∑·µ£ œÄ-number‚Çä)) (snd œÜ‚àà)))
          (cong‚ÇÇ _+·µ£_ (¬∑DistR+ _ _ _ ‚àô +·µ£Comm _ _) refl  ‚àô
           sym (+·µ£Assoc _ _ _)
            ‚àô
            cong‚ÇÇ _+·µ£_ ([x¬∑y·µ£]/‚Çäy _ _)
             (cong‚ÇÇ _+·µ£_ (¬∑·µ£Comm _ _ ‚àô
               cong‚ÇÇ _¬∑·µ£_ (cong fst (inv‚Ñù‚Çä¬∑ 2 œÄ-number‚Çä)) refl
               ‚àô [x/‚Çäy]¬∑y·µ£ _ _ ‚àô inv‚Ñù‚Çä-rat 2) (inv‚Ñù‚Çä-rat 2)
               ‚àô +·µ£-rat _ _ ‚àô dec‚Ñö‚â°·µ£?)
            ‚àô +·µ£Comm _ _)
          ]/ 
    ,
      Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
      (cong‚ÇÇ _,_
       ((cong sin (¬∑DistR+ _ _ _ ‚àô
         cong‚ÇÇ _+·µ£_ ([x/‚Çäy]¬∑y·µ£ _ _) (cong‚ÇÇ _¬∑·µ£_ refl (¬∑·µ£Comm _ _)
           ‚àô ¬∑·µ£Comm _ _ ‚àô [x¬∑y·µ£]/‚Çäy _ _)) ‚àô sin[x]=-sin[x+œÄ] _)
        ‚àô cong -·µ£_ sinœÜ‚â°x ‚àô -·µ£Invol _)
       ((cong cos (¬∑DistR+ _ _ _ ‚àô
         cong‚ÇÇ _+·µ£_ ([x/‚Çäy]¬∑y·µ£ _ _) (cong‚ÇÇ _¬∑·µ£_ refl (¬∑·µ£Comm _ _)
           ‚àô ¬∑·µ£Comm _ _ ‚àô [x¬∑y·µ£]/‚Çäy _ _)) ‚àô cos[x]=-cos[x+œÄ] _)
        ‚àô cong -·µ£_ cosœÜ‚â°y ‚àô -·µ£Invol _)
       ))
    (distCircle‚Üíangle (Œµ ‚Çä¬∑·µ£ (2 ‚Çä¬∑·µ£ œÄ-number‚Çä)) (-·µ£ x) (-·µ£ y)
    (cong‚ÇÇ _+·µ£_ (sym (^‚Åø-even 1 x)) (sym (^‚Åø-even 1 y))  ‚àô
      cong‚ÇÇ _+·µ£_ (x^¬≤=x¬∑x _) (x^¬≤=x¬∑x _) ‚àô x¬≤+y¬≤‚â°1))


CircleOverlap‚âÉdistCircle : ‚àÄ Œµ ‚Üí CircleOverlap[ Œµ ] ‚âÉ distCircle
CircleOverlap‚âÉdistCircle Œµ = Circle‚ÜídistCircle ‚àò CircleOverlap[ Œµ ]‚ÜíCircle
  , isEmbedding√óisSurjection‚ÜíisEquiv
   (snd (compEmbedding (Circle‚ÜídistCircle , injEmbedding isSetDistCircle
      (Œª {x} {y} p ‚Üí
         Circle‚Üí[sin,cos]-inj x y
           (PathPŒ£ (cong fst p))))
           (_ , injEmbedding squash/
            (CircleOverlap‚ÜíCircle-inj Œµ _ _)))
   , CircleOverlap‚Üí[sin,cos]-surj Œµ)


fromWeldedInterval : ‚àÄ {‚Ñì} (A : Type ‚Ñì) ‚Üí Type ‚Ñì
fromWeldedInterval A =
 Œ£ (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí A)
   Œª f ‚Üí f 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° f 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)

circle0 : distCircle
circle0  = (1 , 0) ,
  cong‚ÇÇ _+·µ£_ (sym (rat¬∑·µ£rat _ _)) (sym (rat¬∑·µ£rat _ _))
                                    ‚àô +·µ£-rat _ _


opaque

 -- injCircle0‚â°circle0 : Circle‚ÜídistCircle (injCircle 0) ‚â° circle0
 -- injCircle0‚â°circle0 = distCircle‚â° {!!} {!!}
 circle+ : distCircle ‚Üí distCircle ‚Üí distCircle
 circle+ ((a , b) , p) ((c , d) , q) = 
   ((a ¬∑·µ£ c -·µ£ b ¬∑·µ£ d) , a ¬∑·µ£ d +·µ£ b ¬∑·µ£ c) ,
     (solve! ‚Ñùring)
       ‚àô cong‚ÇÇ _¬∑·µ£_
       (p)
       (q) ‚àô sym (rat¬∑·µ£rat 1 1)

 circleNeg : distCircle ‚Üí distCircle
 circleNeg ((x , y) , p) =
  (x , -·µ£ y) , cong‚ÇÇ _+·µ£_ refl (-·µ£¬∑-·µ£ _ _) ‚àô p

‚ÑùS¬πAbGroupStr : AbGroupStr distCircle
‚ÑùS¬πAbGroupStr .AbGroupStr.0g = circle0 
‚ÑùS¬πAbGroupStr .AbGroupStr._+_  = circle+
‚ÑùS¬πAbGroupStr .AbGroupStr.-_  = circleNeg
‚ÑùS¬πAbGroupStr .AbGroupStr.isAbGroup = IsAbGroup‚ÑùS¬π
  where
  opaque
   unfolding circle+ circleNeg
   IsAbGroup‚ÑùS¬π : IsAbGroup
     circle0
     circle+
     circleNeg 
   IsAbGroup‚ÑùS¬π = 
      makeIsAbGroup isSetDistCircle
      (Œª _ _ _ ‚Üí distCircle‚â° (solve! ‚Ñùring) (solve! ‚Ñùring))
      (Œª _ ‚Üí distCircle‚â° (cong‚ÇÇ _+·µ£_ (¬∑IdR _) (cong -·µ£_ (ùêë'.0RightAnnihilates _)) 
          ‚àô ùêë'.+IdR' _ _ (-·µ£-rat 0))
        (cong‚ÇÇ _+·µ£_ (ùêë'.0RightAnnihilates _ ) (¬∑IdR _)
          ‚àô +IdL _))
      (Œª (_ , p) ‚Üí distCircle‚â° (solve! ‚Ñùring ‚àô p) (solve! ‚Ñùring))
      Œª _ _ ‚Üí distCircle‚â° (solve! ‚Ñùring) (solve! ‚Ñùring)


‚ÑùS¬πAbGroup : AbGroup ‚Ñì-zero
‚ÑùS¬πAbGroup = _ , ‚ÑùS¬πAbGroupStr


interp‚Ñù0 : ‚àÄ a b ‚Üí interp‚Ñù a b 0 ‚â° a 
interp‚Ñù0 a b = solve! ‚Ñùring

interp‚Ñù1 : ‚àÄ a b ‚Üí interp‚Ñù a b 1 ‚â° b 
interp‚Ñù1 a b = cong‚ÇÇ _+·µ£_ refl (¬∑IdL _) ‚àô solve! ‚Ñùring

pathFromToCircle‚àÉ : (x‚ÇÄ x‚ÇÅ : Circle) ‚Üí
              ‚àÉ[ p ‚àà (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí Circle) ]
                (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° x‚ÇÄ)
                 √ó (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° x‚ÇÅ)
pathFromToCircle‚àÉ = SQ.ElimProp2.go w
 where
 w : ElimProp2 _
 w .ElimProp2.isPropB _ _ = squash‚ÇÅ
 w .ElimProp2.f x y = ‚à£ (Œª t _ ‚Üí injCircle (interp‚Ñù x y t)) ,
   cong injCircle (interp‚Ñù0 x y) , cong injCircle (interp‚Ñù1 x y) ‚à£‚ÇÅ


-- pathFromTo : (x‚ÇÄ x‚ÇÅ : distCircle) ‚Üí
--               Œ£[ p ‚àà (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí distCircle) ]
--                 (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° x‚ÇÄ)
--                  √ó (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° x‚ÇÄ)
-- pathFromTo = {!!}

module ‚ÑùS¬π where
 open AbGroupStr ‚ÑùS¬πAbGroupStr public


rotationIso : distCircle ‚Üí Iso distCircle distCircle
rotationIso x .Iso.fun = ‚ÑùS¬π._+ x
rotationIso x .Iso.inv = ‚ÑùS¬π._- x
rotationIso x .Iso.rightInv a =
  sym (‚ÑùS¬π.+Assoc _ _ _) ‚àô cong (a ‚ÑùS¬π.+_) (‚ÑùS¬π.+InvL _) ‚àô ‚ÑùS¬π.+IdR _ 
rotationIso x .Iso.leftInv a =
  sym (‚ÑùS¬π.+Assoc _ _ _) ‚àô cong (a ‚ÑùS¬π.+_) (‚ÑùS¬π.+InvR _) ‚àô ‚ÑùS¬π.+IdR _ 

rotationEquiv : distCircle ‚Üí distCircle ‚âÉ distCircle
rotationEquiv x = isoToEquiv (rotationIso x)

opaque
 unfolding circle+ circleNeg
 rotationEquivPresDist : ‚àÄ x y z ‚Üí
    cartDist¬≤ (fst x) (fst y) ‚â° cartDist¬≤ (fst (x ‚ÑùS¬π.+ z)) (fst (y ‚ÑùS¬π.+ z)) 
 rotationEquivPresDist x y z =
    sym (ùêë'.¬∑IdR' _ _ (snd z)) ‚àô solve! ‚Ñùring


-- extendUCAcrossIntervals : ‚àÄ {a b c} ‚Üí a <·µ£ b ‚Üí b <·µ£ c
--    ‚Üí ‚àÄ f g
--    ‚Üí IsUContinuous‚Ñô (interval‚Ñô a b) f
--    ‚Üí IsUContinuous‚Ñô (interval‚Ñô b c) g
--    ‚Üí Œ£[ h ‚àà _ ] (IsUContinuous‚Ñô (interval‚Ñô a c) h √ó
--        ((‚àÄ x x‚àà x‚àà' ‚Üí f x x‚àà ‚â° h x x‚àà')
--         √ó (‚àÄ x x‚àà x‚àà' ‚Üí g x x‚àà ‚â° h x x‚àà')))
   
-- extendUCAcrossIntervals = {!!}


-- fromFWI :  (fwi : fromWeldedInterval ‚Ñù)
--         ‚Üí (IsUContinuous‚Ñô (interval‚Ñô 0 1) (fst fwi))
--         ‚Üí Œ£[ f ‚àà (distCircle ‚Üí ‚Ñù) ]
--            (‚àÄ x x‚àà ‚Üí f (Circle‚ÜídistCircle (injCircle (fst fwi x x‚àà)))
--              ‚â° fst fwi x x‚àà)
               
-- fromFWI fwi uc = {!!}
--  -- where
 

fromInterval‚Üí‚Ñù-uC : Type
fromInterval‚Üí‚Ñù-uC = Œ£ _ (IsUContinuous‚Ñô (interval‚Ñô 0 1))


rotateToOrigin : ‚àÄ D (x : distCircle) ‚Üí Iso
       (Œ£ distCircle Œª x' ‚Üí cartDist¬≤ (fst x) (fst x') <·µ£ D)
       (Œ£ distCircle Œª x' ‚Üí cartDist¬≤ (fst circle0) (fst x') <·µ£ D)
rotateToOrigin D x@((X , Y) , _) = w
 where
 open GroupTheory (AbGroup‚ÜíGroup ‚ÑùS¬πAbGroup)
 
 w : Iso (Œ£ distCircle (Œª x' ‚Üí cartDist¬≤ (fst x) (fst x') <·µ£ D))
         (Œ£ distCircle (Œª x' ‚Üí cartDist¬≤ (fst circle0) (fst x') <·µ£ D))
 w .Iso.fun (p@((X' , Y') , _) , d) = p ‚ÑùS¬π.- x ,
  isTrans‚â°<·µ£ _ _ _ (cong‚ÇÇ cartDist¬≤ (cong fst (sym (‚ÑùS¬π.+InvR x)) ) refl
    ‚àô sym (rotationEquivPresDist x p (‚ÑùS¬π.- x))) d
   
 w .Iso.inv (p@((X' , Y') , _) , d) = p ‚ÑùS¬π.+ x ,
   isTrans‚â°<·µ£ _ _ _ ((cong‚ÇÇ cartDist¬≤ (cong fst (sym (‚ÑùS¬π.+IdL _)) ) refl
    ‚àô sym (rotationEquivPresDist circle0 p x))) d 
 w .Iso.rightInv _ = Œ£‚â°Prop (Œª _ ‚Üí isProp<·µ£ _ _)
                 (sym (‚ÑùS¬π.+Assoc _ x (‚ÑùS¬π.- x))
                   ‚àô cong (_ ‚ÑùS¬π.+_) (‚ÑùS¬π.+InvR _) ‚àô ‚ÑùS¬π.+IdR _)
 w .Iso.leftInv _ = Œ£‚â°Prop (Œª _ ‚Üí isProp<·µ£ _ _)
                 (sym (‚ÑùS¬π.+Assoc _ (‚ÑùS¬π.- x) x)
                   ‚àô cong (_ ‚ÑùS¬π.+_) (‚ÑùS¬π.+InvL _) ‚àô ‚ÑùS¬π.+IdR _)


openHalfCircleIso : Iso
                     (Œ£ _ (_‚àà ointerval‚Ñô (-·µ£ (rat [ 1 / 4 ])) (rat [ 1 / 4 ])))
                     (Œ£ distCircle Œª ((_ , y) , _) ‚Üí 0 <·µ£ y)
openHalfCircleIso = w
 where
 f : ‚àÄ x ‚Üí  x ‚àà ointerval‚Ñô (-·µ£ (rat [ 1 / 4 ])) (rat [ 1 / 4 ]) ‚Üí
      rat [ pos 0 / 1+ 0 ] <·µ£
      cos
       (x ¬∑·µ£ (rat [ pos 2 , (1+ 0) ]/ ¬∑·µ£
        (rat [ pos 2 , (1+ 0) ]/ ¬∑·µ£ œÄ-number/2))) 
 f x x‚àà = ‚à£x‚à£<œÄ/2‚Üí0<cos[x] _
    (subst2 (Œª a b ‚Üí
      x ¬∑·µ£ a
      ‚àà ointerval‚Ñô (-·µ£ b) b )
      (cong‚ÇÇ _¬∑·µ£_ (rat¬∑·µ£rat _ _) refl ‚àô sym (¬∑·µ£Assoc _ _ _) )
      ( (¬∑·µ£Assoc _ _ _) ‚àô ùêë'.¬∑IdL' _ _ (sym (rat¬∑·µ£rat _ _) ‚àô dec‚Ñö‚â°·µ£?))
      (scale-sym-ointerval‚Ñô (rat [ 1 / 4  ]) (4 ‚Çä¬∑·µ£ œÄ-number/2‚Çä) x x‚àà))

 inv‚àà : ‚àÄ x y ‚Üí cartNorm¬≤ (x , y) ‚â° rat [ pos 1 / 1+ 0 ]
       ‚Üí 0 <·µ£ y ‚Üí ‚àÄ x‚àà ‚Üí  arcSin‚ü®‚ü© x x‚àà ¬∑·µ£ fst (inv‚Ñù‚Çä (œÄ-number/2‚Çä ‚Çä¬∑·µ£ 4)) ‚àà
      ointerval‚Ñô (-·µ£ rat [ 1 / 4 ]) (rat [ 1 / 4 ])
 inv‚àà x y p 0<y x‚àà =
   subst {x = fst œÄ-number/2‚Çä ¬∑·µ£
                 fst
                 (inv‚Ñù‚Çä
                  ((œÄ-number/2 , œÄ-number/2‚Çä .snd) ‚Çä¬∑·µ£
                   (rat (4 .fst) , ‚Ñö‚Çä‚Üí‚Ñù‚Çä 4 .snd)))}
      {y = fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä 4))}
      (Œª b ‚Üí
      arcSin‚ü®‚ü© x x‚àà ¬∑·µ£ fst (inv‚Ñù‚Çä (œÄ-number/2‚Çä ‚Çä¬∑·µ£ 4))
      ‚àà ointerval‚Ñô (-·µ£ b) b )
        (cong‚ÇÇ _¬∑·µ£_ refl (¬∑inv‚Ñù‚Çä _ _)
        ‚àô ¬∑·µ£Assoc _ _ _ ‚àô
         cong‚ÇÇ _¬∑·µ£_ (x¬∑inv‚Ñù‚Çä[x] œÄ-number/2‚Çä ) (inv‚Ñù‚Çä-rat 4) ‚àô ¬∑IdL _)
         (scale-sym-ointerval‚Ñô (fst œÄ-number/2‚Çä) (inv‚Ñù‚Çä (œÄ-number/2‚Çä ‚Çä¬∑·µ£ 4 ))
         (arcSin‚ü®‚ü© x x‚àà) (arcSin‚ü®‚ü©‚àà x x‚àà))

 w : Iso _ _
 w .Iso.fun (t , t‚àà) = Circle‚ÜídistCircle (injCircle t) , f t t‚àà
 w .Iso.inv (((x , y) , p) , 0<y) =
  arcSin‚ü®‚ü© x x‚àà ¬∑·µ£ fst (inv‚Ñù‚Çä (œÄ-number/2‚Çä ‚Çä¬∑·µ£ 4)) , inv‚àà x y p 0<y x‚àà
  
       
  where
   x‚àà : x ‚àà ointerval‚Ñô -1 1
   x‚àà = subst (Œª b ‚Üí x ‚àà ointerval‚Ñô b 1)
     (-·µ£-rat 1)
      (abs<‚Üíointerval x 1
        (x¬≤<1‚Üí‚à£x‚à£<1 _ (isTrans<‚â°·µ£ _ _ _
          (isTrans‚â°<·µ£ _ _ _ 
            (x^¬≤=x¬∑x x ‚àô sym (+IdR _))
            (<·µ£-o+ _ _ (x ¬∑·µ£ x) (snd ((y , 0<y) ‚Çä¬∑·µ£ (y , 0<y))))
            )
          p)))


 w .Iso.rightInv (((x , y) , p) , 0<y) = Œ£‚â°Prop (Œª _ ‚Üí isProp<·µ£ _ _)
   (distCircle‚â° p-sin (
      cong fst (invEq (congEquiv {x = _ , f _ (inv‚àà x y p 0<y _)}
       {_ , 0<y} (_ , isEquiv-‚Çä^‚Åø 2))
       (‚Ñù‚Çä‚â° $ (x^¬≤=x¬∑x _ ‚àô
         cos¬∑cos=1-sin¬∑sin œÜ) ‚àô‚àô  cong (_-·µ£_ 1)
        (cong‚ÇÇ _¬∑·µ£_ p-sin p-sin)
       
        ‚àô sym (cong (_-·µ£ (x ¬∑·µ£ x))
         ( (+·µ£Comm _ _ ‚àô p))) ‚àô  (ùêë'.plusMinus _ _)
         ‚àô‚àô sym (x^¬≤=x¬∑x y) ))))
  where
   œÜ = _
   p-sin : sin œÜ ‚â° _
   p-sin = (cong sin (cong‚ÇÇ _¬∑·µ£_ refl (
     (¬∑·µ£Assoc _ _ _ ‚àô cong‚ÇÇ _¬∑·µ£_ (sym (rat¬∑·µ£rat _ _)) refl)
    ‚àô ¬∑·µ£Comm _ _ )
     ‚àô [x/‚Çäy]¬∑y·µ£ _ (œÄ-number/2‚Çä ‚Çä¬∑·µ£ 4)) ‚àô
           sin‚àòarcSin‚ü®‚ü© _ _)
 w .Iso.leftInv (t , t‚àà) =
  Œ£‚â°Prop
      (‚àà-isProp (ointerval‚Ñô (-·µ£ (rat [ 1 / 4 ])) (rat [ 1 / 4 ])))
       (cong‚ÇÇ _¬∑·µ£_ (arcSin‚ü®‚ü©‚àòsin _ _
        ((subst2 (Œª a b ‚Üí
      t ¬∑·µ£ a
      ‚àà ointerval‚Ñô (-·µ£ b) b )
      (cong‚ÇÇ _¬∑·µ£_ (rat¬∑·µ£rat _ _) refl ‚àô sym (¬∑·µ£Assoc _ _ _) )
      ( (¬∑·µ£Assoc _ _ _) ‚àô ùêë'.¬∑IdL' _ _ (sym (rat¬∑·µ£rat _ _) ‚àô dec‚Ñö‚â°·µ£?))
      (scale-sym-ointerval‚Ñô (rat [ 1 / 4  ]) (4 ‚Çä¬∑·µ£ œÄ-number/2‚Çä) t t‚àà))))
        (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° {y = 2 ‚Çä¬∑·µ£ (2 ‚Çä¬∑·µ£ œÄ-number/2‚Çä)}
         (¬∑·µ£Comm _ _
         ‚àô cong‚ÇÇ _¬∑·µ£_ (rat¬∑·µ£rat _ _) refl ‚àô sym (¬∑·µ£Assoc _ _ _))))
         ‚àô [x¬∑y·µ£]/‚Çäy _ _)





record MetricSpaceStr {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where

  constructor metricSpaceStr

  field
   is-set : isSet A
   ùëë[_,_] : A ‚Üí A ‚Üí ‚Ñù
   ùëë-nonNeg : ‚àÄ x y ‚Üí 0 ‚â§·µ£ ùëë[ x , y ]
   ùëë-sym : ‚àÄ x y ‚Üí ùëë[ x , y ] ‚â° ùëë[ y , x ]
   ùëë-pos : ‚àÄ x y ‚Üí (0 <·µ£ ùëë[ x , y ]) ‚Üí x ‚â° y ‚Üí ‚ä•
   ùëë-zero‚Üí‚â° : ‚àÄ x y ‚Üí 0 ‚â° ùëë[ x , y ] ‚Üí x ‚â° y
   ùëë-‚â°‚Üízero : ‚àÄ x y ‚Üí x ‚â° y ‚Üí 0 ‚â° ùëë[ x , y ]
   ùëë-triangle : ‚àÄ x y z ‚Üí ùëë[ x , z ] ‚â§·µ£ ùëë[ x , y ] +·µ£ ùëë[ y , z ]
   
MetricSpace : ‚àÄ ‚Ñì ‚Üí Type (‚Ñì-suc ‚Ñì)
MetricSpace ‚Ñì = TypeWithStr ‚Ñì MetricSpaceStr

MetricSpace‚ÇÄ = MetricSpace ‚Ñì-zero

‚ÑùMetricSpace : MetricSpace‚ÇÄ
‚ÑùMetricSpace .fst = ‚Ñù
‚ÑùMetricSpace .snd .MetricSpaceStr.is-set = isSet‚Ñù
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë[_,_] x y = abs·µ£ (x -·µ£ y)
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-nonNeg _ _ = 0‚â§abs·µ£ _
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-sym = minusComm-abs·µ£
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-pos _ _ 0<d x=y =
  ‚â§·µ£‚Üí‚âØ·µ£ (abs·µ£ _) 0
   (‚â°·µ£Weaken‚â§·µ£ _ _ (cong abs·µ£ (ùêë'.+InvR' _ _ x=y) ‚àô abs·µ£0)) 0<d
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-zero‚Üí‚â° _ _ 0=d =
  ùêë'.equalByDifference _ _ (abs·µ£x=0‚Üíx=0 _ (sym 0=d))
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-‚â°‚Üízero _ _ 0=d =
  sym abs·µ£0 ‚àô cong abs·µ£ (sym (ùêë'.+InvR' _ _ 0=d))
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-triangle = abs·µ£-triangle-midpt

MetricSubSpace : ‚àÄ {‚Ñì} (A : Type ‚Ñì) ‚Üí (P : ‚Ñô A)
  ‚Üí MetricSpaceStr A
  ‚Üí MetricSpaceStr (Œ£ A (_‚àà P))
MetricSubSpace A P msp = w
 where
 open MetricSpaceStr msp
 w : MetricSpaceStr (Œ£ A (_‚àà P))
 w .MetricSpaceStr.is-set = isSetŒ£ is-set (isProp‚ÜíisSet ‚àò ‚àà-isProp P)
 w .ùëë[_,_] (x , _) (y , _) = ùëë[ x , y ] 
 w .ùëë-nonNeg _ _ = ùëë-nonNeg _ _
 w .ùëë-sym _ _ = ùëë-sym _ _
 w .ùëë-pos _ _ 0<d = ùëë-pos _ _ 0<d ‚àò cong fst
 w .ùëë-zero‚Üí‚â° _ _ 0=d = Œ£‚â°Prop (‚àà-isProp P) (ùëë-zero‚Üí‚â° _ _ 0=d)
 w .ùëë-‚â°‚Üízero _ _ = ùëë-‚â°‚Üízero _ _ ‚àò cong fst
 w .ùëë-triangle _ _ _ = ùëë-triangle _ _ _


IsUContMap : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'}
         (AM : MetricSpaceStr A) (f : A ‚Üí B) (BM : MetricSpaceStr B)
         ‚Üí Type ‚Ñì
IsUContMap AM f BM =
 ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ Œ¥ ‚àà ‚Ñö‚Çä ]
   ‚àÄ x y ‚Üí AM.ùëë[ x , y ] <·µ£ rat (fst Œ¥)
         ‚Üí BM.ùëë[ f x , f y ] <·µ£ rat (fst Œµ)
 where
    module AM = MetricSpaceStr AM
    module BM = MetricSpaceStr BM

UContMap : ‚àÄ {‚Ñì ‚Ñì'} ‚Üí MetricSpace ‚Ñì ‚Üí MetricSpace ‚Ñì' ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
UContMap (_ , A) (_ , B) = Œ£ _ Œª f ‚Üí ‚à• IsUContMap A f B ‚à•‚ÇÅ



IntervalMetricSpace : MetricSpace‚ÇÄ
IntervalMetricSpace = _ , MetricSubSpace _  (interval‚Ñô 0 1) (snd ‚ÑùMetricSpace)


0‚â°NonNeg+NonNeg‚Üíboth‚â°0 : ‚àÄ (x y : ‚Ñù‚ÇÄ‚Çä) ‚Üí 0 ‚â° fst x +·µ£ fst y ‚Üí
                          ((fst x ‚â° 0) √ó (fst y ‚â° 0)) 
0‚â°NonNeg+NonNeg‚Üíboth‚â°0 = {!!}

ùêë¬≤MetricSpaceStr : MetricSpaceStr (‚Ñù √ó ‚Ñù)
ùêë¬≤MetricSpaceStr .MetricSpaceStr.is-set = isSet√ó isSet‚Ñù isSet‚Ñù
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë[_,_] x y = fst (root 2 {!!}) --nthcartDist¬≤
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-nonNeg _ _ = {!!}
  -- isTrans‚â°‚â§·µ£ _ _ _ (solve! ‚Ñùring)
  --   (‚â§·µ£Monotone+·µ£ _ _ _ _
  --     (isTrans‚â§‚â°·µ£ _ _ _ (0‚â§·µ£x¬≤ _) (x^¬≤=x¬∑x _))
  --     (isTrans‚â§‚â°·µ£ _ _ _ (0‚â§·µ£x¬≤ _) (x^¬≤=x¬∑x _)))
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-sym = {!!} --cartDis¬≤Comm
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-pos x y 0<D x‚â°y = {!!}
  -- isIrrefl<·µ£ _ (isTrans‚â°<·µ£ _ _ _
  --   (cong (cartDist¬≤ x) (sym x‚â°y) ‚àô solve! ‚Ñùring)
  --   0<D)
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-zero‚Üí‚â° x y 0‚â°d = {!!}
  -- let (p , q) = 0‚â°NonNeg+NonNeg‚Üíboth‚â°0 (_ , 0‚â§x¬∑·µ£x _) (_ , 0‚â§x¬∑·µ£x _) 0‚â°d
  --     p' = ùêë'.equalByDifference _ _ (x¬≤‚â°0‚Üíx‚â°0 _ p)
  --     q' = ùêë'.equalByDifference _ _ (x¬≤‚â°0‚Üíx‚â°0 _ q)
  -- in cong‚ÇÇ _,_ p' q'
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-‚â°‚Üízero x y x‚â°y = {!!}
  -- solve! ‚Ñùring ‚àô cong (cartDist¬≤ x) x‚â°y
ùêë¬≤MetricSpaceStr .MetricSpaceStr.ùëë-triangle x y z = {!!}
  -- isTrans‚â§‚â°·µ£ _ _ _
  --   (‚â§·µ£Monotone+·µ£ _ (((x .fst +·µ£ -·µ£ y .fst) ¬∑·µ£ (x .fst +·µ£ -·µ£ y .fst))
  --     +·µ£
  --     ((y .fst +·µ£ -·µ£ z .fst) ¬∑·µ£ (y .fst +·µ£ -·µ£ z .fst))) _ {!!}
  --     {!!}
  --     {!!})
  --   {!!}


-- distCircleMetricSpaceStr : MetricSpaceStr distCircle 
-- distCircleMetricSpaceStr =
--  MetricSubSpace (‚Ñù √ó ‚Ñù)
--   (Œª z ‚Üí (cartNorm¬≤ z ‚â° 1) , isSet‚Ñù _ _)
--   ùêë¬≤MetricSpaceStr


-- unwindDistCirclePath :
--    (f : IntervalMetricSpace .fst ‚Üí distCircle)
--  ‚Üí IsUContMap (snd IntervalMetricSpace) f distCircleMetricSpaceStr
--  ‚Üí Œ£ ((fst IntervalMetricSpace) ‚Üí ‚Ñù)
--    Œª g ‚Üí ‚àÄ x ‚Üí f x ‚â° f (0 , (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚ÑùS¬π.+
--      Circle‚ÜídistCircle (injCircle (g x)) 
-- unwindDistCirclePath = {!!}
