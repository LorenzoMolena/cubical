{-# OPTIONS --lossy-unification #-}

module Cubical.HITs.CauchyReals.Inverse where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv hiding (_‚ñ†)
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Function
open import Cubical.Functions.FunExtEquiv

import Cubical.Functions.Logic as L

open import Cubical.Algebra.CommRing.Instances.Int

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Bool.Base using () renaming (Bool to ùüö ; true to 1ÃÇ ; false to 0ÃÇ)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Nat.Order.Recursive as OR
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Unit
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Sigma hiding (Path)
open import Cubical.Data.List as L
open import Cubical.Data.List using () renaming (List to ‚ü¶_‚üß)
open import Cubical.Foundations.Interpolate
open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_)

open import Cubical.Data.Rationals using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)

import Cubical.Data.Rationals as ‚Ñö
import Cubical.Data.Rationals.Order as ‚Ñö

open import Cubical.Data.NatPlusOne
open import Cubical.Foundations.Path
open import Cubical.Foundations.CartesianKanOps

open import Cubical.Data.Rationals using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)

import Cubical.Data.Rationals as ‚Ñö
import Cubical.Data.Rationals.Order as ‚Ñö
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö using (inv‚Ñö‚Çä;/2‚Çä;x/2<x;/4‚Çä;inv‚Ñö)

open import Cubical.Data.NatPlusOne
open import Cubical.Foundations.Path
open import Cubical.Foundations.CartesianKanOps


import Agda.Builtin.Reflection as R
open import Cubical.Reflection.Base


import Cubical.Algebra.CommRing as CR

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication

import Cubical.Algebra.CommRing as CR
import Cubical.Algebra.Ring as RP


R‚Ñù = (CR.CommRing‚ÜíRing
               (_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù))
-- module CR‚Ñù = ?

module ùêë = CR.CommRingTheory (_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù)
module ùêë' = RP.RingTheory R‚Ñù

module ùêê' = RP.RingTheory (CR.CommRing‚ÜíRing ‚ÑöCommRing)

module Lùêë = Lems ((_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù))


Inv·µ£-restr‚Ñö : (Œ∑ : ‚Ñö‚Çä) ‚Üí
  Œ£ (‚Ñö ‚Üí ‚Ñö) (Lipschitz-‚Ñö‚Üí‚Ñö (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))

Inv·µ£-restr‚Ñö Œ∑ = f ,
  Lipschitz-‚Ñö‚Üí‚Ñö'‚ÜíLipschitz-‚Ñö‚Üí‚Ñö _ _ w
 where

 f = fst ‚àò inv‚Ñö‚Çä ‚àò ‚Ñö.maxWithPos Œ∑

 w : ‚àÄ q r ‚Üí ‚Ñö.abs (f q ‚Ñö.- f r) ‚Ñö.‚â§
      fst (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r)
 w q r =
  let z = cong ‚Ñö.abs (‚Ñö.1/p+1/q (‚Ñö.maxWithPos Œ∑ q) (‚Ñö.maxWithPos Œ∑ r))
           ‚àô ‚Ñö.pos¬∑abs _ _ (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)))
           ‚àô cong (fst (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)) ‚Ñö.¬∑_)
       ((‚Ñö.absComm- _ _))
  in subst (‚Ñö._‚â§ fst (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r))
       (sym z)
         (‚Ñö.‚â§Monotone¬∑-onNonNeg
           (fst (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r))) _ _ _
            (‚Ñö.inv‚Ñö‚Çä‚â§inv‚Ñö‚Çä _ _
              (‚Ñö.‚â§Monotone¬∑-onNonNeg _ _ _ _
                (‚Ñö.‚â§max _ _)
                (‚Ñö.‚â§max _ _)
                (‚Ñö.0‚â§‚Ñö‚Çä Œ∑)
                (‚Ñö.0‚â§‚Ñö‚Çä Œ∑)))
            (‚Ñö.maxDist (fst Œ∑) r q)
            (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)))
            (‚Ñö.0‚â§abs (fst (‚Ñö.maxWithPos Œ∑ q) ‚Ñö.- fst (‚Ñö.maxWithPos Œ∑ r))))

Inv·µ£-restr : (Œ∑ : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))
Inv·µ£-restr Œ∑ = (fromLipschitz (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))
                   (_ , Lipschitz-rat‚àò _ _ (snd (Inv·µ£-restr‚Ñö Œ∑)))


lower‚ÑöBound : ‚àÄ u ‚Üí 0 <·µ£ u ‚Üí ‚àÉ[ Œµ ‚àà ‚Ñö‚Çä ] (rat (fst Œµ) <·µ£ u)
lower‚ÑöBound u x =
  PT.map (Œª (Œµ , (x' , x'')) ‚Üí (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ x')) , x'')
    (dense‚Ñöin‚Ñù 0 u x)

‚â§abs·µ£ : ‚àÄ x ‚Üí x ‚â§·µ£ abs·µ£ x
‚â§abs·µ£ = ‚â°Continuous
  (Œª x ‚Üí max·µ£ x (abs·µ£ x))
  (Œª x ‚Üí abs·µ£ x)
  (cont‚ÇÇmax·µ£ _ _ IsContinuousId IsContinuousAbs·µ£)
  IsContinuousAbs·µ£
  Œª x ‚Üí  cong (max·µ£ (rat x) ‚àò rat) (sym (‚Ñö.abs'‚â°abs x))
     ‚àô‚àô cong rat (‚Ñö.‚â§‚Üímax _ _ (‚Ñö.‚â§abs x)) ‚àô‚àô
     cong rat (‚Ñö.abs'‚â°abs x )

from-abs< : ‚àÄ x y z ‚Üí abs·µ£ (x +·µ£ (-·µ£ y)) <·µ£ z
       ‚Üí (x +·µ£ (-·µ£ y) <·µ£ z)
          √ó ((y +·µ£ (-·µ£ x) <·µ£ z))
            √ó ((-·µ£ y) +·µ£ x <·µ£ z)
from-abs< x y z p = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) p ,
 isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (subst (_<·µ£ z) (minusComm-abs·µ£ x y) p)
   , isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (subst (((_<·µ£ z) ‚àò abs·µ£)) (+·µ£Comm x (-·µ£ y)) p)

open ‚Ñö.HLP

‚àÉrationalApprox‚â§ : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
   ‚àÉ[ q ‚àà ‚Ñö ] (((rat q) +·µ£ (-·µ£ u)) ‚â§·µ£ rat (fst Œµ)) √ó (u ‚â§·µ£ rat q)
‚àÉrationalApprox‚â§ = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop _
 w .Elim‚Ñù-Prop.ratA r Œµ =
  ‚à£  r ‚Ñö.+ fst (/2‚Çä Œµ) ,
   ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
     let zzz : r ‚Ñö.+ (fst (/2‚Çä Œµ) ‚Ñö.+ (‚Ñö.- r)) ‚â° fst (/2‚Çä Œµ)
         zzz = (lem--05 {r} {fst (/2‚Çä Œµ)})
         zz = (subst (‚Ñö._‚â§ fst Œµ) (sym (sym (‚Ñö.+Assoc _ _ _) ‚àô zzz))
            (‚Ñö.<Weaken‚â§ _ _ (x/2<x (Œµ))) )
     in zz)
       , ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§+‚Ñö‚Çä r r (/2‚Çä Œµ) (‚Ñö.isRefl‚â§ r)) ‚à£‚ÇÅ
 w .Elim‚Ñù-Prop.limA x y R Œµ =
   let z = ùï£-lim-dist x y (/4‚Çä Œµ)
   in PT.map (Œª (q , z , z') ‚Üí
        let (_ , Xzz' , Xzz) = from-abs< _ _ _
                     (ùï£-lim-dist x y (/4‚Çä Œµ))

            zz :  (-·µ£ (lim x y)) +·µ£ x (/2‚Çä (/4‚Çä Œµ))   ‚â§·µ£ rat (fst (/4‚Çä Œµ))
            zz = <·µ£Weaken‚â§·µ£ _ _ Xzz
            zz' :  (lim x y) +·µ£ (-·µ£ (x (/2‚Çä (/4‚Çä Œµ))))   ‚â§·µ£ rat (fst (/4‚Çä Œµ))
            zz' = <·µ£Weaken‚â§·µ£ _ _ Xzz'
        in q ‚Ñö.+ fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))  ,
              let zzz = (‚â§·µ£-+o _ _ (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))
                      (‚â§·µ£Monotone+·µ£ _ _ _ _ z zz))
              in subst2 _‚â§·µ£_
                  (cong (_+·µ£ (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ)))))
                    (Lùêë.lem--059 {rat q}
                        {x (/2‚Çä (/4‚Çä Œµ))}
                        { -·µ£ lim x y} ‚àô +·µ£Comm (rat q) (-·µ£ lim x y))
                      ‚àô sym (+·µ£Assoc (-·µ£ lim x y) (rat q)
                     (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))) ‚àô
                       +·µ£Comm (-·µ£ lim x y)
                        (rat q +·µ£ rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))
                         ‚àô cong (_+·µ£ (-·µ£ lim x y))
                           (+·µ£Assoc (rat q) (rat (fst (/2‚Çä Œµ)))
                            (rat (fst (/2‚Çä (/4‚Çä Œµ))))))
                  (cong rat
                   (dist‚Ñö! (fst Œµ) ¬∑[
                        ((ge[ ‚Ñö.[ 1 / 4 ] ]
                               ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ])
                            +ge  ge[ ‚Ñö.[ 1 / 4 ] ]
                            )
                                +ge
                          (ge[ ‚Ñö.[ 1 / 2 ] ]
                            +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                               ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]))
                      ‚â° ge1 ]))
                  zzz
                ,
                 isTrans‚â§·µ£ _ _ _ (subst (_‚â§·µ£ (rat q +·µ£ rat (fst (/4‚Çä Œµ))))
                   Lùêë.lem--05 (‚â§·µ£Monotone+·µ£ _ _ _ _ z' zz'))
                    (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                      (subst (q ‚Ñö.+ fst (/4‚Çä Œµ) ‚Ñö.‚â§_)
                        (‚Ñö.+Assoc _ _ _)
                         (‚Ñö.‚â§-o+ _ _ q dist‚Ñö‚â§!
                          Œµ [ ge[ ‚Ñö.[ 1 / 4 ] ] ‚â§
                          ge[ ‚Ñö.[ 1 / 2 ] ]
                            +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                               ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]) ]) )))
        (R (/2‚Çä (/4‚Çä Œµ)) (/2‚Çä (/4‚Çä Œµ)))
 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ† Œª _ ‚Üí squash‚ÇÅ


‚Ñömax-min-minus : ‚àÄ x y ‚Üí ‚Ñö.max (‚Ñö.- x) (‚Ñö.- y) ‚â° ‚Ñö.- (‚Ñö.min x y)
‚Ñömax-min-minus = ‚Ñö.elimBy‚â§
 (Œª x y p ‚Üí ‚Ñö.maxComm _ _ ‚àô‚àô p ‚àô‚àô cong ‚Ñö.-_ (‚Ñö.minComm _ _))
  Œª x y x‚â§y ‚Üí
    ‚Ñö.maxComm _ _ ‚àô‚àô ‚Ñö.‚â§‚Üímax (‚Ñö.- y) (‚Ñö.- x) (‚Ñö.minus-‚â§ x y x‚â§y)
      ‚àô‚àô cong ‚Ñö.-_ (sym (‚Ñö.‚â§‚Üímin _ _ x‚â§y))


-·µ£‚â§·µ£ : ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí -·µ£ y ‚â§·µ£ -·µ£ x
-·µ£‚â§·µ£ x y p = subst2 _‚â§·µ£_
    (cong (x +·µ£_) (+·µ£Comm _ _) ‚àô
      Lùêë.lem--05 {x} { -·µ£ y}) (Lùêë.lem--05 {y} { -·µ£ x}) (‚â§·µ£-+o _ _ ((-·µ£ x) +·µ£ (-·µ£ y)) p)


-·µ£<·µ£ : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí -·µ£ y <·µ£ -·µ£ x
-·µ£<·µ£ x y = PT.map
  Œª ((q , q') , z , z' , z'') ‚Üí
       (‚Ñö.- q' , ‚Ñö.- q) , -·µ£‚â§·µ£ _ _ z'' , ((‚Ñö.minus-< _ _ z') , -·µ£‚â§·µ£ _ _ z)

‚àÉrationalApprox< : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
   ‚àÉ[ q ‚àà ‚Ñö ] (((rat q) +·µ£ (-·µ£ u)) <·µ£ rat (fst Œµ)) √ó (u <·µ£ rat q)
‚àÉrationalApprox< u Œµ =
  PT.map (uncurry (Œª q (x , x') ‚Üí
     q ‚Ñö.+ (fst (/4‚Çä Œµ))  ,
          subst (_<·µ£ (rat (fst Œµ)))
            (Lùêë.lem--014 {rat q} {u} {rat (fst (/4‚Çä Œµ))})  (
             isTrans‚â§<·µ£ _ _ (rat (fst Œµ)) (‚â§·µ£-+o _ _ (rat (fst (/4‚Çä Œµ))) x)
             (<‚Ñö‚Üí<·µ£ _ _ $
               dist‚Ñö<! Œµ [ ge[ ‚Ñö.[ 1 / 2 ] ]
                 +ge ge[ ‚Ñö.[ 1 / 4 ] ] < ge1 ])) ,
              isTrans‚â§<·µ£ _ _ _ x'
                (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )) ))
            $ ‚àÉrationalApprox‚â§ u (/2‚Çä Œµ)


-- TODO: this is overcomplciated! it follows simply form density...

‚àÉrationalApprox : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
   ‚àÉ[ (q , q') ‚àà (‚Ñö √ó ‚Ñö) ] (q' ‚Ñö.- q ‚Ñö.< fst Œµ) √ó
                           ((rat q <·µ£ u) √ó (u <·µ£ rat q'))
‚àÉrationalApprox u Œµ =
  PT.map2 (uncurry (Œª q (x , x') ‚Üí uncurry (Œª q' (y , y') ‚Üí
      ((‚Ñö.- (q ‚Ñö.+ (fst (/4‚Çä Œµ)))) , q' ‚Ñö.+ (fst (/4‚Çä Œµ))) ,
            let zz = ‚Ñö.‚â§-+o _ _ (fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ))
                      (‚â§·µ£‚Üí‚â§‚Ñö _ _ (subst (_‚â§·µ£
                       (rat (fst (/2‚Çä (/4‚Çä Œµ)))
                      +·µ£ rat (fst (/2‚Çä (/4‚Çä Œµ)))))
                       (Lùêë.lem--059 {rat q} { -·µ£ u} {rat q'} )
                      (‚â§·µ£Monotone+·µ£ _ _ _ _ x y)))
                zzz : (fst (/2‚Çä (/4‚Çä Œµ)) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ)))
                    ‚Ñö.+ (fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ)) ‚Ñö.< fst Œµ
                zzz = dist‚Ñö<! Œµ [
                             (ge[ ‚Ñö.[ 1 / 4 ] ]
                                ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]
                              +ge ge[ ‚Ñö.[ 1 / 4 ] ]
                                ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ] )
                            +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                              +ge ge[ ‚Ñö.[ 1 / 4 ] ]) < ge1 ]
            in ‚Ñö.isTrans‚â§< _ _ _
                   (subst (‚Ñö._‚â§ _)
                    (cong (‚Ñö._+ ((fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ))))
                      (‚Ñö.+Comm q q')
                     ‚àô‚àô ùêê'.+ShufflePairs _ _ _ _
                     ‚àô‚àô cong (_ ‚Ñö.+_) (sym (‚Ñö.-Invol _)))
                    zz)
                    zzz
                 ,
            (subst (rat (‚Ñö.- (q ‚Ñö.+ fst (/4‚Çä Œµ))) <·µ£_) (-·µ£Invol u)
               (-·µ£<·µ£ _ _ $ isTrans‚â§<·µ£ _ _ _ x'
                (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )))
                 , isTrans‚â§<·µ£ _ _ _ y'
                (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )))
     )
     )) (‚àÉrationalApprox‚â§ (-·µ£ u) (/2‚Çä (/4‚Çä Œµ)))
        (‚àÉrationalApprox‚â§ u (/2‚Çä (/4‚Çä Œµ)))



<·µ£-+o-pre : ‚àÄ m n o  ‚Üí m ‚Ñö.< n  ‚Üí (rat m +·µ£ o) <·µ£ (rat n +·µ£ o)
<·µ£-+o-pre m n o m<n =
  PT.rec2 squash‚ÇÅ (Œª (q , x , x') ((q' , q'') , y , y' , y'') ‚Üí
     let x* : (rat q) ‚â§·µ£ rat (fst (/4‚Çä Œî)) +·µ£ ((rat m +·µ£ o))
         x* =  subst (_‚â§·µ£ rat (fst (/4‚Çä Œî)) +·µ£ ((rat m +·µ£ o)))
                (Lùêë.lem--00)
                 (‚â§·µ£-+o _ _
                  ((rat m +·µ£ o)) (<·µ£Weaken‚â§·µ£ _ _ x))

         y* : (rat (fst (/4‚Çä Œî)) +·µ£ (rat m +·µ£ o)) ‚â§·µ£
               (-·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o))))
         y* = subst2 {x = rat (fst (/2‚Çä Œî))
                 +·µ£ (rat m +·µ£ (o +·µ£ (-·µ£ (rat (fst (/4‚Çä Œî))))))}
                _‚â§·µ£_ -- (rat m +·µ£ (o +·µ£ (-·µ£ rat (fst (/4‚Çä Œî)))))
              ((Œª i ‚Üí +·µ£Comm (rat (fst (/2‚Çä Œî)))
                   (+·µ£Assoc (rat m) o (-·µ£ rat (fst (/4‚Çä Œî))) i) i)
                    ‚àô sym (+·µ£Assoc _ _ _) ‚àô
                      cong ((rat m +·µ£ o) +·µ£_)
                        (cong rat (dist‚Ñö! (fst Œî)
                          ¬∑[ ((neg-ge ge[ ‚Ñö.[ 1 / 4 ] ])
                           +ge ge[ ‚Ñö.[ 1 / 2 ] ])
                          ‚â° ge[ ‚Ñö.[ 1 / 4 ] ] ]))
                        ‚àô +·µ£Comm _ _ )
              (+·µ£Assoc _ _ _ ‚àô
                cong (_+·µ£ (o +·µ£ (-·µ£ rat (fst (/4‚Çä Œî)))))
                   (Lùêë.lem--00 {rat n} {rat m}) ‚àô
                    +·µ£Assoc _ _ _ ‚àô
                     (Œª i ‚Üí +·µ£Comm (-·µ£Invol (rat n +·µ£ o) (~ i))
                       (-·µ£ rat (fst (/4‚Çä Œî))) i) ‚àô
                      sym (-·µ£Distr (rat (fst (/4‚Çä Œî))) ((-·µ£ (rat n +·µ£ o)))) )
              (‚â§·µ£-+o _ _ (rat m +·µ£ (o +·µ£ (-·µ£ (rat (fst (/4‚Çä Œî))))))
                (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (x/2<x Œî))))

         z* : -·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o)))
               ‚â§·µ£ ((rat q'))
         z* = subst ((-·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o)))) ‚â§·µ£_)
               (cong (-·µ£_) (sym (+·µ£Assoc (rat q'') (-·µ£ rat q') _)
                   ‚àô Lùêë.lem--05 {rat q''} {(-·µ£ rat q')}) ‚àô
                     -·µ£Invol (rat q'))

                    (-·µ£‚â§·µ£ _ _ (‚â§·µ£Monotone+·µ£ _ _ _ _
                (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ y))
                 (<·µ£Weaken‚â§·µ£ _ _ (-·µ£<·µ£ _ _ y''))))
         z : rat q ‚â§·µ£ rat q'
         z = isTrans‚â§·µ£ _ _ _
              (isTrans‚â§·µ£ _ _ _
                  x* y* ) z*
     in isTrans<·µ£ _ _ _ x'
        (isTrans‚â§<·µ£ _ _ _ z y'))
    (‚àÉrationalApprox< (rat m +·µ£ o) (/4‚Çä Œî))
     ((‚àÉrationalApprox (rat n +·µ£ o) (/4‚Çä Œî)))

 where
 Œî = ‚Ñö.<‚Üí‚Ñö‚Çä m n m<n

<·µ£-+o : ‚àÄ m n o ‚Üí  m <·µ£ n ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ o)
<·µ£-+o m n o = PT.rec squash‚ÇÅ
  Œª ((q , q') , x , x' , x'') ‚Üí
   let y : (m +·µ£ o) ‚â§·µ£ (rat q +·µ£ o)
       y = ‚â§·µ£-+o m (rat q) o x
       y'' : (rat q' +·µ£ o) ‚â§·µ£ (n +·µ£ o)
       y'' = ‚â§·µ£-+o (rat q') n o x''

       y' : (rat q +·µ£ o) <·µ£ (rat q' +·µ£ o)
       y' = <·µ£-+o-pre q q' o x'


   in isTrans<‚â§·µ£ _ _ _ (isTrans‚â§<·µ£ _ _ _ y y') y''

<·µ£-o+ : ‚àÄ m n o ‚Üí  m <·µ£ n ‚Üí (o +·µ£ m) <·µ£ (o +·µ£ n)
<·µ£-o+ m n o = subst2 _<·µ£_ (+·µ£Comm m o) (+·µ£Comm n o) ‚àò <·µ£-+o m n o

<·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m <·µ£ n ‚Üí o <·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
<·µ£Monotone+·µ£ m n o s m<n o<s =
  isTrans<·µ£ _ _ _ (<·µ£-+o m n o m<n) (<·µ£-o+ o s n o<s)

‚â§<·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o <·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
‚â§<·µ£Monotone+·µ£ m n o s m‚â§n o<s =
  isTrans‚â§<·µ£ _ _ _ (‚â§·µ£-+o m n o m‚â§n) (<·µ£-o+ o s n o<s)

<‚â§·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m <·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
<‚â§·µ£Monotone+·µ£ m n o s m<n o‚â§s =
  isTrans<‚â§·µ£ _ _ _ (<·µ£-+o m n o m<n) (‚â§·µ£-o+ o s n o‚â§s)



‚Ñù‚Çä+ : (m : ‚Ñù‚Çä) (n : ‚Ñù‚Çä) ‚Üí 0 <·µ£ (fst m) +·µ£ (fst n)
‚Ñù‚Çä+ (m , <m) (n , <n) = <·µ£Monotone+·µ£ 0 m 0 n <m <n



isAsym<·µ£ : BinaryRelation.isAsym _<·µ£_
isAsym<·µ£ x y =
  PT.rec2 (isProp‚ä•)
   Œª ((q , q') , x , x' , x'')
      ((r , r') , y , y' , y'') ‚Üí
       let q<r = ‚Ñö.isTrans<‚â§ _ _ _ x' (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ x'' y))
           r<q = ‚Ñö.isTrans<‚â§ _ _ _ y' (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ y'' x))
       in ‚Ñö.isAsym< _ _ q<r r<q


_ÔºÉ_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
x ÔºÉ y = (x <·µ£ y) ‚äé (y <·µ£ x)

isPropÔºÉ : ‚àÄ x y ‚Üí isProp (x ÔºÉ y)
isPropÔºÉ x y (inl x‚ÇÅ) (inl x‚ÇÇ) = cong inl (squash‚ÇÅ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inl x‚ÇÅ) (inr x‚ÇÇ) = ‚ä•.rec (isAsym<·µ£ _ _ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inr x‚ÇÅ) (inl x‚ÇÇ) = ‚ä•.rec (isAsym<·µ£ _ _ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inr x‚ÇÅ) (inr x‚ÇÇ) = cong inr (squash‚ÇÅ x‚ÇÅ x‚ÇÇ)


ratÔºÉ : ‚àÄ q q' ‚Üí (rat q ÔºÉ rat q') ‚âÉ (q ‚Ñö.# q' )
ratÔºÉ q q' = propBiimpl‚ÜíEquiv (isPropÔºÉ _ _) (‚Ñö.isProp# _ _)
  (‚äé.map (<·µ£‚Üí<‚Ñö _ _) (<·µ£‚Üí<‚Ñö _ _))
  (‚äé.map (<‚Ñö‚Üí<·µ£ _ _) (<‚Ñö‚Üí<·µ£ _ _))


decCut : ‚àÄ x ‚Üí 0 <·µ£ (abs·µ£ x) ‚Üí (0 ÔºÉ x)
decCut x 0<absX =
  PT.rec (isPropÔºÉ 0 x)
    (Œª (Œî , Œî<absX) ‚Üí
      PT.rec (isPropÔºÉ 0 x)
         (Œª (q , q-x<Œî/2 , x<q) ‚Üí
          let z‚Üí : 0 ‚Ñö.< q ‚Üí 0 <·µ£ x
              z‚Üí 0<q =
                let zzz : rat q <·µ£ rat (fst (/2‚Çä Œî)) ‚Üí
                            0 <·µ£ x
                    zzz q<Œî/2 =
                      let zzz' =
                           subst2 _‚â§·µ£_
                             (cong abs·µ£ (Lùêë.lem--05 {rat q} {x}))
                               (cong‚ÇÇ _+·µ£_
                                 (abs·µ£NonNeg _
                                      (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                                         (‚Ñö.<Weaken‚â§ 0 q 0<q )))
                                  (minusComm-abs·µ£ _ _ ‚àô
                                       abs·µ£NonNeg _
                                         (subst (_‚â§·µ£ (rat q +·µ£ (-·µ£ x)))
                                           (+-·µ£ x) (‚â§·µ£-+o _ _ (-·µ£ x)
                                          (<·µ£Weaken‚â§·µ£ _ _ x<q)))))
                              (abs·µ£-triangle (rat q) (x +·µ£ (-·µ£ (rat q))))
                          zzzz' = subst (abs·µ£ x <·µ£_) (cong rat
                               (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œî)))
                             (isTrans‚â§<·µ£ _ _ _ zzz'
                                     (<·µ£Monotone+·µ£
                                       _ _ _ _ q<Œî/2 q-x<Œî/2))
                      in ‚ä•.rec (isAsym<·µ£ _ _ Œî<absX zzzz')
                in ‚äé.rec
                    (Œª Œî‚â§q ‚Üí
                       subst2 _<·µ£_
                          (+-·µ£ (rat (fst (/2‚Çä Œî))))
                          ((cong (rat q +·µ£_) (-·µ£Distr (rat q) (-·µ£ x))
                             ‚àô (Œª i ‚Üí +·µ£Assoc (rat q) (-·µ£ (rat q))
                                (-·µ£Invol x i) i) ‚àô
                              cong (_+·µ£ x) (+-·µ£ (rat q)) ‚àô +IdL x)) --
                          (‚â§<·µ£Monotone+·µ£ (rat (fst (/2‚Çä Œî))) (rat q) _ _
                            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ Œî‚â§q) (-·µ£<·µ£ _ _ q-x<Œî/2)))
                   (zzz ‚àòS <‚Ñö‚Üí<·µ£ _ _ )
                    (‚Ñö.Dichotomy‚Ñö (fst (/2‚Çä Œî)) q)
              z‚Üê : q ‚Ñö.‚â§ 0 ‚Üí x <·µ£ 0
              z‚Üê q‚â§0 = isTrans<‚â§·µ£ _ _ _ x<q (‚â§‚Ñö‚Üí‚â§·µ£ q 0 q‚â§0)
          in ‚äé.rec (inr ‚àò z‚Üê) (inl ‚àò z‚Üí) (‚Ñö.Dichotomy‚Ñö q 0))
         (‚àÉrationalApprox< x (/2‚Çä Œî)))
     (lower‚ÑöBound _ 0<absX)



ÔºÉ‚âÉ0<dist : ‚àÄ x y ‚Üí x ÔºÉ y ‚âÉ (0 <·µ£ (abs·µ£ (x +·µ£ (-·µ£ y))))
ÔºÉ‚âÉ0<dist x y = propBiimpl‚ÜíEquiv (isPropÔºÉ _ _) squash‚ÇÅ
  (‚äé.rec ((Œª x<y ‚Üí subst (0 <·µ£_) (minusComm-abs·µ£ y x)
                (isTrans<‚â§·µ£ _ _ _ (subst (_<·µ£ (y +·µ£ (-·µ£ x)))
             (+-·µ£ x) (<·µ£-+o _ _ (-·µ£ x) x<y)) (‚â§abs·µ£ _ ))))
         (Œª y<x ‚Üí isTrans<‚â§·µ£ _ _ _ (subst (_<·µ£ (x +·µ£ (-·µ£ y)))
             (+-·µ£ y) (<·µ£-+o _ _ (-·µ£ y) y<x)) (‚â§abs·µ£ _ )))
  (‚äé.rec (inr ‚àòS subst2 _<·µ£_ (+IdL _) Lùêë.lem--00 ‚àòS <·µ£-+o _ _ y)
         (inl ‚àòS subst2 _<·µ£_ Lùêë.lem--05 (+IdR _) ‚àòS <·µ£-o+ _ _ y)
          ‚àòS decCut (x +·µ£ (-·µ£ y)))

-- ÔºÉ‚âÉabs< : ‚àÄ x y ‚Üí abs·µ£ x <·µ£ y ‚âÉ
-- ÔºÉ‚âÉabs< : ?

isSymÔºÉ : BinaryRelation.isSym _ÔºÉ_
isSymÔºÉ _ _ = fst ‚äé-swap-‚âÉ

0ÔºÉ‚Üí0<abs : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí 0 <·µ£ abs·µ£ r
0ÔºÉ‚Üí0<abs r 0ÔºÉr =
  subst (rat 0 <·µ£_) (cong abs·µ£ (+IdR r))
    (fst (ÔºÉ‚âÉ0<dist r 0) (isSymÔºÉ 0 r 0ÔºÉr))

‚â§·µ£-¬∑o : ‚àÄ m n (o : ‚Ñö‚Çä) ‚Üí  m ‚â§·µ£ n ‚Üí (m ¬∑·µ£ rat (fst o) ) ‚â§·µ£ (n ¬∑·µ£ rat (fst o))
‚â§·µ£-¬∑o m n o p = sym (¬∑·µ£MaxDistrPos m n (fst o) (snd o)) ‚àô
  cong (_¬∑·µ£ rat (fst o)) p

‚â§·µ£-o¬∑ : ‚àÄ m n (o : ‚Ñö‚Çä) ‚Üí  m ‚â§·µ£ n ‚Üí (rat (fst o) ¬∑·µ£ m ) ‚â§·µ£ (rat (fst o) ¬∑·µ£ n)
‚â§·µ£-o¬∑ m n o p =
    cong‚ÇÇ max·µ£ (¬∑·µ£Comm _ _ ) (¬∑·µ£Comm _ _ ) ‚àô ‚â§·µ£-¬∑o m n o p ‚àô ¬∑·µ£Comm _ _

-- max‚â§-lem : ‚àÄ x x' ‚Üí x <·µ£ y ‚Üí x' <·µ£ y ‚Üí max·µ£ x x' ‚â§·µ£ x
-- max‚â§-lem x x' y = {!!}

<·µ£‚ÜíŒî : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] rat (fst Œ¥) <·µ£ y +·µ£ (-·µ£ x)
<·µ£‚ÜíŒî x y = PT.map Œª ((q , q') , (a , a' , a'')) ‚Üí
              /2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä q q' a') ,
                let zz = isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ a') a''
                    zz' = -·µ£‚â§·µ£ _ _ a
                    zz'' = ‚â§·µ£Monotone+·µ£ _ _ _ _ a'' zz'
                in isTrans<‚â§·µ£ _ _ _
                       (<‚Ñö‚Üí<·µ£ _ _ (x/2<x (‚Ñö.<‚Üí‚Ñö‚Çä q q' a')))
                       zz''

a<b-c‚áíc<b-a : ‚àÄ a b c ‚Üí a <·µ£ b +·µ£ (-·µ£ c) ‚Üí c <·µ£ b +·µ£ (-·µ£ a)
a<b-c‚áíc<b-a a b c p =
   subst2 _<·µ£_ (Lùêë.lem--05 {a} {c})
                (Lùêë.lem--060 {b} {c} {a})
     (<·µ£-+o _ _ (c +·µ£ (-·µ£ a)) p)

a<b-c‚áía+c<b : ‚àÄ a b c ‚Üí a <·µ£ b +·µ£ (-·µ£ c) ‚Üí a +·µ£ c <·µ£ b
a<b-c‚áía+c<b a b c p =
   subst ((a +·µ£ c) <·µ£_)
        (Lùêë.lem--00 {b} {c})
     (<·µ£-+o _ _ c p)


a-b‚â§c‚áía-c‚â§b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) ‚â§·µ£ c  ‚Üí a +·µ£ (-·µ£ c) ‚â§·µ£ b
a-b‚â§c‚áía-c‚â§b a b c p =
  subst2 _‚â§·µ£_
    (Lùêë.lem--060 {a} {b} {c})
    (Lùêë.lem--05 {c} {b})
     (‚â§·µ£-+o _ _ (b +·µ£ (-·µ£ c)) p)

a-b<c‚áía-c<b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) <·µ£ c  ‚Üí a +·µ£ (-·µ£ c) <·µ£ b
a-b<c‚áía-c<b a b c p =
  subst2 _<·µ£_
    (Lùêë.lem--060 {a} {b} {c})
    (Lùêë.lem--05 {c} {b})
     (<·µ£-+o _ _ (b +·µ£ (-·µ£ c)) p)


a-b<c‚áía<c+b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) <·µ£ c  ‚Üí a <·µ£ c +·µ£ b
a-b<c‚áía<c+b a b c p =
  subst (_<·µ£ (c +·µ£ b))
    (Lùêë.lem--00 {a} {b})
     (<·µ£-+o _ _ b p)

‚â§-o+-cancel : ‚àÄ m n o ‚Üí  o +·µ£ m ‚â§·µ£ o +·µ£ n ‚Üí m ‚â§·µ£ n
‚â§-o+-cancel m n o p =
     subst2 (_‚â§·µ£_) Lùêë.lem--04 Lùêë.lem--04
     (‚â§·µ£-o+ _ _ (-·µ£ o) p)

x‚â§y‚Üí0‚â§y-x : ‚àÄ x y ‚Üí  x ‚â§·µ£ y  ‚Üí 0 ‚â§·µ£ y +·µ£ (-·µ£ x)
x‚â§y‚Üí0‚â§y-x x y p =
  subst (_‚â§·µ£ y +·µ£ (-·µ£ x)) (+-·µ£ x) (‚â§·µ£-+o x y (-·µ£ x) p)

x<y‚Üí0<y-x : ‚àÄ x y ‚Üí  x <·µ£ y  ‚Üí 0 <·µ£ y +·µ£ (-·µ£ x)
x<y‚Üí0<y-x x y p =
  subst (_<·µ£ y +·µ£ (-·µ£ x)) (+-·µ£ x) (<·µ£-+o x y (-·µ£ x) p)

0<y-x‚Üíx<y : ‚àÄ x y ‚Üí 0 <·µ£ y +·µ£ (-·µ£ x) ‚Üí x <·µ£ y
0<y-x‚Üíx<y x y p =
  subst2 (_<·µ£_)
   (+IdL x) (sym (Lùêë.lem--035 {y} {x}))
    (<·µ£-+o 0 (y +·µ£ (-·µ£ x)) x p)



max-lem : ‚àÄ x x' y ‚Üí max·µ£ (max·µ£ x y) (max·µ£ x' y) ‚â° (max·µ£ (max·µ£ x x') y)
max-lem x x' y = max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ y) (max·µ£Comm _ _)
  ‚àô sym (max·µ£Assoc _ _ _) ‚àô
    cong (max·µ£ x') (sym (max·µ£Assoc _ _ _)¬†‚àô cong (max·µ£ x) (max·µ£Idem y))
     ‚àô max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ y) (max·µ£Comm _ _)



min·µ£Idem : ‚àÄ x ‚Üí min·µ£ x x ‚â° x
min·µ£Idem = ‚â°Continuous _ _
  (cont‚ÇÇmin·µ£ _ _ IsContinuousId IsContinuousId)
  IsContinuousId
  (cong rat ‚àò ‚Ñö.minIdem)


min-lem : ‚àÄ x x' y ‚Üí min·µ£ (min·µ£ x y) (min·µ£ x' y) ‚â° (min·µ£ (min·µ£ x x') y)
min-lem x x' y = min·µ£Assoc _ _ _ ‚àô cong (flip min·µ£ y) (min·µ£Comm _ _)
  ‚àô sym (min·µ£Assoc _ _ _) ‚àô
    cong (min·µ£ x') (sym (min·µ£Assoc _ _ _)¬†‚àô cong (min·µ£ x) (min·µ£Idem y))
     ‚àô min·µ£Assoc _ _ _ ‚àô cong (flip min·µ£ y) (min·µ£Comm _ _)


max‚â§-lem : ‚àÄ x x' y ‚Üí x ‚â§·µ£ y ‚Üí x' ‚â§·µ£ y ‚Üí max·µ£ x x' ‚â§·µ£ y
max‚â§-lem x x' y p p' =
  sym (max-lem _ _ _)
   ‚àô‚àô cong‚ÇÇ max·µ£ p p' ‚àô‚àô max·µ£Idem y

max<-lem : ‚àÄ x x' y ‚Üí x <·µ£ y ‚Üí x' <·µ£ y ‚Üí max·µ£ x x' <·µ£ y
max<-lem x x' y = PT.map2
  Œª ((q , q') , (a , a' , a''))
    ((r , r') , (b , b' , b'')) ‚Üí
     (‚Ñö.max q r , ‚Ñö.max q' r') ,
       (max‚â§-lem _ _ (rat (‚Ñö.max q r))
         (isTrans‚â§·µ£ _ _ _ a (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max q r)))
         ((isTrans‚â§·µ£ _ _ _ b (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' q r)))) ,
          (‚Ñö.<MonotoneMax‚Ñö _ _ _ _ a' b' , max‚â§-lem _ _ _ a'' b''))

minDistMax·µ£ : ‚àÄ x y y' ‚Üí
  max·µ£ x (min·µ£ y y') ‚â° min·µ£ (max·µ£ x y) (max·µ£ x y')
minDistMax·µ£ x y y' = ‚â°Continuous _ _
   (IsContinuousMaxR _)
   (cont‚ÇÇmin·µ£ _ _ (IsContinuousMaxR _) (IsContinuousMaxR _))
   (Œª xR ‚Üí
     ‚â°Continuous _ _
       (IsContinuous‚àò _ _ (IsContinuousMaxL (rat xR)) ((IsContinuousMinR y')))
       (IsContinuous‚àò _ _ (IsContinuousMinR _) (IsContinuousMaxL (rat xR)))
       (Œª yR ‚Üí
         ‚â°Continuous _ _
           (IsContinuous‚àò _ _ (IsContinuousMaxL (rat xR))
             ((IsContinuousMinL (rat yR))))
           (IsContinuous‚àò _ _ (IsContinuousMinL (max·µ£ (rat xR) (rat yR)))
             (IsContinuousMaxL (rat xR)))
           (cong rat ‚àò ‚Ñö.minDistMax xR yR ) y')
       y)
   x


‚â§max·µ£ : ‚àÄ m n ‚Üí  m ‚â§·µ£ max·µ£ m n
‚â§max·µ£ m n = max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ n) (max·µ£Idem m)

‚â§min-lem : ‚àÄ x y y' ‚Üí x ‚â§·µ£ y ‚Üí x ‚â§·µ£ y' ‚Üí  x ‚â§·µ£ min·µ£ y y'
‚â§min-lem x y y' p p' =
   minDistMax·µ£ x y y' ‚àô cong‚ÇÇ min·µ£ p p'


<min-lem : ‚àÄ x x' y ‚Üí y <·µ£ x ‚Üí y <·µ£ x' ‚Üí  y <·µ£ min·µ£ x x'
<min-lem x x' y = PT.map2
  Œª ((q , q') , (a , a' , a''))
    ((r , r') , (b , b' , b'')) ‚Üí
     (‚Ñö.min q r , ‚Ñö.min q' r') , ‚â§min-lem _ _ _ a b
        , ‚Ñö.<MonotoneMin‚Ñö _ _ _ _ a' b' ,
            ‚â§min-lem (rat (‚Ñö.min q' r')) x x'
             (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ q' r')) a'')
             (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' q' r')) b'')




‚Ñù‚Çämin : (m : ‚Ñù‚Çä) (n : ‚Ñù‚Çä) ‚Üí 0 <·µ£ min·µ£ (fst m) (fst n)
‚Ñù‚Çämin (m , <m) (n , <n) = <min-lem m n 0 <m <n


inv‚Ñù'' : Œ£ (‚àÄ r ‚Üí ‚àÉ[ œÉ ‚àà ‚Ñö‚Çä ] (rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù)
      Œª _ ‚Üí Œ£ (‚àÄ r ‚Üí 0 <·µ£ r ‚Üí ‚Ñù) (IsContinuousWithPred (Œª r ‚Üí _ , squash‚ÇÅ))
inv‚Ñù'' = f , (Œª r 0<r ‚Üí f r (lower‚ÑöBound r 0<r)) ,
   ctnF

 where

 2co : ‚àÄ œÉ œÉ' r
    ‚Üí (rat (fst œÉ ) <·µ£ r)
    ‚Üí (rat (fst œÉ') <·µ£ r)
    ‚Üí fst (Inv·µ£-restr œÉ) r ‚â° fst (Inv·µ£-restr œÉ') r

 2co œÉ œÉ' = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop _
  w .Elim‚Ñù-Prop.ratA x œÉ<x œÉ'<x =
    cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.‚â§‚Üímax _ _ (‚â§·µ£‚Üí‚â§‚Ñö _  _ (<·µ£Weaken‚â§·µ£ _ _ œÉ<x))
           ‚àô sym (‚Ñö.‚â§‚Üímax _ _ (‚â§·µ£‚Üí‚â§‚Ñö _  _ (<·µ£Weaken‚â§·µ£ _ _ œÉ'<x))) ))
  w .Elim‚Ñù-Prop.limA x y R œÉ<limX œÉ'<limX = eq‚Ñù _ _ Œª Œµ ‚Üí
    PT.rec (isProp‚àº _ _ _)
      (Œª (q , œÉ‚äî<q , q<limX) ‚Üí
       let
           œÜ*Œµ = (((inv‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                                   ‚Ñö‚Çä¬∑ Œµ))


           œÜ*œÉ = (/2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q)))

           œÜ* : ‚Ñö‚Çä
           œÜ* = ‚Ñö.min‚Çä (/2‚Çä œÜ*Œµ) œÜ*œÉ



           limRestr'' : rat (fst œÜ*)
               ‚â§·µ£ (rat q +·µ£ (-·µ£ rat (fst œÉ‚äî))) ¬∑·µ£ rat [ 1 / 2 ]
           limRestr'' =
             let zz = ((‚Ñö.min‚â§'
                    ((fst (/2‚Çä ((inv‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                                   ‚Ñö‚Çä¬∑ Œµ))))
                                    (fst (/2‚Çä
                             (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q))
                          ))))
             in subst (rat (fst œÜ*) ‚â§·µ£_)
                (rat¬∑·µ£rat _ _)
                  (‚â§‚Ñö‚Üí‚â§·µ£ (fst œÜ*)
                    (fst (/2‚Çä
                             (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q))
                          )) zz)


           limRestr' : rat (fst œÜ* ‚Ñö.+ fst œÜ*)
               ‚â§·µ£ (lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî)))
           limRestr' =
             let zz : ((rat q +·µ£ (-·µ£ rat (fst œÉ‚äî)))) ‚â§·µ£
                        ((lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî))) )
                 zz = ‚â§·µ£-+o (rat q) (lim x y) (-·µ£ rat (fst œÉ‚äî))
                          (<·µ£Weaken‚â§·µ£ _ _ q<limX)
             in  subst2 _‚â§·µ£_
                  (sym (rat¬∑·µ£rat _ _) ‚àô
                   cong rat (dist‚Ñö! (fst œÜ*) ¬∑[ ge[ 2 ]  ‚â° ge1 +ge ge1 ]))
                    (sym (¬∑·µ£Assoc _ _ _) ‚àô‚àô
                      cong ((lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî))) ¬∑·µ£_)
                       (sym (rat¬∑·µ£rat _ _)
                         ‚àô (cong rat (ùüö.toWitness {Q = ‚Ñö.discrete‚Ñö
                           ([ 1 / 2 ] ‚Ñö.¬∑ 2) 1} tt))) ‚àô‚àô
                      ¬∑IdR _ )
                   (‚â§·µ£-¬∑o _ _ 2 (isTrans‚â§·µ£ _ _ _
                   limRestr'' (‚â§·µ£-¬∑o _ _ ([ 1 / 2 ] , _) zz)))


           limRestr : rat (fst œÉ‚äî)
               ‚â§·µ£ ((lim x y +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))))
           limRestr = subst2 _‚â§·µ£_
             (Lùêë.lem--00 {rat (fst œÉ‚äî)} {(rat (fst œÜ*) +·µ£ rat (fst œÜ*))})
               (Lùêë.lem--061
                 {rat (fst œÉ‚äî)} {rat (fst œÜ* ‚Ñö.+ fst œÜ*)} {lim x y} )
             (‚â§·µ£-o+ _ _
               (rat (fst œÉ‚äî) +·µ£ (-·µ£ (rat (fst œÜ* ‚Ñö.+ fst œÜ*))))
                 limRestr')

           ‚à£x-limX‚à£ : (lim x y +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))) <·µ£ x œÜ*

           ‚à£x-limX‚à£ =
             let zz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                  (subst (_<·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))
                   (minusComm-abs·µ£ _ _)
                   (fst (‚àº‚âÉabs<Œµ _ _ (œÜ* ‚Ñö‚Çä+ œÜ*))
                   $ ùï£-lim-self x y œÜ* œÜ*))
             in subst2 _<·µ£_ (Lùêë.lem--060 {lim x y} {x œÜ*}
                           {rat (fst œÜ* ‚Ñö.+ fst œÜ*)})
                  (Lùêë.lem--05 {rat (fst œÜ* ‚Ñö.+ fst œÜ*)} {x œÜ*})
                   (<·µ£-+o _ _ (x œÜ* +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))) zz)



           œÜ : ‚Ñö‚Çä
           œÜ = (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*
           œÜ' : ‚Ñö‚Çä
           œÜ' = (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*
           œÉ‚äî<XœÜ* : rat (fst œÉ‚äî) <·µ£ x œÜ*
           œÉ‚äî<XœÜ* = isTrans‚â§<·µ£ _ _ _ limRestr ‚à£x-limX‚à£
           œÉ<XœÜ* : rat (fst œÉ) <·µ£ x œÜ*
           œÉ<XœÜ* = isTrans‚â§<·µ£ _ _ _
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max (fst œÉ) (fst œÉ'))) œÉ‚äî<XœÜ*
           œÉ'<XœÜ* : rat (fst œÉ') <·µ£ x œÜ*
           œÉ'<XœÜ* = isTrans‚â§<·µ£ _ _ _
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' (fst œÉ) (fst œÉ'))) œÉ‚äî<XœÜ*

           preŒµ'< :  (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*))
                                    ‚Ñö.‚â§ fst (/2‚Çä Œµ)
           preŒµ'< = subst2 ‚Ñö._‚â§_
             (‚Ñö.¬∑DistR+ _ _ (fst œÜ*)) (
                cong (fst (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ) ‚Ñö‚Çä+ inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö.¬∑_)
                   (sym (‚Ñö.¬∑Assoc _ _ _))
                 ‚àô ‚Ñö.y¬∑[x/y] ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))) (fst (/2‚Çä Œµ)) )
               (‚Ñö.‚â§-o¬∑ _ _ (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                              (‚Ñö.0‚â§‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                             (
                               (‚Ñö.min‚â§ (fst (/2‚Çä œÜ*Œµ)) (fst œÜ*œÉ))))

           Œµ'< : 0< (fst Œµ ‚Ñö.- (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*)))
           Œµ'< = snd (‚Ñö.<‚Üí‚Ñö‚Çä (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*))
                                    (fst Œµ)
              (‚Ñö.isTrans‚â§< _ _ _ preŒµ'< (x/2<x Œµ)))


           œÜ= = ‚Ñö‚Çä‚â° {œÜ*} $ sym (‚Ñö.[y¬∑x]/y (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) (fst œÜ*))

           œÜ'= = ‚Ñö‚Çä‚â° {œÜ*} $ sym (‚Ñö.[y¬∑x]/y (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) (fst œÜ*))


           R' : _
           R' = invEq (‚àº‚âÉ‚â° _ _) (R œÜ* œÉ<XœÜ* œÉ'<XœÜ* )
             ((fst Œµ ‚Ñö.- (fst œÜ ‚Ñö.+ fst œÜ')) , Œµ'<)


       in (lim-lim _ _ Œµ œÜ œÜ' _ _ Œµ'<
                (((cong ((fst (Inv·µ£-restr œÉ)) ‚àò x) (œÜ=))
                   subst‚àº[ refl ] (cong ((fst (Inv·µ£-restr œÉ')) ‚àò x)
                     (œÜ'=))) R')))
      (dense‚Ñöin‚Ñù (rat (fst œÉ‚äî)) (lim x y) œÉ‚äî<limX)
   where
   œÉ‚äî = ‚Ñö.max‚Çä œÉ œÉ'

   œÉ‚äî<limX : rat (fst œÉ‚äî) <·µ£ lim x y
   œÉ‚äî<limX = max<-lem (rat (fst œÉ)) (rat (fst œÉ'))
      (lim x y) œÉ<limX œÉ'<limX


  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _

 f' : ‚àÄ r ‚Üí Œ£ ‚Ñö‚Çä (Œª œÉ ‚Üí rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù
 f' r (œÉ , œÉ<) = fst (Inv·µ£-restr œÉ) r

 f : ‚àÄ r ‚Üí ‚àÉ[ œÉ ‚àà ‚Ñö‚Çä ] (rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù
 f r = PT.rec‚ÜíSet {B = ‚Ñù} isSet‚Ñù (f' r)
          Œª (œÉ , œÉ<r) (œÉ' , œÉ'<r) ‚Üí 2co œÉ œÉ' r œÉ<r œÉ'<r


 ctnF : ‚àÄ u Œµ u‚àà ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
                 (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí
                  f u (lower‚ÑöBound u u‚àà) ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚ààP))
 ctnF u Œµ u‚àà = ctnF' (lower‚ÑöBound u u‚àà)

  where
  ctnF' : ‚àÄ uu ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
                 (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí
                  f u uu ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚ààP))
  ctnF' = PT.elim (Œª _ ‚Üí squash‚ÇÅ)
    Œª (œÉ , œÉ<u) ‚Üí
     let zz : ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] ((v‚ÇÅ : ‚Ñù) ‚Üí  u ‚àº[ Œ¥ ] v‚ÇÅ
                      ‚Üí f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] Inv·µ£-restr œÉ .fst v‚ÇÅ)
         zz = Lipschitz‚ÜíIsContinuous (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                 (Œª z ‚Üí Inv·µ£-restr œÉ .fst z)
                 (snd (Inv·µ£-restr œÉ) ) u Œµ

         zz' : ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v v‚àà ‚Üí
                    u ‚àº[ Œ¥ ] v ‚Üí
                  f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚àà))
         zz' = PT.rec2 squash‚ÇÅ
             (uncurry (Œª Œ¥ R (Œ∑ , Œ∑<u-œÉ)  ‚Üí
               let Œ¥' = ‚Ñö.min‚Çä Œ¥ Œ∑
               in ‚à£ Œ¥' ,
                   (Œª v v‚àà ‚Üí
                      PT.elim {P = Œª vv ‚Üí u ‚àº[ Œ¥' ] v ‚Üí
                               f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] f v vv}
                          (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _)
                          (Œª (œÉ' , œÉ'<v) u‚àºv ‚Üí
                             let zuz :  (u +·µ£ (-·µ£ v)) <·µ£ rat (fst Œ∑)
                                 zuz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ (u +·µ£ (-·µ£ v)))
                                    (isTrans<‚â§·µ£ _ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv)
                                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ∑))))

                                 u-Œ∑‚â§v : u +·µ£ (-·µ£ rat (fst Œ∑)) ‚â§·µ£ v
                                 u-Œ∑‚â§v = a-b‚â§c‚áía-c‚â§b _ _ _
                                          (<·µ£Weaken‚â§·µ£ _ _ zuz)
                                 œÉ<u-Œ∑ : rat (fst œÉ) <·µ£ u +·µ£ (-·µ£ rat (fst Œ∑))
                                 œÉ<u-Œ∑ = a<b-c‚áíc<b-a _ _ _ Œ∑<u-œÉ
                                 œÉ<v : rat (fst œÉ) <·µ£ v
                                 œÉ<v = isTrans<‚â§·µ£ _ _ _ œÉ<u-Œ∑ u-Œ∑‚â§v
                             in subst (f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ]_)
                                        (2co œÉ œÉ' v œÉ<v œÉ'<v)
                                        (R v
                                         (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) u‚àºv)))
                          ((lower‚ÑöBound v v‚àà))) ‚à£‚ÇÅ
                          ))
           zz (<·µ£‚ÜíŒî _ _ œÉ<u)
     in zz'

inv‚Ñù' : Œ£ (‚àÄ r ‚Üí 0 <·µ£ r ‚Üí ‚Ñù) (IsContinuousWithPred (Œª r ‚Üí _ , squash‚ÇÅ))
inv‚Ñù' = snd inv‚Ñù''

inv‚Ñù'-rat : ‚àÄ q p' p ‚Üí
             fst inv‚Ñù' (rat q) p ‚â°
              rat (fst (inv‚Ñö‚Çä (q , p')))
inv‚Ñù'-rat q p' p = PT.elim (Œª xx ‚Üí
                       isSet‚Ñù ((fst inv‚Ñù'') (rat q) xx) _)
                        (Œª x ‚Üí cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä)
                        (ww x)) (lower‚ÑöBound (rat q) p)

 where
 ww : ‚àÄ x ‚Üí (‚Ñö.maxWithPos (fst x) q) ‚â° (q , p')
 ww x = ‚Ñö‚Çä‚â° (‚Ñö.‚â§‚Üímax (fst (fst x)) q (‚Ñö.<Weaken‚â§ _ _ (<·µ£‚Üí<‚Ñö _ _ (snd x))))



inv‚Ñù'-pos : ‚àÄ u p ‚Üí
             0 <·µ£ fst inv‚Ñù' u p
inv‚Ñù'-pos u p = PT.rec squash‚ÇÅ
  (Œª (n , u<n) ‚Üí
    PT.rec squash‚ÇÅ
       (Œª (œÉ , X) ‚Üí
         PT.rec squash‚ÇÅ
           (Œª ((q , q'*) , x* , x' , x''*) ‚Üí
             let q' : ‚Ñö
                 q' = ‚Ñö.min q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ]
                 x : q' ‚Ñö.- q ‚Ñö.< fst œÉ
                 x = ‚Ñö.isTrans‚â§< _ _ _ (
                    ‚Ñö.‚â§-+o q' q'* (‚Ñö.- q)
                      (‚Ñö.min‚â§ q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ])) x*
                 x'' : u <·µ£ rat q'
                 x'' = <min-lem _ _ _ x''* (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ u) u<n)


                 0<q' : 0 <·µ£ rat q'
                 0<q' = isTrans<·µ£ _ _ _ p x''
                 z' : rat [ 1 / n ] ‚â§·µ£ inv‚Ñù' .fst (rat q') 0<q'
                 z' = subst (rat [ 1 / n ] ‚â§·µ£_) (sym (inv‚Ñù'-rat q'
                               (‚Ñö.<‚Üí0< q' (<·µ£‚Üí<‚Ñö _ _ 0<q')) 0<q'))
                            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
                             ‚Ñö.inv‚Ñö‚â§inv‚Ñö ([ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n / 1 ] , _)
                               (q' , ‚Ñö.<‚Üí0< q' (<·µ£‚Üí<‚Ñö [ pos 0 / 1 ] q' 0<q'))
                                ((‚Ñö.min‚â§' q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ]))))
                 z : ((inv‚Ñù' .fst (rat q') 0<q') +·µ£ (-·µ£ rat [ 1 / n ]))
                       <·µ£
                       (inv‚Ñù' .fst u p)
                 z = a-b<c‚áía-c<b _ (inv‚Ñù' .fst u p) _
                      (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (fst (‚àº‚âÉabs<Œµ _ _ _)
                      (sym‚àº _ _ _  (X (rat q') 0<q'
                       (sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ (rat q') u œÉ) (
                          isTrans‚â§<·µ£ _ _ _
                            (subst (_‚â§·µ£ ((rat q') +·µ£ (-·µ£ (rat q))))
                              (sym (abs·µ£NonNeg (rat q' +·µ£ (-·µ£ u))
                                (x‚â§y‚Üí0‚â§y-x _ _ (<·µ£Weaken‚â§·µ£ _ _ x''))))
                              (‚â§·µ£-o+ _ _ _ (-·µ£‚â§·µ£ _ _ (<·µ£Weaken‚â§·µ£ _ _ x'))))
                           (<‚Ñö‚Üí<·µ£ _ _ x))))))))

             in isTrans‚â§<·µ£ _ _ _ (x‚â§y‚Üí0‚â§y-x _ _ z') z
             )
           (‚àÉrationalApprox u œÉ))
      (snd inv‚Ñù' u ([ 1 / n ]  , _) p))
  (getClamps u)

sign·µ£ : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
sign·µ£ _ = ‚äé.rec (Œª _ ‚Üí rat 1) (Œª _ ‚Üí rat -1)

0<sign·µ£ : ‚àÄ r 0ÔºÉr ‚Üí 0 <·µ£ r ‚Üí 0 <·µ£ sign·µ£ r 0ÔºÉr
0<sign·µ£ r (inl x) _ = <‚Ñö‚Üí<·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 1} _))
0<sign·µ£ r (inr x) y = ‚ä•.rec (isAsym<·µ£ _ _ x y)

sign·µ£-rat : ‚àÄ r p  ‚Üí sign·µ£ (rat r) p ‚â° rat (‚Ñö.sign r)
sign·µ£-rat r (inl x) = cong rat (sym (fst (‚Ñö.<‚Üísign r) (<·µ£‚Üí<‚Ñö _ _ x)))
sign·µ£-rat r (inr x) = cong rat (sym (snd (snd (‚Ñö.<‚Üísign r)) (<·µ£‚Üí<‚Ñö _ _ x)))

0ÔºÉ‚Çö : ‚Ñù ‚Üí hProp ‚Ñì-zero
0ÔºÉ‚Çö r = 0 ÔºÉ r , isPropÔºÉ _ _

-- HoTT Theorem (11.3.47)
inv‚Ñù : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
inv‚Ñù r 0ÔºÉr = sign·µ£ r 0ÔºÉr ¬∑·µ£ fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)

IsContinuousWithPredSign·µ£ : IsContinuousWithPred 0ÔºÉ‚Çö sign·µ£
IsContinuousWithPredSign·µ£ u Œµ =
 ‚äé.elim
  (Œª 0<u ‚Üí PT.map (Œª (q , 0<q , q<u) ‚Üí
             ((q , ‚Ñö.<‚Üí0< q (<·µ£‚Üí<‚Ñö _ _ 0<q))) ,
              Œª v v‚ààP v‚àºu ‚Üí
                ‚äé.elim {C = Œª v‚ààP ‚Üí sign·µ£ u (inl 0<u) ‚àº[ Œµ ] sign·µ£ v v‚ààP}
                  (Œª _ ‚Üí refl‚àº _ _)
                  (‚ä•.rec ‚àò (isAsym<·µ£ 0 v
                    (subst2 _<·µ£_ (+·µ£Comm _ _ ‚àô +-·µ£ _)
                        (Lùêë.lem--04 {rat q} {v})
                         (<·µ£Monotone+·µ£ _ _ _ _ (-·µ£<·µ£ _ _ q<u)
                       (a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                          (fst (‚àº‚âÉabs<Œµ _ _ _) v‚àºu))))))) v‚ààP)
         (dense‚Ñöin‚Ñù 0 u 0<u))
  (Œª u<0 ‚Üí PT.map (Œª (q , u<q , q<0) ‚Üí
             (‚Ñö.- q , ‚Ñö.<‚Üí0< (‚Ñö.- q) (‚Ñö.minus-< _ _ (<·µ£‚Üí<‚Ñö _ _ q<0))) ,
              Œª v v‚ààP v‚àºu ‚Üí
                ‚äé.elim {C = Œª v‚ààP ‚Üí sign·µ£ u (inr u<0) ‚àº[ Œµ ] sign·µ£ v v‚ààP}
                  ((‚ä•.rec ‚àò (isAsym<·µ£ v 0
                    (subst2 _<·µ£_  (Lùêë.lem--05 {u} {v})
                     (+-·µ£ (rat q)) (<·µ£Monotone+·µ£ _ _ _ _
                       u<q (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                          (fst (‚àº‚âÉabs<Œµ _ _ _) (sym‚àº _ _ _ v‚àºu))))))))
                  (Œª _ ‚Üí refl‚àº _ _) v‚ààP)
             (dense‚Ñöin‚Ñù u 0 u<0))

IsContinuousWithPredInv‚Ñù : IsContinuousWithPred (Œª _ ‚Üí _ , isPropÔºÉ _ _) inv‚Ñù
IsContinuousWithPredInv‚Ñù =
   IsContinuousWP‚àò 0ÔºÉ‚Çö 0ÔºÉ‚Çö _ _ (Œª r x ‚Üí x)
   (cont‚ÇÇ¬∑·µ£WP 0ÔºÉ‚Çö _ _
       IsContinuousWithPredSign·µ£ (IsContinuousWP‚àò _ _
           _ _ 0ÔºÉ‚Üí0<abs (snd inv‚Ñù')
         (AsContinuousWithPred _ _ IsContinuousAbs·µ£)))
     (AsContinuousWithPred _
       _ IsContinuousId)


inv‚Ñù-rat : ‚àÄ q p p' ‚Üí inv‚Ñù (rat q) p ‚â° rat (‚Ñö.inv‚Ñö q p')
inv‚Ñù-rat q p p' =
  cong‚ÇÇ _¬∑·µ£_ (sign·µ£-rat q p) (inv‚Ñù'-rat _ _ _) ‚àô sym (rat¬∑·µ£rat _ _)

-·µ£‚â°[-1¬∑·µ£] : ‚àÄ x ‚Üí -·µ£ x ‚â° (-1) ¬∑·µ£ x
-·µ£‚â°[-1¬∑·µ£] = ‚â°Continuous _ _
   IsContinuous-·µ£
   (IsContinuous¬∑·µ£L -1)
   Œª r ‚Üí rat¬∑·µ£rat _ _


inv‚Ñù-pos : ‚àÄ x ‚Üí (p : 0 <·µ£ x) ‚Üí 0 <·µ£ inv‚Ñù x (inl p)
inv‚Ñù-pos x p = subst (0 <·µ£_) (sym (¬∑IdL _))
    (inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x (inl p)))


inv‚Ñù-neg : ‚àÄ x ‚Üí (p : x <·µ£ 0) ‚Üí inv‚Ñù x (inr p) <·µ£ 0
inv‚Ñù-neg x p =
     subst (_<·µ£ 0)
       (-·µ£‚â°[-1¬∑·µ£] _)
       (-·µ£<·µ£ 0 _ (inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x (inr p))))

inv‚Ñù0ÔºÉ : ‚àÄ r 0ÔºÉr ‚Üí 0 ÔºÉ (inv‚Ñù r 0ÔºÉr)
inv‚Ñù0ÔºÉ r = ‚äé.elim (inl ‚àò inv‚Ñù-pos r)
                   (inr ‚àò inv‚Ñù-neg r)


openPred< : ‚àÄ x ‚Üí ‚ü® openPred (Œª y ‚Üí (x <·µ£ y) , squash‚ÇÅ)  ‚ü©
openPred< x y =
     PT.map (map-snd (Œª {q} a<y-x v
        ‚Üí   isTrans<·µ£ _ _ _
                (a<b-c‚áíc<b-a (rat (fst q)) y x a<y-x )
          ‚àòS a-b<c‚áía-c<b y v (rat (fst q))
          ‚àòS isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
          ‚àòS fst (‚àº‚âÉabs<Œµ _ _ _)))
  ‚àòS lower‚ÑöBound (y +·µ£ (-·µ£ x))
  ‚àòS x<y‚Üí0<y-x x y

openPred> : ‚àÄ x ‚Üí ‚ü® openPred (Œª y ‚Üí (y <·µ£ x) , squash‚ÇÅ)  ‚ü©
openPred> x y =
       PT.map (map-snd (Œª {q} q<x-y v
        ‚Üí     flip (isTrans<·µ£ _ _ _)
                (a<b-c‚áía+c<b (rat (fst q)) x y q<x-y )
          ‚àòS a-b<c‚áía<c+b v y (rat (fst q))
          ‚àòS isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
          ‚àòS fst (‚àº‚âÉabs<Œµ _ _ _)
          ‚àòS sym‚àº _ _ _ ))
  ‚àòS lower‚ÑöBound (x +·µ£ (-·µ£ y))
  ‚àòS x<y‚Üí0<y-x y x


isOpenPred0ÔºÉ : ‚ü® openPred 0ÔºÉ‚Çö ‚ü©
isOpenPred0ÔºÉ x =
 ‚äé.rec
   (PT.map (map-snd ((inl ‚àò_) ‚àò_)) ‚àò openPred< 0 x)
   (PT.map (map-snd ((inr ‚àò_) ‚àò_)) ‚àò openPred> 0 x)



¬∑inv‚Ñù' : ‚àÄ r 0<r ‚Üí (r ¬∑·µ£ fst inv‚Ñù' (r) 0<r) ‚â° 1
¬∑inv‚Ñù' r =  ‚àòdiag $
  ‚â°ContinuousWithPred _ _ (openPred< 0) (openPred< 0)
   _ _ (cont‚ÇÇ¬∑·µ£WP _ _ _
          (AsContinuousWithPred _ _ IsContinuousId)
          (snd inv‚Ñù'))
        (AsContinuousWithPred _ _ (IsContinuousConst 1))
        (Œª r r‚àà r‚àà' ‚Üí cong (rat r ¬∑·µ£_) (inv‚Ñù'-rat r _ r‚àà)
          ‚àô‚àô sym (rat¬∑·µ£rat _ _) ‚àô‚àô cong rat (‚Ñö.x¬∑inv‚Ñö‚Çä[x]
            (r , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ r‚àà)))) r


inv‚ÑùInvol : ‚àÄ r 0ÔºÉr ‚Üí inv‚Ñù (inv‚Ñù r 0ÔºÉr) (inv‚Ñù0ÔºÉ r 0ÔºÉr) ‚â° r
inv‚ÑùInvol r 0ÔºÉr = ‚â°ContinuousWithPred
  0ÔºÉ‚Çö 0ÔºÉ‚Çö isOpenPred0ÔºÉ isOpenPred0ÔºÉ
   (Œª r 0ÔºÉr ‚Üí inv‚Ñù (inv‚Ñù r 0ÔºÉr) (inv‚Ñù0ÔºÉ r 0ÔºÉr)) (Œª x _ ‚Üí x)
    (IsContinuousWP‚àò _ _ _ _ inv‚Ñù0ÔºÉ
      IsContinuousWithPredInv‚Ñù IsContinuousWithPredInv‚Ñù)
    (AsContinuousWithPred _
       _ IsContinuousId)
        (Œª r 0ÔºÉr 0ÔºÉr' ‚Üí
          let 0#r = (fst (ratÔºÉ 0 r) 0ÔºÉr)
              0#InvR = ‚Ñö.0#inv‚Ñö r 0#r
          in  cong‚ÇÇ inv‚Ñù (inv‚Ñù-rat _ _ _)
                 (isProp‚ÜíPathP (Œª i ‚Üí isPropÔºÉ _ _) _ _)

             ‚àô‚àô inv‚Ñù-rat ((inv‚Ñö r (fst (ratÔºÉ [ pos 0 / 1+ 0 ] r) 0ÔºÉr)))
                   (invEq (ratÔºÉ 0 _) 0#InvR)
                    (‚Ñö.0#inv‚Ñö r (fst (ratÔºÉ [ pos 0 / 1+ 0 ] r) 0ÔºÉr))
               ‚àô‚àô cong rat (‚Ñö.inv‚ÑöInvol r 0#r 0#InvR)
            )
   r 0ÔºÉr 0ÔºÉr

sign¬≤=1 :  ‚àÄ r 0ÔºÉr ‚Üí (sign·µ£ r 0ÔºÉr) ¬∑·µ£ (sign·µ£ r 0ÔºÉr) ‚â° 1
sign¬≤=1 r = ‚äé.elim
    (Œª _ ‚Üí sym (rat¬∑·µ£rat _ _))
    (Œª _ ‚Üí sym (rat¬∑·µ£rat _ _))

sign¬∑abs·µ£ : ‚àÄ r 0ÔºÉr ‚Üí abs·µ£ r ¬∑·µ£ (sign·µ£ r 0ÔºÉr) ‚â° r
sign¬∑abs·µ£ r = ‚àòdiag $
  ‚â°ContinuousWithPred 0ÔºÉ‚Çö 0ÔºÉ‚Çö isOpenPred0ÔºÉ isOpenPred0ÔºÉ
      (Œª r 0ÔºÉr ‚Üí abs·µ£ r ¬∑·µ£ (sign·µ£ r 0ÔºÉr))
       (Œª r _ ‚Üí r)
        (cont‚ÇÇ¬∑·µ£WP _ _ _
          (AsContinuousWithPred _ _ IsContinuousAbs·µ£)
          IsContinuousWithPredSign·µ£)
        (AsContinuousWithPred _ _ IsContinuousId)
        (Œª r 0ÔºÉr 0ÔºÉr' ‚Üí (cong‚ÇÇ _¬∑·µ£_ refl (sign·µ£-rat r 0ÔºÉr)
          ‚àô sym (rat¬∑·µ£rat _ _))
          ‚àô cong rat (cong (‚Ñö._¬∑ ‚Ñö.sign r) (sym (‚Ñö.abs'‚â°abs r))
           ‚àô ‚Ñö.sign¬∑abs r) ) r

x¬∑inv‚Ñù[x] : ‚àÄ r 0ÔºÉr ‚Üí r ¬∑·µ£ (inv‚Ñù r 0ÔºÉr) ‚â° 1
x¬∑inv‚Ñù[x] r 0ÔºÉr =
  cong (_¬∑·µ£ (inv‚Ñù r 0ÔºÉr)) (sym (sign¬∑abs·µ£ r 0ÔºÉr))
   ‚àô‚àô sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô (cong (abs·µ£ r ¬∑·µ£_) (¬∑·µ£Assoc _ _ _
     ‚àô cong (_¬∑·µ£ (fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)))
        (sign¬≤=1 r 0ÔºÉr) ‚àô ¬∑IdL (fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)))
   ‚àô ¬∑inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr))

_Ôºè·µ£[_,_] : ‚Ñù ‚Üí ‚àÄ r ‚Üí 0 ÔºÉ r  ‚Üí ‚Ñù
q Ôºè·µ£[ r , 0ÔºÉr ] = q ¬∑·µ£ (inv‚Ñù r 0ÔºÉr)

_Ôºè·µ£‚Çä_ : ‚Ñù ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù
q Ôºè·µ£‚Çä (r , 0<r) = q Ôºè·µ£[ r , inl (0<r) ]

[x¬∑y]/y·µ£ : ‚àÄ q r ‚Üí (0ÔºÉr : 0 ÔºÉ r) ‚Üí
               ((q ¬∑·µ£ r) Ôºè·µ£[ r , 0ÔºÉr ]) ‚â° q
[x¬∑y]/y·µ£ q r 0ÔºÉr =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (x¬∑inv‚Ñù[x] r 0ÔºÉr)
   ‚àô‚àô ¬∑IdR q


[x/y]¬∑y·µ£ : ‚àÄ q r ‚Üí (0ÔºÉr : 0 ÔºÉ r) ‚Üí
               (q Ôºè·µ£[ r , 0ÔºÉr ]) ¬∑·µ£ r ‚â° q
[x/y]¬∑y·µ£ q r 0ÔºÉr =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù[x] r 0ÔºÉr)
   ‚àô‚àô ¬∑IdR q

x/y‚â°z‚Üíx‚â°z¬∑y : ‚àÄ x q r ‚Üí (0ÔºÉr : 0 ÔºÉ r)
               ‚Üí (x Ôºè·µ£[ r , 0ÔºÉr ]) ‚â° q
               ‚Üí x ‚â° q ¬∑·µ£ r
x/y‚â°z‚Üíx‚â°z¬∑y x q r 0ÔºÉr p =
    sym ([x/y]¬∑y·µ£ _ _ _) ‚àô cong (_¬∑·µ£ r) p

x¬∑y‚â°z‚Üíx‚â°z/y : ‚àÄ x q r ‚Üí (0ÔºÉr : 0 ÔºÉ r)
               ‚Üí (x ¬∑·µ£ r) ‚â° q
               ‚Üí x ‚â° q Ôºè·µ£[ r , 0ÔºÉr ]
x¬∑y‚â°z‚Üíx‚â°z/y x q r 0ÔºÉr p =
    sym ([x¬∑y]/y·µ£ _ _ _) ‚àô cong (_Ôºè·µ£[ r , 0ÔºÉr ]) p
