module Cubical.HITs.CauchyReals.Integral where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative

  -- foldl : ‚àÄ {‚Ñì'} {B : Type ‚Ñì'} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí B ‚Üí List A ‚Üí B


private
  variable
    ‚Ñì : Level
    A B : Type ‚Ñì


foldlFin : ‚àÄ {n} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí B ‚Üí (Fin n ‚Üí A) ‚Üí B
foldlFin {n = zero} f b v = b
foldlFin {n = suc n} f b v = foldlFin {n = n} f (f b (v fzero)) (v ‚àò fsuc)

record Partition[_,_] (a b : ‚Ñù) : Type‚ÇÄ where 
 field
  len : ‚Ñï
  pts : Fin (1 ‚Ñï.+ len) ‚Üí ‚Ñù
  a‚â§pts : ‚àÄ k ‚Üí a ‚â§·µ£ pts k 
  pts‚â§b : ‚àÄ k ‚Üí pts k ‚â§·µ£ b
  pts‚â§pts : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ pts (fsuc k)

 diffs : Fin len ‚Üí Œ£ ‚Ñù (0 ‚â§·µ£_) 
 diffs k = _ , x‚â§y‚Üí0‚â§y-x (pts (finj k)) _ (pts‚â§pts k)
 
 mesh : ‚Ñù
 mesh = foldlFin max·µ£ 0 (fst ‚àò diffs)

 a‚â§b : a ‚â§·µ£ b
 a‚â§b = isTrans‚â§·µ£ a _ _ (a‚â§pts fzero) (pts‚â§b fzero)
 
 pts'Œ£ : Fin (3 ‚Ñï.+ len) ‚Üí Œ£[ p ‚àà ‚Ñù ] (a ‚â§·µ£ p) √ó (p ‚â§·µ£ b)
 pts'Œ£ (zero , l , p) = a , ‚â§·µ£-refl a , a‚â§b
 pts'Œ£ (suc k , zero , p) = b , a‚â§b , ‚â§·µ£-refl b
 pts'Œ£ (suc k , suc l , p) = pts (k , l , cong (pred‚Ñï ‚àò pred‚Ñï)
   (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p)) , a‚â§pts _ , pts‚â§b _

 pts' : Fin (3 ‚Ñï.+ len) ‚Üí ‚Ñù
 pts' = fst ‚àò pts'Œ£

 a‚â§pts' : ‚àÄ k ‚Üí a ‚â§·µ£ pts' k
 a‚â§pts' = fst ‚àò snd ‚àò pts'Œ£
 
 pts'‚â§b : ‚àÄ k ‚Üí pts' k ‚â§·µ£ b
 pts'‚â§b = snd ‚àò snd ‚àò pts'Œ£

 pts'‚â§pts' : ‚àÄ k ‚Üí pts' (finj k) ‚â§·µ£ pts' (fsuc k)
 pts'‚â§pts' (zero , l , p) = a‚â§pts' (1 , l , +-suc _ _ ‚àô cong suc p)
 pts'‚â§pts' k'@(suc k , zero , p) =
  let z = pts'‚â§b (suc k , 1 , cong suc p)      
  in isTrans‚â°‚â§·µ£ (pts' (finj k'))
        (pts' (suc k , 1 , (Œª i ‚Üí suc (p i))))
        _ (cong {x = finj k'}
                {(suc k , 1 , cong suc p)} pts'
                 (to‚Ñï-injective refl)) z
 pts'‚â§pts' (suc k , suc l , p) =
   let k' = k , l , cong (pred‚Ñï ‚àò pred‚Ñï)
               (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p) 
   in subst2 _‚â§·µ£_ 
         (cong (Œª u ‚Üí pts (k , l ‚Ñï.+ (suc zero) , u))
           (isSet‚Ñï _ _ _ _))
         (cong (Œª u ‚Üí pts (suc k , l , u))
           (isSet‚Ñï _ _ _ _))
         (pts‚â§pts k')


 record Sample : Type‚ÇÄ where
  field
   samples : Fin (2 ‚Ñï.+ len) ‚Üí ‚Ñù
   pts'‚â§samples : (k : Fin _) ‚Üí pts' (finj k) ‚â§·µ£ samples k 
   samples‚â§pts' : (k : Fin _) ‚Üí samples k ‚â§·µ£ pts' (fsuc k)


  a‚â§samples : ‚àÄ k ‚Üí a  ‚â§·µ£ samples k
  a‚â§samples k = isTrans‚â§·µ£ a _ _ (a‚â§pts' (finj k)) (pts'‚â§samples k)

  samples‚â§b : ‚àÄ k ‚Üí samples k ‚â§·µ£ b
  samples‚â§b k = isTrans‚â§·µ£ (samples k) _ b (samples‚â§pts' k) (pts'‚â§b (fsuc k))
  
  samplesŒ£ : Fin (2 ‚Ñï.+ len) ‚Üí Œ£[ t ‚àà ‚Ñù ] (a ‚â§·µ£ t ) √ó (t ‚â§·µ£ b)
  samplesŒ£ k = samples k , a‚â§samples k , samples‚â§b k
  
  riemannSum : (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum f = foldlFin
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSum' : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum' f = foldlFin
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

 open Sample public
 
 leftSample : Sample
 leftSample .samples = pts' ‚àò finj
 leftSample .pts'‚â§samples = ‚â§·µ£-refl ‚àò pts' ‚àò finj 
 leftSample .samples‚â§pts' = pts'‚â§pts'

 rightSample : Sample
 rightSample .samples = pts' ‚àò fsuc
 rightSample .pts'‚â§samples = pts'‚â§pts'
 rightSample .samples‚â§pts' = ‚â§·µ£-refl ‚àò pts' ‚àò fsuc 


open Partition[_,_] 

TaggedPartition[_,_] : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
TaggedPartition[ a , b ] = Œ£ (Partition[ a , b ]) Sample


on[_,_]IntegralOf_is_ : ‚àÄ a b ‚Üí (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
on[ a , b ]IntegralOf f is s =
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
       abs·µ£ (riemannSum t f -·µ£ s) <·µ£ rat (fst Œµ))

on[_,_]IntegralOf_is'_ : ‚àÄ a b ‚Üí (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
on[ a , b ]IntegralOf f is' s =  
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
       abs·µ£ (riemannSum' t f -·µ£ s) <·µ£ rat (fst Œµ))


0‚â§pos/ : ‚àÄ {p q} ‚Üí 0 ‚Ñö.‚â§ [ pos p / q ] 
0‚â§pos/ {p} {q} =
  subst (0 ‚Ñ§.‚â§_) (sym (‚Ñ§.¬∑IdR _))
    (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 0 p ‚Ñï.zero-‚â§)


module _ a b (a‚â§b : a ‚â§·µ£ b) where


 Œî : ‚Ñù
 Œî = b -·µ£ a

 0‚â§Œî : 0 ‚â§·µ£ Œî
 0‚â§Œî = x‚â§y‚Üí0‚â§y-x a _ a‚â§b 
 

 uContMesh : ‚àÄ f ‚Üí IsUContinuous f ‚Üí
        ‚àÄ (Œµ‚Çä : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
                  (‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
                     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
                       abs·µ£ (riemannSum' t f -·µ£
                             riemannSum' (leftSample p) f)
                          <·µ£ Œî ¬∑·µ£ rat (fst Œµ‚Çä)))
 uContMesh = {!!}

 module _ (n : ‚Ñï) where

  t : Fin (suc n) ‚Üí ‚Ñö
  t (k , _) = [ pos k / 1+ n ]

  0‚â§t : ‚àÄ k ‚Üí 0 ‚â§·µ£ rat (t k)
  0‚â§t k = ‚â§‚Ñö‚Üí‚â§·µ£ 0 (t k) (0‚â§pos/ {fst k} {1+ n})

  t‚â§1 : ‚àÄ k ‚Üí rat (t k) ‚â§·µ£ 1
  t‚â§1 k = ‚â§‚Ñö‚Üí‚â§·µ£ (t k) 1 w 
   where
   w : pos (k .fst) ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ 1 ‚Ñ§.‚â§ pos 1 ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ n)
   w = subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _)) (sym (‚Ñ§.¬∑IdL _))
          (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (fst k) _ (‚Ñï.‚â§-suc $ ‚Ñï.pred‚Ñï-‚â§-pred‚Ñï (snd k)))

  tIncr : ‚àÄ k ‚Üí t (finj k) ‚Ñö.‚â§ t (fsuc k)
  tIncr k = ‚Ñ§.‚â§-¬∑o {m = pos (to‚Ñï k)} {n = pos (suc (to‚Ñï k))} {k = suc n}
            (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-suc‚Ñï)

  equalPartition : Partition[ a , b ] 
  equalPartition .len = n
  equalPartition .pts k = a +·µ£ Œî ¬∑·µ£ (rat (t k)) 
  equalPartition .a‚â§pts k =
    isTrans‚â°‚â§·µ£ a (a +·µ£ Œî ¬∑·µ£ 0) _ 
      (sym (ùêë'.+IdR' _ _ (ùêë'.0RightAnnihilates _)))
       (‚â§·µ£-o+ (Œî ¬∑·µ£ 0) (Œî ¬∑·µ£ (rat (t k))) a
         (‚â§·µ£-o¬∑·µ£ 0 (rat (t k)) Œî  0‚â§Œî (0‚â§t k))) 
  equalPartition .pts‚â§b k = 
    isTrans‚â§‚â°·µ£ (a +·µ£ Œî ¬∑·µ£ rat (t k)) (a +·µ£ Œî) b
    (‚â§·µ£-o+ _ _ a
     (isTrans‚â§‚â°·µ£ (Œî ¬∑·µ£ rat (t k)) (Œî ¬∑·µ£ 1) Œî
      (‚â§·µ£-o¬∑·µ£ (rat (t k)) 1 Œî  0‚â§Œî (t‚â§1 k)) (¬∑IdR Œî)))
      (Lùêë.lem--05 {a} {b})
  equalPartition .pts‚â§pts k =
     ‚â§·µ£-o+ _ _ a (‚â§·µ£-o¬∑·µ£ (rat (t (finj k))) (rat (t (fsuc k))) Œî  0‚â§Œî
      (‚â§‚Ñö‚Üí‚â§·µ£ (t (finj k)) _ (tIncr k)))




Integrate-UContinuous : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f ‚Üí IsUContinuous f ‚Üí ‚Ñù
Integrate-UContinuous a b a‚â§b f ucf =
 fromCauchySequence s c

 where
 s : Seq
 s n = riemannSum'
        (leftSample (equalPartition a b a‚â§b n))
         f

 c : IsCauchySequence s
 c Œµ = {!!}
 

-- -- Integral'-additive : ‚àÄ a b c f s s' ‚Üí
-- --   on[ a , b ]IntegralOf f is' s ‚Üí
-- --   on[ b , c ]IntegralOf f is' s' ‚Üí
-- --   on[ a , c ]IntegralOf f is' (s +·µ£ s')
-- -- Integral'-additive a b c f s s' S S' Œµ =
-- --   let P = S  (/2‚Çä Œµ)
-- --       P' = S' (/2‚Çä Œµ)
-- --   in PT.map2 {!!} P P'
     


-- -- FTOC : ‚àÄ x‚ÇÄ (f F : ‚Ñù ‚Üí ‚Ñù)
-- --                  ‚Üí (‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí on[ x‚ÇÄ , x ]IntegralOf f is' F x)
-- --                  ‚Üí ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí derivativeOf F at x is' f x
-- -- FTOC x‚ÇÄ f F D x x‚ÇÄ‚â§x Œµ =
-- --   PT.map2 (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
-- --    let Œ¥* = ‚Ñö.min‚Çä (‚Ñö.min‚Çä Œ¥ Œ¥') Œµ
-- --        ((tp , tp') , (tpm , tpm')) = tps x (Œµ) Œ¥*
-- --        z : abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- --              +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f))  <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ Œµ))
-- --        z = isTrans‚â§<·µ£
-- --               (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- --              +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))
-- --               _ _ (abs·µ£-triangle
-- --                (riemannSum' (snd tp) f -·µ£ F x)
-- --                 ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f))
-- --              (isTrans<‚â°·µ£ (abs·µ£ (((riemannSum' (snd tp) f -·µ£ F x)))
-- --                      +·µ£ abs·µ£ (((F (x +·µ£ rat (fst Œµ))
-- --                  -·µ£ (riemannSum' (snd tp') f))))) _ _
-- --             (<·µ£Monotone+·µ£
-- --               (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x))) _
-- --                (abs·µ£ ((F (x +·µ£ rat (fst Œµ))
-- --                  -·µ£ (riemannSum' (snd tp') f)))) _
-- --                 (X tp (isTrans<‚â§·µ£ (mesh (fst tp)) _ _ tpm
-- --                    (( (
-- --                       (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥*) (fst Œ¥)
-- --                        (‚Ñö.isTrans‚â§ (fst Œ¥*) _ (fst Œ¥)
-- --                         ((‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥)  (fst Œ¥') ) (fst Œµ)))
-- --                          (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))) ))
-- --                 ((isTrans‚â°<·µ£ _ _ _
-- --                   (minusComm-abs·µ£ (F (x +·µ£ rat (fst Œµ)))
-- --                    (riemannSum' (snd tp') f)) (X' tp'
-- --                      (isTrans<‚â§·µ£ (mesh (fst tp')) _ _ tpm' (
-- --                       (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥*) (fst Œ¥')
-- --                        (‚Ñö.isTrans‚â§ (fst Œ¥*) _ (fst Œ¥')
-- --                         ((‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥)  (fst Œ¥') ) (fst Œµ)))
-- --                          (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥'))))))))))
-- --              (cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)))
-- --        z' = subst2 {x = rat (fst (inv‚Ñö‚Çä Œµ))
-- --                  ¬∑·µ£ (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- --              +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))}
-- --               {abs·µ£
-- --                (f x -·µ£ differenceAt F x (rat (fst Œµ)) (inl {!!})) }
-- --                  _<·µ£_
-- --               ({!!}) (sym (rat¬∑·µ£rat _ _) ‚àô
-- --                       cong rat (‚Ñö.[y¬∑x]/y Œµ _) )
-- --               (<·µ£-o¬∑·µ£
-- --                 (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- --              +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))
-- --                 _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä Œµ)) z)
-- --        zz' = {!z!}
-- --    in Œ¥* ,
-- --       Œª h ‚Üí ‚äé.elim
-- --        (Œª 0<h h<Œ¥* ‚Üí
-- --          let zz : abs·µ£ (h ¬∑·µ£ f x -·µ£
-- --                         (F (x +·µ£ h) -·µ£ F x)
-- --                         )
-- --                       <·µ£ h ¬∑·µ£ rat (fst Œµ)
-- --              zz = {!z!}     
-- --          in {!!})
-- --        {!!})
-- --     (D x x‚ÇÄ‚â§x (/2‚Çä (Œµ ‚Ñö‚Çä¬∑ Œµ))) (D (x +·µ£ rat (fst Œµ)) {!!} (/2‚Çä (Œµ ‚Ñö‚Çä¬∑ Œµ)))

-- --  where
-- --   tps : ‚àÄ x (Œµ Œ¥ : ‚Ñö‚Çä) ‚Üí Œ£ (TaggedPartition[ x‚ÇÄ , x ]
-- --               √ó TaggedPartition[ x‚ÇÄ , x +·µ£ rat (fst Œµ)  ])
-- --                 Œª (tp ,  tp') ‚Üí (mesh (fst tp) <·µ£ rat (fst Œ¥))
-- --                      √ó (mesh (fst tp') <·µ£ rat (fst Œ¥))
-- --   tps x h Œ¥ = {!!}
  
-- --   -- PT.map (Œª (Œ¥ , X)
-- --   --   ‚Üí let Œ¥' = {!!}
-- --   --     in Œ¥' ,
-- --   --         (Œª h ‚Üí ‚äé.elim
-- --   --           (Œª 0<h h<Œ¥' ‚Üí
-- --   --             let rs : Œ£ Partition[ x , x +·µ£ fst Œ∑ ] Sample
-- --   --                 rs = {!!} , {!!}
-- --   --                 z = X rs {!X!}
-- --   --                 z' =
-- --   --                     isTrans‚â°<·µ£ _
-- --   --                        ((abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑)
-- --   --                          ¬∑·µ£ inv‚Ñù h (inl 0<h)) ¬∑·µ£ inv‚Ñù h (inl 0<h)) _
-- --   --                        (cong abs·µ£ (sym (¬∑DistR+ (riemannSum' (snd rs) f)
-- --   --                          (G Œ∑) _)) ‚àô
-- --   --                          (¬∑abs·µ£ (riemannSum' {_} {_} {fst rs} (snd rs) f -·µ£ G Œ∑) (inv‚Ñù h (inl 0<h)) ‚àô
-- --   --                           cong ((abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑)
-- --   --                          ¬∑·µ£ inv‚Ñù h (inl 0<h)) ¬∑·µ£_) ((abs·µ£Pos
-- --   --                           (inv‚Ñù h (inl 0<h))
-- --   --                             (inv‚Ñù-pos h 0<h)))))
-- --   --                         ((<·µ£-¬∑·µ£o
-- --   --                         (abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑))
-- --   --                          (rat (fst Œ∏)) (inv‚Ñù h (inl 0<h) , inv‚Ñù-pos h 0<h) z))
-- --   --             in {!z'!})
-- --   --           {!!}))
-- --   --   (G= Œ∑ Œ∏)

-- --  -- where

-- --  -- Œ∑ = {!!}

-- --  -- Œ∏ = {!!}

-- --  -- G : ‚àÄ (h : ‚Ñù‚Çä) ‚Üí ‚Ñù 
-- --  -- G h = F (x +·µ£ fst h) -·µ£ F x

-- --  -- G= : ‚àÄ (h : ‚Ñù‚Çä) ‚Üí on[ x , x +·µ£ fst h ]IntegralOf f is' (G h)
-- --  -- G= = {!!}
 
-- --  -- difF : ‚àÄ h 0<h  ‚Üí differenceAt F x h (inl 0<h) ¬∑·µ£ h ‚â°
-- --  --                     G (h , 0<h)
-- --  -- difF h 0ÔºÉh = {!!}
 
-- -- -- -- derivativeOf_at_is_






-- -- -- -- private
-- -- -- --   variable
-- -- -- --     ‚Ñì : Level
-- -- -- --     A B : Type ‚Ñì


-- -- -- -- foldlFin : ‚àÄ {n} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí B ‚Üí (Fin n ‚Üí A) ‚Üí B
-- -- -- -- foldlFin {n = zero} f b v = b
-- -- -- -- foldlFin {n = suc n} f b v = foldlFin {n = n} f (f b (v fzero)) (v ‚àò fsuc)

-- -- -- -- record Partition[_,_] (a b : ‚Ñù) : Type‚ÇÄ where 
-- -- -- --  field
-- -- -- --   len : ‚Ñï
-- -- -- --   pts : Fin (1 ‚Ñï.+ len) ‚Üí ‚Ñù
-- -- -- --   a‚â§pts : ‚àÄ k ‚Üí a ‚â§·µ£ pts k 
-- -- -- --   pts‚â§b : ‚àÄ k ‚Üí pts k ‚â§·µ£ b
-- -- -- --   pts‚â§pts : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ pts (fsuc k)

-- -- -- --  diffs : Fin len ‚Üí Œ£ ‚Ñù (0 ‚â§·µ£_) 
-- -- -- --  diffs k = _ , x‚â§y‚Üí0‚â§y-x (pts (finj k)) _ (pts‚â§pts k)
 
-- -- -- --  mesh : ‚Ñù
-- -- -- --  mesh = foldlFin max·µ£ 0 (fst ‚àò diffs)

-- -- -- --  record Sample : Type‚ÇÄ where
-- -- -- --   field
-- -- -- --    samples : Fin len ‚Üí ‚Ñù
-- -- -- --    ‚â§samples : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ samples k
-- -- -- --    samples‚â§ : (k : Fin len) ‚Üí samples k ‚â§·µ£ pts (fsuc k)
   
-- -- -- --   samplesŒ£ : Fin len ‚Üí Œ£[ t ‚àà ‚Ñù ] (a ‚â§·µ£ t ) √ó (t ‚â§·µ£ b)
-- -- -- --   samplesŒ£ = {!!}
  
-- -- -- --   riemannSum : (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù
-- -- -- --   riemannSum f = foldlFin
-- -- -- --     (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
-- -- -- --      (Œª k ‚Üí  samplesŒ£ k , pts (fsuc k) -·µ£ pts (finj k))

-- -- -- --  open Sample public
-- -- -- -- open Partition[_,_] 

-- -- -- -- TaggedPartition[_,_] : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
-- -- -- -- TaggedPartition[ a , b ] = Œ£ (Partition[ a , b ]) Sample


-- -- -- -- on[_,_]IntegralOf_is_ : ‚àÄ a b ‚Üí (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
-- -- -- -- on[ a , b ]IntegralOf f is s =
-- -- -- --   ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
-- -- -- --    ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
-- -- -- --      (mesh p <·µ£ rat (fst Œ¥) ‚Üí
-- -- -- --        abs·µ£ (riemannSum t f -·µ£ s) <·µ£ rat (fst Œµ))


-- -- -- -- FTOC : ‚àÄ a b (f F : ‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù)
-- -- -- --                  ‚Üí (‚àÄ x ‚Üí (‚â§x : a ‚â§·µ£ x) ‚Üí (x‚â§ : x ‚â§·µ£ b)
-- -- -- --                      ‚Üí on[ a , x ]IntegralOf
-- -- -- --                          (Œª r ‚â§r r‚â§ ‚Üí f r ‚â§r (isTrans‚â§·µ£ r _ _ r‚â§ x‚â§))
-- -- -- --                            is F x ‚â§x x‚â§)
-- -- -- --                  ‚Üí ‚àÄ x ‚Üí (‚â§x : a ‚â§·µ£ x) ‚Üí (x‚â§ : x ‚â§·µ£ b) ‚Üí
-- -- -- --                      {!derivativeOf F at ? is ?!}
-- -- -- -- FTOC = {!!}

-- -- -- -- -- derivativeOf_at_is_
