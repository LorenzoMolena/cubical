module Cubical.HITs.CauchyReals.Integral where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset
open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative



‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem : ‚àÄ n m ‚Üí n ‚â° ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï m ‚Üí (1+ pred‚Ñï n) ‚â° m
‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem zero m x = ‚ä•.rec (‚Ñï.znots x )
‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem (suc n) m x = cong 1+_ (‚Ñï.injSuc x)

private
  variable
    ‚Ñì : Level
    A A' B : Type ‚Ñì


foldlFin : ‚àÄ {n} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí B ‚Üí (Fin n ‚Üí A) ‚Üí B
foldlFin {n = zero} f b v = b
foldlFin {n = suc n} f b v = foldlFin {n = n} f (f b (v fzero)) (v ‚àò fsuc)

substFin : ‚àÄ {n} {m} ‚Üí n ‚â° m ‚Üí Fin n ‚Üí Fin m 
substFin p = map-snd (subst (_ ‚Ñï.<_) p)

foldFin+·µ£ : ‚àÄ n V (f : A ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) (x +·µ£ x') V ‚â°
   x +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x' V
foldFin+·µ£ zero V f x x' = refl
foldFin+·µ£ (suc n) V f x x' =
  foldFin+·µ£ n (V ‚àò fsuc) _ (x +·µ£ x') (f (V fzero)) ‚àô
   sym (+·µ£Assoc x _ _) ‚àô
   cong (x +·µ£_) (sym (foldFin+·µ£ n (V ‚àò fsuc) f x' (f (V fzero))))

foldFin+0·µ£ : ‚àÄ n V (f : A ‚Üí ‚Ñù) x ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V ‚â°
   x +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) 0 V
foldFin+0·µ£ n V f x =
 cong (Œª x ‚Üí foldlFin (Œª a y ‚Üí a +·µ£ f y) x V) (sym (+IdR _))
 ‚àô foldFin+·µ£ n V f x 0
   

zip-foldFin+·µ£ : ‚àÄ n V V' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    +·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V' ‚â°
   foldlFin {B = ‚Ñù} {n = n} (Œª a (y , y') ‚Üí a +·µ£ (f y +·µ£ f' y')) (x +·µ£ x')
    Œª x ‚Üí V x , V' x
zip-foldFin+·µ£ zero V V' f f' _ _ = refl
zip-foldFin+·µ£ (suc n) V V' f f' x x' =
  zip-foldFin+·µ£ n (V ‚àò fsuc) (V' ‚àò fsuc) f f'
     (x +·µ£ f (V fzero)) (x' +·µ£ f' (V' fzero))
   ‚àô cong (Œª xx ‚Üí foldlFin
      _
      xx
      (Œª x‚ÇÅ ‚Üí V (fsuc x‚ÇÅ) , V' (fsuc x‚ÇÅ)))
      (Lùêë.lem--087 {x} {f (V fzero)} {x'} {f' (V' fzero)})


foldFin¬∑DistL : ‚àÄ n (f : A ‚Üí ‚Ñù) Œ± x V ‚Üí 
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) (Œ± ¬∑·µ£ x) V
      ‚â° Œ± ¬∑·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) (x) V
foldFin¬∑DistL zero f Œ± x V = refl
foldFin¬∑DistL (suc n) f Œ± x V =
  cong (Œª z ‚Üí foldlFin (Œª a y ‚Üí a +·µ£ Œ± ¬∑·µ£ f y) z
      (Œª x‚ÇÅ ‚Üí V (fsuc x‚ÇÅ)))
       (sym (¬∑DistL+ _ _ _))
  ‚àô foldFin¬∑DistL n f Œ± (x +·µ£ f (V fzero)) (V ‚àò fsuc)


zip-foldFin-·µ£ : ‚àÄ n V V' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) x x' ‚Üí
  foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V
    -·µ£ foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V' ‚â°
   foldlFin {B = ‚Ñù} {n = n} (Œª a (y , y') ‚Üí a +·µ£ (f y -·µ£ f' y')) (x -·µ£ x')
    Œª x ‚Üí V x , V' x 
zip-foldFin-·µ£ n V V' f f' x x' = 
 cong ((foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V) +·µ£_)
  (-·µ£‚â°[-1¬∑·µ£] (foldlFin {B = ‚Ñù} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V')
   ‚àô sym (foldFin¬∑DistL n _ (-1) _ _)) ‚àô
  zip-foldFin+·µ£ n V V' f _ _ _ ‚àô
   ((cong‚ÇÇ foldlFin (funExt‚ÇÇ Œª a u ‚Üí cong ((a +·µ£_) ‚àò (f (fst u) +·µ£_))
    (sym (-·µ£‚â°[-1¬∑·µ£] _)))
     (cong (x +·µ£_) (sym (-·µ£‚â°[-1¬∑·µ£] _)))) ‚â°$ (Œª x‚ÇÅ ‚Üí V x‚ÇÅ , V' x‚ÇÅ))

foldFin+< : ‚àÄ n x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V' ‚Üí
   x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí f (V k) <·µ£ f' (V' k)) ‚Üí 
  foldlFin {B = ‚Ñù} {A = A} {n = (suc n)} (Œª a y ‚Üí a +·µ£ f y) x V
    <·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = (suc n)} (Œª a y ‚Üí a +·µ£ f' y) x' V'
    
foldFin+< zero x x' f f' V V' x‚â§x' X = ‚â§<·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (X fzero)
foldFin+< (suc n) x x' f f' V V' x‚â§x' X =
 foldFin+< n _ _ f f' (V ‚àò fsuc) (V' ‚àò fsuc)
          (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (<·µ£Weaken‚â§·µ£ _ _ $ X fzero)) (X ‚àò fsuc)

foldFin+<-abs : ‚àÄ n ‚Üí zero ‚Ñï.< n ‚Üí ‚àÄ x x' (f : A ‚Üí ‚Ñù) (f' : A' ‚Üí ‚Ñù) V V'  ‚Üí
   abs·µ£ x ‚â§·µ£ x' ‚Üí
  (‚àÄ k ‚Üí abs·µ£ (f (V k)) <·µ£ f' (V' k)) ‚Üí 
  abs·µ£ (foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ f y) x V)
    <·µ£ foldlFin {B = ‚Ñù} {A = A'} {n = n} (Œª a y ‚Üí a +·µ£ f' y) x' V'
    
foldFin+<-abs zero 0<n x x' f f' V V' x‚â§x' X = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
  
foldFin+<-abs (suc zero) 0<n x x' f f' V V' x‚â§x' X =
 isTrans‚â§<·µ£ _ _ _ (abs·µ£-triangle _ _) (‚â§<·µ£Monotone+·µ£ _ _ _ _ x‚â§x' (X fzero))
foldFin+<-abs (suc (suc n)) 0<n x x' f f' V V' x‚ÇÅ X =
  foldFin+<-abs (suc n) ‚Ñï.zero-<-suc (x +·µ£ f (V fzero)) (x' +·µ£ f' (V' fzero))
    f f' (V ‚àò fsuc) (V' ‚àò fsuc)
     (isTrans‚â§·µ£ _ _ _ (abs·µ£-triangle _ _)
       (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚ÇÅ (<·µ£Weaken‚â§·µ£ _ _ $ X fzero)))
       (X ‚àò fsuc)


foldFin+Const : ‚àÄ n x V ‚Üí 
  foldlFin {B = ‚Ñù} {A = A} {n = n} (Œª a y ‚Üí a +·µ£ x) 0 V
    ‚â° fromNat n ¬∑·µ£ x
foldFin+Const zero x V = sym (ùêë'.0LeftAnnihilates _)
foldFin+Const (suc n) x V =
      (Œª i ‚Üí foldFin+0·µ£ n (V ‚àò fsuc) (Œª _ ‚Üí x) (+IdL x i) i) 
   ‚àô‚àô cong‚ÇÇ (_+·µ£_) (sym (¬∑IdL x)) (foldFin+Const n x (V ‚àò fsuc))
   ‚àô‚àô (sym (¬∑DistR+ 1 (fromNat n) x)
      ‚àô cong (_¬∑·µ£ x) (+·µ£-rat _ _  ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ 1 n )))

foldlFin-substN : ‚àÄ {n n'} ‚Üí (p : n ‚â° n') ‚Üí ‚àÄ f b v ‚Üí
            foldlFin {B = B} {A = A} {n} f b v ‚â°
              foldlFin {B = B} {A = A} {n'} f b (v ‚àò substFin (sym p))
foldlFin-substN {n = n} = J (Œª n' p ‚Üí ‚àÄ f b v ‚Üí
            foldlFin f b v ‚â°
              foldlFin f b (v ‚àò substFin (sym p)))
               Œª f b v ‚Üí cong (foldlFin {n = n} f b)
                 (funExt Œª x ‚Üí cong v (sym (transportRefl _)))

‚Ñï^+ : ‚àÄ k n m ‚Üí k ‚Ñï.^ (n ‚Ñï.+ m) ‚â° (k ‚Ñï.^ n) ‚Ñï.¬∑ (k ‚Ñï.^ m)
‚Ñï^+ k zero m = sym (‚Ñï.+-zero _)
‚Ñï^+ k (suc n) m = cong (k ‚Ñï.¬∑_) (‚Ñï^+ k n m) ‚àô ‚Ñï.¬∑-assoc k _ _


2^ : ‚Ñï ‚Üí ‚Ñï
2^ zero = 1
2^ (suc x) = (2^ x) ‚Ñï.+ (2^ x)

2^-^ : ‚àÄ n ‚Üí 2^ n ‚â° 2 ^ n
2^-^ zero = refl
2^-^ (suc n) = cong‚ÇÇ ‚Ñï._+_ (2^-^ n) (2^-^ n)
 ‚àô cong ((2 ^ n) ‚Ñï.+_) (sym (‚Ñï.+-zero _)) 

2^+ : ‚àÄ n m ‚Üí 2^ (n ‚Ñï.+ m) ‚â° (2^ n) ‚Ñï.¬∑ (2^ m)
2^+ zero m = sym (‚Ñï.+-zero (2^ m))
2^+ (suc n) m = cong‚ÇÇ ‚Ñï._+_ (2^+ n m) (2^+ n m)
 ‚àô ¬∑-distrib ≥ (2^ n) _ (2^ m)

injectFin+ : {m n : ‚Ñï} ‚Üí Fin m ‚Üí Fin (n ‚Ñï.+ m)
injectFin+ {n = n} x = (n ‚Ñï.+ fst x) ,  ‚Ñï.<-k+ {k = n} (snd x)
-- injectFin+ {n = suc n} x = fsuc (injectFin+ x)


injectFin+' : {m n : ‚Ñï} ‚Üí Fin n ‚Üí Fin (n ‚Ñï.+ m)
injectFin+' {m} {n = n} x = fst x , ‚Ñï.<‚â§-trans (snd x) ‚Ñï.‚â§SumLeft 


foldFin¬∑2 : ‚àÄ n m ‚Üí (f : B ‚Üí A ‚Üí B) ‚Üí (b : B) ‚Üí
              (V : Fin (n ‚Ñï.+ m) ‚Üí A) ‚Üí 
             foldlFin {n = n ‚Ñï.+ m} f b V ‚â°
               foldlFin {n = m} f
                 (foldlFin {n = n} f b (V ‚àò injectFin+'))
                  (V ‚àò injectFin+)
foldFin¬∑2 zero m f b V =
 cong (foldlFin {n = m} f b)
  (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl) )
foldFin¬∑2 {B = B} {A = A} (suc n) m f b V = 
 foldFin¬∑2 n m f (f b (V fzero)) (V ‚àò fsuc)
  ‚àô cong‚ÇÇ (foldlFin {_} {B} {_} {A} {m} f)
    (cong‚ÇÇ (foldlFin {_} {B} {_} {A} {n} f)
      (cong (f b) (cong V (to‚Ñï-injective refl)))
        (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl)))
     (funExt Œª x ‚Üí cong V (to‚Ñï-injective refl))


0<2^ : ‚àÄ n ‚Üí 0 ‚Ñï.< 2^ n
0<2^ zero = ‚Ñï.zero-<-suc
0<2^ (suc n) = ‚Ñï.<-+-< (0<2^ n) (0<2^ n)


Fin^2¬∑ : ‚àÄ n m ‚Üí (Fin (2^ n) √ó Fin (2^ m))
                      ‚Üí (Fin (2^ (n ‚Ñï.+ m)))
Fin^2¬∑ n m ((l , l<) , (k , k<)) =
 (((2^ m) ‚Ñï.¬∑ l) ‚Ñï.+ k) ,
  (2^ m ‚Ñï.¬∑ l ‚Ñï.+ k
      <‚â§‚ü® ‚Ñï.<-k+ {k = 2^ m ‚Ñï.¬∑ l} k< ‚ü©
     _ ‚â°‚â§‚ü® (Œª i ‚Üí ‚Ñï.+-comm (‚Ñï.¬∑-comm (2^ m) l i) (2^ m) i) ‚ü©
    _ ‚â§‚â°‚ü® ‚Ñï.‚â§-¬∑k {k = 2^ m} l< ‚ü©
         sym (2^+ n m))

 where open ‚Ñï.<-Reasoning

Fin^2¬∑-injectFin+' : ‚àÄ n m x y ‚Üí
  (injectFin+' (Fin^2¬∑ n m (x , y))) ‚â°
    (Fin^2¬∑ (suc n) m (injectFin+' x , y))
Fin^2¬∑-injectFin+' n m (fst‚ÇÅ , snd‚ÇÅ) y = to‚Ñï-injective refl

Fin^2¬∑-injectFin+ : ‚àÄ n m x y ‚Üí (injectFin+ (Fin^2¬∑ n m (x , y)))
    ‚â° (Fin^2¬∑ (suc n) m (injectFin+ x , y))
Fin^2¬∑-injectFin+ n m x y =
 to‚Ñï-injective
  (cong (‚Ñï._+ (2^ m ‚Ñï.¬∑ x .fst ‚Ñï.+ y .fst)) (2^+ n m ‚àô ‚Ñï.¬∑-comm (2^ n) (2^ m) )
    ‚àô (‚Ñï.+-assoc (2^ m ‚Ñï.¬∑ 2^ n) _ (fst y) ‚àô
      cong (‚Ñï._+ fst y) (¬∑-distribÀ° (2^ m) _ _)))

foldFin¬∑2^ : ‚àÄ n m ‚Üí (f : B ‚Üí A ‚Üí B) ‚Üí (b : B) ‚Üí
              (V : Fin (2^ (n ‚Ñï.+ m)) ‚Üí A) ‚Üí 
             foldlFin f b V ‚â°
               foldlFin {n = 2^ n} (foldlFin {n = 2^ m} f)
                 b (curry (V ‚àò Fin^2¬∑ n m ))
foldFin¬∑2^ zero m f b V = cong (foldlFin {n = 2^ m} f b)
  (funExt Œª x ‚Üí cong V (to‚Ñï-injective
    (cong (‚Ñï._+ fst x) (‚Ñï.0‚â°m¬∑0 (2^ m)))))
foldFin¬∑2^ (suc n) m f b V =
  foldFin¬∑2 (2^ (n ‚Ñï.+ m)) (2^ (n ‚Ñï.+ m)) f b V
   ‚àô foldFin¬∑2^ n m _ _ _
    ‚àô cong {x = (foldlFin {n = 2^ (n ‚Ñï.+ m)}
            f b (V ‚àò injectFin+'))} (Œª z ‚Üí foldlFin (foldlFin f) z
         (curry ((V ‚àò injectFin+) ‚àò Fin^2¬∑ n m)))
         (foldFin¬∑2^ n m _ _ _)
      
    ‚àô (Œª i ‚Üí foldlFin {n = 2^ n} ff'
       (foldlFin {n = 2^ n} ff' b
        (Œª x y ‚Üí V (Fin^2¬∑-injectFin+' n m x y i)))
       (Œª x y ‚Üí V (Fin^2¬∑-injectFin+ n m x y i))) ‚àô
      sym (foldFin¬∑2 (2^ n) (2^ n) ff' _ _)
 where
 ff' = (foldlFin {n = 2^ m} f)



record Partition[_,_] (a b : ‚Ñù) : Type‚ÇÄ where 
 field
  len : ‚Ñï
  pts : Fin (1 ‚Ñï.+ len) ‚Üí ‚Ñù
  a‚â§pts : ‚àÄ k ‚Üí a ‚â§·µ£ pts k 
  pts‚â§b : ‚àÄ k ‚Üí pts k ‚â§·µ£ b
  pts‚â§pts : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ pts (fsuc k)

 diffs : Fin len ‚Üí Œ£ ‚Ñù (0 ‚â§·µ£_) 
 diffs k = _ , x‚â§y‚Üí0‚â§y-x (pts (finj k)) _ (pts‚â§pts k)
 
 mesh : ‚Ñù
 mesh = foldlFin max·µ£ 0 (fst ‚àò diffs)

 a‚â§b : a ‚â§·µ£ b
 a‚â§b = isTrans‚â§·µ£ a _ _ (a‚â§pts fzero) (pts‚â§b fzero)
 
 pts'Œ£ : Fin (3 ‚Ñï.+ len) ‚Üí Œ£[ p ‚àà ‚Ñù ] (a ‚â§·µ£ p) √ó (p ‚â§·µ£ b)
 pts'Œ£ (zero , l , p) = a , ‚â§·µ£-refl a , a‚â§b
 pts'Œ£ (suc k , zero , p) = b , a‚â§b , ‚â§·µ£-refl b
 pts'Œ£ (suc k , suc l , p) = pts (k , l , cong (pred‚Ñï ‚àò pred‚Ñï)
   (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p)) , a‚â§pts _ , pts‚â§b _

 pts' : Fin (3 ‚Ñï.+ len) ‚Üí ‚Ñù
 pts' = fst ‚àò pts'Œ£

 a‚â§pts' : ‚àÄ k ‚Üí a ‚â§·µ£ pts' k
 a‚â§pts' = fst ‚àò snd ‚àò pts'Œ£
 
 pts'‚â§b : ‚àÄ k ‚Üí pts' k ‚â§·µ£ b
 pts'‚â§b = snd ‚àò snd ‚àò pts'Œ£

 pts'‚â§pts' : ‚àÄ k ‚Üí pts' (finj k) ‚â§·µ£ pts' (fsuc k)
 pts'‚â§pts' (zero , l , p) = a‚â§pts' (1 , l , +-suc _ _ ‚àô cong suc p)
 pts'‚â§pts' k'@(suc k , zero , p) =
  let z = pts'‚â§b (suc k , 1 , cong suc p)      
  in isTrans‚â°‚â§·µ£ (pts' (finj k'))
        (pts' (suc k , 1 , (Œª i ‚Üí suc (p i))))
        _ (cong {x = finj k'}
                {(suc k , 1 , cong suc p)} pts'
                 (to‚Ñï-injective refl)) z
 pts'‚â§pts' (suc k , suc l , p) =
   let k' = k , l , cong (pred‚Ñï ‚àò pred‚Ñï)
               (sym (‚Ñï.+-suc (suc l) (suc k)) ‚àô p) 
   in subst2 _‚â§·µ£_ 
         (cong (Œª u ‚Üí pts (k , l ‚Ñï.+ (suc zero) , u))
           (isSet‚Ñï _ _ _ _))
         (cong (Œª u ‚Üí pts (suc k , l , u))
           (isSet‚Ñï _ _ _ _))
         (pts‚â§pts k')


 record Sample : Type‚ÇÄ where
  field
   samples : Fin (2 ‚Ñï.+ len) ‚Üí ‚Ñù
   pts'‚â§samples : (k : Fin _) ‚Üí pts' (finj k) ‚â§·µ£ samples k 
   samples‚â§pts' : (k : Fin _) ‚Üí samples k ‚â§·µ£ pts' (fsuc k)


  a‚â§samples : ‚àÄ k ‚Üí a  ‚â§·µ£ samples k
  a‚â§samples k = isTrans‚â§·µ£ a _ _ (a‚â§pts' (finj k)) (pts'‚â§samples k)

  samples‚â§b : ‚àÄ k ‚Üí samples k ‚â§·µ£ b
  samples‚â§b k = isTrans‚â§·µ£ (samples k) _ b (samples‚â§pts' k) (pts'‚â§b (fsuc k))
  
  samplesŒ£ : Fin (2 ‚Ñï.+ len) ‚Üí Œ£[ t ‚àà ‚Ñù ] (a ‚â§·µ£ t ) √ó (t ‚â§·µ£ b)
  samplesŒ£ k = samples k , a‚â§samples k , samples‚â§b k
  
  riemannSum : (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum f = foldlFin
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

  riemannSum' : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù
  riemannSum' f = foldlFin {n = 2 ‚Ñï.+ len}
    (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t) ) 0
     (Œª k ‚Üí  samplesŒ£ k , pts' (fsuc k) -·µ£ pts' (finj k))

 open Sample public
 
 leftSample : Sample
 leftSample .samples = pts' ‚àò finj
 leftSample .pts'‚â§samples = ‚â§·µ£-refl ‚àò pts' ‚àò finj 
 leftSample .samples‚â§pts' = pts'‚â§pts'

 rightSample : Sample
 rightSample .samples = pts' ‚àò fsuc
 rightSample .pts'‚â§samples = pts'‚â§pts'
 rightSample .samples‚â§pts' = ‚â§·µ£-refl ‚àò pts' ‚àò fsuc 


-- clampDelta·µ£ : ‚àÄ L L' x ‚Üí clamp·µ£ L L' x ‚â°
--                (x +·µ£ clamp·µ£ (L -·µ£ x) (L' -·µ£ x) 0)
-- clampDelta·µ£ L L' x = {!!}


clampDeltaSplit‚Ñö : ‚àÄ L L' x y ‚Üí L ‚Ñö.‚â§ L' ‚Üí x ‚Ñö.‚â§ y
            ‚Üí (y ‚Ñö.- x) ‚â°
              (‚Ñö.min L y ‚Ñö.- ‚Ñö.min L x)
               ‚Ñö.+ (‚Ñö.clamp L L' y ‚Ñö.- ‚Ñö.clamp L L' x)
               ‚Ñö.+ (‚Ñö.max L' y ‚Ñö.- ‚Ñö.max L' x)
clampDeltaSplit‚Ñö = {!!}


clamp-Œî-¬∑f : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f
     ‚Üí IsContinuous f
     ‚Üí ‚àÄ (Œ¥ : ‚Ñö‚Çä)
     ‚Üí ‚àÄ u v ‚Üí u ‚â§·µ£ v
     ‚Üí v -·µ£ u ‚â§·µ£ rat (fst Œ¥)
     ‚Üí (‚àÄ a‚Ñö b‚Ñö ‚Üí ( u ‚àà interval‚Ñô (rat a‚Ñö) (rat b‚Ñö)) ‚äé
                     ((u <·µ£ rat a‚Ñö) ‚äé (rat b‚Ñö <·µ£ u)))
     ‚Üí (clamp·µ£ a b v -·µ£ clamp·µ£ a b u) ¬∑·µ£ f u
       ‚â° (clamp·µ£ a b v -·µ£ clamp·µ£ a b u)
         ¬∑·µ£ f (clamp·µ£ (a -·µ£ rat (fst Œ¥)) (b) u)
clamp-Œî-¬∑f a b a‚â§b f cf Œ¥ u v u‚â§v v‚àºu X =
  {!!}


clamp-interval-Œî-swap : ‚àÄ a b a' b'
           ‚Üí a  ‚â§·µ£ b
           ‚Üí a' ‚â§·µ£ b'
                ‚Üí clamp·µ£ a  b  b' -·µ£ clamp·µ£ a  b  a'
                ‚â° clamp·µ£ a' b' b  -·µ£ clamp·µ£ a' b' a
clamp-interval-Œî-swap a b a' b' a‚â§b a'‚â§b' =
  {!!}



open Partition[_,_] 

TaggedPartition[_,_] : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
TaggedPartition[ a , b ] = Œ£ (Partition[ a , b ]) Sample


-- concatTaggedPartition : ‚àÄ a b c ‚Üí TaggedPartition[ a , b ] ‚Üí TaggedPartition[ b , c ]
--                 ‚Üí TaggedPartition[ a , c ]
-- concatTaggedPartition = {!!}



on[_,_]IntegralOf_is_ : ‚àÄ a b ‚Üí (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type

on[ a , b ]IntegralOf f is s =
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
       abs·µ£ (riemannSum t f -·µ£ s) <·µ£ rat (fst Œµ))

on[_,_]IntegralOf_is'_ : ‚àÄ a b ‚Üí (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
on[ a , b ]IntegralOf f is' s =  
   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
       abs·µ£ (riemannSum' t f -·µ£ s) <·µ£ rat (fst Œµ))


0‚â§pos/ : ‚àÄ {p q} ‚Üí 0 ‚Ñö.‚â§ [ pos p / q ] 
0‚â§pos/ {p} {q} =
  subst (0 ‚Ñ§.‚â§_) (sym (‚Ñ§.¬∑IdR _))
    (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 0 p ‚Ñï.zero-‚â§)


module Integration a b (a‚â§b : a ‚â§·µ£ b) where


 Œî : ‚Ñù
 Œî = b -·µ£ a

 0‚â§Œî : 0 ‚â§·µ£ Œî
 0‚â§Œî = x‚â§y‚Üí0‚â§y-x a _ a‚â§b 
 

 -- uContMesh : ‚àÄ f ‚Üí IsUContinuous f ‚Üí
 --        ‚àÄ (Œµ‚Çä : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
 --                  (‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
 --                     (mesh p <·µ£ rat (fst Œ¥) ‚Üí
 --                       abs·µ£ (riemannSum' t f -·µ£
 --                             riemannSum' (leftSample p) f)
 --                          <·µ£ Œî ¬∑·µ£ rat (fst Œµ‚Çä)))
 -- uContMesh d iucf Œµ‚Çä = {!!}

 module _ (n : ‚Ñï) where

  t : ‚Ñï ‚Üí ‚Ñö
  t k = [ pos (suc k) / 2+ n  ]

  0‚â§t : ‚àÄ k ‚Üí 0 ‚â§·µ£ rat (t k)
  0‚â§t k = ‚â§‚Ñö‚Üí‚â§·µ£ 0 (t k) (0‚â§pos/ {suc k} {2+ n})

  t‚â§1 : ‚àÄ (k : Fin (1 ‚Ñï.+ n)) ‚Üí rat (t (fst k)) ‚â§·µ£ 1
  t‚â§1 k = ‚â§‚Ñö‚Üí‚â§·µ£ (t (fst k)) 1 w 
   where
   w : pos (suc (k .fst)) ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ 1 ‚Ñ§.‚â§ pos 1 ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (2+ n)
   w = subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _)) (sym (‚Ñ§.¬∑IdL _))
          (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (suc (fst k))
           _ (‚Ñï.suc-‚â§-suc $ ‚Ñï.‚â§-suc $ ‚Ñï.pred‚Ñï-‚â§-pred‚Ñï (snd k)))

  tIncr : ‚àÄ k ‚Üí t k ‚Ñö.‚â§ t (suc k)
  tIncr k = ‚Ñ§.‚â§-¬∑o {m = pos (suc k)} {n = pos (suc (suc k))} {k = suc (suc n)}
            (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.‚â§-suc‚Ñï)

  equalPartition : Partition[ a , b ] 
  equalPartition .len = n
  equalPartition .pts k = a +·µ£ Œî ¬∑·µ£ (rat (t (fst k))) 
  equalPartition .a‚â§pts k =
    isTrans‚â°‚â§·µ£ a (a +·µ£ Œî ¬∑·µ£ 0) _ 
      (sym (ùêë'.+IdR' _ _ (ùêë'.0RightAnnihilates _)))
       (‚â§·µ£-o+ (Œî ¬∑·µ£ 0) (Œî ¬∑·µ£ (rat (t (fst k)))) a
         (‚â§·µ£-o¬∑·µ£ 0 (rat (t (fst k))) Œî  0‚â§Œî (0‚â§t (fst k)))) 
  equalPartition .pts‚â§b k = 
    isTrans‚â§‚â°·µ£ (a +·µ£ Œî ¬∑·µ£ rat (t (fst k))) (a +·µ£ Œî) b
    (‚â§·µ£-o+ _ _ a
     (isTrans‚â§‚â°·µ£ (Œî ¬∑·µ£ rat (t (fst k))) (Œî ¬∑·µ£ 1) Œî
      (‚â§·µ£-o¬∑·µ£ (rat (t (fst k))) 1 Œî  0‚â§Œî (t‚â§1 k)) (¬∑IdR Œî)))
      (Lùêë.lem--05 {a} {b})
  equalPartition .pts‚â§pts k =
     ‚â§·µ£-o+ _ _ a (‚â§·µ£-o¬∑·µ£ (rat (t ( (fst k)))) (rat (t (suc (fst k)))) Œî  0‚â§Œî
      (‚â§‚Ñö‚Üí‚â§·µ£ (t (fst k)) _ (tIncr (fst k))))


  equalPartitionPts' : ‚àÄ k ‚Üí pts' equalPartition k ‚â°
        a +·µ£ Œî ¬∑·µ£ rat [ pos (fst k) / 2+ n  ]
  equalPartitionPts' (zero , zero , p) = ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï p))
  equalPartitionPts' (zero , suc l , p) =
   sym (ùêë'.+IdR' _ _ (ùêë'.0RightAnnihilates' _ _ (cong rat (‚Ñö.[0/n]‚â°[0/m] _ _))))
  equalPartitionPts' (suc k , zero , p) =
    sym (Lùêë.lem--05 {a} {b}) ‚àô
      cong (a +·µ£_) (sym (ùêë'.¬∑IdR' _ _ (cong (rat ‚àò [_/ 2+ n ])
       (cong (pos ‚àò pred‚Ñï) p)
       ‚àô (cong rat $ ‚Ñö.[n/n]‚â°[m/m] (suc n) 0))))
  equalPartitionPts' (suc k , suc l , p) = refl
 
  equalPartitionŒî : ‚àÄ k ‚Üí
    pts' equalPartition (fsuc k) -·µ£ pts' equalPartition (finj k)
    ‚â° Œî ¬∑·µ£ rat [ 1 / 2+ n ]
  equalPartitionŒî (zero , zero , snd‚ÇÅ) = ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï snd‚ÇÅ))
  equalPartitionŒî (zero , suc fst‚ÇÇ , snd‚ÇÅ) =
   Lùêë.lem--063 {a}
  equalPartitionŒî (suc fst‚ÇÅ , zero , snd‚ÇÅ) =
    Lùêë.lem--089 {b} {a} {Œî ¬∑·µ£ rat [ pos (suc fst‚ÇÅ) / 2+ n ]}
     ‚àô cong‚ÇÇ (_-·µ£_)
       (sym (¬∑IdR Œî)) (cong (Œî ¬∑·µ£_) (cong (rat ‚àò [_/ 2+ n ])
         (cong (pos ‚àò pred‚Ñï) snd‚ÇÅ)))
       ‚àô sym (ùêë'.¬∑DistR- _ _ _) ‚àô
        cong (Œî ¬∑·µ£_)
         (cong‚ÇÇ {x = 1}
          {rat [ pos (suc (suc n)) / 2+ n ]}
          _-·µ£_ (cong rat (‚Ñö.[n/n]‚â°[m/m] 0 (suc n)))
          {rat [ pos (suc n) / 2+ n ]}
          {rat [ pos (suc n) / 2+ n ]}
          refl
          ‚àô -·µ£-rat‚ÇÇ [ (pos (suc (suc n))) / 2+ n ] [ pos (suc n) / 2+ n ]
           ‚àô cong rat
               (‚Ñö.n/k-m/k (pos (suc (suc n))) (pos (suc n)) (2+ n) ‚àô
                  cong [_/ 2+ n ] (cong (‚Ñ§._- pos (suc n))
                      (‚Ñ§.pos+ 1 (suc n)) ‚àô ‚Ñ§.plusMinus (pos (suc n)) 1)))
                      
  equalPartitionŒî (suc k , suc l , p) =
   Lùêë.lem--088 {a} ‚àô
       sym (ùêë'.¬∑DistR- _ _ _) ‚àô
         cong (Œî ¬∑·µ£_) zz
    where
    zz : rat (t (suc k)) -·µ£ rat (t k) ‚â° rat [ 1 / 2+ n ]
    zz = cong‚ÇÇ {x = rat (t (suc k))}
          {rat [ pos (suc (suc k)) / 2+ n ]}
          _-·µ£_ refl {rat (t k)} {rat [ pos (suc k) / (2+ n) ]}
           refl  ‚àô -·µ£-rat‚ÇÇ 
          ([ pos (suc (suc k)) / 2+ n ]) ([ pos (suc k) / 2+ n ]) ‚àô
           cong
             {x = [ pos (suc (suc k)) / 2+ n ] ‚Ñö.- [ pos (suc k) / 2+ n ]}
             {y = [ 1 / 2+ n ]}
             rat (‚Ñö.n/k-m/k (pos (suc (suc k))) (pos (suc k)) (2+ n)  ‚àô
                cong [_/ 2+ n ] (cong (‚Ñ§._- pos (suc k)) (‚Ñ§.pos+ 1 (suc k))
                
                 ‚àô ‚Ñ§.plusMinus (pos (suc k)) 1))
                 
 equalPartition-2‚Åø : ‚Ñï ‚Üí Partition[ a , b ] 
 equalPartition-2‚Åø n = equalPartition (pred‚Ñï (pred‚Ñï (2^ (suc n))))


llll : abs·µ£ (rat [ pos 0 / 1+ 0 ] -·µ£ rat [ pos 0 / 1+ 0 ]) ‚â§·µ£
      rat [ pos 0 / 1+ 0 ]
llll = ‚â°·µ£Weaken‚â§·µ£ _ _
   (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _) ‚àô abs·µ£0
     ‚àô cong {x = zero} (Œª z ‚Üí rat [ pos z / 1+ z ]) refl )
  
0<2^-‚Ñö : ‚àÄ n ‚Üí ‚Ñö.0< [ pos (2^ n) / 1+ 0 ]
0<2^-‚Ñö n = ‚Ñö.<‚Üí0< [ pos (2^ n) / 1+ 0 ] (‚Ñö.<‚Ñ§‚Üí<‚Ñö 0 (pos (2^ n))
 (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< 0 _) (0<2^ n) ))

2^-mon : ‚àÄ n ‚Üí 2^ n ‚Ñï.< 2^ (suc n)
2^-mon zero = ‚Ñï.‚â§-solver 2 2
2^-mon (suc n) = ‚Ñï.<-+-< (2^-mon n) (2^-mon n) 

lemXX : ‚àÄ n ‚Üí 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc n))) ‚â° 2^ (suc n)
lemXX n = ‚Ñï.k+pred‚Ñï‚Çñ {2} {2^ (suc n)} (‚Ñï.‚â§-+-‚â§ {1} {2^ n} {1} {2^ n}
 (0<2^ n) (0<2^ n))

inv‚Ñö‚Çä-inj : ‚àÄ a b ‚Üí fst (inv‚Ñö‚Çä a) ‚â° fst (inv‚Ñö‚Çä b) ‚Üí fst a ‚â° fst b 
inv‚Ñö‚Çä-inj a b x =
  sym (‚Ñö.inv‚Ñö‚Çä-invol _)
  ‚àô‚àô cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° x) ‚àô‚àô
  ‚Ñö.inv‚Ñö‚Çä-invol _


module Resample where

 clampDeltaSplit : ‚àÄ L L' x y ‚Üí L ‚â§·µ£ L' ‚Üí x ‚â§·µ£ y
             ‚Üí (y -·µ£ x) ‚â°
               (min·µ£ L y -·µ£ min·µ£ L x)
                +·µ£ (clamp·µ£ L L' y -·µ£ clamp·µ£ L L' x)
                +·µ£ (max·µ£ L' y -·µ£ max·µ£ L' x)
 clampDeltaSplit = {!!}

 resampledRiemannSum' : ‚àÄ a b ‚Üí  (‚Ñù ‚Üí ‚Ñù)
   ‚Üí (pa pa' : Partition[ a , b ])
    (s : Sample pa) ‚Üí ‚Ñù
 resampledRiemannSum' a b f pa pa' sa =
   foldlFin {n = 2 ‚Ñï.+ P'.len}
      (Œª s  k ‚Üí
        let  a' = P'.pts' (finj k)
             b' = P'.pts' (fsuc k)
        in s +·µ£
            foldlFin {n = 2 ‚Ñï.+ P.len}
            (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
              b-a ¬∑·µ£ (f t) ) 0
                (Œª k ‚Üí  S.samplesŒ£ k ,
                 clamp·µ£ a' b' (P.pts' (fsuc k))
                  -·µ£ clamp·µ£ a' b' (P.pts' (finj k)))
        )
      0
      (idfun _)

  where
  module P = Partition[_,_] pa
  module P' = Partition[_,_] pa'
  module S = Sample sa


 resampledRiemannSum : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí  (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù)
   ‚Üí (pa pa' : Partition[ a , b ])
    (s : Sample pa) ‚Üí ‚Ñù
 resampledRiemannSum a b a‚â§b f pa pa' sa =
   foldlFin {n = 2 ‚Ñï.+ P'.len}
      (Œª s  k ‚Üí
        let  a' = P'.pts' (finj k)
             b' = P'.pts' (fsuc k)
        in s +·µ£
            foldlFin {n = 2 ‚Ñï.+ P.len}
            (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
              b-a ¬∑·µ£ (f (clamp·µ£ a' b' t)
                (isTrans‚â§·µ£ _ _ _ (P'.a‚â§pts' (finj k))
                  (‚â§clamp·µ£ a' b' t (P'.pts'‚â§pts' k)))
                (isTrans‚â§·µ£ _ _ _ (clamp‚â§·µ£ a' b' t) (P'.pts'‚â§b (fsuc k)))) ) 0
                (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
        )
      0
      (idfun _)
      
      -- (Œª k ‚Üí  k (P'.pts' (fsuc k) , P'.pts' (finj k)))
  -- foldlFin {n = 2 ‚Ñï.+ P.len}
  --    (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£
  --      b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
  --        (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
  where
  module P = Partition[_,_] pa
  module P' = Partition[_,_] pa'
  module S = Sample sa
  
 resample : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí (pa pa' : Partition[ a , b ])
    (sa : Sample pa)  ‚Üí ‚àÄ f 
    ‚Üí resampledRiemannSum' a b f pa pa' sa
       ‚â° riemannSum' sa f
 resample = {!!}

 partitionClamp : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí ‚àÄ a' b' ‚Üí a' ‚â§·µ£ b'
   ‚Üí a ‚â§·µ£ a' ‚Üí  b' ‚â§·µ£ b ‚Üí  
   (pa : Partition[ a , b ]) ‚Üí
    b' -·µ£ a' ‚â°
         foldlFin {n = 2 ‚Ñï.+ len pa}
      (Œª s  k ‚Üí
        let  a* = pts' pa (finj k)
             b* = pts' pa (fsuc k)
        in s +·µ£
            ((clamp·µ£ a' b' b* -·µ£ clamp·µ£ a' b' a*))
        )
      0
      (idfun _) 
 partitionClamp = {!!}
 
 resampleŒî-UC : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí (pa pa' : Partition[ a , b ])
    (sa : Sample pa)  ‚Üí ‚àÄ f ‚Üí IsUContinuous f ‚Üí (Œµ : ‚Ñö‚Çä)  
    ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     (mesh pa <·µ£ rat (fst Œ¥) ‚Üí mesh pa' <·µ£ rat (fst Œ¥) ‚Üí
      abs·µ£ (riemannSum' sa f -·µ£ riemannSum' (leftSample pa') f) <·µ£
     rat (fst Œµ))
 resampleŒî-UC a b a<b pa pa' sa f fcu Œµ =
   PT.map
     (map-snd (Œª {Œ¥} X m-pa< m-pa'< ‚Üí 
       isTrans‚â°<·µ£ _ _ _
        (cong abs·µ£
         (cong (_-·µ£_ (S.riemannSum' f))
           (sym (resample a b (<·µ£Weaken‚â§·µ£ _ _ a<b) pa' pa (leftSample pa') f))
           ‚àô zip-foldFin-·µ£ (2 ‚Ñï.+ len pa)
             
             (Œª k ‚Üí  S.samplesŒ£ k , P.pts' (fsuc k) -·µ£ P.pts' (finj k))
             (idfun _)
             _ _ _ _))
        (isTrans<‚â°·µ£ _ _ _
          
          (foldFin+<-abs (2 ‚Ñï.+ len pa) ‚Ñï.zero-<-suc _ 0
            _ (Œª k ‚Üí (pts' pa (fsuc k) -·µ£ pts' pa (finj k)) ¬∑·µ£
                         fst Œ∑)
                          (Œª k ‚Üí
                            (S.samplesŒ£ k ,
                             P.pts' (fsuc k) -·µ£ P.pts' (finj k)) , k)
                          (idfun _)
           llll
           {!ruc!} 
           )
          {!!})

       ))
    (IsUContinuous-Œµ·µ£ f fcu
     (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£ inv‚Ñù‚Çä (_ , x<y‚Üí0<y-x _ _ a<b)))

  where
    Œ∑ : ‚Ñù‚Çä
    Œ∑ = (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ ‚Çä¬∑·µ£ inv‚Ñù‚Çä (_ , x<y‚Üí0<y-x _ _ a<b))
    module P = Partition[_,_] pa
    module P' = Partition[_,_] pa'
    module S = Sample sa

    ruc : ‚àÄ k ‚Üí
        abs·µ£
      ((P.pts' (fsuc k) -·µ£ P.pts' (finj k)) ¬∑·µ£ f (S.samplesŒ£ k .fst) -·µ£
       foldlFin
       (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£ b-a ¬∑·µ£ f t) 0
       (Œª k‚ÇÅ ‚Üí
          P'.samplesŒ£ P'.leftSample k‚ÇÅ ,
          clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
          -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (finj k‚ÇÅ))))
      <·µ£
      (P.pts' (fsuc k) -·µ£ P.pts' (finj k))
      ¬∑·µ£ fst Œ∑
    ruc k = 
      isTrans‚â°<·µ£ _ _ _
        (cong (abs·µ£ ‚àò (_-·µ£ (foldlFin
       (Œª s ((t , a‚â§t , t‚â§b) , b-a) ‚Üí s +·µ£ b-a ¬∑·µ£ f t) 0
       (Œª k‚ÇÅ ‚Üí
          P'.samplesŒ£ P'.leftSample k‚ÇÅ ,
          clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
          -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k)) (P'.pts' (finj k‚ÇÅ))
          ))))
           (cong (_¬∑·µ£ f (S.samplesŒ£ k .fst))
             (partitionClamp a b a<b
               (P.pts' (finj k))
               (P.pts' (fsuc k))
                (P.pts'‚â§pts' k)
               (P.a‚â§pts' (finj k)) (P.pts'‚â§b (fsuc k)) pa'
               ) ‚àô ¬∑·µ£Comm _ _ ‚àô
                sym (foldFin¬∑DistL (2 ‚Ñï.+ len pa') _ _ _
                 (idfun _))) ‚àô
                cong abs·µ£
                 (zip-foldFin-·µ£ (2 ‚Ñï.+ len pa')
                 (idfun _)
                  (Œª k‚ÇÅ ‚Üí
                    (samplesŒ£ P'.leftSample k‚ÇÅ ,
                        clamp·µ£ (P.pts' (finj k))
                         (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
                     -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k))
                         (P'.pts' (finj k‚ÇÅ))))
                    _ _ _
                  0))
           (isTrans<‚â°·µ£ _ _ _
            (foldFin+<-abs (2 ‚Ñï.+ len pa')
              ‚Ñï.zero-<-suc _ 0 _
                (Œª kk ‚Üí 
                 (clamp·µ£ (P.pts' (finj k)) ((P.pts' (fsuc k)))
                  (P'.pts' (fsuc kk)) -·µ£
                   clamp·µ£ (P.pts' (finj k)) ((P.pts' (fsuc k)))
                    (P'.pts' (finj kk)))
                         ¬∑·µ£ fst Œ∑)
                ((Œª k‚ÇÅ ‚Üí k‚ÇÅ ,
                    (samplesŒ£ P'.leftSample k‚ÇÅ ,
                       clamp·µ£ (P.pts' (finj k))
                        (P.pts' (fsuc k)) (P'.pts' (fsuc k‚ÇÅ))
                          -·µ£ clamp·µ£ (P.pts' (finj k)) (P.pts' (fsuc k))
                          (P'.pts' (finj k‚ÇÅ)))))
                (idfun _)
                {!!}
              {!!})
            {!!} )

-- Integrate-UContinuous : ‚àÄ (a b : ‚Ñö) ‚Üí a ‚Ñö.< b ‚Üí ‚àÄ f ‚Üí IsUContinuous f ‚Üí
--  Œ£ ‚Ñù Œª R ‚Üí on[ (rat a) , (rat b) ]IntegralOf f is' R 
-- Integrate-UContinuous a b a<b f ucf =
--  (lim (s ‚àò fst ‚àò z) Œª Œ¥ Œµ ‚Üí
--   invEq (‚àº‚âÉabs<Œµ ((s (fst (z Œ¥)))) (s (fst (z Œµ))) (Œ¥ ‚Ñö‚Çä+ Œµ)) (z-C Œ¥ Œµ))
--   , isI
--  where

--  Œî : ‚Ñö‚Çä
--  Œî = ‚Ñö.<‚Üí‚Ñö‚Çä a b a<b

--  open Integration (rat a) (rat b) (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b)) hiding (Œî)

--  s : ‚Ñï ‚Üí ‚Ñù
--  s n = riemannSum' (leftSample (equalPartition-2‚Åø n)) f

--  zTySnd : ‚Ñö‚Çä ‚Üí ‚Ñï ‚Üí Type
--  zTySnd Œµ =
--    (Œª n ‚Üí (u v : ‚Ñù) ‚Üí abs·µ£ (u -·µ£ v)
--        <·µ£ rat (fst Œî ‚Ñö.¬∑ fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ]
--         , 0<2^-‚Ñö (suc n)))) ‚Üí
--         abs·µ£ (f u -·µ£ f v) <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œî)))
--  z : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ ‚Ñï (zTySnd Œµ)
--  z Œµ =
--   let (Œ¥ , X) = ucf (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œî)
--       ((m , u) , p , (0‚â§u , _)) = ‚Ñö.ceil-[1-frac]‚Ñö‚Çä (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥)
--       (n , (N , _)) = log2‚Ñï m
--       ppp : _
--       ppp = ‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _)
--                   (‚Ñï.<-weaken  (‚Ñï.<-trans (subst (m ‚Ñï.<_) (sym (2^-^ n)) N)
--                    (2^-mon n))))
--       qq : (fst (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥)) ‚Ñö.‚â§ [ pos m / one ]
--       qq = subst2 (‚Ñö._‚â§_) (‚Ñö.+IdR (fst (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥))) p
--             (‚Ñö.‚â§-o+ _ _ (fst (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥)) 0‚â§u)
--       p' : (fst (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥)) ‚Ñö.‚â§ ([ pos (2^ (suc n)) / one ])
--       p' = ‚Ñö.isTrans‚â§ (fst (Œî ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œ¥)) _ _ qq ppp
--       Œî/2^n<Œ¥ : (fst Œî ‚Ñö.¬∑ _) ‚Ñö.‚â§ (fst Œ¥)
--       Œî/2^n<Œ¥ = ‚Ñö.x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z (fst Œî) (fst Œ¥)
--          ([ pos (2^ (suc n)) / one ] , 0<2^-‚Ñö (suc n))
--           (subst ((fst Œî) ‚Ñö.‚â§_ )
--            (‚Ñö.¬∑Comm (fst Œ¥) [ pos (2^ (suc n)) / one ])
--             (‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z (fst Œî) [ pos (2^ (suc n)) / one ] Œ¥ p')  )
          
--       xzx : (u v : ‚Ñù) ‚Üí abs·µ£ (u -·µ£ v)
--        <·µ£ rat (fst Œî ‚Ñö.¬∑ fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ] , 0<2^-‚Ñö (suc n)))) ‚Üí
--         abs·µ£ (f u -·µ£ f v) <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œî))
--       xzx u v =
--         fst (‚àº‚âÉabs<Œµ _ _ _)
--          ‚àò X u v ‚àò invEq (‚àº‚âÉabs<Œµ _ _ _)
--           ‚àò flip (isTrans<‚â§·µ£ _
--            (rat ( (fst Œî ‚Ñö.¬∑
--               (fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / 1+ zero ] , 0<2^-‚Ñö (suc n))))))) _)
--                (‚â§‚Ñö‚Üí‚â§·µ£ _ _ Œî/2^n<Œ¥) 
   
--   in (n , xzx)


--  c-C : ‚àÄ (Œµ : ‚Ñö‚Çä) n m 
--           ‚Üí ((u v : ‚Ñù) ‚Üí abs·µ£ (u -·µ£ v) <·µ£
--             rat (fst Œî ‚Ñö.¬∑
--              fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ] , 0<2^-‚Ñö (suc n))))
--                 ‚Üí abs·µ£ (f u -·µ£ f v) <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œî)))
         
--           ‚Üí abs·µ£ (s (n ‚Ñï.+ m) -·µ£ s n) <·µ£ rat (fst Œµ) 
--  c-C Œµ n m X =
--    isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
--      (cong abs·µ£ zzz'')
--       ((foldFin+<-abs (2^ (suc n)) (0<2^ (suc n)) _ 0 _
--         (Œª _ ‚Üí rat (fst Œµ) ¬∑·µ£
--             (rat (fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / 1+ zero ] , 0<2^-‚Ñö (suc n))))))
--              _ (Œª _ ‚Üí tt)
--         llll uuzz)))
--       ((foldFin+Const (2^ (suc n)) _ (Œª _ ‚Üí tt) ‚àô
--            ¬∑·µ£Comm _ _
--            ‚àô sym (¬∑·µ£Assoc _ _ _)
--            ‚àô ùêë'.¬∑IdR' _ _
--             (sym (rat¬∑·µ£rat _ _)
--              ‚àô cong rat
--              (‚Ñö.inv‚Ñö‚Çä[x]¬∑x ([ pos (2^ (suc n)) / one ] , 0<2^-‚Ñö (suc n))) )))
--   where
--   ss' :  Fin (2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc (n))))) ‚Üí
--         Œ£ (Œ£ ‚Ñù (Œª t‚ÇÅ ‚Üí (rat a ‚â§·µ£ t‚ÇÅ) √ó (t‚ÇÅ ‚â§·µ£ rat b))) (Œª v ‚Üí ‚Ñù)
--   ss' k = EP.samplesŒ£ EP.leftSample k ,
--         EP.pts'  (fsuc k) -·µ£ EP.pts'  (finj k)
--    where 
--    module EP = Partition[_,_] (equalPartition (pred‚Ñï (pred‚Ñï (2^ (suc n)))))


--   ss : Fin (2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc (n ‚Ñï.+ m))))) ‚Üí
--         Œ£ (Œ£ ‚Ñù (Œª t‚ÇÅ ‚Üí (rat a ‚â§·µ£ t‚ÇÅ) √ó (t‚ÇÅ ‚â§·µ£ rat b))) (Œª v ‚Üí ‚Ñù)
--   ss k = EP.samplesŒ£ EP.leftSample k ,
--         EP.pts'  (fsuc k) -·µ£ EP.pts'  (finj k)
--    where 
--    module EP = Partition[_,_] (equalPartition (pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))))

--   fp : 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc (n ‚Ñï.+ m)))) ‚â° 2^ (suc (n ‚Ñï.+ m))
--   fp = lemXX (n ‚Ñï.+ m)

--   fp' : 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc n))) ‚â° 2^ (suc n)
--   fp' = lemXX n


--   aaa : _
--   aaa = _

--   zz : s (n ‚Ñï.+ m) ‚â° foldlFin {n = 2^ (suc n)} (foldlFin {n = 2^ m} aaa)
--                       (rat [ pos 0 / 1+ 0 ])
--                       (curry ((ss ‚àò substFin (sym fp)) ‚àò Fin^2¬∑ (suc n) m))
--   zz = foldlFin-substN
--       {n = 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc (n ‚Ñï.+ m))))}
--       {n' = 2^ (suc (n ‚Ñï.+ m))}
--       fp (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t) )
--         0 ss
--      ‚àô foldFin¬∑2^ (suc n) m _ 0 _


--   zz' : foldlFin {n = 2^ (suc n)} (foldlFin {n = 2^ m} aaa)
--                       (rat [ pos 0 / 1+ 0 ])
--                       (curry ((ss ‚àò substFin (sym fp)) ‚àò Fin^2¬∑ (suc n) m))
--                ‚â° _
--   zz' = cong (Œª ff ‚Üí foldlFin {n = 2^ (suc n)} ff
--                       (rat [ pos 0 / 1+ 0 ])
--                       (curry ((ss ‚àò substFin (sym fp)) ‚àò Fin^2¬∑ (suc n) m)))
--               (funExt‚ÇÇ
--                  Œª xx y ‚Üí foldFin+0·µ£ (2^ m) _ _ xx)
                 
--   zzz'' : s (n ‚Ñï.+ m) -·µ£ s n ‚â°
--      foldlFin {n = 2^ (suc n)} _
--          (0 -·µ£ 0)
--          _
--   zzz'' = cong‚ÇÇ _-·µ£_ (zz ‚àô zz')
--          (foldlFin-substN
--       {n = 2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc n)))}
--       {n' = 2^ (suc n)}
--       fp' (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t) )
--         0 ss')
--          ‚àô
--        zip-foldFin-·µ£ (2^ (suc n)) _ _ _ _
--         0 0


--   uuzzz : (k : Fin (2^ (suc n))) (k' : Fin (2^ m)) ‚Üí
--      abs·µ£
--       ((ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m (k , k')))) 
--        .snd
--        ¬∑·µ£
--        f ((ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m (k , k')))) 
--         .fst .fst)
--        -·µ£
--        rat (fst (inv‚Ñö‚Çä ([ pos (2^ m) / 1+ 0 ] , 0<2^-‚Ñö m))) ¬∑·µ£
--        (ss' (substFin (sym fp') k) .snd ¬∑·µ£
--         f (ss' (substFin (sym fp') k) .fst .fst))) <·µ£
--          rat (fst Œµ) ¬∑·µ£ rat (fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ] ,
--           (0<2^-‚Ñö (suc n)))))
--            ¬∑·µ£ rat (fst (inv‚Ñö‚Çä ([ pos (2^ m) / one ] , 0<2^-‚Ñö m)))
--   uuzzz k k' = isTrans<‚â°·µ£ _ _ _
--     (isTrans‚â°<·µ£ _ _ _
--     (zzz)
--     (<·µ£-o¬∑·µ£ _ _ (abs·µ£
--                  (Œî''
--                   ¬∑·µ£ rat [ 1 / 2+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m))) ])
--                  , isTrans<‚â§·µ£ _ _ _
--                     (snd ((_ , x<y‚Üí0<y-x _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b))
--                     ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä _)) (‚â§abs·µ£ _))
--                   (X _ _
--                     (isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
--                      (cong abs·µ£
--                       Lùêë.lem--063)
--                      (isTrans‚â°<·µ£ _ _ _
--                       (abs·µ£NonNeg _
--                         (NonNeg¬∑·µ£ _ _ 
--                             ((<·µ£Weaken‚â§·µ£ _ _
--                              (x<y‚Üí0<y-x _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b))))
--                               ((‚â§‚Ñö‚Üí‚â§·µ£ _ _
--                               (‚Ñö.0‚â§pos (fst k')
--                               (2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m)
--                               ‚Ñï.+ 2^ (n ‚Ñï.+ m)))))))))
--                       (isTrans‚â°<·µ£ _ _ _
--                        (cong (_¬∑·µ£
--                 rat [ pos (fst k')
--                   / 2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m) ‚Ñï.+ 2^ (n ‚Ñï.+ m))) ])
--                    (-·µ£-rat‚ÇÇ _ _)
--                  ‚àô sym (rat¬∑·µ£rat _ _))
--                   (<‚Ñö‚Üí<·µ£ _ _
--                      (‚Ñö.<-o¬∑ _ [ pos (2^ m) / _ ] (b ‚Ñö.- a)
--                     (‚Ñö.-< a b a<b)
--                    (‚Ñö.[k/n]<[k'/n] (pos (fst k')) _
--                      (2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m) ‚Ñï.+ 2^ (n ‚Ñï.+ m))))
--                     (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _) (snd k'))))))))
--                      (cong rat (cong (fst Œî ‚Ñö.¬∑_)
--                       (cong [_/ (2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m) ‚Ñï.+ 2^ (n ‚Ñï.+ m)))) ]
--                        (cong pos (sym (‚Ñï.¬∑-identity ≥ _)))
--                       ‚àô qqquuu 1 ‚àô
--                        cong [ 1 /_]
--                        (cong (1+_ ‚àò pred‚Ñï) (lemXX n)
--                          ‚àô ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï-lem _ _ (‚Ñ§.injPos $
--                            (snd (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (pos (2^ (suc n)))
--                              (0<2^-‚Ñö (suc n))))))))) ))
--                     ))
--                       (cong‚ÇÇ _¬∑·µ£_ (abs·µ£NonNeg _
--                        (NonNeg¬∑·µ£ _ _
--                         (<·µ£Weaken‚â§·µ£ _ _ (x<y‚Üí0<y-x _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b)))
--                          (‚â§‚Ñö‚Üí‚â§·µ£ _ _
--                           ((‚Ñö.0‚â§pos 1
--                            (2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m) ‚Ñï.+ 2^ (n ‚Ñï.+ m)))))))))
--                         refl
--                         -- (cong rat (‚Ñö.¬∑Comm (fst Œµ) (fst (inv‚Ñö‚Çä Œî))))
--                        ‚àô (cong‚ÇÇ _¬∑·µ£_
--                          (cong‚ÇÇ _¬∑·µ£_
--                            (-·µ£-rat‚ÇÇ _ _)
--                            (cong rat
--                              (cong
--                                  {x = [
--                                    pos (2 ‚Ñï.+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m))))
--                                     / 1 ] , _}
--                                  {y = (([ pos (2^ n ‚Ñï.+ 2^ n) / one ]
--                                   , 0<2^-‚Ñö (suc n)) ‚Ñö‚Çä¬∑
--                              ([ pos (2^ m) / one ] , 0<2^-‚Ñö m))}
--                              (fst ‚àò inv‚Ñö‚Çä)
--                                (‚Ñö‚Çä‚â° (cong [_/ 1 ]
--                                 (cong pos (lemXX (n ‚Ñï.+ m)
--                                   ‚àô 2^+ (suc n) m)
--                                     ‚àô ‚Ñ§.pos¬∑pos (2^ (suc n)) (2^ m) )))
--                               ‚àô cong fst
--                                (sym (‚Ñö.inv‚Ñö‚ÇäDist¬∑
--                                 ([ pos (2^ n ‚Ñï.+ 2^ n) / one ] , 0<2^-‚Ñö (suc n))
--                                 ([ pos (2^ m) / one ] , 0<2^-‚Ñö m)))) ‚àô
--                              rat¬∑·µ£rat _ _))
--                          (rat¬∑·µ£rat _ _ ‚àô
--                           cong (rat (fst Œµ) ¬∑·µ£_)
--                             (sym (inv‚Ñù‚Çä-rat _)) )
--                          ‚àô‚àô Lùêë.lem--090
--                          ‚àô‚àô [x¬∑y·µ£]/‚Çäy _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))

--    where

   

--     Œî'' = Integration.Œî (rat a) (rat b)
--         (<·µ£Weaken‚â§·µ£ (rat a) (rat b) (<‚Ñö‚Üí<·µ£ a b a<b))

--     k* = substFin (sym fp') k
--     kk = (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m (k , k')))

--     qqquuu : ‚àÄ l ‚Üí ‚Ñö.[
--               pos (2^ m ‚Ñï.¬∑ l) ,
--               (2+ pred‚Ñï (pred‚Ñï (2^ (n ‚Ñï.+ m) ‚Ñï.+ 2^ (n ‚Ñï.+ m))))
--               ]
--               ‚â° ‚Ñö.[ pos (l) , (2+ pred‚Ñï (pred‚Ñï (2^ (suc n)))) ]
--     qqquuu l = (‚Ñö.eq/ _ _
--                     (cong‚ÇÇ ‚Ñ§._¬∑_
--                      (‚Ñ§.pos¬∑pos (2^ m) l ‚àô
--                        ‚Ñ§.¬∑Comm (pos (2^ m)) (pos l))
--                       ((sym (snd (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ _ (tt)))) ‚àô
--                         cong pos (lemXX n))
--                      ‚àô sym (‚Ñ§.¬∑Assoc (pos l) _ _)
--                       ‚àô cong (pos l ‚Ñ§.¬∑_)
--                        (‚Ñ§.¬∑Comm (pos (2^ m)) _
--                         ‚àô (sym (‚Ñ§.pos¬∑pos (2^ (suc n)) (2^ m)) ‚àô
--                          cong pos (sym (2^+ (suc n) m)))
--                           ‚àô cong (pos) (sym (lemXX (n ‚Ñï.+ m))))))

--     zzz : abs·µ£ (ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m (k , k'))) .snd
--             ¬∑·µ£
--             f
--             (ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m (k , k'))) .fst
--              .fst)
--             -·µ£
--             rat (fst (inv‚Ñö‚Çä ([ pos (2^ m) / 1+ 0 ] , 0<2^-‚Ñö m))) ¬∑·µ£
--             (ss' (substFin (sym fp') k) .snd ¬∑·µ£
--              f (ss' (substFin (sym fp') k) .fst .fst)))
--            ‚â° _

--     zzz = cong abs·µ£ (cong‚ÇÇ _-·µ£_
--         (cong‚ÇÇ _¬∑·µ£_ (equalPartitionŒî
--          (pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))) kk)
--           (cong f ((equalPartitionPts'
--          (pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))) (finj kk) ‚àô
--           cong (rat a +·µ£_) (cong (Œî'' ¬∑·µ£_) (cong rat
--            (cong [_/ (2+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))) ]
--             (‚Ñ§.pos+ (2^ m ‚Ñï.¬∑ fst k) (fst k'))
--              ‚àô sym (‚Ñö.n/k+m/k (pos (2^ m ‚Ñï.¬∑ fst k)) (pos (fst k')) _))
--              ‚àô sym (+·µ£-rat
--                [ (pos (2^ m ‚Ñï.¬∑ fst k)) / (2+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))) ]
--                [ (pos (fst k')) / (2+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m)))) ]
--                ))
--               ‚àô ¬∑DistL+ _ _ _) ‚àô
--             +·µ£Assoc _ _ _
--             ‚àô cong‚ÇÇ _+·µ£_ (cong (rat a +·µ£_)
--                 (cong {y = rat [ pos (fst (finj k*))
--                   / 2+ pred‚Ñï (pred‚Ñï (2^ (suc n))) ]} (Œî'' ¬∑·µ£_)
--                   (cong rat (qqquuu (fst k)))))
--                    refl))))
--         (cong (rat (fst (inv‚Ñö‚Çä ([ pos (2^ m) / 1+ 0 ] , 0<2^-‚Ñö m)))
--              ¬∑·µ£_)
--               (cong‚ÇÇ _¬∑·µ£_  ((equalPartitionŒî
--          (pred‚Ñï (pred‚Ñï (2^ (suc n)))) k*))
--                 (cong f
--                  (equalPartitionPts'
--          (pred‚Ñï (pred‚Ñï (2^ (suc n)))) (finj k*)))
--             ) ‚àô ¬∑·µ£Assoc _ _ _ ‚àô cong‚ÇÇ _¬∑·µ£_
--              (¬∑·µ£Comm _ _ ‚àô sym (¬∑·µ£Assoc _ _ _) ‚àô
--               cong {y = rat [ 1 / 2+ pred‚Ñï (pred‚Ñï (2^ (suc n ‚Ñï.+ m))) ]}
--                (Œî'' ¬∑·µ£_) (sym (rat¬∑·µ£rat _ _) ‚àô
--                 cong rat (‚Ñö.[1/n]¬∑[1/m]‚â°[1/n¬∑m]
--                   (2+ pred‚Ñï (pred‚Ñï (2^ (suc n))))
--                   _ ‚àô inv‚Ñö‚Çä-inj _ _ (cong [_/ one ]
--                    (cong (pos) (cong‚ÇÇ (‚Ñï._¬∑_) (lemXX n)
--                    (cong ‚Ñ§.abs (sym (snd (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ _ ((0<2^-‚Ñö m))))))
--                     ‚àô‚àô sym (2^+ (suc n) m) ‚àô‚àô
--                     sym (lemXX (n ‚Ñï.+ m))
--                      ))) ))) refl  )
--          ‚àô sym (ùêë'.¬∑DistR- _ _ _))
--          ‚àô ¬∑abs·µ£ _ _ 
     
--   uuzz : (k : Fin (2^ (suc n))) ‚Üí
--           abs·µ£
--           (foldlFin (Œª a‚ÇÅ y ‚Üí a‚ÇÅ +·µ£ y .snd ¬∑·µ£ f (y .fst .fst)) 0
--            (curry
--             (Œª x‚ÇÅ ‚Üí ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m x‚ÇÅ))) k)
--            -·µ£
--            (ss' (substFin (sym fp') k)) .snd
--            ¬∑·µ£
--            f ((ss' (substFin (sym fp') k)) .fst .fst))
--           <·µ£
--           rat (fst Œµ) ¬∑·µ£ rat (fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ] , _)))
--   uuzz k = isTrans‚â°<·µ£ _ _ _
--     (cong abs·µ£
--      (cong (_-·µ£_ (foldlFin (Œª a‚ÇÅ y ‚Üí a‚ÇÅ +·µ£ y .snd ¬∑·µ£ f (y .fst .fst)) 0
--            (curry
--             (Œª x‚ÇÅ ‚Üí ss (substFin (Œª i ‚Üí fp (~ i)) (Fin^2¬∑ (suc n) m x‚ÇÅ))) k))
--              ) (((sym (ùêë'.¬∑IdL' _ _
--                (sym (rat¬∑·µ£rat _
--                 ((fst (inv‚Ñö‚Çä (([ pos (2^ m) / 1+ 0 ] ,
--                   0<2^-‚Ñö m))))))
--                  ‚àô cong rat (‚Ñö.x¬∑inv‚Ñö‚Çä[x] ([ pos (2^ m) / 1+ 0 ] ,
--                   0<2^-‚Ñö m)))))
--               ‚àô sym (¬∑·µ£Assoc _ _ _)) ‚àô
--                sym (foldFin+Const (2^ m) _ (Œª _ ‚Üí tt)))
--                ‚àô
--                zip-foldFin-·µ£ (2^ m) _ _ _ _ _ _)
--                )
--     (isTrans<‚â°·µ£ _ _ _
--        (foldFin+<-abs (2^ m) (0<2^ m) _ 0 _
--          (Œª _ ‚Üí rat (fst Œµ) ¬∑·µ£ rat (fst (inv‚Ñö‚Çä ([ pos (2^ (suc n)) / one ] ,
--           (0<2^-‚Ñö (suc n)))))
--            ¬∑·µ£ rat (fst (inv‚Ñö‚Çä ([ pos (2^ m) / one ] , 0<2^-‚Ñö m)))) _
--            (Œª _ ‚Üí tt)
--          llll (uuzzz k))
--        (foldFin+Const (2^ m) _ (Œª _ ‚Üí tt) ‚àô
--            ¬∑·µ£Comm _ _
--            ‚àô sym (¬∑·µ£Assoc _ _ _)
--            ‚àô ùêë'.¬∑IdR' _ _
--             (sym (rat¬∑·µ£rat _ _)
--              ‚àô cong rat (‚Ñö.inv‚Ñö‚Çä[x]¬∑x ([ pos (2^ m) / one ] , 0<2^-‚Ñö m))))) 
  
--  z-C : (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí abs·µ£ (s (fst (z Œ¥)) -·µ£ s (fst (z Œµ))) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ))
--  z-C Œ¥ Œµ = 
--       ‚Ñï.elimBy‚â§+ {A = Œª n n' ‚Üí ‚àÄ Œ¥ Œµ  
--        ‚Üí zTySnd Œ¥ n
--        ‚Üí zTySnd Œµ n'
--        ‚Üí abs·µ£ (s n -·µ£ s n') <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ))}
--       (Œª x y X Œ¥ Œµ x' y' ‚Üí 
--        subst2 _<·µ£_
--          (minusComm-abs·µ£ _ _)
--          (cong rat (‚Ñö.+Comm (fst Œµ) (fst Œ¥) ))
--          (X Œµ Œ¥ y' x'))
--       (Œª x y Œ¥ Œµ X _ ‚Üí
--         isTrans‚â°<·µ£ _ _ _
--           ((Œª i ‚Üí abs·µ£ (s x -·µ£ s (‚Ñï.+-comm y x i)))
--             ‚àô minusComm-abs·µ£ _ _)
--           (isTrans<‚â§·µ£ _ _ _
--            (c-C Œ¥ x y X)
--            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§+‚Ñö‚Çä (fst Œ¥) (fst Œ¥) Œµ (‚Ñö.isRefl‚â§ (fst Œ¥))))))
--       (fst (z Œ¥)) (fst (z Œµ)) Œ¥ Œµ (snd (z Œ¥)) (snd (z Œµ))


--  isI-lem : ‚àÄ (Œµ : ‚Ñö‚Çä) (n : ‚Ñï) ‚Üí
--            ‚àÄ ((p , t) : TaggedPartition[ (rat a) , (rat b) ]) ‚Üí
--             (mesh p <·µ£ rat (fst ?) ‚Üí
--               abs·µ£ (riemannSum' t f -·µ£ s) <·µ£ rat (fst Œµ))

--  isI-lem = {!!}
 
--  isI : on[ rat a , rat b ]IntegralOf f is'
--         lim (Œª x ‚Üí s (fst (z x)))
--         (Œª Œ¥ Œµ ‚Üí
--            invEq (‚àº‚âÉabs<Œµ (s (fst (z Œ¥))) (s (fst (z Œµ))) (Œ¥ ‚Ñö‚Çä+ Œµ))
--            (z-C Œ¥ Œµ))
--  isI Œµ =
--    let (Œ¥ , XŒ¥) = ucf (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œî)
--    in ‚à£ Œ¥ , {!!} ‚à£‚ÇÅ

-- -- IntegralOf-UContinuous : ‚àÄ a b a‚â§b f iucf
-- --    ‚Üí on[ (rat a) , (rat b) ]IntegralOf f is'
-- --      (Integrate-UContinuous a b a‚â§b f iucf) 
-- -- IntegralOf-UContinuous a b a‚â§b‚ÇÅ f iucf Œµ =
-- --   {!!}


-- -- -- Integral'-additive : ‚àÄ a b c f s s' ‚Üí
-- -- --   on[ a , b ]IntegralOf f is' s ‚Üí
-- -- --   on[ b , c ]IntegralOf f is' s' ‚Üí
-- -- --   on[ a , c ]IntegralOf f is' (s +·µ£ s')
-- -- -- Integral'-additive a b c f s s' S S' Œµ =
-- -- --   let P = S  (/2‚Çä Œµ)
-- -- --       P' = S' (/2‚Çä Œµ)
-- -- --   in PT.map2 {!!} P P'
     
-- -- -- meanLemma : ‚àÄ f x ‚Üí IsContinuous f ‚Üí
-- -- --   ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]  
-- -- --     (‚àÄ y ‚Üí abs·µ£ (x -·µ£ y) <·µ£ (rat (fst Œ¥))
-- -- --       ‚Üí ‚àÄ tp s ‚Üí abs·µ£ (riemannSum' {a = x} {b = y} {tp} s f -·µ£ abs·µ£ (x -·µ£ y) ¬∑·µ£ f x) <·µ£ abs·µ£ (x -·µ£ y) ¬∑·µ£ (rat (fst Œµ)) )
-- -- -- meanLemma = {!riemannSum'!}


-- -- -- -- FTOC : ‚àÄ x‚ÇÄ (f g F : ‚Ñù ‚Üí ‚Ñù) ‚Üí IsContinuous f ‚Üí IsContinuous F
-- -- -- --                  ‚Üí (‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí on[ x‚ÇÄ , x ]IntegralOf f is' F x)
-- -- -- --                  ‚Üí (‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí derivativeOf F at x is' g x)
-- -- -- --                  ‚Üí (‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí f x ‚â° g x)
-- -- -- -- FTOC x‚ÇÄ f F fC FC  D x x‚ÇÄ‚â§x Œµ' = {!!}


-- -- -- FTOC : ‚àÄ x‚ÇÄ (f F : ‚Ñù ‚Üí ‚Ñù) ‚Üí IsContinuous f ‚Üí IsContinuous F
-- -- --                  ‚Üí (‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí on[ x‚ÇÄ , x ]IntegralOf f is' F x)
-- -- --                  ‚Üí ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí derivativeOf F at x is' f x
-- -- -- FTOC x‚ÇÄ f F fC FC  D x x‚ÇÄ‚â§x Œµ' =  
-- -- --  PT.rec squash‚ÇÅ
-- -- --      (Œª (Œ∑ , Y)  ‚Üí
-- -- --      let Œµ = ‚Ñö.min‚Çä (/2‚Çä Œ∑) (/2‚Çä Œµ')
-- -- --      in 
-- -- --       PT.map2 (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
-- -- --           let Œ¥* = ‚Ñö.min‚Çä (‚Ñö.min‚Çä Œ¥ Œ¥') Œµ
-- -- --               ((tp , tp*) , (tpm , tpm*)) = tps x (Œµ) Œ¥*
-- -- --               tp' = concatTaggedPartition _ _ _ tp tp*
-- -- --               tpm' : mesh (fst tp') <·µ£ rat (fst Œ¥*)
-- -- --               tpm' = {!!}
-- -- --               z : abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- -- --                     +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f))  <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ Œµ))
-- -- --               z = isTrans‚â§<·µ£
-- -- --                      (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- -- --                     +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))
-- -- --                      _ _ (abs·µ£-triangle
-- -- --                       (riemannSum' (snd tp) f -·µ£ F x)
-- -- --                        ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f))
-- -- --                     (isTrans<‚â°·µ£ (abs·µ£ (((riemannSum' (snd tp) f -·µ£ F x)))
-- -- --                             +·µ£ abs·µ£ (((F (x +·µ£ rat (fst Œµ))
-- -- --                         -·µ£ (riemannSum' (snd tp') f))))) _ _
-- -- --                    (<·µ£Monotone+·µ£
-- -- --                      (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x))) _
-- -- --                       (abs·µ£ ((F (x +·µ£ rat (fst Œµ))
-- -- --                         -·µ£ (riemannSum' (snd tp') f)))) _
-- -- --                        (X tp (isTrans<‚â§·µ£ (mesh (fst tp)) _ _ tpm
-- -- --                           (( (
-- -- --                              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥*) (fst Œ¥)
-- -- --                               (‚Ñö.isTrans‚â§ (fst Œ¥*) _ (fst Œ¥)
-- -- --                                ((‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥)  (fst Œ¥') ) (fst Œµ)))
-- -- --                                 (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))) ))
-- -- --                        ((isTrans‚â°<·µ£ _ _ _
-- -- --                          (minusComm-abs·µ£ (F (x +·µ£ rat (fst Œµ)))
-- -- --                           (riemannSum' (snd tp') f)) (X' tp'
-- -- --                             (isTrans<‚â§·µ£ (mesh (fst tp')) _ _ tpm' (
-- -- --                              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥*) (fst Œ¥')
-- -- --                               (‚Ñö.isTrans‚â§ (fst Œ¥*) _ (fst Œ¥')
-- -- --                                ((‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥)  (fst Œ¥') ) (fst Œµ)))
-- -- --                                 (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥'))))))))))
-- -- --                     (cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)))
-- -- --               -- zzX : {!!}
-- -- --               -- xxX = {!!}
-- -- --               zz' : abs·µ£ ((riemannSum' (snd tp*) f)
-- -- --                        -·µ£ rat (fst Œµ) ¬∑·µ£ differenceAt F x (rat (fst Œµ)) (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))))
-- -- --                     <·µ£ rat (fst (Œµ ‚Ñö‚Çä¬∑ Œµ))
-- -- --               zz' = {!!}
-- -- --               -- z' : abs·µ£ (f x -·µ£ differenceAt F x (rat (fst Œµ)) (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))))
-- -- --               --       <·µ£ rat (fst Œµ)      
-- -- --               -- z' = subst2 {x = rat (fst (inv‚Ñö‚Çä Œµ))
-- -- --               --           ¬∑·µ£ (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- -- --               --       +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))}
-- -- --               --        {abs·µ£
-- -- --               --         (f x -·µ£ differenceAt F x (rat (fst Œµ)) (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))) }
-- -- --               --           _<·µ£_
-- -- --               --        ({!!}) (sym (rat¬∑·µ£rat _ _) ‚àô
-- -- --               --                cong rat (‚Ñö.[y¬∑x]/y Œµ _) )
-- -- --               --        (<·µ£-o¬∑·µ£
-- -- --               --          (abs·µ£ ((riemannSum' (snd tp) f -·µ£ F x)
-- -- --               --       +·µ£ ((F (x +·µ£ rat (fst Œµ))) -·µ£ riemannSum' (snd tp') f)))
-- -- --               --          _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä Œµ)) z)

-- -- --               -- zz' = {!!}
-- -- --           in Œ¥* ,
-- -- --              Œª h ‚Üí ‚äé.elim
-- -- --               (Œª 0<h h<Œ¥* ‚Üí
-- -- --                 let
-- -- --                     zz : abs·µ£
-- -- --                           (riemannSum' (snd tp*) f -·µ£ abs·µ£ (x -·µ£ (x +·µ£ rat (fst Œµ))) ¬∑·µ£ f x)
-- -- --                           <·µ£ abs·µ£ (x -·µ£ (x +·µ£ rat (fst Œµ))) ¬∑·µ£ rat (fst (/4‚Çä (Œµ'))) 
-- -- --                     zz = Y (x +·µ£ (rat (fst Œµ)))
-- -- --                         {!!}
-- -- --                         (fst tp*)
-- -- --                         (snd tp*)
-- -- --                     tph : TaggedPartition[ x , x +·µ£ h ]
-- -- --                     tph = {!!}
-- -- --                     zzz* : abs·µ£ (riemannSum' (snd tph) f -·µ£ abs·µ£ h ¬∑·µ£ f x) <·µ£
-- -- --                            abs·µ£ h ¬∑·µ£ rat (fst (/4‚Çä (Œµ')))
-- -- --                     zzz* =
-- -- --                      let uuuu = Y (x +·µ£ h) {!!} {!!} (snd tph) 
-- -- --                      in {!uuuu!}
                      
-- -- --                     zzz : abs·µ£ (f x -·µ£ differenceAt F x h (inl 0<h)) <·µ£ rat (fst Œµ')
-- -- --                     zzz = {!!}
-- -- --                 in zzz)
-- -- --               {!!})
-- -- --        (D x x‚ÇÄ‚â§x (/2‚Çä (Œµ ‚Ñö‚Çä¬∑ Œµ))) (D (x +·µ£ rat (fst Œµ)) {!!} (/2‚Çä (Œµ ‚Ñö‚Çä¬∑ Œµ))))
-- -- --        -- (FC x (/4‚Çä (Œµ' ‚Ñö‚Çä¬∑ Œµ')))
-- -- --        (meanLemma f x fC (/4‚Çä (Œµ')))

-- -- --  where
-- -- --   tps : ‚àÄ x (Œµ Œ¥ : ‚Ñö‚Çä) ‚Üí Œ£ (TaggedPartition[ x‚ÇÄ , x ]
-- -- --               √ó TaggedPartition[ x , x +·µ£ rat (fst Œµ)  ])
-- -- --                 Œª (tp ,  tp') ‚Üí (mesh (fst tp) <·µ£ rat (fst Œ¥))
-- -- --                      √ó (mesh (fst tp') <·µ£ rat (fst Œ¥))
-- -- --   tps x h Œ¥ = {!!}
  
-- -- --   -- PT.map (Œª (Œ¥ , X)
-- -- --   --   ‚Üí let Œ¥' = {!!}
-- -- --   --     in Œ¥' ,
-- -- --   --         (Œª h ‚Üí ‚äé.elim
-- -- --   --           (Œª 0<h h<Œ¥' ‚Üí
-- -- --   --             let rs : Œ£ Partition[ x , x +·µ£ fst Œ∑ ] Sample
-- -- --   --                 rs = {!!} , {!!}
-- -- --   --                 z = X rs {!X!}
-- -- --   --                 z' =
-- -- --   --                     isTrans‚â°<·µ£ _
-- -- --   --                        ((abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑)
-- -- --   --                          ¬∑·µ£ inv‚Ñù h (inl 0<h)) ¬∑·µ£ inv‚Ñù h (inl 0<h)) _
-- -- --   --                        (cong abs·µ£ (sym (¬∑DistR+ (riemannSum' (snd rs) f)
-- -- --   --                          (G Œ∑) _)) ‚àô
-- -- --   --                          (¬∑abs·µ£ (riemannSum' {_} {_} {fst rs} (snd rs) f -·µ£ G Œ∑) (inv‚Ñù h (inl 0<h)) ‚àô
-- -- --   --                           cong ((abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑)
-- -- --   --                          ¬∑·µ£ inv‚Ñù h (inl 0<h)) ¬∑·µ£_) ((abs·µ£Pos
-- -- --   --                           (inv‚Ñù h (inl 0<h))
-- -- --   --                             (inv‚Ñù-pos h 0<h)))))
-- -- --   --                         ((<·µ£-¬∑·µ£o
-- -- --   --                         (abs·µ£ (riemannSum' (snd rs) f -·µ£ G Œ∑))
-- -- --   --                          (rat (fst Œ∏)) (inv‚Ñù h (inl 0<h) , inv‚Ñù-pos h 0<h) z))
-- -- --   --             in {!z'!})
-- -- --   --           {!!}))
-- -- --   --   (G= Œ∑ Œ∏)

-- -- --  -- where

-- -- --  -- Œ∑ = {!!}

-- -- --  -- Œ∏ = {!!}

-- -- --  -- G : ‚àÄ (h : ‚Ñù‚Çä) ‚Üí ‚Ñù 
-- -- --  -- G h = F (x +·µ£ fst h) -·µ£ F x

-- -- --  -- G= : ‚àÄ (h : ‚Ñù‚Çä) ‚Üí on[ x , x +·µ£ fst h ]IntegralOf f is' (G h)
-- -- --  -- G= = {!!}
 
-- -- --  -- difF : ‚àÄ h 0<h  ‚Üí differenceAt F x h (inl 0<h) ¬∑·µ£ h ‚â°
-- -- --  --                     G (h , 0<h)
-- -- --  -- difF h 0ÔºÉh = {!!}
 
-- -- -- -- -- derivativeOf_at_is_






-- -- -- -- -- private
-- -- -- -- --   variable
-- -- -- -- --     ‚Ñì : Level
-- -- -- -- --     A B : Type ‚Ñì


-- -- -- -- -- foldlFin : ‚àÄ {n} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí B ‚Üí (Fin n ‚Üí A) ‚Üí B
-- -- -- -- -- foldlFin {n = zero} f b v = b
-- -- -- -- -- foldlFin {n = suc n} f b v = foldlFin {n = n} f (f b (v fzero)) (v ‚àò fsuc)

-- -- -- -- -- record Partition[_,_] (a b : ‚Ñù) : Type‚ÇÄ where 
-- -- -- -- --  field
-- -- -- -- --   len : ‚Ñï
-- -- -- -- --   pts : Fin (1 ‚Ñï.+ len) ‚Üí ‚Ñù
-- -- -- -- --   a‚â§pts : ‚àÄ k ‚Üí a ‚â§·µ£ pts k 
-- -- -- -- --   pts‚â§b : ‚àÄ k ‚Üí pts k ‚â§·µ£ b
-- -- -- -- --   pts‚â§pts : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ pts (fsuc k)

-- -- -- -- --  diffs : Fin len ‚Üí Œ£ ‚Ñù (0 ‚â§·µ£_) 
-- -- -- -- --  diffs k = _ , x‚â§y‚Üí0‚â§y-x (pts (finj k)) _ (pts‚â§pts k)
 
-- -- -- -- --  mesh : ‚Ñù
-- -- -- -- --  mesh = foldlFin max·µ£ 0 (fst ‚àò diffs)

-- -- -- -- --  record Sample : Type‚ÇÄ where
-- -- -- -- --   field
-- -- -- -- --    samples : Fin len ‚Üí ‚Ñù
-- -- -- -- --    ‚â§samples : (k : Fin len) ‚Üí pts (finj k) ‚â§·µ£ samples k
-- -- -- -- --    samples‚â§ : (k : Fin len) ‚Üí samples k ‚â§·µ£ pts (fsuc k)
   
-- -- -- -- --   samplesŒ£ : Fin len ‚Üí Œ£[ t ‚àà ‚Ñù ] (a ‚â§·µ£ t ) √ó (t ‚â§·µ£ b)
-- -- -- -- --   samplesŒ£ = {!!}
  
-- -- -- -- --   riemannSum : (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù
-- -- -- -- --   riemannSum f = foldlFin
-- -- -- -- --     (Œª S ((t , a‚â§t , t‚â§b) , b-a) ‚Üí S +·µ£ b-a ¬∑·µ£ (f t a‚â§t t‚â§b) ) 0
-- -- -- -- --      (Œª k ‚Üí  samplesŒ£ k , pts (fsuc k) -·µ£ pts (finj k))

-- -- -- -- --  open Sample public
-- -- -- -- -- open Partition[_,_] 

-- -- -- -- -- TaggedPartition[_,_] : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
-- -- -- -- -- TaggedPartition[ a , b ] = Œ£ (Partition[ a , b ]) Sample


-- -- -- -- -- on[_,_]IntegralOf_is_ : ‚àÄ a b ‚Üí (‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí Type
-- -- -- -- -- on[ a , b ]IntegralOf f is s =
-- -- -- -- --   ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
-- -- -- -- --    ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
-- -- -- -- --      (mesh p <·µ£ rat (fst Œ¥) ‚Üí
-- -- -- -- --        abs·µ£ (riemannSum t f -·µ£ s) <·µ£ rat (fst Œµ))


-- -- -- -- -- FTOC : ‚àÄ a b (f F : ‚àÄ r ‚Üí a ‚â§·µ£ r ‚Üí r ‚â§·µ£ b ‚Üí ‚Ñù)
-- -- -- -- --                  ‚Üí (‚àÄ x ‚Üí (‚â§x : a ‚â§·µ£ x) ‚Üí (x‚â§ : x ‚â§·µ£ b)
-- -- -- -- --                      ‚Üí on[ a , x ]IntegralOf
-- -- -- -- --                          (Œª r ‚â§r r‚â§ ‚Üí f r ‚â§r (isTrans‚â§·µ£ r _ _ r‚â§ x‚â§))
-- -- -- -- --                            is F x ‚â§x x‚â§)
-- -- -- -- --                  ‚Üí ‚àÄ x ‚Üí (‚â§x : a ‚â§·µ£ x) ‚Üí (x‚â§ : x ‚â§·µ£ b) ‚Üí
-- -- -- -- --                      {!derivativeOf F at ? is ?!}
-- -- -- -- -- FTOC = {!!}

-- -- -- -- -- -- derivativeOf_at_is_
