{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.NthRoot where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect


^‚Åø-‚Ñö^‚Åø : ‚àÄ n q ‚Üí ((rat q) ^‚Åø n) ‚â° rat (q ‚Ñö^‚Åø n)
^‚Åø-‚Ñö^‚Åø zero _ = refl
^‚Åø-‚Ñö^‚Åø (suc n) a =
  cong (_¬∑·µ£ rat a) (^‚Åø-‚Ñö^‚Åø n a) ‚àô
          sym (rat¬∑·µ£rat _ _)

‚Ñö^‚Åø-Monotone : ‚àÄ {x y : ‚Ñö} (n : ‚Ñï) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí 0 ‚Ñö.‚â§ y ‚Üí x ‚Ñö.‚â§ y
 ‚Üí (x ‚Ñö^‚Åø n) ‚Ñö.‚â§ (y ‚Ñö^‚Åø n)
‚Ñö^‚Åø-Monotone zero 0‚â§x 0‚â§y x‚â§y = ‚Ñö.isRefl‚â§ 1
‚Ñö^‚Åø-Monotone {x} {y} (suc n) 0‚â§x 0‚â§y x‚â§y =
  ‚Ñö.‚â§Monotone¬∑-onNonNeg _ _ _ _
    (‚Ñö^‚Åø-Monotone n 0‚â§x 0‚â§y x‚â§y)
    x‚â§y
    (‚Ñö.0‚â§‚Ñö^‚Åø x 0‚â§x n)
    0‚â§x

‚Ñö^‚Åø-StrictMonotone : ‚àÄ {x y : ‚Ñö} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí 0 ‚Ñö.‚â§ y ‚Üí x ‚Ñö.< y ‚Üí (x ‚Ñö.‚Ñö^‚Åø n) ‚Ñö.< (y ‚Ñö.‚Ñö^‚Åø n)
‚Ñö^‚Åø-StrictMonotone {x} {y} 0 0<n 0‚â§x 0‚â§y x<y = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
‚Ñö^‚Åø-StrictMonotone {x} {y} 1 0<n 0‚â§x 0‚â§y x<y = 
  subst2 ‚Ñö._<_ (sym (‚Ñö.¬∑IdL _)) (sym (‚Ñö.¬∑IdL _)) x<y
‚Ñö^‚Åø-StrictMonotone {x} {y} (suc (suc n)) 0<n 0‚â§x 0‚â§y x<y =
  ‚Ñö.<Monotone¬∑-onPos _ _ _ _
    (‚Ñö^‚Åø-StrictMonotone (suc n) (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})) 0‚â§x 0‚â§y x<y)
    x<y
    (‚Ñö.0‚â§‚Ñö^‚Åø x 0‚â§x (suc n))
    0‚â§x


sqrRestr< : ‚àÄ n ‚Üí (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) ‚Ñö.< (fromNat (2 ‚Ñï.+ n))
sqrRestr< n =
  (‚Ñö.isTrans< (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) 1 (fromNat (2 ‚Ñï.+ n))
               (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 _)
                 (‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 _ (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {n})))))
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 _
               (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {n}))))) 

module NthRoot (m : ‚Ñï) where


 module _ (n : ‚Ñï) where

  bounds = b‚Åø-a‚Åø' m
    (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
    (fromNat (2 ‚Ñï.+ n))
      (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) )
      (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (fromNat (2 ‚Ñï.+ n))))
      (<‚Ñö‚Üí<·µ£ _ _ (sqrRestr< n))

  L = (((fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m))
      ‚Ñö‚Çä¬∑ (fromNat (2 ‚Ñï.+ m)))

  K = (fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m)

  incrF : isIncrasing‚Ñô
   (‚Ñöinterval‚Ñô (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
               (fromNat (2 ‚Ñï.+ n))) (Œª x _ ‚Üí x ‚Ñö^‚Åø (2 ‚Ñï.+ m))
  incrF  x x‚àà y y‚àà =
    ‚Ñö^‚Åø-StrictMonotone (2 ‚Ñï.+ m)
     (‚Ñï.‚â§-suc (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {m})))
     (‚Ñö.isTrans‚â§ 0 (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          x (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) (fst x‚àà))
     (‚Ñö.isTrans‚â§ 0 (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          y (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) (fst y‚àà))
          
  1/K<L : fst (inv‚Ñö‚Çä K) ‚Ñö.< fst L
  1/K<L = ‚Ñö.isTrans‚â§< _ 1 _
    (subst (‚Ñö._‚â§ 1) (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _))
      (‚Ñö.x^‚Åø‚â§1 _ _ ‚Ñ§.zero-‚â§pos
       (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (2 ‚Ñï.+ n)))
        (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)))))
         (‚Ñö.isTrans‚â§< _ _ _
           (‚Ñö.1‚â§x^‚Åø (fromNat (2 ‚Ñï.+ n))
            (fromNat (1 ‚Ñï.+ m)) (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)))
            (subst (‚Ñö._< fst L)
             
               (‚Ñö.¬∑IdR _)
                 (‚Ñö.<-o¬∑ 1 (fromNat (2 ‚Ñï.+ m))
                   _ (‚Ñö.0<‚Ñö‚Çä ((fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m)))
            ((‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 (‚Ñ§.pos (suc (suc m)))
             ( ‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {m})))))))
            ) 

  
  rootRest : IsBilipschitz
               (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
               (fromNat (2 ‚Ñï.+ n))
               (sqrRestr< n)
               Œª x _ ‚Üí x ‚Ñö^‚Åø (2 ‚Ñï.+ m)
  rootRest .IsBilipschitz.incrF = incrF
  rootRest .IsBilipschitz.L = L
  rootRest .IsBilipschitz.K = K
  rootRest .IsBilipschitz.1/K‚â§L = ‚Ñö.<Weaken‚â§ _ _ 1/K<L
       
  rootRest .IsBilipschitz.lipF =
    Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô<‚ÜíLipschitz-‚Ñö‚Üí‚Ñù‚Ñô _ _ _
      Œª q q‚àà r r‚àà r<q  ‚Üí
       let bb = bounds (rat r) (rat q) (fst r‚àà) (snd q‚àà) (<‚Ñö‚Üí<·µ£ _ _ r<q)


           ineqL : (rat q ^‚Åø suc (suc m)) -·µ£ (rat r ^‚Åø suc (suc m))
                      ‚â§·µ£ rat ((fst L) ‚Ñö.¬∑ (q ‚Ñö.- r))
           ineqL =
             isTrans‚â°‚â§·µ£ _ _ _ (fst (snd bb))
               (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£-o¬∑·µ£ _ _ _
                      (‚â§‚Ñö‚Üí‚â§·µ£ _ _  $ ‚Ñö.<Weaken‚â§ _ _ (‚Ñö.<‚Üí<minus _ _ r<q))
                    (isTrans‚â§‚â°·µ£ _ _ _ (fst (snd (snd bb)))
                      (sym ((rat¬∑·µ£rat _ _
                        ‚àô cong (_¬∑·µ£ (rat ((fromNat (2 ‚Ñï.+ m)))))
                          (sym (^‚Åø-‚Ñö^‚Åø _ _)))))
                          ))
                           (sym (rat¬∑·µ£rat _ _) ‚àô (cong rat (‚Ñö.¬∑Comm _ _))))
           
           
       in isTrans‚â°‚â§·µ£ _ _ _ (abs·µ£Pos _
            (<‚Ñö‚Üí<·µ£ _ _  (‚Ñö.<‚Üí<minus _ _ (incrF r
                     (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ r‚àà)
                     q
                     (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ q‚àà)
                     r<q)))
                 ‚àô cong‚ÇÇ _-·µ£_
                   (sym (^‚Åø-‚Ñö^‚Åø _ _))
                   (sym (^‚Åø-‚Ñö^‚Åø _ _))) ineqL

  rootRest .IsBilipschitz.lip‚Åª¬πF =
    Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô'<‚ÜíInvlipschitz-‚Ñö‚Üí‚Ñö‚Ñô _ _ _
       Œª q q‚àà r r‚àà r<q ‚Üí
          let r‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ r‚àà)
              q‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô
                      (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) _ _ q‚àà)
              bb = bounds (rat r) (rat q) (fst r‚àà') (snd q‚àà')
                    (<‚Ñö‚Üí<·µ£ _ _ r<q)

          in ‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö _ _
                $ isTrans‚â°‚â§·µ£ _ _ _ (cong rat
                  (cong ((q ‚Ñö.+ ‚Ñö.- r) ‚Ñö.¬∑_)
                    (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ (suc m)) )
                  ‚àô rat¬∑·µ£rat _ _) $
                isTrans‚â§‚â°·µ£ _ _ _
                  (‚â§·µ£-o¬∑·µ£ _ _ _
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _  $ ‚Ñö.<Weaken‚â§ _ _ (‚Ñö.<‚Üí<minus _ _ r<q))
                  (isTrans‚â°‚â§·µ£ _ _ _
                     (sym (^‚Åø-‚Ñö^‚Åø _ _))
                             (snd (snd (snd bb)))))
                    (sym (fst (snd bb)) ‚àô
                      cong‚ÇÇ _-·µ£_ (^‚Åø-‚Ñö^‚Åø _ _) (^‚Åø-‚Ñö^‚Åø _ _)
                      ‚àô cong rat (sym (‚Ñö.absPos _
                      (‚Ñö.<‚Üí<minus _ _ (incrF r r‚àà q q‚àà r<q))) ‚àô
                       ‚Ñö.abs'‚â°abs _)))




 loB hiB : ‚àÄ n ‚Üí ‚Ñö
 loB n = (((fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) ‚Ñö^‚Åø (2 ‚Ñï.+ m))
 hiB n = ((fromNat (2 ‚Ñï.+ n)) ‚Ñö^‚Åø (2 ‚Ñï.+ m))
 
 rootSeq‚äÜ : Seq‚äÜ
 rootSeq‚äÜ .Seq‚äÜ.ùï° n = interval‚Ñô
   (rat (loB n))
   (rat (hiB n))
 rootSeq‚äÜ .Seq‚äÜ.ùï°‚äÜ n x (‚â§x , x‚â§) =
  
   isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _
     (‚Ñö^‚Åø-Monotone (2 ‚Ñï.+ m) (‚Ñö.0‚â§‚Ñö‚Çä _) (‚Ñö.0‚â§‚Ñö‚Çä _)         
      (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
    (fromNat (2 ‚Ñï.+ n)) (fromNat (3 ‚Ñï.+ n)))
      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚â§-suc ‚Ñ§.isRefl‚â§)))
      )) ‚â§x ,
   isTrans‚â§·µ£ _ _ _ x‚â§ (‚â§‚Ñö‚Üí‚â§·µ£ _ _
     (‚Ñö^‚Åø-Monotone (2 ‚Ñï.+ m) (‚Ñö.0‚â§‚Ñö‚Çä _) (‚Ñö.0‚â§‚Ñö‚Çä _)         
      ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚â§-suc ‚Ñ§.isRefl‚â§)))
      ))




 f‚äÜ : (x : ‚Ñù) (n n' : ‚Ñï)
      (x‚àà : x ‚àà interval‚Ñô (rat (loB n)) (rat (hiB n)))
      (x‚àà' : x ‚àà interval‚Ñô (rat (loB n')) (rat (hiB n'))) ‚Üí
      n ‚Ñï.< n' ‚Üí
      IsBilipschitz.ùíá‚Åª¬π (rootRest n) x ‚â°
      IsBilipschitz.ùíá‚Åª¬π (rootRest n') x
 f‚äÜ x n n' x‚àà x‚àà' n<n' =
   h 

  where
  open IsBilipschitz
  ib = rootRest n
  ib' = rootRest n'

  -- zz' : {!!}
  -- zz' = 

  ùíá'‚â°ùíá : ‚àÄ y ‚Üí y ‚àà
      interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
            (rat (fromNat (2 ‚Ñï.+ n)))
    ‚Üí (ùíá ib') y ‚â° (ùíá ib) y
  ùíá'‚â°ùíá = elimInClamps·µ£ _ _
    (‚â°Continuous _ _
       ((IsContinuous‚àò _ _
             (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib')))
             (IsContinuousClamp (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) _)))
       (IsContinuous‚àò _ _
             (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib)))
              (IsContinuousClamp (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) _))
      Œª r ‚Üí cong rat
           ( ((ebl ib') .snd .snd .snd  _
             (inClmp' r))
            
         ‚àô sym
          (((ebl ib) .snd .snd .snd  _
        (clam‚àà‚Ñöinterval‚Ñô _ _ (‚Ñö.<Weaken‚â§ _ _ (sqrRestr< n)) r))))
        )
    where
    h = ‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.suc-‚â§-suc (‚Ñ§.‚â§-suc (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ n<n')))
    inClmp' : ‚àÄ r ‚Üí ‚Ñö.clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r
      ‚àà
      ‚Ñöinterval‚Ñô (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n')) , (1+ 0) ] , tt)))
      [ pos (suc (suc n')) / 1+ 0 ]
    inClmp' r =
       ‚Ñö.isTrans‚â§
         (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n')) , (1+ 0) ] , tt)))
         (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
         (‚Ñö.clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ]
        , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r)
         ((fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
           ([ pos (suc (suc n)) / 1+ 0 ] , _)
           ([ pos (suc (suc n')) / 1+ 0 ] , _)) h))
          (‚Ñö.‚â§clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r (
        (‚Ñö.<Weaken‚â§
          (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          (fromNat (2 ‚Ñï.+ n))

         (sqrRestr< n))))
       , ‚Ñö.isTrans‚â§ _
            (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ]) _
           (‚Ñö.clamp‚â§
             (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
             _ r)
           h
           
  2+n‚â§‚Ñö2+n' = (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.<-weaken (‚Ñï.<-k+ n<n'))))

  x‚Åª¬π‚àà : ùíá‚Åª¬π ib x ‚àà
            interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n')))))
            (rat (fromNat (2 ‚Ñï.+ n')))
  x‚Åª¬π‚àà = (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _
           (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä _ (fromNat (2 ‚Ñï.+ n')))
        2+n‚â§‚Ñö2+n'))
       (fst x‚àà*))
    , (isTrans‚â§·µ£ _ _ _ (snd x‚àà*) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 2+n‚â§‚Ñö2+n'))

   where
   x‚àà* : ùíá‚Åª¬π ib x ‚àà
            interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
            (rat (fromNat (2 ‚Ñï.+ n)))
   x‚àà* = ùíá‚Åª¬π‚àà ib x x‚àà

  h : ùíá‚Åª¬π ib x ‚â° ùíá‚Åª¬π ib' x
  h = sym (ùíá‚Åª¬π‚àòùíá ib' (ùíá‚Åª¬π ib x) x‚Åª¬π‚àà )
    ‚àô cong (ùíá‚Åª¬π ib') (ùíá'‚â°ùíá (ùíá‚Åª¬π ib x) (ùíá‚Åª¬π‚àà ib x x‚àà)
       ‚àô ùíá‚àòùíá‚Åª¬π ib _ x‚àà )



 rootSeq‚äÜ‚Üí : Seq‚äÜ‚Üí ‚Ñù rootSeq‚äÜ
 rootSeq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun x n _ = IsBilipschitz.ùíá‚Åª¬π (rootRest n) x
 rootSeq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun‚äÜ = f‚äÜ

 getBounds : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí Œ£ ‚Ñö (Œª q ‚Üí (0 <·µ£ rat q) √ó (rat q <·µ£ x)) ‚Üí
      Œ£[ M ‚àà ‚Ñï‚Çä‚ÇÅ ] (abs·µ£ x <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï M)) ‚Üí 
      Œ£[ N ‚àà ‚Ñï   ] (x ‚àà interval‚Ñô (rat (loB N)) (rat (hiB N)))
 getBounds x 0<x (q , 0<q , q<x) ((1+ M) , x<1+M ) =
    ùëµ , loB‚â§x , x‚â§hiB
    -- ùëµ ,
   -- (loB‚â§x , x‚â§hiB)
  where

  q‚Çä : ‚Ñö‚Çä
  q‚Çä = (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<q))

  flr-q = ‚Ñö.floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä)

  loùëµ = suc (fst (fst flr-q))
  hiùëµ = M

  ùëµ = ‚Ñï.max loùëµ hiùëµ  
    
  loB‚â§q : loB ùëµ ‚Ñö.‚â§ q
  loB‚â§q = subst2 (‚Ñö._‚â§_)
     (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _) (‚Ñö.inv‚Ñö‚Çä-invol q‚Çä)
     (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä _ _)
      (‚Ñö.isTrans‚â§ (fst (‚Ñö.inv‚Ñö‚Çä q‚Çä)) _ _
        (‚Ñö.<Weaken‚â§ _ _ (‚Ñö.‚â§floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä))) -- (‚Ñö.‚â§floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä))
         (‚Ñö.isTrans‚â§ _ _ _
           (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
             (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                 (subst (‚Ñï._‚â§ (loùëµ ^ suc (suc m)))
                   (‚Ñï.¬∑-identity ≥ loùëµ)
                    ((‚Ñï.^-monotone loùëµ 0 (suc m) ‚Ñï.zero-‚â§)))))
             (‚Ñö.‚â°Weaken‚â§ (fromNat (loùëµ ^ suc (suc m)))
               ((fromNat loùëµ ‚Ñö^‚Åø (2 ‚Ñï.+ m)))
                (sym ((‚Ñö.fromNat-^ loùëµ (suc (suc m)))))))
           (‚Ñö^‚Åø-Monotone {fromNat loùëµ} (suc (suc m))
             (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.zero-‚â§pos)
             (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.zero-‚â§pos)
             (((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
          (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ 
          (‚Ñï.‚â§-trans (‚Ñï.‚â§-suc (‚Ñï.‚â§-suc ‚Ñï.‚â§-refl))
           (‚Ñï.left-‚â§-max {suc (suc loùëµ)} {suc (suc hiùëµ)}))))))))
          ))
  
  loB‚â§x : rat (loB ùëµ) ‚â§·µ£ x
  loB‚â§x = isTrans‚â§·µ£ _ _ _
    (‚â§‚Ñö‚Üí‚â§·µ£ _ _ loB‚â§q)
      (<·µ£Weaken‚â§·µ£ _ _ q<x)

  1+M‚â§hiB : fromNat (suc M) ‚Ñö.‚â§ (hiB M)
  1+M‚â§hiB = 
   subst (fromNat (suc M) ‚Ñö.‚â§_) (sym (‚Ñö.fromNat-^ _ _))
    ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
      (‚Ñï.‚â§-trans (‚Ñï.‚â§-suc ‚Ñï.‚â§-refl) (subst (‚Ñï._‚â§ (suc (suc M) ^ suc (suc m)))
          (sym (cong (suc ‚àò suc) (sym (¬∑-identity ≥ M))))
           (‚Ñï.^-monotone (suc (suc M)) 0 (suc m) ‚Ñï.zero-‚â§ )))
      )))


  x‚â§hiB : x ‚â§·µ£ rat (hiB ùëµ)
  x‚â§hiB = 
   isTrans‚â°‚â§·µ£ _ _ _  (sym (abs·µ£Pos _ 0<x))
      (isTrans‚â§·µ£ _ _ _    
       (<·µ£Weaken‚â§·µ£ _ _ x<1+M)
         (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.isTrans‚â§ _ _ _ 1+M‚â§hiB
           ((‚Ñö^‚Åø-Monotone (suc (suc m))
              (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.zero-‚â§))
              (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.zero-‚â§))
            (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
             ((‚Ñï.right-‚â§-max {suc (suc hiùëµ)} {suc (suc loùëµ)})) ))
             )))))

 ‚Ñù‚Çä‚äÜrootSeq : rootSeq‚äÜ Seq‚äÜ.s‚äá (Œª x ‚Üí (0 <·µ£ x ) , squash‚ÇÅ)
 ‚Ñù‚Çä‚äÜrootSeq x 0<x = 
   PT.map2
     (getBounds x 0<x)
      (dense‚Ñöin‚Ñù _ _ 0<x)
      (getClamps x)
 
 nth-root : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
 nth-root (x , 0<x) =
   seq‚äÜ‚Üí$ _ isSet‚Ñù _ rootSeq‚äÜ‚Üí (Œª x ‚Üí (0 <·µ£ x ) , squash‚ÇÅ)
      ‚Ñù‚Çä‚äÜrootSeq x 0<x
     , {!!}

-- -- sqrt2 : {!!}
-- -- sqrt2 = {!!}

-- --  -- x n n' x‚àà x‚àà' _ =
-- --  --    {!!}
     
-- --  --   -- elimInClamps·µ£ {P = Œª x ‚Üí ùíá‚Åª¬π (rootRest n m) x ‚â° ùíá‚Åª¬π (rootRest n' m) x}
-- --  --   --    (rat (loB n))
-- --  --   --    (rat (hiB n))
-- --  --   --   {!h!}
-- --  --   --   x x‚àà

      
-- --  --   where
-- --  --   open IsBilipschitz
-- --  --   ib = rootRest n m
-- --  --   ib' = rootRest n' m

-- --  --   h : {!!}
-- --  --   h = {!   cong fst (isoFunInjective (isoF ib)
-- --  --     (_ , x‚Åª¬π‚àà)
-- --  --     (_ , {!!}) {!!})         !}

-- --  --   w : {!!}
-- --    -- w =  ‚â°Continuous _ _
-- --    --        (IsContinuous‚àò _ _
-- --    --           (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib)))
-- --    --           ((Lipschitz‚ÜíIsContinuous _ _ (snd (f‚Åª¬πR-L ib)))))
-- --  --          (IsContinuous‚àò _ _
-- --  --             (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib')))
-- --  --             ((Lipschitz‚ÜíIsContinuous _ _ (snd (f‚Åª¬πR-L ib')))))
-- --  --             {!Œª r ‚Üí ?!} {!!}
             

-- --    -- IsBilipschitz.injùíá (rootRest n m)
-- --    -- ((Lipschitz‚ÜíIsContinuous _
-- --    --  {!!} {!
-- --    --   IsContinuous‚àò _ _
-- --    --    ?
-- --    --    ?!}))
-- --       -- {!!} {!!} x
-- --   --  z ‚àô {!!} 
-- --   -- where
-- --   --  z : {!!}
-- --   --  z = IsBilipschitz.injùíá (rootRest n m) _ _
-- --   --   {!!}
-- --  -- bisect
-- --  --   (2 ‚Ñö‚Çä¬∑ fromNat (2 ‚Ñï.+ n))
-- --  --   (2 ‚Ñö‚Çä¬∑ fromNat (2 ‚Ñï.+ n))
-- --  --   {!!}
-- --  --   (fst (inv‚Ñö‚Çä (fromNat (suc n))))
-- --  --   ((fromNat (suc n)))
-- --  --   {!!}
-- --  --   (Œª x _ ‚Üí x ‚Ñö.¬∑ x)
-- --  --   (Œª x x‚àà y y‚àà x‚ÇÅ ‚Üí {!!})
-- --  --   (Œª q q‚àà r r‚àà Œµ x ‚Üí 
-- --  --     let z = {!!}
-- --  --           -- restrSq (suc n) q r --(‚â§·µ£‚Üí‚â§‚Ñö _ _ (snd r‚àà))
-- --  --           --      {!snd q‚àà!}
-- --  --           --      {!!}
-- --  --           --     -- (‚Ñö.isTrans‚â§< _ _ _ {!snd q‚àà!} {!!} )
-- --  --           --     -- (‚Ñö.isTrans‚â§< _ _ _ {!!} {!!})
-- --  --           --     -- (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö _ _ (snd q‚àà))
-- --  --           --     --  {!!})
-- --  --           --     -- ((‚Ñö.isTrans<‚â§ _ _ _ {!!} (‚â§·µ£‚Üí‚â§‚Ñö _ _ (fst q‚àà))
-- --  --           --     --  {!!}))
-- --  --           --     Œµ x
-- --  --     in {!z!}
-- --  --     )
-- --  --   Œª q q‚àà r r‚àà Œµ x ‚Üí
-- --  --     let x' = subst (Œª x ‚Üí ‚Ñö.abs' x ‚Ñö.< fst Œµ)
-- --  --                 (sym lem--040) x
-- --  --         uu = (((‚Ñö.[ pos 2 , (1+ 0) ] , tt) ‚Ñö‚Çä¬∑
-- --  --            (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
-- --  --     in ‚Ñö.isTrans‚â§< (‚Ñö.abs' (q ‚Ñö.- r))
-- --  --         (fst uu ‚Ñö.¬∑  ‚Ñö.abs' ((q ‚Ñö.+ r) ‚Ñö.¬∑ (q ‚Ñö.- r))) _
-- --  --           {!!} (‚Ñö.<-o¬∑ _ _ (fst uu) (‚Ñö.0<‚Ñö‚Çä uu) x')

