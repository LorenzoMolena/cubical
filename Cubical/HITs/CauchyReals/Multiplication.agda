{-# OPTIONS --lossy-unification #-}

module Cubical.HITs.CauchyReals.Multiplication where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv hiding (_‚ñ†)
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Univalence
open import Cubical.Functions.FunExtEquiv

import Cubical.Functions.Logic as L

open import Cubical.Algebra.CommRing.Instances.Int

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Bool.Base using () renaming (Bool to ùüö ; true to 1ÃÇ ; false to 0ÃÇ)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Nat.Order.Recursive as OR
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Unit
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Sigma hiding (Path)
open import Cubical.Data.List as L
open import Cubical.Data.List using () renaming (List to ‚ü¶_‚üß)
open import Cubical.Foundations.Interpolate
open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_) 

open import Cubical.Data.Rationals using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)

import Cubical.Data.Rationals as ‚Ñö
import Cubical.Data.Rationals.Order as ‚Ñö
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö using (inv‚Ñö‚Çä)

open import Cubical.Data.NatPlusOne
open import Cubical.Foundations.Path
open import Cubical.Foundations.CartesianKanOps


import Agda.Builtin.Reflection as R
open import Cubical.Reflection.Base


import Cubical.Algebra.CommRing as CR

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous

-- HoTT (11.3.46)
sq·µ£' : Œ£ (‚Ñù ‚Üí ‚Ñù) IsContinuous
sq·µ£'  = (Œª r ‚Üí f r (getClamps r))
  , Œª u Œµ ‚Üí 
     PT.elim2 {P = Œª gcr _ ‚Üí
        ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v ‚Üí u ‚àº[ Œ¥ ] v
            ‚Üí f u gcr ‚àº[ Œµ ] (f v (getClamps v)))}
       (Œª _ _ ‚Üí squash‚ÇÅ)
       (Œª (1+ n , nL) (1+ n' , n'L) ‚Üí
        let L = (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n')))
            1<L : pos 1 ‚Ñ§.<
               ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§
                (fst
                 (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (2 ‚Ñ§.¬∑ (pos (suc (suc n'))))
                  (‚Ñö.¬∑0< 2 (fromNat (suc (suc n')))
                   tt tt)))
            1<L = subst (1 ‚Ñ§.<_)
                   (‚Ñ§.pos¬∑pos 2 (suc (suc n')) ‚àô (snd
                 (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (2 ‚Ñ§.¬∑ (pos (suc (suc n'))))
                  (‚Ñö.¬∑0< 2 (fromNat (suc (suc n')))
                   tt tt))) )
                    (‚Ñ§.suc-‚â§-suc
                      (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos
                        {l = (n' ‚Ñï.+ suc (suc (n' ‚Ñï.+ zero)))} )))

            Œ¥ = (inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ
        in ‚à£ Œ¥ , (Œª v ‚Üí 
              PT.elim {P = Œª gcv ‚Üí u ‚àº[ Œ¥ ] v ‚Üí f' u (1+ n , nL) ‚àº[ Œµ ] f v gcv}
               (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _ )
                 (uncurry (Œª (1+ n*) n*L u‚àºv ‚Üí
                     let z = snd (clampedSq (suc n')) u v
                                   Œ¥ u‚àºv
                         zz : abs·µ£ (v +·µ£ (-·µ£ u)) <·µ£ rat (fst Œµ)

                         zz =
                           subst2 (_<·µ£_)
                             (minusComm-abs·µ£ u v)
                              (cong rat (‚Ñö.¬∑IdL (fst Œµ)))
                                 (isTrans<·µ£ _ _ _
                                  (fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv)
                                  (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-¬∑o _ 1 (fst Œµ)
                                   (‚Ñö.0<‚Ñö‚Çä Œµ)
                                     (subst (1 ‚Ñ§.<_)
                                       (sym (‚Ñ§.¬∑IdL _))
                                        1<L )))) 
                         zz* = (sym (abs·µ£NonNeg (abs·µ£ u +·µ£ rat (fst Œµ))
                                (subst (_‚â§·µ£ (abs·µ£ u +·µ£ rat (fst Œµ)))
                                 (+IdR 0)
                                  (‚â§·µ£Monotone+·µ£ 0 (abs·µ£ u)
                                    0 (rat (fst Œµ))
                                     (0‚â§abs·µ£ u)
                                      (‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ ‚Ñö.0‚â§‚Ñö‚Çä Œµ)))))
                         zz' : abs·µ£ v ‚â§·µ£ abs·µ£ (abs·µ£ u +·µ£ rat (fst Œµ))
                         zz' =
                            subst2 (_‚â§·µ£_)
                              (cong abs·µ£ (lem--05·µ£ _ _))
                              zz*
                              (isTrans‚â§·µ£
                               (abs·µ£ (u +·µ£ (v +·µ£ (-·µ£ u))))
                                (abs·µ£ u +·µ£ abs·µ£ (v +·µ£ (-·µ£ u)))
                                _
                               (abs·µ£-triangle u (v +·µ£ (-·µ£ u)))
                               (‚â§·µ£-o+ _ _ (abs·µ£ u)
                                 (<·µ£Weaken‚â§·µ£ _ _ zz)))
                     in ( 2co (1+ n') (1+ n) u
                        (isTrans‚â§<·µ£ (abs·µ£ u) _ _
                          (subst2 (_‚â§·µ£_)
                            (+IdR (abs·µ£ u))
                            zz*
                            (‚â§·µ£Monotone+·µ£
                              (abs·µ£ u) (abs·µ£ u)
                               0 (rat (fst Œµ))
                               (‚â§·µ£-refl (abs·µ£ u))
                               ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ ‚Ñö.0‚â§‚Ñö‚Çä Œµ)))) n'L) nL
                         subst‚àº[ ‚Ñö‚Çä‚â° (‚Ñö.y¬∑[x/y] L (fst Œµ)) ]
                         2co (1+ n') (1+ n*) v
                          
                          ((isTrans‚â§<·µ£ (abs·µ£ v) _ _
                            zz' n'L))
                            n*L)
                      z))
                       (getClamps v))   ‚à£‚ÇÅ)
       (getClamps u) (getClamps (abs·µ£ u +·µ£ rat (fst Œµ)))
 where

 2co : ‚àÄ n n' r
    ‚Üí (abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n))
    ‚Üí (abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n'))
    ‚Üí fst (clampedSq (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n)) r ‚â° fst (clampedSq (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n')) r

 2co (1+ n) (1+ n') = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop
        (Œª z ‚Üí
           abs·µ£ z <·µ£ fromNat (suc n) ‚Üí
           abs·µ£ z <·µ£ fromNat (suc n') ‚Üí
           fst (clampedSq (suc n)) z ‚â° fst (clampedSq (suc n')) z)
  w .Elim‚Ñù-Prop.ratA q n< n<' =
    let Œî : ‚Ñï ‚Üí ‚Ñö‚Çä
        Œî n = ‚Ñö.<‚Üí‚Ñö‚Çä
             (_//_.[ 1 , 4 ])
             (_//_.[ pos (suc (suc (n))) , 1 ])
             
             ((<Œî (suc (n))))
        q* : ‚Ñï ‚Üí ‚Ñö
        q* n = ‚Ñö.clamp (‚Ñö.- (fst (Œî n))) (fst (Œî n)) q
        q‚ÇÅ = q* n
        q‚ÇÇ = q* n'

        -Œî‚ÇÅ‚â§q : ‚àÄ n ‚Üí abs·µ£ (rat q) <·µ£ rat [ pos (suc n) / 1+ 0 ]
             ‚Üí ‚Ñö.- (fst (Œî n)) ‚Ñö.‚â§ q
        -Œî‚ÇÅ‚â§q n n< = subst (‚Ñö.- fst (Œî n) ‚Ñö.‚â§_) (‚Ñö.-Invol q)
         (‚Ñö.minus-‚â§ (‚Ñö.- q) (fst (Œî n))
           (‚Ñö.isTrans‚â§ _ _ _ (
            subst (‚Ñö.- q ‚Ñö.‚â§_) (sym (‚Ñö.-abs q) ‚àô
               ‚Ñö.abs'‚â°abs q) (‚Ñö.‚â§abs (‚Ñö.- q))) (abs'q‚â§Œî‚ÇÅ q n n<)))

        q‚ÇÅ= : ‚àÄ n n< ‚Üí q* n ‚â° q
        q‚ÇÅ= n n< = ‚Ñö.inClamps (‚Ñö.- (fst (Œî n))) (fst (Œî n)) q
           (-Œî‚ÇÅ‚â§q n n<) (‚Ñö.isTrans‚â§ q (‚Ñö.abs' q) (fst (Œî n))
                 (subst (q ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs q)
                    (‚Ñö.‚â§abs q)) (abs'q‚â§Œî‚ÇÅ q n n<))
        z : q‚ÇÅ ‚Ñö.¬∑ q‚ÇÅ
             ‚â° q‚ÇÇ ‚Ñö.¬∑ q‚ÇÇ
        z = cong‚ÇÇ ‚Ñö._¬∑_ (q‚ÇÅ= n n<) (q‚ÇÅ= n n<)
              ‚àô sym (cong‚ÇÇ ‚Ñö._¬∑_ (q‚ÇÅ= n' n<') (q‚ÇÅ= n' n<'))
    in cong rat z
  w .Elim‚Ñù-Prop.limA x p R n< n<' = eq‚Ñù _ _
    Œª Œµ ‚Üí PT.rec (isProp‚àº _ _ _) (ww Œµ) <n‚äì
      
    
   where

   n‚äì = ‚Ñï.min n n'
   n‚äî = ‚Ñï.max n n'
   
   <n‚äì : abs·µ£ (lim x p) <·µ£ rat [ pos (suc n‚äì) / 1+ 0 ]
   <n‚äì =
    let z = <min-rr _ _ _ n< n<'
    in subst (abs·µ£ (lim x p) <·µ£_)
      (cong (rat ‚àò [_/ 1+ 0 ]) (
       cong‚ÇÇ ‚Ñ§.min (cong (1 ‚Ñ§.+_) (‚Ñ§.¬∑IdR (pos n))
         ‚àô sym (‚Ñ§.pos+ 1 n)) ((cong (1 ‚Ñ§.+_) (‚Ñ§.¬∑IdR (pos n'))
         ‚àô sym (‚Ñ§.pos+ 1 n')))
        ‚àô ‚Ñ§.min-pos-pos (suc n) (suc n'))) z

   ww : ‚àÄ Œµ ‚Üí abs·µ£ (lim x p) Œ£<·µ£
               rat [ pos (suc n‚äì) / 1+ 0 ]
            ‚Üí fst (clampedSq (suc n)) (lim x p) ‚àº[ Œµ ]
                fst (clampedSq (suc n')) (lim x p)
   ww Œµ ((q , q') , lx‚â§q , q<q' , q'‚â§n) =
    lim-lim _ _ Œµ Œ¥ Œ∑ _ _ 0<Œµ-[Œ¥+Œ∑] ll
    where
     Œî = ‚Ñö.<‚Üí‚Ñö‚Çä q q' q<q'
     Œ∏ = ‚Ñö.min‚Çä (‚Ñö./3‚Çä Œµ) Œî

     3Œ∏‚â§Œµ : (fst Œ∏) ‚Ñö.+ ((fst Œ∏) ‚Ñö.+ (fst Œ∏)) ‚Ñö.‚â§ fst Œµ 
     3Œ∏‚â§Œµ = subst2 ‚Ñö._‚â§_
        (3¬∑x‚â°x+[x+x] (fst Œ∏))
         (cong (3 ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _) ‚àô ‚Ñö.y¬∑[x/y] 3 (fst Œµ))
       (‚Ñö.‚â§-o¬∑ ((‚Ñö.min (fst (‚Ñö./3‚Çä Œµ)) (fst Œî)))
                (fst (‚Ñö./3‚Çä Œµ)) 3 ((‚Ñö.0‚â§‚Ñö‚Çä 3)) (‚Ñö.min‚â§ (fst (‚Ñö./3‚Çä Œµ)) (fst Œî))) 
       
       
     Œ¥ = (([ pos (suc (suc n)) / 1+ (suc n‚äî) ] , _)
                                    ‚Ñö‚Çä¬∑ Œ∏)
     Œ∑ = (([ pos (suc (suc n')) / 1+ (suc n‚äî) ] , _)
                                    ‚Ñö‚Çä¬∑ Œ∏)
     œÖ = inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))) ‚Ñö‚Çä¬∑ Œ∏

     ŒΩ-Œ¥Œ∑ : ‚àÄ n* ‚Üí fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))) ‚Ñö‚Çä¬∑ Œ∏)
            ‚â° fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n*))) ‚Ñö‚Çä¬∑
            ((([ pos (suc (suc n*)) / 1+ (suc n‚äî) ] , _)
                                    ‚Ñö‚Çä¬∑ Œ∏)))
     ŒΩ-Œ¥Œ∑ n* = cong (‚Ñö._¬∑ fst Œ∏)
         (cong (fst ‚àò inv‚Ñö‚Çä)
              (cong {x = fromNat (suc (suc n‚äî)) , _}
                    {y = fromNat (suc (suc n*)) ‚Ñö‚Çä¬∑
                         ([ pos (suc (suc n‚äî)) / 2+ n* ] , _)}
               (2 ‚Ñö‚Çä¬∑_) (‚Ñö‚Çä‚â° (sym (m¬∑n/m _ _))) ‚àô
            ‚Ñö‚Çä‚â° (‚Ñö.¬∑Assoc 2 _ _))
          ‚àô cong fst (sym (‚Ñö.inv‚Ñö‚ÇäDist¬∑ _
             ([ pos (suc (suc n‚äî)) / 1+ (suc n*) ] , _))))
           ‚àô sym (‚Ñö.¬∑Assoc (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n*)))))
             [ pos (suc (suc n*)) / 1+ (suc n‚äî) ] (fst Œ∏))
     
     0<Œµ-[Œ¥+Œ∑] : 0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
     0<Œµ-[Œ¥+Œ∑] = snd (‚Ñö.<‚Üí‚Ñö‚Çä (fst Œ¥ ‚Ñö.+ fst Œ∑) (fst Œµ)
          (‚Ñö.isTrans<‚â§ _ _ _
             ( let z = ((‚Ñö.‚â§Monotone+
                      (fst Œ¥) (fst Œ∏)
                      (fst Œ∑)  (fst Œ∏)
                        (subst (fst Œ¥ ‚Ñö.‚â§_) (‚Ñö.¬∑IdL (fst Œ∏))
                         (‚Ñö.‚â§-¬∑o ([ pos (suc (suc n)) / 1+ (suc n‚äî) ]) 1
                            (fst Œ∏) (‚Ñö.0‚â§‚Ñö‚Çä Œ∏)
                              (subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _))
                               (‚Ñ§.max-pos-pos (suc (suc n)) (suc (suc n'))
                                  ‚àô sym (‚Ñ§.¬∑IdL _))
                                  (‚Ñ§.‚â§max {pos (suc (suc n))}
                                     {pos (suc (suc n'))}))))
                        (subst (fst Œ∑ ‚Ñö.‚â§_) (‚Ñö.¬∑IdL (fst Œ∏))
                         ((‚Ñö.‚â§-¬∑o ([ pos (suc (suc n')) / 1+ (suc n‚äî) ]) 1
                            (fst Œ∏) (‚Ñö.0‚â§‚Ñö‚Çä Œ∏)
                             ((subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _))
                               (‚Ñ§.maxComm _ _
                                 ‚àô ‚Ñ§.max-pos-pos (suc (suc n)) (suc (suc n'))
                                 ‚àô sym (‚Ñ§.¬∑IdL _))
                                  (‚Ñ§.‚â§max {pos (suc (suc n'))}
                                     {pos (suc (suc n))}))))))))
                   z' = ‚Ñö.<‚â§Monotone+
                         0 (fst Œ∏)
                        (fst Œ¥ ‚Ñö.+ (fst Œ∑))  (fst Œ∏ ‚Ñö.+ (fst Œ∏))
                        (‚Ñö.0<‚Ñö‚Çä Œ∏) z
               in subst (‚Ñö._<
                     fst Œ∏ ‚Ñö.+ (fst Œ∏ ‚Ñö.+ fst Œ∏))
                       (‚Ñö.+IdL (fst Œ¥ ‚Ñö.+ (fst Œ∑))) z')
            
                     3Œ∏‚â§Œµ))

     R' :
       fst (clampedSq (suc n)) (x œÖ)
        ‚àº[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , 0<Œµ-[Œ¥+Œ∑] ]
         fst (clampedSq (suc n')) (x œÖ)
     R' = invEq (‚àº‚âÉ‚â° _ _) (R œÖ ŒΩ<n ŒΩ<n') _
      where

       œÖ+œÖ<Œî : fst (œÖ ‚Ñö‚Çä+ œÖ) ‚Ñö.< fst Œî
       œÖ+œÖ<Œî = ‚Ñö.isTrans<‚â§
        (fst (œÖ ‚Ñö‚Çä+ œÖ)) (fst Œ∏) (fst Œî)
         (subst2 (‚Ñö._<_)
          (‚Ñö.¬∑DistR+
             (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))
             (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))
             (fst Œ∏))
             (‚Ñö.¬∑IdL (fst Œ∏))             
             ((‚Ñö.<-¬∑o
               (((fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))))))
                ‚Ñö.+
                ((fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))))
                1 (fst Œ∏)
              (‚Ñö.0<‚Ñö‚Çä Œ∏)
               (subst (‚Ñö._< 1)
                 (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) ‚àô cong (Œª x ‚Üí x ‚Ñö.+ x)
                   (‚Ñö.¬∑Comm _ _ ‚àô cong fst 
                     (‚Ñö.inv‚Ñö‚ÇäDist¬∑ 2 (fromNat (suc (suc n‚äî))))))
                   (1/n<sucK _ _) ))))
               (‚Ñö.min‚â§' (fst (‚Ñö./3‚Çä Œµ)) (fst Œî))
       
       ŒΩ<n‚äì : abs·µ£ (x œÖ) <·µ£ (fromNat (suc n‚äì))
       ŒΩ<n‚äì = isTrans‚â§<·µ£ (abs·µ£ (x œÖ))
                 (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ))) ((fromNat (suc n‚äì)))
                 (‚àº‚Üí‚â§ _ _ lx‚â§q _ _
                      (‚àº‚Üí‚àº' _ _ _ (abs·µ£-nonExpanding _ _ _
                            (sym‚àº _ _ _ (ùï£-lim-self x p œÖ œÖ)))))
                    (isTrans<‚â§·µ£
                       (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ)))
                       (rat q')
                       (rat [ pos (suc n‚äì) / 1+ 0 ])
                        (subst {x = rat (q ‚Ñö.+ fst Œî) }
                            (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ)) <·µ£_)
                          (cong rat (lem--05 {q} {q'}))
                           (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-o+ _ _ q œÖ+œÖ<Œî))) q'‚â§n)
       
       ŒΩ<n : abs·µ£ (x œÖ) <·µ£ fromNat (suc n)
       ŒΩ<n = isTrans<‚â§·µ£ (abs·µ£ (x œÖ)) (fromNat (suc n‚äì)) (fromNat (suc n))
                ŒΩ<n‚äì (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                  (subst (Œª n* ‚Üí [ n* / 1+ 0 ] ‚Ñö.‚â§ (fromNat (suc n)))
                    (‚Ñ§.min-pos-pos (suc n) (suc n'))
                     (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.min‚â§ {pos (suc n)} {pos (suc n')})) ))

       ŒΩ<n' : abs·µ£ (x œÖ) <·µ£ fromNat (suc n')
       ŒΩ<n' = isTrans<‚â§·µ£ (abs·µ£ (x œÖ)) (fromNat (suc n‚äì)) (fromNat (suc n'))
                ŒΩ<n‚äì (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                  (subst (Œª n* ‚Üí [ n* / 1+ 0 ] ‚Ñö.‚â§ (fromNat (suc n')))
                    (‚Ñ§.minComm (pos (suc n')) (pos (suc n))
                      ‚àô ‚Ñ§.min-pos-pos (suc n) (suc n'))
                     (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.min‚â§ {pos (suc n')} {pos (suc n)})) ))


     ll : fst (clampedSq (suc n))
            (x (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n))) ‚Ñö‚Çä¬∑ Œ¥))
            ‚àº[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , _ ]
             fst (clampedSq (suc n'))
            (x (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n'))) ‚Ñö‚Çä¬∑ Œ∑))
     ll = cong (fst (clampedSq (suc n)) ‚àòS x) (‚Ñö‚Çä‚â° (ŒΩ-Œ¥Œ∑ n))
             subst‚àº[ refl ]
           cong (fst (clampedSq (suc n')) ‚àòS x) (‚Ñö‚Çä‚â° (ŒΩ-Œ¥Œ∑ n')) $ R'
        
  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _

 f' : ‚àÄ r ‚Üí _ ‚Üí ‚Ñù
 f' r = (Œª ((1+ n) , <n) ‚Üí fst (clampedSq (suc n)) r )

 f : ‚àÄ r ‚Üí ‚àÉ[ n ‚àà ‚Ñï‚Çä‚ÇÅ ] abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) ‚Üí ‚Ñù
 f r = PT.rec‚ÜíSet {B = ‚Ñù} isSet‚Ñù
    (f' r) 
    (Œª (n , u) (n' , u') ‚Üí 2co n n' r u u') 

sq·µ£ : ‚Ñù ‚Üí ‚Ñù
sq·µ£ = fst sq·µ£'

/2·µ£-L : Œ£ _ _
/2·µ£-L = fromLipschitz ([ 1 / 2 ] , _)
  (_ , Lipschitz-rat‚àò ([ 1 / 2 ] , _) (‚Ñö._¬∑ [ 1 / 2 ])
   Œª q r Œµ x ‚Üí
     subst (‚Ñö._< ([ 1 / 2 ]) ‚Ñö.¬∑ (fst Œµ))
      (sym (‚Ñö.pos¬∑abs [ 1 / 2 ] (q ‚Ñö.- r)
       (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 1 / 2 ]} _ ))
       ‚àô cong ‚Ñö.abs (‚Ñö.¬∑Comm _ _ ‚àô ‚Ñö.¬∑DistR+ q (‚Ñö.- r) [ 1 / 2 ]
        ‚àô cong ((q ‚Ñö.¬∑ [ 1 / 2 ]) ‚Ñö.+_)
            (sym (‚Ñö.¬∑Assoc -1 r [ 1 / 2 ]))))
      (‚Ñö.<-o¬∑ (‚Ñö.abs (q ‚Ñö.- r)) (fst Œµ) [ 1 / 2 ]
       ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} _ )) x))

/2·µ£ = fst /2·µ£-L

_¬∑·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
u ¬∑·µ£ v = /2·µ£ ((sq·µ£ (u +·µ£ v)) +·µ£ (-·µ£ (sq·µ£ u +·µ£ sq·µ£ v)))


sq·µ£-rat : ‚àÄ r ‚Üí sq·µ£ (rat r) ‚â° rat (r ‚Ñö.¬∑ r)
sq·µ£-rat = ElimProp.go w
 where
 w : ElimProp (Œª z ‚Üí sq·µ£ (rat z) ‚â° rat (z ‚Ñö.¬∑ z))
 w .ElimProp.isPropB _ = isSet‚Ñù _ _
 w .ElimProp.f x = cong
       (Œª x ‚Üí rat (x ‚Ñö.¬∑ x))
        (‚Ñö.inClamps (‚Ñö.- c) c _
         -c<x x<c)
 
    where
    x' = (_//_.[ x ])
    
    c : ‚Ñö
    c = (fst (fromNat (suc (suc (getClampsOnQ x' .fst .‚Ñï‚Çä‚ÇÅ.n))))
        ‚Ñö.- _//_.[ 1 , 4 ])


    c' = fromNat ((suc (getClampsOnQ x' .fst .‚Ñï‚Çä‚ÇÅ.n)))
    
    <c' : ‚Ñö.abs' x' ‚Ñö.< c'
    <c' = <·µ£‚Üí<‚Ñö _ _ (snd (getClampsOnQ x'))

    c'‚â§c : c' ‚Ñö.‚â§ c
    c'‚â§c = subst2 ‚Ñö._‚â§_
             (‚Ñö.+IdR c') (‚Ñö.+Assoc c' 1 (‚Ñö.- [ 1 / 4 ])
               ‚àô cong ((‚Ñö._- [ 1 / 4 ])) (‚Ñö.+Comm c' 1 ‚àô
                ‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _))
             (‚Ñö.‚â§-o+ 0 (1 ‚Ñö.- [ 1 / 4 ]) c' ‚Ñö.dec‚Ñö‚â§?  )
    
    <c : ‚Ñö.abs' x' ‚Ñö.‚â§ c
    <c = ‚Ñö.isTrans‚â§ (‚Ñö.abs' x') c' c
       (‚Ñö.<Weaken‚â§ (‚Ñö.abs' x') c' <c') c'‚â§c


    -c<x : ‚Ñö.- c ‚Ñö.‚â§ x'
    -c<x = subst (‚Ñö.- c ‚Ñö.‚â§_) (‚Ñö.-Invol x') (‚Ñö.minus-‚â§ (‚Ñö.- x') c
       (‚Ñö.isTrans‚â§ (‚Ñö.- x') (‚Ñö.abs' x') c (‚Ñö.-‚â§abs' x') <c))


    x<c :  _//_.[ x ] ‚Ñö.‚â§ c
    x<c = ‚Ñö.isTrans‚â§ x' (‚Ñö.abs' x') c (‚Ñö.‚â§abs' x') <c


open ‚Ñö.HLP


rat¬∑·µ£rat : ‚àÄ r q ‚Üí rat (r ‚Ñö.¬∑ q) ‚â° rat r ¬∑·µ£ rat q 
rat¬∑·µ£rat r q =
  cong rat (
     dist‚Ñö! (r ‚Ñö.¬∑ q) ¬∑[ ge1 ‚â° (ge1 +ge ge1) ¬∑ge ge[ [ 1 / 2 ] ] ]
       ‚àô cong (‚Ñö._¬∑ [ 1 / 2 ]) (lem--058 {r} {q})) ‚àô
   Œª i ‚Üí /2·µ£ ((sq·µ£-rat (r ‚Ñö.+ q) (~ i))
    +·µ£ (-·µ£ (sq·µ£-rat r (~ i) +·µ£ sq·µ£-rat q (~ i))))


¬∑·µ£Comm : ‚àÄ x y ‚Üí x ¬∑·µ£ y ‚â° y ¬∑·µ£ x
¬∑·µ£Comm u v i =
  /2·µ£ ((sq·µ£ (+·µ£Comm u v i)) +·µ£ (-·µ£ (+·µ£Comm (sq·µ£ u) (sq·µ£ v) i)))

IsContinuousSq·µ£ : IsContinuous sq·µ£
IsContinuousSq·µ£ = snd sq·µ£'

IsContinuous/2·µ£ : IsContinuous /2·µ£
IsContinuous/2·µ£ = Lipschitz‚ÜíIsContinuous _ (fst /2·µ£-L) (snd /2·µ£-L)

IsContinuous¬∑·µ£R : ‚àÄ x ‚Üí IsContinuous (_¬∑·µ£ x)
IsContinuous¬∑·µ£R x =
  IsContinuous‚àò _
   (Œª u ‚Üí (sq·µ£ (u +·µ£ x)) +·µ£ (-·µ£ ((sq·µ£ u) +·µ£ (sq·µ£ x))))
    IsContinuous/2·µ£
      (cont‚ÇÇ+·µ£ (Œª u ‚Üí (sq·µ£ (u +·µ£ x)))
        (Œª u ‚Üí (-·µ£ ((sq·µ£ u) +·µ£ (sq·µ£ x))))
         (IsContinuous‚àò _ _ IsContinuousSq·µ£ (IsContinuous+·µ£R x))
          (IsContinuous‚àò _ _ IsContinuous-·µ£
             (IsContinuous‚àò _ _ (IsContinuous+·µ£R (sq·µ£ x)) IsContinuousSq·µ£)))

IsContinuous¬∑·µ£L : ‚àÄ x ‚Üí IsContinuous (x ¬∑·µ£_)
IsContinuous¬∑·µ£L x = subst IsContinuous
  (funExt Œª z ‚Üí ¬∑·µ£Comm z x) (IsContinuous¬∑·µ£R x) 



¬∑·µ£Assoc : ‚àÄ x y z ‚Üí  x ¬∑·µ£ (y ¬∑·µ£ z) ‚â° (x ¬∑·µ£ y) ¬∑·µ£ z
¬∑·µ£Assoc r r' r'' =
  ‚â°Continuous (_¬∑·µ£ (r' ¬∑·µ£ r'')) (Œª x ‚Üí (x ¬∑·µ£ r') ¬∑·µ£ r'')
     (IsContinuous¬∑·µ£R (r' ¬∑·µ£ r''))
     (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R r'') (IsContinuous¬∑·µ£R r'))
      (Œª q ‚Üí
        ‚â°Continuous
          (Œª x ‚Üí (rat q ¬∑·µ£ (x ¬∑·µ£ r'')))
          (Œª x ‚Üí ((rat q ¬∑·µ£ x) ¬∑·µ£ r''))
          ((IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat q))
             (IsContinuous¬∑·µ£R r'')))
          (IsContinuous‚àò _ _
           (IsContinuous¬∑·µ£R r'')
           (IsContinuous¬∑·µ£L (rat q)))
          (Œª q' ‚Üí
            ‚â°Continuous
               (Œª x ‚Üí (rat q ¬∑·µ£ (rat q' ¬∑·µ£ x)))
               (Œª x ‚Üí ((rat q ¬∑·µ£ rat q') ¬∑·µ£ x))
               (IsContinuous‚àò _ _
                 (IsContinuous¬∑·µ£L (rat q))
                 (IsContinuous¬∑·µ£L (rat q')))
               (IsContinuous¬∑·µ£L (rat q ¬∑·µ£ rat q'))
               (Œª q'' ‚Üí
                 cong (rat q ¬∑·µ£_) (sym (rat¬∑·µ£rat q' q''))
                   ‚àô‚àô sym (rat¬∑·µ£rat q (q' ‚Ñö.¬∑ q'')) ‚àô‚àô
                   cong rat (‚Ñö.¬∑Assoc _ _ _)
                   ‚àô‚àô rat¬∑·µ£rat (q ‚Ñö.¬∑ q') q'' ‚àô‚àô
                   cong (_¬∑·µ£ rat q'') (rat¬∑·µ£rat q q')) r'') r') r

¬∑IdR : ‚àÄ x ‚Üí x ¬∑·µ£ 1 ‚â° x
¬∑IdR = ‚â°Continuous _ _ (IsContinuous¬∑·µ£R 1) IsContinuousId
  (Œª r ‚Üí sym (rat¬∑·µ£rat r 1) ‚àô cong rat (‚Ñö.¬∑IdR r) )

¬∑IdL : ‚àÄ x ‚Üí 1 ¬∑·µ£ x ‚â° x
¬∑IdL = ‚â°Continuous _ _ (IsContinuous¬∑·µ£L 1) IsContinuousId
  (Œª r ‚Üí sym (rat¬∑·µ£rat 1 r) ‚àô cong rat (‚Ñö.¬∑IdL r) )

¬∑DistL+ : (x y z : ‚Ñù) ‚Üí (x ¬∑·µ£ (y +·µ£ z)) ‚â° ((x ¬∑·µ£ y) +·µ£ (x ¬∑·µ£ z))
¬∑DistL+ x y z =
  ‚â°Continuous _ _
   (IsContinuous¬∑·µ£R (y +·µ£ z))
   (cont‚ÇÇ+·µ£ _ _ (IsContinuous¬∑·µ£R y) (IsContinuous¬∑·µ£R z))
   (Œª x' ‚Üí
     ‚â°Continuous _ _
       (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat x')) (IsContinuous+·µ£R z))
       (IsContinuous‚àò _ _
        (IsContinuous+·µ£R (rat x' ¬∑·µ£ z)) (IsContinuous¬∑·µ£L (rat x')))
       (Œª y' ‚Üí
         ‚â°Continuous _ _
           (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat x'))
             (IsContinuous+·µ£L (rat y')))
           (IsContinuous‚àò _ _ (IsContinuous+·µ£L (rat x' ¬∑·µ£ rat y'))
                (IsContinuous¬∑·µ£L (rat x')) )
           (Œª z' ‚Üí sym (rat¬∑·µ£rat _ _)
                  ‚àô‚àô cong rat (‚Ñö.¬∑DistL+ x' y' z') ‚àô‚àô
                    cong‚ÇÇ _+·µ£_ (rat¬∑·µ£rat _ _) (rat¬∑·µ£rat _ _)) z)
       y)
   x

¬∑DistR+ : (x y z : ‚Ñù) ‚Üí ((x +·µ£ y) ¬∑·µ£ z) ‚â° ((x ¬∑·µ£ z) +·µ£ (y ¬∑·µ£ z))
¬∑DistR+ x y z = ¬∑·µ£Comm _ _ ‚àô‚àô ¬∑DistL+ z x y
  ‚àô‚àô cong‚ÇÇ _+·µ£_ (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _)

IsCommRing‚Ñù : CR.IsCommRing 0 1 (_+·µ£_) (_¬∑·µ£_) (-·µ£_)
IsCommRing‚Ñù = CR.makeIsCommRing
 isSet‚Ñù
  +·µ£Assoc +IdR +-·µ£ +·µ£Comm ¬∑·µ£Assoc
   ¬∑IdR ¬∑DistL+ ¬∑·µ£Comm



¬∑·µ£MaxDistrPos : ‚àÄ x y z ‚Üí ‚Ñö.0< z ‚Üí  (max·µ£ x y) ¬∑·µ£ (rat z) ‚â° max·µ£ (x ¬∑·µ£ rat z) (y ¬∑·µ£ rat z)   
¬∑·µ£MaxDistrPos x y z 0<z = 
  ‚â°Continuous _ _
     (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (rat z)) (IsContinuousMaxR y))
     (IsContinuous‚àò _ _ (IsContinuousMaxR
       (y ¬∑·µ£ (rat z))) (IsContinuous¬∑·µ£R (rat z)))
     (Œª x' ‚Üí
       ‚â°Continuous _ _
         (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (rat z)) (IsContinuousMaxL (rat x')))
         ((IsContinuous‚àò _ _ (IsContinuousMaxL (rat x' ¬∑·µ£ (rat z)))
                                (IsContinuous¬∑·µ£R (rat z))))
         (Œª y' ‚Üí sym (rat¬∑·µ£rat _ _)
             ‚àô‚àô cong rat (‚Ñö.¬∑MaxDistr‚Ñö x' y' z 0<z) ‚àô‚àô
              (cong‚ÇÇ max·µ£ (rat¬∑·µ£rat x' z) (rat¬∑·µ£rat y' z)))                    
         y)
     x



ùï£-lim-dist : ‚àÄ x y Œµ ‚Üí abs·µ£ ((x (‚Ñö./2‚Çä Œµ)) +·µ£ (-·µ£ lim x y)) <·µ£ rat (fst Œµ)
ùï£-lim-dist x y Œµ =
   fst (‚àº‚âÉabs<Œµ _ _ Œµ) $ subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
     $ ùï£-lim-self x y (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)

‚â°ContinuousWithPred : ‚àÄ P P' ‚Üí ‚ü® openPred P ‚ü© ‚Üí ‚ü® openPred P' ‚ü© ‚Üí ‚àÄ f g
  ‚Üí IsContinuousWithPred P  f
  ‚Üí IsContinuousWithPred P' g
  ‚Üí (‚àÄ r r‚àà r‚àà' ‚Üí f (rat r) r‚àà  ‚â° g (rat r) r‚àà')
  ‚Üí ‚àÄ u u‚àà u‚àà' ‚Üí f u u‚àà ‚â° g u u‚àà'
‚â°ContinuousWithPred P P' oP oP' f g fC gC e = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop
       (Œª z ‚Üí (u‚àà : ‚ü® P z ‚ü©) (u‚àà' : ‚ü® P' z ‚ü©) ‚Üí f z u‚àà ‚â° g z u‚àà')
 w .Elim‚Ñù-Prop.ratA = e
 w .Elim‚Ñù-Prop.limA x p R x‚àà x‚àà' = PT.rec2 (isSet‚Ñù _ _)
  (Œª (Œî , PŒî) (Œî' , PŒî') ‚Üí eq‚Ñù _ _ Œª Œµ‚ÇÄ ‚Üí
   let Œµ = Œµ‚ÇÄ
       f' = fC (lim x p) (‚Ñö./2‚Çä Œµ) x‚àà
       g' = gC (lim x p) (‚Ñö./2‚Çä Œµ) x‚àà'
   in PT.rec2
       (isProp‚àº _ _ _)
        (Œª (Œ∏ , Œ∏‚àº) (Œ∑ , Œ∑‚àº) ‚Üí
         let Œ¥ = ‚Ñö./2‚Çä (‚Ñö.min‚Çä (‚Ñö.min‚Çä Œî Œî') (‚Ñö.min‚Çä Œ∏ Œ∑))
             limX‚àºx = sym‚àº _ _ _ (ùï£-lim-self x p Œ¥ Œ¥)
             xŒ¥‚ààP : ‚ü® P (x Œ¥) ‚ü©
             xŒ¥‚ààP = PŒî (x Œ¥)
                     (‚àº-monotone‚â§
                       (((subst (‚Ñö._‚â§ fst Œî)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§ (fst Œî) (fst Œî'))))))
                       limX‚àºx)
             xŒ¥‚ààP' : ‚ü® P' (x Œ¥) ‚ü©
             xŒ¥‚ààP' = PŒî' (x Œ¥)
                     (‚àº-monotone‚â§ ((((subst (‚Ñö._‚â§ fst Œî')
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§' (fst Œî) (fst Œî'))))))) limX‚àºx)
             zF : f (lim x p) x‚àà ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥) xŒ¥‚ààP'
             zF = subst (f (lim x p) x‚àà ‚àº[ ‚Ñö./2‚Çä Œµ ]_)
                  (R _ xŒ¥‚ààP xŒ¥‚ààP') 
                 (Œ∏‚àº _ _ (‚àº-monotone‚â§
                    ((subst (‚Ñö._‚â§ fst Œ∏)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§'
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§ (fst Œ∏) (fst Œ∑)))))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥)))))
             zG : g (lim x p) x‚àà'  ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥) xŒ¥‚ààP'
             zG = Œ∑‚àº _ _
                   (‚àº-monotone‚â§
                        ((subst (‚Ñö._‚â§ fst Œ∑)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§'
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§' (fst Œ∏) (fst Œ∑)))))
                       
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥))))
             zz = subst‚àº ((‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))) (triangle‚àº zF (sym‚àº _ _ _ zG))
         in  zz)
        f' g') (oP (lim x p) x‚àà) (oP' (lim x p) x‚àà') 

 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _




cont‚ÇÇ¬∑·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí f x ¬∑·µ£ g x)
cont‚ÇÇ¬∑·µ£ f g fC gC = IsContinuous‚àò _
   (Œª u ‚Üí (sq·µ£ (f u +·µ£ g u)) +·µ£ (-·µ£ ((sq·µ£ (f u)) +·µ£ (sq·µ£ (g u)))))
    IsContinuous/2·µ£
     (cont‚ÇÇ+·µ£ _ _
       (IsContinuous‚àò _ _
         IsContinuousSq·µ£
          (cont‚ÇÇ+·µ£ _ _ fC gC))
       (IsContinuous‚àò _ _
          IsContinuous-·µ£
          (cont‚ÇÇ+·µ£ _ _
            (IsContinuous‚àò _ _ IsContinuousSq·µ£ fC)
            ((IsContinuous‚àò _ _ IsContinuousSq·µ£ gC)))))

‚ä§Pred : ‚Ñù ‚Üí hProp ‚Ñì-zero
‚ä§Pred = (Œª _ ‚Üí Unit , isPropUnit )


IsContinuousWP‚àò' : ‚àÄ P f g
   ‚Üí (IsContinuous f)
   ‚Üí (IsContinuousWithPred P g )
   ‚Üí IsContinuousWithPred P
     (Œª r x ‚Üí f (g r x))
IsContinuousWP‚àò' P f g fC gC u Œµ u‚ààP =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , Œ¥‚àº) ‚Üí
      PT.map (map-snd Œª x v v‚ààP ‚Üí
          Œ¥‚àº (g v v‚ààP) ‚àò (x _ v‚ààP)) (gC u Œ¥ u‚ààP))
    ((fC (g u u‚ààP) Œµ))



cont‚ÇÇ¬∑·µ£WP : ‚àÄ P f g
  ‚Üí (IsContinuousWithPred P f)
  ‚Üí (IsContinuousWithPred P g)
  ‚Üí IsContinuousWithPred P (Œª x x‚àà ‚Üí f x x‚àà ¬∑·µ£ g x x‚àà)
cont‚ÇÇ¬∑·µ£WP P f g fC gC = IsContinuousWP‚àò' P _
   (Œª u x‚àà ‚Üí (sq·µ£ (f u x‚àà +·µ£ g u x‚àà)) +·µ£
    (-·µ£ ((sq·µ£ (f u x‚àà)) +·µ£ (sq·µ£ (g u x‚àà)))))
    IsContinuous/2·µ£
    (contDiagNE‚ÇÇWP sumR P _ _
      ((IsContinuousWP‚àò' P _ _
         IsContinuousSq·µ£
          (contDiagNE‚ÇÇWP sumR P _ _ fC gC)))
      ((IsContinuousWP‚àò' P _ _
          IsContinuous-·µ£
          (contDiagNE‚ÇÇWP sumR P _ _
            (IsContinuousWP‚àò' P _ _ IsContinuousSq·µ£ fC)
            ((IsContinuousWP‚àò' P _ _ IsContinuousSq·µ£ gC))))))
    

¬∑-·µ£ : ‚àÄ x y ‚Üí x ¬∑·µ£ (-·µ£ y) ‚â° -·µ£ (x ¬∑·µ£ y)  
¬∑-·µ£ x =
  ‚â°Continuous _ _ (IsContinuous‚àò _ _
       (IsContinuous¬∑·µ£L x) IsContinuous-·µ£)
      (IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuous¬∑·µ£L x))
       Œª y' ‚Üí 
         ‚â°Continuous _ _
             (IsContinuous¬∑·µ£R (-·µ£ (rat y')))
              ((IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuous¬∑·µ£R (rat y'))))
          (Œª x' ‚Üí sym (rat¬∑·µ£rat _ _) ‚àô‚àô cong rat (¬∑- x' y') ‚àô‚àô
              (cong -·µ£_ (rat¬∑·µ£rat _ _)))
          x 


-·µ£¬∑ : ‚àÄ x y ‚Üí  ((-·µ£ x) ¬∑·µ£ y) ‚â°  -·µ£ (x ¬∑·µ£ y)
-·µ£¬∑ x y = ¬∑·µ£Comm _ _ ‚àô‚àô ¬∑-·µ£ y x ‚àô‚àô cong -·µ£_ (¬∑·µ£Comm _ _)


_^‚Åø_ : ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
x ^‚Åø zero = 1
x ^‚Åø suc n = (x ^‚Åø n) ¬∑·µ£ x 
