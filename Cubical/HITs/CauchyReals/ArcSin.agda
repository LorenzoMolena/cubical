{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.ArcSin where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Path

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Surjection
open import Cubical.Functions.Embedding


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad


open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.ExponentiationMore
open import Cubical.HITs.CauchyReals.Uniform
open import Cubical.HITs.CauchyReals.PiNumber
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Summation

open import Cubical.Algebra.Ring.BigOps


open import Cubical.Algebra.CommRing.Properties
open import Cubical.Algebra.CommRing.Base
import Cubical.Data.FinData as FD

open import Cubical.HITs.CauchyReals.TrigonometricIdentities


Integral-‚â§ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f f' s s'
            ‚Üí (‚àÄ x ‚â§x x‚â§ ‚Üí f x ‚â§x x‚â§ ‚â§·µ£ f' x ‚â§x x‚â§)
            ‚Üí on[ a , b ]IntegralOf f is s
            ‚Üí on[ a , b ]IntegralOf f' is s'
            ‚Üí s ‚â§·µ£ s'
Integral-‚â§ a b a‚â§b f f' s s' f‚â§f' s=‚à´ s'=‚à´ =
  Integral'-‚â§ a b a‚â§b
   _ _
   s s'
      (Œª x x‚àà ‚Üí f‚â§f' _ _ _)
       (invEq (clamp·µ£-IntegralOf' a b a‚â§b _ _) s=‚à´)
       (invEq (clamp·µ£-IntegralOf' a b a‚â§b _ _) s'=‚à´)



Integral0‚Ñô : (a b : ‚Ñù) ‚Üí
             a ‚â§·µ£ b ‚Üí
             on[ a , b ]IntegralOf (Œª _ _ _ ‚Üí 0) is 0
Integral0‚Ñô a b a‚â§b = 
  subst (on[ a , b ]IntegralOf (Œª _ _ _ ‚Üí rat [ pos 0 / 1+ 0 ]) is_)
    (ùêë'.0LeftAnnihilates _) (IntegralConst‚Ñô a b a‚â§b 0)

cos‚àòabs·µ£ : ‚àÄ x ‚Üí cos x ‚â° cos (abs·µ£ x) 
cos‚àòabs·µ£ = ‚â°Continuous _ _
  isContinuousCos
  (IsContinuous‚àò _ _ isContinuousCos IsContinuousAbs·µ£)
   Œª q ‚Üí ‚äé.rec
     (Œª 0‚â§q ‚Üí cong cos $ sym (abs·µ£NonNeg _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 0‚â§q)))
     (Œª q‚â§0 ‚Üí cong cos (sym (-·µ£Invol _)) ‚àô
              ((cong cos $ sym (cong -·µ£_
               ((abs·µ£NonNeg _ (isTrans‚â°‚â§·µ£ _ _ _
                 (sym (-·µ£-rat 0)) (-·µ£‚â§·µ£ _ _
                  (((‚â§‚Ñö‚Üí‚â§·µ£ q 0 q‚â§0)))) )) ‚àô
                  refl))))
              ‚àô sym (cos-even _) ‚àô cong cos
               (sym (-abs·µ£ _)))
     (‚Ñö.‚â§cases 0 q)

‚à£x‚à£‚â§œÄ/2‚Üí0‚â§cos[x] : ‚àÄ x ‚Üí x ‚àà interval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2 ‚Üí 0 ‚â§·µ£ cos x
‚à£x‚à£‚â§œÄ/2‚Üí0‚â§cos[x] x x‚àà =
  isTrans‚â§‚â°·µ£ _ _ _
   (x‚â§œÄ/2‚Üí0‚â§cos[x] (abs·µ£ x)
     (0‚â§abs·µ£ _ , (isTrans‚â°‚â§·µ£ _ _ _  (abs-max _)
     (max‚â§-lem x (-·µ£ x) _ (snd x‚àà)
      (isTrans‚â§‚â°·µ£ _  _ _  (-·µ£‚â§·µ£ _ _ (fst x‚àà)) (-·µ£Invol _ ))))))
   (sym (cos‚àòabs·µ£ x))

‚à£x‚à£<œÄ/2‚Üí0<cos[x] : ‚àÄ x ‚Üí x ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2 ‚Üí 0 <·µ£ cos x
‚à£x‚à£<œÄ/2‚Üí0<cos[x] x x‚àà =
  isTrans<‚â°·µ£ _ _ _
   (0‚â§x<œÄ/2‚Üí0<cos[x] (abs·µ£ x)
     (0‚â§abs·µ£ _)
     ((isTrans‚â°<·µ£ _ _ _  (abs-max _)
     (max<-lem x (-·µ£ x) _ (snd x‚àà)
      (isTrans<‚â°·µ£ _  _ _  (-·µ£<·µ£ _ _ (fst x‚àà)) (-·µ£Invol _ ))))))
   (sym (cos‚àòabs·µ£ x))

  
sin-firstQuarter-Monotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà interval‚Ñô 0 œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô 0 œÄ-number/2)
      ‚Üí x ‚â§·µ£ y ‚Üí sin x ‚â§·µ£ sin y
sin-firstQuarter-Monotone x y x‚àà y‚àà x‚â§y =
 invEq (x‚â§y‚âÉ0‚â§y-x _ _)
   (Integral-‚â§ x y x‚â§y _ _ _ _
      (Œª x' ‚â§x' x'‚â§ ‚Üí
        x‚â§œÄ/2‚Üí0‚â§cos[x] x'
          (isTrans‚â§·µ£ _ _ _ (fst x‚àà) ‚â§x' ,
           isTrans‚â§·µ£ _ _ _ x'‚â§ (snd y‚àà ) ))
      (Integral0‚Ñô _ _ x‚â§y)
      (‚à´cos x y x‚â§y))
      
sin-Monotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà interval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      ‚Üí x ‚â§·µ£ y ‚Üí sin x ‚â§·µ£ sin y
sin-Monotone x y x‚àà y‚àà x‚â§y =
 invEq (x‚â§y‚âÉ0‚â§y-x _ _)
   (Integral-‚â§ x y x‚â§y _ _ _ _
      (Œª x' ‚â§x' x'‚â§ ‚Üí
        ‚à£x‚à£‚â§œÄ/2‚Üí0‚â§cos[x] x'
         (isTrans‚â§·µ£ _ _ _ (fst x‚àà ) ‚â§x' ,
          isTrans‚â§·µ£ _ _ _ x'‚â§ (snd y‚àà )))
      (Integral0‚Ñô _ _ x‚â§y)
      (‚à´cos x y x‚â§y))



cos-firstQuarter-Monotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà interval‚Ñô 0 œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô 0 œÄ-number/2)
      ‚Üí x ‚â§·µ£ y ‚Üí cos y ‚â§·µ£ cos x
cos-firstQuarter-Monotone x y x‚àà y‚àà x‚â§y =
  invEq (x‚â§y‚âÉ0‚â§y-x _ _)
           (Integral-‚â§ x y x‚â§y _ _ _ _
              (Œª x' ‚â§x' x'‚â§ ‚Üí
                isTrans‚â°‚â§·µ£ _ _ _
                  (sym sin0=0) (sin-firstQuarter-Monotone 0 x'
                   (‚â§·µ£-refl 0 , <·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2)
                   (isTrans‚â§·µ£ _ _ _ (fst x‚àà) ‚â§x'
                   , isTrans‚â§·µ£ _ _ _ x'‚â§ (snd y‚àà))
                   (isTrans‚â§·µ£ _ _ _ (fst x‚àà) ‚â§x')))
              (Integral0‚Ñô _ _ x‚â§y)
              (‚à´sin x y x‚â§y))
 

dense‚Ñù : ‚àÄ u v ‚Üí u <·µ£ v ‚Üí Œ£[ r ‚àà ‚Ñù ] ((u <·µ£ r) √ó (r <·µ£ v))
dense‚Ñù u v u<v =
  (u +·µ£ v) ¬∑·µ£ rat [ 1 / 2 ]
    , isTrans<‚â°·µ£ _ _ _
      (isTrans‚â°<·µ£ _ _ _
        (((sym (ùêë'.¬∑IdR' _ _ (sym (rat¬∑·µ£rat _ _) ‚àô dec‚Ñö‚â°·µ£?))
         ‚àô ¬∑·µ£Assoc _ _ _ ) ‚àô ¬∑·µ£Comm _ _ )
         ‚àô sym (x+x‚â°2x (u ¬∑·µ£ rat [ 1 / 2 ])))
        (<·µ£-o+ _ _ _
          (<·µ£-¬∑·µ£o _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)) u<v)))
        (sym (¬∑DistR+ _ _ _))
    , isTrans‚â°<·µ£ _ _ _ (¬∑DistR+ _ _ _)
      (isTrans<‚â°·µ£ _ _ _
        (<·µ£-+o _ _ _ (<·µ£-¬∑·µ£o _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)) u<v))
        ((x+x‚â°2x (v ¬∑·µ£ rat [ 1 / 2 ]))
         ‚àô sym ((sym (ùêë'.¬∑IdR' _ _ (sym (rat¬∑·µ£rat _ _) ‚àô dec‚Ñö‚â°·µ£?))
         ‚àô ¬∑·µ£Assoc _ _ _ ) ‚àô ¬∑·µ£Comm _ _ )))

sin-firstQuarter-strictMonotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà interval‚Ñô 0 œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô 0 œÄ-number/2)
      ‚Üí x <·µ£ y ‚Üí sin x <·µ£ sin y
sin-firstQuarter-strictMonotone x y x‚àà y‚àà x<y =
  let (y' , x<y' , y'<y)  = dense‚Ñù _ _ x<y
      y'<œÄ/2 = isTrans<‚â§·µ£ _ _ _ y'<y (snd y‚àà)
      y'‚àà = (isTrans‚â§·µ£ _ _ _ (fst x‚àà) (<·µ£Weaken‚â§·µ£ _ _ x<y')
          , <·µ£Weaken‚â§·µ£ _ _ y'<œÄ/2)
  in isTrans<‚â§·µ£ _ _ _
       (0<y-x‚Üíx<y _ _
        (isTrans<‚â§·µ£ _ _ _
         (snd ((_ , 0‚â§x<œÄ/2‚Üí0<cos[x] y'
            (isTrans‚â§·µ£ _ _ _ (fst x‚àà) (<·µ£Weaken‚â§·µ£ _ _ x<y')) y'<œÄ/2)
           ‚Çä¬∑·µ£ (_ , x<y‚Üí0<y-x _ _ x<y')))
         ((Integral-‚â§ x y' (<·µ£Weaken‚â§·µ£ _ _ x<y') _ _ _ _
          (Œª x' ‚â§x' x'‚â§ ‚Üí
            cos-firstQuarter-Monotone x' y'
             ((isTrans‚â§·µ£ _ _ _ (fst x‚àà) ‚â§x'
               , isTrans‚â§·µ£ _ _ _ x'‚â§ (snd y'‚àà))) y'‚àà  x'‚â§)
          (IntegralConst‚Ñô _ _ (<·µ£Weaken‚â§·µ£ _ _ x<y')
           (cos y'))
          (‚à´cos x y' (<·µ£Weaken‚â§·µ£ _ _ x<y'))))))
       (sin-firstQuarter-Monotone y' y
         y'‚àà y‚àà
         (<·µ£Weaken‚â§·µ£ _ _ y'<y))


sin‚ü®‚ü©-strictMonotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      (y‚àà : y ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      ‚Üí x <·µ£ y ‚Üí sin x <·µ£ sin y
sin‚ü®‚ü©-strictMonotone x y x‚àà y‚àà x<y =
   0<y-x‚Üíx<y _ _ (isTrans<‚â§·µ£ _ _ _
    (snd ((_ , ‚à£x‚à£<œÄ/2‚Üí0<cos[x] _
      (isTrans<‚â§·µ£ _ _ _
        (-·µ£<·µ£ _ _ 0<œÄ-number/2) (isTrans‚â°‚â§·µ£ _ _ _ (-·µ£-rat 0)
         (isTrans‚â§·µ£ _ _ _ (0‚â§abs·µ£ y) (‚â§max·µ£ _ _) )) ,
          <œÄ/2 )) ‚Çä¬∑·µ£
      (_ , x<y‚Üí0<y-x _ _ x<y)))
    ((Integral-‚â§ x y x‚â§y _ _ _ _
      (Œª x' ‚â§x' x'‚â§ ‚Üí
        isTrans‚â§‚â°·µ£ _ _ _ ((cos-firstQuarter-Monotone
         _ _ (0‚â§abs·µ£ _ , <·µ£Weaken‚â§·µ£ _ _ (isTrans‚â°<·µ£ _ _ _
              (abs-max x')
              ((max<-lem x' (-·µ£ x') œÄ-number/2
               ( isTrans‚â§<·µ£ _ _ _ x'‚â§  (snd y‚àà) )
               (isTrans<‚â°·µ£ _ _ _
                (-·µ£<·µ£ _ _ (isTrans<‚â§·µ£ _ _ _ (fst x‚àà) ‚â§x'))
                 (-·µ£Invol _))))))
          ((isTrans‚â§·µ£ _ _ _ (0‚â§abs·µ£ _) (‚â§max·µ£ _ _)) ,
           <·µ£Weaken‚â§·µ£ _ _ <œÄ/2)
          (isTrans‚â°‚â§·µ£ _ _ _
           (abs-max x')
            (maxMonotone·µ£ x' (abs·µ£ y) (-·µ£ x') (abs·µ£ x)
               (isTrans‚â§·µ£ _ _ _ x'‚â§ (‚â§abs·µ£ y))
                 (isTrans‚â§·µ£ _ _ _ (-·µ£‚â§·µ£ _ _ ‚â§x')
                  (isTrans‚â§‚â°·µ£ _ _ _
                   (‚â§abs·µ£ _)
                   (sym (-abs·µ£ _))))

              ))))
         (sym (cos‚àòabs·µ£ x')))
      (IntegralConst‚Ñô _ _ x‚â§y (cos (max·µ£ (abs·µ£ y) (abs·µ£ x))))
      (‚à´cos x y x‚â§y))))
  where
  x‚â§y = <·µ£Weaken‚â§·µ£ _ _ x<y

  <œÄ/2 : max·µ£ (abs·µ£ y) (abs·µ£ x) <·µ£ œÄ-number/2
  <œÄ/2 = max<-lem (abs·µ£ y) (abs·µ£ x) _
             (isTrans‚â°<·µ£ _ _ _
              (abs-max y) (max<-lem y (-·µ£ y) œÄ-number/2
               ((snd y‚àà))
               (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ ( (fst y‚àà)))
                 (-·µ£Invol _))))
             ((isTrans‚â°<·µ£ _ _ _
              (abs-max x)
              ((max<-lem x (-·µ£ x) œÄ-number/2
               ( (snd x‚àà))
               (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ ((fst x‚àà)))
                 (-·µ£Invol _))))))

sin-strictMonotone :
      (x y : ‚Ñù)
      (x‚àà : x ‚àà interval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
      ‚Üí x <·µ£ y ‚Üí sin x <·µ£ sin y
sin-strictMonotone x y x‚àà y‚àà x<y =
  
 let (m , x<m , m<y)  = dense‚Ñù _ _ x<y
     (m' , x<m' , m'<m)  = dense‚Ñù _ _ x<m
     m‚àà : m ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2
     m‚àà = (isTrans‚â§<·µ£ _ _ _ (fst x‚àà) x<m) , (isTrans<‚â§·µ£ _ _ _ m<y (snd y‚àà) )
     m'‚àà : m' ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2
     m'‚àà = (isTrans‚â§<·µ£ _ _ _ (fst x‚àà) x<m') , isTrans<‚â§·µ£ _ _ _
         (isTrans<·µ£ _ _ _ m'<m m<y) (snd y‚àà)
 in isTrans<‚â§·µ£ _ _ _ (isTrans‚â§<·µ£ _ _ _
      (sin-Monotone _ _ x‚àà (ointerval‚Ñô‚äÜinterval‚Ñô _ _ m' m'‚àà)
       (<·µ£Weaken‚â§·µ£ _ _ x<m'))
     (sin‚ü®‚ü©-strictMonotone m' m
       m'‚àà
       m‚àà m'<m))
      (sin-Monotone _ _ (ointerval‚Ñô‚äÜinterval‚Ñô _ _ m m‚àà) y‚àà
      (<·µ£Weaken‚â§·µ£ _ _ m<y))
      



  
-- reciporalDerivativeU‚Ñô :
--     ‚àÄ P (f f' : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù)
--      ‚Üí (fPos : ‚àÄ x x‚àà ‚Üí 0 <·µ£ f x x‚àà)
--     ‚Üí IsUContinuous‚Ñô P f
--     ‚Üí uDerivativeOf‚Ñô P ,
--        ((Œª x x‚àà ‚Üí fst (inv‚Ñù‚Çä (f x x‚àà , fPos _ _)))) is
--          Œª x x‚àà ‚Üí (-·µ£ (f' x x‚àà Ôºè·µ£‚Çä ((f x x‚àà , fPos _ _ ) ‚Çä^‚Åø 2)))                   
-- reciporalDerivativeU‚Ñô = {!!}

-- DerivativeU‚Ñô-inv‚Ñù‚Çä : ‚àÄ (q : ‚Ñö‚Çä) ‚Üí
--   uDerivativeOf‚Ñô (pred<‚â§ 0 (rat (fst q))) ,
--     (Œª x x‚àà ‚Üí fst (inv‚Ñù‚Çä (x , (fst x‚àà))))
--      is Œª x x‚àà ‚Üí fst (inv‚Ñù‚Çä ((x , (fst x‚àà)) ‚Çä^‚Åø 2))
-- DerivativeU‚Ñô-inv‚Ñù‚Çä q = {!!}


abs·µ£-triangle-midpt
       : (x z y : ‚Ñù) ‚Üí  abs·µ£ (x -·µ£ y) ‚â§·µ£ abs·µ£ (x -·µ£ z) +·µ£ abs·µ£ (z -·µ£ y)
abs·µ£-triangle-midpt x z y =
  isTrans‚â°‚â§·µ£ _ _ _
    (cong abs·µ£ (sym Lùêë.lem--074))
    (abs·µ£-triangle (x -·µ£ z) (z -·µ£ y))
    
-- TODO : if we switch to bishop definition of derivative,
-- we can ditch injectivity of f

opaque
 chainRule-uD‚Ñô : ‚àÄ P P' ‚Üí  
   (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù)
   (f' : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù)
   (g : ‚àÄ x ‚Üí x ‚àà P' ‚Üí ‚Ñù)
   (g' : ‚àÄ x ‚Üí x ‚àà P' ‚Üí ‚Ñù)
   ‚Üí (Bounded P f')
   ‚Üí ‚à• (Bounded P' g') ‚à•‚ÇÅ
   ‚Üí (f‚àà : ‚àÄ x x‚àà ‚Üí f x x‚àà ‚àà P')
   ‚Üí IsUContinuous‚Ñô P f
   ‚Üí (-- (IsUContinuous‚Ñô (pred‚â§< fa fb) g') ‚äé
     (‚àÄ x y x‚àà y‚àà ‚Üí x ÔºÉ y ‚Üí f x x‚àà ÔºÉ f y y‚àà))
   ‚Üí uDerivativeOf‚Ñô P'
     , g is g'
   ‚Üí uDerivativeOf‚Ñô P , f is f'
   ‚Üí uDerivativeOf‚Ñô P , (Œª x x‚àà ‚Üí g (f x x‚àà) (f‚àà x x‚àà))
       is Œª x x‚àà ‚Üí g' (f x x‚àà) (f‚àà x x‚àà)
                     ¬∑·µ£ f' x x‚àà
 chainRule-uD‚Ñô P P' f f' g g' (‚à£f'‚à£ , <‚à£f'‚à£) gBd
   f‚àà ucf ucg' gD fD Œµ = do
  (‚à£g'‚à£ , <‚à£g'‚à£) ‚Üê gBd
  let Œ± = ‚Ñö.inv‚Ñö‚Çä (1 ‚Ñö‚Çä+ (‚à£f'‚à£)) ‚Ñö‚Çä¬∑ /2‚Çä Œµ
      Œ≤ = ‚Ñö.inv‚Ñö‚Çä (Œ± ‚Ñö‚Çä+ ‚à£g'‚à£) ‚Ñö‚Çä¬∑ /2‚Çä Œµ  
  (Œ¥-g , <Œ¥-g) ‚Üê (gD Œ±)
  (Œ¥-f , <Œ¥-f) ‚Üê (fD Œ≤)
  let œâ-f , <œâ-f = ucf Œ¥-g
      Œ¥ : ‚Ñö‚Çä
      Œ¥ = ‚Ñö.min‚Çä œâ-f Œ¥-f
      g‚àòf : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù 
      g‚àòf = Œª x x‚àà ‚Üí g (f x x‚àà) (f‚àà x x‚àà)
      g'‚àòf : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù 
      g'‚àòf = Œª x x‚àà ‚Üí g' (f x x‚àà) (f‚àà x x‚àà)
  ‚à£ Œ¥ , (Œª x x‚àà h h‚àà 0ÔºÉh h< ‚Üí
    let ‚à£h‚à£ : ‚Ñù‚Çä
        ‚à£h‚à£ = abs·µ£ h , 0ÔºÉ‚Üí0<abs h 0ÔºÉh
        zL : abs·µ£
               (g (f (x +·µ£ h) h‚àà) (f‚àà (x +·µ£ h) h‚àà) -·µ£ g (f x x‚àà) (f‚àà x x‚àà) -·µ£
                g' (f x x‚àà) (f‚àà x x‚àà) ¬∑·µ£ (f (x +·µ£ h) h‚àà -·µ£ f x x‚àà))
               ‚â§·µ£
               rat (fst Œ±) ¬∑·µ£
               (rat (fst ‚à£f'‚à£) ¬∑·µ£ abs·µ£ h +·µ£
                abs·µ£ (f' x x‚àà ¬∑·µ£ h -·µ£ (f (x +·µ£ h) h‚àà -·µ£ f x x‚àà)))
        zL = isTrans‚â°‚â§·µ£ _ _ _
                (minusComm-abs·µ£ _ _ ‚àô
                  cong abs·µ£ (cong‚ÇÇ _-·µ£_
                    refl
                    (cong‚ÇÇ _-·µ£_
                     (cong (uncurry g)
                      (Œ£PathP (sym Lùêë.lem--05 ,
                        toPathP refl)))
                     refl)))
                (isTrans‚â§·µ£ _ _ _
                   (<·µ£Weaken‚â§·µ£ _ _
                     (fst  (diff-‚âÉ P' g g' Œ± Œ¥-g _ _ _ _
                      (invEq (ÔºÉŒî _ _) (ucg' x (x +·µ£ h) x‚àà h‚àà
                        (fst (ÔºÉŒî _ _) (subst (0 ÔºÉ_)
                         (sym Lùêë.lem--05 ‚àô +·µ£Assoc _ _ _) 0ÔºÉh)))))
                        (<Œ¥-g _ _ _ _  _
                          (fst (‚àº‚âÉabs<Œµ _ _ _)
                            (<œâ-f _ _ _ _
                              (invEq (‚àº‚âÉabs<Œµ _ _ _)
                                (isTrans‚â°<·µ£ _ _ _
                                  (cong abs·µ£ (sym (+·µ£Assoc _ _ _) ‚àô Lùêë.lem--05))
                                  (isTrans<‚â§·µ£ _ _ _ h< (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                            (‚Ñö.min‚â§ (fst œâ-f) (fst Œ¥-f)))))))))))
                   (‚â§·µ£-o¬∑·µ£ _ _
                     _
                     (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§‚Ñö‚Çä Œ±))
                      (isTrans‚â§·µ£ _ _ _
                        (isTrans‚â§‚â°·µ£ _ _ _ (abs·µ£-triangle' _ (f' x x‚àà ¬∑·µ£ h))
                        (+·µ£Comm _ _ ‚àô cong‚ÇÇ _+·µ£_
                          (¬∑abs·µ£ _ _)
                          (minusComm-abs·µ£ _ _)) )
                          (‚â§·µ£-+o _ _ _
                            (‚â§·µ£-¬∑·µ£o _ _ _
                              (0‚â§abs·µ£ _)
                              (<‚à£f'‚à£ _ _)))) ))
        zR : abs·µ£
             (g'‚àòf _ x‚àà ¬∑·µ£
              (f _ h‚àà -·µ£ f _ x‚àà -·µ£ f' _ x‚àà ¬∑·µ£ h))
             ‚â§·µ£ rat (fst ‚à£g'‚à£) ¬∑·µ£ abs·µ£ (f' _ x‚àà ¬∑·µ£ h -·µ£ (f _ h‚àà -·µ£ f _ x‚àà))
        zR = isTrans‚â°‚â§·µ£ _ _ _
               (¬∑abs·µ£ _ _)
               (isTrans‚â§‚â°·µ£ _ _ _
                 (‚â§·µ£-¬∑·µ£o _ _ _
                              (0‚â§abs·µ£ _) (<‚à£g'‚à£ _ _))
                 (cong‚ÇÇ _¬∑·µ£_ refl
                   (minusComm-abs·µ£ _ _)))
        uR : abs·µ£ (f' x x‚àà ¬∑·µ£ h -·µ£ (f (x +·µ£ h) h‚àà -·µ£ f x x‚àà)) <·µ£
             rat (fst Œ≤) ¬∑·µ£ abs·µ£ h
        uR = fst  (diff-‚âÉ P f f' Œ≤ Œ¥ _ _ _ _ _)
                        ((<Œ¥-f x x‚àà h h‚àà 0ÔºÉh
                          (isTrans<‚â§·µ£ _ _ _ h< (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                            (‚Ñö.min‚â§' (fst œâ-f) (fst Œ¥-f))))))


        z : abs·µ£ (((g'‚àòf x x‚àà) ¬∑·µ£ f' x x‚àà) ¬∑·µ£ h
             -·µ£ ((g‚àòf (x +·µ£ h) h‚àà -·µ£ g‚àòf x x‚àà))) <·µ£ rat (fst Œµ) ¬∑·µ£ abs·µ£ h
        z = isTrans‚â§<·µ£ _
                     ((rat (fst Œ±) ¬∑·µ£ rat (fst ‚à£f'‚à£) ¬∑·µ£ abs·µ£ h)
                   +·µ£ rat (fst (Œ± ‚Ñö‚Çä+ ‚à£g'‚à£)) ¬∑·µ£ 
                      (abs·µ£ (f' x x‚àà ¬∑·µ£ h -·µ£ (f _ h‚àà -·µ£ f _ x‚àà)))) _
              (isTrans‚â§·µ£ _ _ _
                (isTrans‚â°‚â§·µ£ _ _ _
                  (minusComm-abs·µ£ _ _  ‚àô cong abs·µ£
                    (cong‚ÇÇ _-·µ£_ refl (sym (¬∑·µ£Assoc _ _ _))))
                  (abs·µ£-triangle-midpt
                    _ (g'‚àòf x x‚àà ¬∑·µ£ (f _ h‚àà -·µ£ f _ x‚àà)) _))
                (isTrans‚â°‚â§·µ£ _ _ _
                   (cong‚ÇÇ _+·µ£_ refl (cong abs·µ£ (sym (ùêë'.¬∑DistR- _ _ _))))
                   (isTrans‚â§‚â°·µ£ _ _ _
                     (‚â§·µ£Monotone+·µ£ _ _ _ _
                       zL
                       zR)
                     ((cong‚ÇÇ _+·µ£_ (¬∑DistL+ _ _ _)
                       refl)
                       ‚àô sym (+·µ£Assoc _ _ _)
                      ‚àô cong‚ÇÇ _+·µ£_
                       (¬∑·µ£Assoc _ _ _)
                       (sym (¬∑DistR+ _ _ _) ‚àô
                        cong‚ÇÇ _¬∑·µ£_ ((+·µ£-rat (fst Œ±)  (fst ‚à£g'‚à£)))
                        refl) ))))
              (isTrans<‚â°·µ£ _ _ _
                (<·µ£Monotone+·µ£ _ _ _ _
                  ((<·µ£-¬∑·µ£o _ _ ‚à£h‚à£
                    (isTrans<‚â°·µ£ _ _ _
                      (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ±)
                         (isTrans‚â°<·µ£ _ _ _
                           (sym (+IdL _))
                           (<·µ£-+o _ _ (rat (fst ‚à£f'‚à£)) (dec‚Ñö<·µ£? {0} {1}))))
                      (¬∑·µ£Comm _ _ ‚àô
                        cong‚ÇÇ _¬∑·µ£_ (+·µ£-rat _ _) refl
                         ‚àô sym (rat¬∑·µ£rat _ _)
                          ‚àô cong rat (‚Ñö.y¬∑[x/y] (1 ‚Ñö‚Çä+ (‚à£f'‚à£)) _ ) ))))
                  (isTrans<‚â°·µ£ _ _ _
                    (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œ± ‚Ñö‚Çä+ ‚à£g'‚à£)) uR)
                     (¬∑·µ£Assoc _ _ _
                     ‚àô cong (_¬∑·µ£ abs·µ£ h)
                       (sym (rat¬∑·µ£rat _ _) ‚àô
                        cong rat (‚Ñö.y¬∑[x/y] (Œ± ‚Ñö‚Çä+ ‚à£g'‚à£) _)))))
                (sym (¬∑DistR+ _ _ _) ‚àô
                  cong‚ÇÇ _¬∑·µ£_ (+·µ£-rat (fst (/2‚Çä Œµ)) _ ‚àô
                   cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))) refl))
    in invEq (diff-‚âÉ P g‚àòf
          (Œª x x‚àà ‚Üí g' (f x x‚àà) (f‚àà x x‚àà)
                     ¬∑·µ£ f' x x‚àà) Œµ Œ¥ _ _ _ _ _) z ) ‚à£‚ÇÅ


arcSin'‚Çä : ‚àÄ x ‚Üí x ‚àà pred‚â§< 0 1 ‚Üí ‚Ñù‚Çä
arcSin'‚Çä x (0‚â§x , x<1) =
  inv‚Ñù‚Çä (root 2 (1 -·µ£ (x ^‚Åø 2) , x<y‚Üí0<y-x _ _
   (^<1 x 0‚â§x 1 x<1)))

-- uContRoot
arcSin' : ‚àÄ x ‚Üí x ‚àà pred‚â§< 0 1 ‚Üí ‚Ñù
arcSin' x x‚àà = fst (arcSin'‚Çä x x‚àà)

1‚â°arcSin'0 : 1 ‚â° arcSin' 0 (‚â§·µ£-refl _ , dec‚Ñö<·µ£? {0} {1})
1‚â°arcSin'0 = cong fst (sym inv‚Ñù‚Çä1) ‚àô
  cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (sym (cong fst (‚Çô‚àö1 2)) ‚àô
    cong (fst ‚àò (root 2))
    (‚Ñù‚Çä‚â° (sym (ùêë'.+IdR' _ _
      (cong -·µ£_ (0^‚Åø 1) ‚àô -·µ£-rat 0)))) ))

arcSin'-Monotone : ‚àÄ x y x‚àà y‚àà ‚Üí x ‚â§·µ£ y ‚Üí arcSin' x x‚àà ‚â§·µ£ arcSin' y y‚àà
arcSin'-Monotone x y x‚àà y‚àà x‚â§y =
  invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
    (‚Çô‚àö-Monotone 2 ((‚â§·µ£-o+ _ _ 1
                    (-·µ£‚â§·µ£ _ _ (^‚Åø-Monotone 2 (fst x‚àà)  x‚â§y)))))

¬∑inv‚Ñù‚Çä : ‚àÄ x y ‚Üí fst (inv‚Ñù‚Çä (x ‚Çä¬∑·µ£ y)) ‚â° fst (inv‚Ñù‚Çä x) ¬∑·µ£ fst (inv‚Ñù‚Çä y)
¬∑inv‚Ñù‚Çä x y =
  sym (¬∑IdL _) ‚àô
  sym (x¬∑y‚â°z‚Üíx‚â°z/‚Çäy _ _ _ 
    (¬∑·µ£Comm _ _
     ‚àô‚àô    sym (¬∑·µ£Assoc _ _ _)
        ‚àô‚àô cong (fst x ¬∑·µ£_) (¬∑·µ£Assoc _ _ _ ‚àô ¬∑·µ£Comm _ _)
        ‚àô‚àô (¬∑·µ£Assoc _ _ _)
     ‚àô‚àô cong‚ÇÇ _¬∑·µ£_ (x¬∑inv‚Ñù‚Çä[x] x) (x¬∑inv‚Ñù‚Çä[x] y) ‚àô ¬∑IdL _ )
     )
   ‚àô ¬∑·µ£Comm _ _

1/v-1/u= : ‚àÄ u‚Çä v‚Çä ‚Üí (fst (inv‚Ñù‚Çä v‚Çä) +·µ£ -·µ£ fst (inv‚Ñù‚Çä u‚Çä)) ‚â°
          ((u‚Çä .fst -·µ£ v‚Çä .fst) ¬∑·µ£ inv‚Ñù‚Çä (u‚Çä ‚Çä¬∑·µ£ v‚Çä) .fst)
1/v-1/u= u‚Çä@(u , _) v‚Çä@(v , _) =
  cong‚ÇÇ _-·µ£_
    (sym ([x/‚Çäy]¬∑y·µ£ _ u‚Çä)
      ‚àô cong‚ÇÇ _¬∑·µ£_ (¬∑·µ£Comm _ _) refl)
    (sym ([x/‚Çäy]¬∑y·µ£ _ v‚Çä))
    ‚àô sym (ùêë'.¬∑DistR- _ _ _)
    ‚àô ¬∑·µ£Comm _ _ 
    ‚àô cong‚ÇÇ _¬∑·µ£_ refl (sym (¬∑inv‚Ñù‚Çä u‚Çä v‚Çä))


pre-inv‚Ñù‚ÇäUC : ‚àÄ (x : ‚Ñö‚Çä) ‚Üí 
  IsUContinuous‚Ñô (pred‚â• (rat (fst x)))
         (Œª x' x‚â§x' ‚Üí fst (inv‚Ñù‚Çä (x' ,
           isTrans<‚â§·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä x)) x‚â§x'))) 
pre-inv‚Ñù‚ÇäUC q Œµ =
  ((q ‚Ñö‚Çä^‚Åø 2) ‚Ñö‚Çä¬∑ Œµ) ,
   Œª u v u‚àà v‚àà ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _) ‚àòS
     (Œª ‚à£u-v‚à£<Œµ¬≤ ‚Üí
      let u‚Çä : ‚Ñù‚Çä
          u‚Çä = (u , isTrans<‚â§·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä q)) u‚àà)
          v‚Çä : ‚Ñù‚Çä
          v‚Çä = (v , isTrans<‚â§·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä q)) v‚àà)
      in isTrans‚â°<·µ£ _ (abs·µ£ (u -·µ£ v) ¬∑·µ£
        fst (inv‚Ñù‚Çä (u‚Çä ‚Çä¬∑·µ£ v‚Çä))) _
          (minusComm-abs·µ£ _ _ ‚àô cong abs·µ£ (1/v-1/u= u‚Çä v‚Çä)
            -- (cong‚ÇÇ _-·µ£_ {!!} {!!}
            --  ‚àô sym (ùêë'.¬∑DistR- _ _ _) ‚àô ¬∑·µ£Comm _ _)
             ‚àô ¬∑abs·µ£ _ _ ‚àô
            cong‚ÇÇ _¬∑·µ£_
              refl (abs·µ£Pos _ (snd (inv‚Ñù‚Çä (u‚Çä ‚Çä¬∑·µ£ v‚Çä)))))
              
           (invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _)
             (isTrans<‚â§·µ£ _ _ _ ‚à£u-v‚à£<Œµ¬≤
              (isTrans‚â°‚â§·µ£ _ _ _
               (rat¬∑·µ£rat (fst (q ‚Ñö‚Çä^‚Åø 2)) _)
               (‚â§·µ£-¬∑·µ£o _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))
                (isTrans‚â°‚â§·µ£ _ _ _
                 (cong fst (sym (^‚Ñ§-rat q (pos 2))))
                 (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                   (<·µ£Weaken‚â§·µ£ _ _ (snd u‚Çä))
                   (<·µ£Weaken‚â§·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä q .snd))
                   (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdL _) u‚àà) v‚àà))))))) ‚àòS
     fst (‚àº‚âÉabs<Œµ _ _ _)





inv‚Ñù‚ÇäUC : ‚àÄ x ‚Üí (0<x : 0 <·µ£ x) ‚Üí ‚à• IsUContinuous‚Ñô (pred‚â• x)
         (Œª x' x‚â§x' ‚Üí fst (inv‚Ñù‚Çä (x' , isTrans<‚â§·µ£ _ _ _ 0<x x‚â§x'))) ‚à•‚ÇÅ
inv‚Ñù‚ÇäUC x 0<x =
  PT.map (Œª (Œ¥ , 0<q , q<x) ‚Üí
    subst (IsUContinuous‚Ñô (pred‚â• x))
      (funExt‚ÇÇ Œª _ _ ‚Üí
        cong (fst ‚àò inv‚Ñù‚Çä)
          (Œ£‚â°Prop (‚àà-isProp (pred> _)) refl))
      (IsUContinuous‚Ñô-restr (pred‚â• (rat Œ¥)) (pred‚â• x) _
       (Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _
         (<·µ£Weaken‚â§·µ£ _ _ q<x)
         x‚àà)
      (pre-inv‚Ñù‚ÇäUC (Œ¥ , ‚Ñö.<‚Üí0< Œ¥ (<·µ£‚Üí<‚Ñö 0 Œ¥ 0<q)))))
    (dense‚Ñöin‚Ñù _ _ 0<x)

arcSin'-UC : ‚àÄ x ‚Üí (x‚àà : x ‚àà pred‚â§< 0 1) ‚Üí
   ‚à• IsUContinuous‚Ñô (interval‚Ñô 0 x)
      (Œª x' x'‚àà ‚Üí arcSin' x' (fst x'‚àà , isTrans‚â§<·µ£ x' x 1 (snd x'‚àà) (snd x‚àà)))
      ‚à•‚ÇÅ
arcSin'-UC y (0‚â§y , y<1) = 
 let z =  
      PT.map (flip (IsUContinuous‚Ñô‚àò‚Ñô (interval‚Ñô 0 y)
        (interval‚Ñô (fst (root 2 (1 -·µ£ y ^‚Åø 2 ,
          (x<y‚Üí0<y-x _ _ (^<1 y 0‚â§y 1 y<1)))))  1)
        {Œª x x‚àà ‚Üí fst
          (inv‚Ñù‚Çä
           ((x , isTrans<‚â§·µ£ _ _ _
             (snd (root 2 (1 -·µ£ (y ^‚Åø 2) ,
             x<y‚Üí0<y-x (y ^‚Åø 2) 1 (^<1 y 0‚â§y 1 y<1))))
             (fst  x‚àà))))} 
                 Œª x' (0‚â§x' , x'<y) ‚Üí
                   ‚Çô‚àö-Monotone 2 (‚â§·µ£-o+ _ _ 1
                    (-·µ£‚â§·µ£ _ _ (^‚Åø-Monotone 2 0‚â§x'  x'<y)))  ,
                   (isTrans‚â§‚â°·µ£ _ _ _
                   (‚Çô‚àö-Monotone {y = 1} 2 (isTrans‚â§‚â°·µ£ _ _ _
                     (‚â§·µ£-o+ _ _ 1 (-·µ£‚â§·µ£ _ _ ( 0‚â§x^‚Åø x' 2 0‚â§x')))
                      (ùêë'.+IdR' _ _ (-·µ£-rat 0))))
                    (cong fst (‚Çô‚àö1 2) )) )
                 
         (IsUContinuous‚Ñô‚àò‚Ñô (interval‚Ñô 0 y) (pred> 0)
           {Œª x x‚àà ‚Üí fst (root 2 (x , x‚àà)) }
            {Œª x _ ‚Üí 1 -·µ£ (x ^‚Åø 2)}
           (Œª x x‚àà ‚Üí x<y‚Üí0<y-x _ _ (^<1 x (fst x‚àà) 1
            (isTrans‚â§<·µ£ _ _ _ (snd x‚àà) y<1)))
           (uContRoot 2)
           (IsUContinuous‚Ñô+·µ£‚ÇÇ (interval‚Ñô 0 y) _ _
            (IsUContinuous‚Ñô-const (interval‚Ñô 0 y) 1)
            (IsUContinuous‚Ñô-·µ£‚àò
             (interval‚Ñô 0 y) _
               (IsUContinuous‚Ñô-restr (interval‚Ñô 0 1) (interval‚Ñô 0 y)
                 _ (Œª x ‚Üí map-snd (flip (isTrans‚â§·µ£ _ _ _) (<·µ£Weaken‚â§·µ£ _ _ y<1) ))
               (IsUContinuous‚Ñô^‚Åø 0 1 ((dec‚Ñö‚â§·µ£? {0} {1})) 2)))))
               ) 
          
        (PT.map 
         (subst (IsUContinuous‚Ñô (interval‚Ñô _ 1))
          (funExt‚ÇÇ Œª x _ ‚Üí cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° refl)) ‚àò
            IsUContinuous‚Ñô-restr (pred‚â• _)
             (interval‚Ñô _ 1)
              (Œª x x‚àà ‚Üí fst (inv‚Ñù‚Çä (x , _)))
               Œª _ ‚Üí fst)
            (inv‚Ñù‚ÇäUC _ ((snd (root 2 (1 -·µ£ y ^‚Åø 2 ,
          (x<y‚Üí0<y-x _ _ (^<1 y 0‚â§y 1 y<1))))))))
  in 
    PT.map (subst (IsUContinuous‚Ñô (interval‚Ñô (rat [ pos 0 / 1+ 0 ]) y))
     (funExt‚ÇÇ Œª x x‚àà ‚Üí
        cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â°
          refl))) z    

opaque
 arcSinDef : ‚àÄ x ‚Üí (x‚àà : x ‚àà pred‚â§< 0 1) ‚Üí
   Œ£[ arcSinX ‚àà ‚Ñù ]
     (on[ 0 , x ]IntegralOf
       (Œª x' ‚â§x x< ‚Üí arcSin' x' (‚â§x , isTrans‚â§<·µ£ _ _ _ x< (snd x‚àà))) is arcSinX )
 arcSinDef x x‚àà@(0‚â§x , x<1) = 
  PT.rec
   (Integrated‚ÑôProp‚Ñô _ _ 0‚â§x _)
    (Integrate-UContinuous‚Ñô
    0
    x
    0‚â§x
    (Œª x' x'‚àà ‚Üí arcSin' x' ((fst x'‚àà) , isTrans‚â§<·µ£ _ _ _ (snd x'‚àà) x<1)))
    (arcSin'-UC x x‚àà)



arcSin : ‚àÄ x ‚Üí (x‚àà : x ‚àà pred‚â§< 0 1) ‚Üí ‚Ñù
arcSin x x‚àà = fst (arcSinDef x x‚àà)

emptyIntegral : ‚àÄ x f ‚Üí (on[ x , x ]IntegralOf f is 0 )
emptyIntegral x f Œµ = ‚à£ 1 ,
  (Œª (_ , tp) _ ‚Üí isTrans‚â°<·µ£ _ _ _
    (cong abs·µ£ (ùêë'.+InvR' _ _ (sym (riemannSum-empty tp (uncurry ‚àò f) refl)) )
     ‚àô abs·µ£0)
    (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ

arcSin[0]‚â°0 : (0‚àà : 0 ‚àà pred‚â§< 0 1) ‚Üí arcSin 0 0‚àà ‚â° 0 
arcSin[0]‚â°0 0‚àà = IntegralUniq 0 0 (fst 0‚àà) _ _ _
  (snd (arcSinDef 0 0‚àà)) (emptyIntegral 0 _)

arcSinInj : ‚àÄ x y x‚àà y‚àà ‚Üí arcSin x x‚àà ‚â° arcSin y y‚àà ‚Üí x ‚â° y  
arcSinInj x y x‚àà@(0‚â§x , x<1) y‚àà@(0‚â§y , y<1) p =
  ‚â°-byContracdition _ _ w


  where
  w : (Œµ : ‚Ñö‚Çä) ‚Üí rat (fst Œµ) <·µ£ abs·µ£ (x -·µ£ y) ‚Üí ‚ä•
  w Œµ Œµ< =
    ‚äé.rec 
           (w' y x y‚àà x‚àà (sym p))
           (w' x y x‚àà y‚àà p)
      cases<
   where
     -- TODO : lemma somwhere in order
     cases< :  (y +·µ£ rat (fst Œµ) <·µ£ x) ‚äé (x +·µ£ rat (fst Œµ) <·µ£ y)
     cases< = ‚äé.map
         (Œª 0<x-y ‚Üí 
            let z = isTrans<‚â°·µ£ _ _ _ Œµ< (abs·µ£Pos _ 0<x-y)
            in isTrans‚â°<·µ£ _ _ _ (+·µ£Comm _ _) (a<b-c‚áía+c<b _ _ _ z))
         (Œª 0<y-x ‚Üí
            let z = isTrans<‚â°·µ£ _ _ _ Œµ< (abs·µ£Neg _ 0<y-x ‚àô -[x-y]‚â°y-x _ _)
            in isTrans‚â°<·µ£ _ _ _ (+·µ£Comm _ _) (a<b-c‚áía+c<b _ _ _ z))
       (decCut _ (isTrans<·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)) Œµ<))
     
     w' : ‚àÄ x y x‚àà y‚àà ‚Üí arcSin x x‚àà ‚â° arcSin y y‚àà ‚Üí
          x +·µ£ rat (fst Œµ) <·µ£ y ‚Üí ‚ä•
     w' x y x‚àà@(0‚â§x , x<1) y‚àà@(0‚â§y , y<1) p x+Œµ<y =
       ‚â§·µ£‚Üí‚âØ·µ£ (fst Œî) 0
         (‚â§-o+-cancel _ _ _ (‚â°·µ£Weaken‚â§·µ£ _ _ (cc ‚àô sym p ‚àô sym (+IdR _))))
         0<Œî
         
      where
       x<y : x <·µ£ y
       x<y = isTrans<·µ£ _ _ _
         (isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
          (<·µ£-o+ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))) x+Œµ<y

       x‚â§y : x ‚â§·µ£ y
       x‚â§y = <·µ£Weaken‚â§·µ£ _ _ x<y
       
       Œî : Œ£ ‚Ñù (on[_,_]IntegralOf_is_ x y (curry ‚àò (Œª x' x'‚àà ‚Üí arcSin' x' _)))
       Œî = PT.rec 
           (Integrated‚ÑôProp‚Ñô _ _ x‚â§y
             (curry ‚àò (Œª x' x'‚àà ‚Üí arcSin' x' _)))
               (Integrate-UContinuous‚Ñô
                x
                y
                x‚â§y
                (Œª x' x'‚àà ‚Üí arcSin' x' _) ‚àò
                IsUContinuous‚Ñô-restr (interval‚Ñô 0 y) (interval‚Ñô x y) _
                  Œª _ ‚Üí map-fst Œª x‚àà ‚Üí isTrans‚â§·µ£ _ _ _ 0‚â§x x‚àà)
                (arcSin'-UC y y‚àà)
                
       0<Œî : 0 <·µ£ fst Œî
       0<Œî = isTrans<‚â§·µ£ 0 _ _
          (isTrans<‚â°·µ£ _ _ _ (x<y‚Üí0<y-x _ _ x<y) (sym (¬∑IdL _)))
          (Integral-‚â§ x y x‚â§y (Œª _ _ _ ‚Üí 1)
            _
            _
            _
            (Œª x' ‚â§x' x'‚â§ ‚Üí (isTrans‚â°‚â§·µ£ _ _ _ 1‚â°arcSin'0
              (arcSin'-Monotone _ _ _ _ (isTrans‚â§·µ£ _ _ _ 0‚â§x ‚â§x'))))
            (IntegralConst‚Ñô x y x‚â§y 1)
            (snd Œî))
          
       arcSin-x : _
       arcSin-x = subst (Œª f ‚Üí on[ 0 , x ]IntegralOf
            f is
            arcSinDef x (0‚â§x , x<1) .fst)
              (funExt‚ÇÉ Œª x' _ _ ‚Üí
                cong (arcSin' x') (‚àà-isProp (pred‚â§< 0 1) _ _ _))
              (snd (arcSinDef x x‚àà))

       cc : arcSin x (0‚â§x , x<1) +·µ£ Œî .fst ‚â° arcSin y (0‚â§y , y<1)
       cc = Integral-additive 0 x y
              0‚â§x x‚â§y
                (Œª r z z‚ÇÅ ‚Üí arcSin' r (z , isTrans‚â§<·µ£ r y 1 z‚ÇÅ y<1))
                ((arcSin x x‚àà))
               (Œî .fst)
               (arcSin y y‚àà)
               arcSin-x (snd Œî) (snd (arcSinDef y y‚àà))


arcSinDer : ‚àÄ x ‚Üí (x‚àà : x ‚àà ointerval‚Ñô 0 1) ‚Üí
 uDerivativeOf‚Ñô interval‚Ñô 0 x ,
  (Œª x' (‚â§x , x‚â§) ‚Üí arcSin x' (‚â§x , isTrans‚â§<·µ£ _ _ _ x‚â§ (snd x‚àà))) is
    (Œª x' (‚â§x , x‚â§) ‚Üí arcSin' x' (‚â§x , isTrans‚â§<·µ£ _ _ _ x‚â§ (snd x‚àà)))
arcSinDer x x‚àà =
   PT.rec (isProp-uDerivativeOf‚Ñô (interval‚Ñô 0 x) _ _)
        (FTOC‚áí* 0 x (<·µ£Weaken‚â§·µ£ _ _ (fst x‚àà))
          _
          _
            (Œª x‚ÇÅ x‚àà‚ÇÅ y y‚àà ‚Üí
              (fst y‚àà , isTrans‚â§·µ£ _ _ _ (snd y‚àà) (snd x‚àà‚ÇÅ)))
            Œª y y‚àà ‚Üí
              subst (Œª f ‚Üí on[ 0 , y ]IntegralOf
                f
                is (arcSinDef y (y‚àà .fst ,
                 isTrans‚â§<·µ£ y x 1 (y‚àà .snd) (snd x‚àà)) .fst))
                (funExt‚ÇÉ Œª x' _ _ ‚Üí
                 cong (arcSin' x') (‚àà-isProp (pred‚â§< 0 1) _ _ _) )
                  ((snd (arcSinDef y
                         (y‚àà .fst , isTrans‚â§<·µ£ y x 1 (y‚àà .snd) (snd x‚àà))))))
        (arcSin'-UC x (<·µ£Weaken‚â§·µ£ _ _ (fst x‚àà) , snd x‚àà))



x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© : ‚àÄ x ‚Üí x ‚àà pred‚â§< 0 œÄ-number/2 ‚Üí sin x ‚àà pred‚â§< 0 1
x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© x x‚àà =
 isTrans‚â°‚â§·µ£ _ _ _ (sym sin0=0)
  (sin-firstQuarter-Monotone 0 x
   (‚â§·µ£-refl _ , <·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2)
    (map-snd (<·µ£Weaken‚â§·µ£ _ _) x‚àà)
    (fst x‚àà))
  ,
  (isTrans<‚â°·µ£ _ _ _
   (sin-firstQuarter-strictMonotone _ _
    (fst x‚àà , <·µ£Weaken‚â§·µ£ _ _ (snd x‚àà))
     (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2 , ‚â§·µ£-refl _) (snd x‚àà))
   sin[œÄ/2]‚â°1)

x‚àà‚ü®0,œÄ/2‚ü©‚Üísin[x]‚àà‚ü®0,1‚ü© : ‚àÄ x ‚Üí x ‚àà ointerval‚Ñô 0 œÄ-number/2 ‚Üí sin x ‚àà ointerval‚Ñô 0 1
x‚àà‚ü®0,œÄ/2‚ü©‚Üísin[x]‚àà‚ü®0,1‚ü© x x‚àà =
  isTrans‚â°<·µ£ _ _ _ (sym sin0=0)
  (sin-firstQuarter-strictMonotone 0 x
   ((‚â§·µ£-refl _ , <·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2))
    (ointerval‚Ñô‚äÜinterval‚Ñô _ _ _ x‚àà)
    (fst x‚àà))
  ,
  (isTrans<‚â°·µ£ _ _ _
   (sin-firstQuarter-strictMonotone _ _
    (ointerval‚Ñô‚äÜinterval‚Ñô _ _ _ x‚àà )
     (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2 , ‚â§·µ£-refl _) (snd x‚àà))
   sin[œÄ/2]‚â°1)


bounded-arcSin' : ‚àÄ x ‚Üí (x‚àà : x ‚àà ointerval‚Ñô 0 1) ‚Üí 
  ‚à• Bounded (interval‚Ñô 0 x)
    (Œª x' (‚â§x , x‚â§) ‚Üí arcSin' x' (‚â§x , isTrans‚â§<·µ£ _ _ _ x‚â§ (snd x‚àà)))
    ‚à•‚ÇÅ
bounded-arcSin' x x‚àà =
  PT.map
   (map-snd (Œª {q} X x' x'‚àà ‚Üí
     isTrans‚â°‚â§·µ£ _ _ _ (abs·µ£Pos _ (snd (arcSin'‚Çä x'
        (map-snd (flip (isTrans‚â§<·µ£ _ _ _) (snd x‚àà)) x'‚àà ))))
      (isTrans‚â§·µ£ _ _ _
       (arcSin'-Monotone x' x _ _ (snd x'‚àà))
       (<·µ£Weaken‚â§·µ£ _ _ X))))
   (‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚Çä
    (arcSin'‚Çä x (map-fst (<·µ£Weaken‚â§·µ£ _ _) x‚àà)))


sinÔºÉ-firstQuarter : (x y : ‚Ñù) (x‚àà : x ‚àà interval‚Ñô 0 œÄ-number/2)
      (y‚àà : y ‚àà interval‚Ñô 0 œÄ-number/2) ‚Üí
      x ÔºÉ y ‚Üí sin x ÔºÉ sin y 
sinÔºÉ-firstQuarter x y x‚àà y‚àà =
 ‚äé.map (sin-firstQuarter-strictMonotone x y x‚àà y‚àà)
       (sin-firstQuarter-strictMonotone y x y‚àà x‚àà)

[arcSin‚àòSin]'=1 : ‚àÄ x ‚Üí (x‚àà : x ‚àà ointerval‚Ñô 0 œÄ-number/2) ‚Üí
  uDerivativeOf‚Ñô (interval‚Ñô 0 x) ,
     (Œª x' x'‚àà ‚Üí arcSin (sin x')
      ((x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© x'
       (map-snd (flip (isTrans‚â§<·µ£ _ _ _) (snd x‚àà)) x'‚àà)))) is Œª _ _ ‚Üí 1
[arcSin‚àòSin]'=1 x x‚àà = 
  subst2 (uDerivativeOf‚Ñô (interval‚Ñô 0 x) ,_is_)
      (funExt‚ÇÇ Œª _ _ ‚Üí cong (uncurry arcSin)
       (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1)) refl))
      (funExt‚ÇÇ w=)
      w
 where
 w : uDerivativeOf‚Ñô interval‚Ñô 0 x , _ is _

 w = chainRule-uD‚Ñô (interval‚Ñô 0 x) (interval‚Ñô 0 (sin x))
        (Œª x _ ‚Üí sin x) (Œª x _ ‚Üí cos x) _ _ 
        (bounded-cos (interval‚Ñô 0 x)) 
        (bounded-arcSin' (sin x) (x‚àà‚ü®0,œÄ/2‚ü©‚Üísin[x]‚àà‚ü®0,1‚ü© x x‚àà)) --bounded-arcSin'
        (Œª y y‚àà ‚Üí fst (x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© y
          ((map-snd (flip (isTrans‚â§<·µ£ y x œÄ-number/2) (snd x‚àà)) y‚àà))) ,
         sin-firstQuarter-Monotone y x
           (map-snd (flip (isTrans‚â§·µ£ _ _ _) (<·µ£Weaken‚â§·µ£ _ _ (snd x‚àà))) y‚àà)
           (ointerval‚Ñô‚äÜinterval‚Ñô _ _ _ x‚àà) (snd y‚àà))
        (uContSin (interval‚Ñô 0 x))
        (Œª x' y x'‚àà y‚àà ‚Üí
          sinÔºÉ-firstQuarter x' y
            (map-snd (flip (isTrans‚â§·µ£ _ _ _) (<·µ£Weaken‚â§·µ£ _ _ (snd x‚àà))) x'‚àà)
            (map-snd (flip (isTrans‚â§·µ£ _ _ _) (<·µ£Weaken‚â§·µ£ _ _ (snd x‚àà))) y‚àà))
        (arcSinDer (sin x) (x‚àà‚ü®0,œÄ/2‚ü©‚Üísin[x]‚àà‚ü®0,1‚ü© x x‚àà))
        (sin'=cos-uder' 0 x (fst x‚àà))
        


 w= : ‚àÄ (x' : ‚Ñù) x'‚àà ‚Üí
      _ ‚â° 1
 w= x' x'‚àà = 
   cong (_¬∑·µ£ fst cosx‚Çä)
    (cong (fst ‚àò inv‚Ñù‚Çä)
      (‚Ñù‚Çä‚â° (cong fst (sym
       (invEq (equivAdjointEquiv
         (_ , isEquiv-‚Çä^‚Åø 2) {_ , snd cosx‚Çä})
        (‚Ñù‚Çä‚â° 
         (sym (ùêë'.plusMinus _ _)
         ‚àô cong (_-·µ£ (sin x' ^‚Åø 2))
         (+·µ£Comm _ _ ‚àô sin¬≤+cos¬≤=1 x')))))))) 
    ‚àô ¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] cosx‚Çä
  where
   cosx‚Çä : ‚Ñù‚Çä
   cosx‚Çä = (cos x' , 0‚â§x<œÄ/2‚Üí0<cos[x] x' (fst x'‚àà)
     (isTrans‚â§<·µ£ _ _ _ (snd x'‚àà) (snd x‚àà)))


module as-mon x y (x‚àà@(0‚â§x , _) : x ‚àà pred‚â§< 0 1)
             (y‚àà@(_ , y<1) : y ‚àà pred‚â§< 0 1)
             (x‚â§y : x ‚â§·µ£ y) where



 Œî : Œ£ ‚Ñù (on[_,_]IntegralOf_is_ x y (curry ‚àò (Œª x' x'‚àà ‚Üí arcSin' x' _)))
 Œî = PT.rec 
     (Integrated‚ÑôProp‚Ñô _ _ x‚â§y
       (curry ‚àò (Œª x' x'‚àà ‚Üí arcSin' x' _)))
         (Integrate-UContinuous‚Ñô
          x
          y
          x‚â§y
          (Œª x' x'‚àà ‚Üí arcSin' x' _) ‚àò
          IsUContinuous‚Ñô-restr (interval‚Ñô 0 y) (interval‚Ñô x y) _
            Œª _ ‚Üí map-fst Œª x‚àà ‚Üí isTrans‚â§·µ£ _ _ _ 0‚â§x x‚àà)
          (arcSin'-UC y y‚àà)

 z : arcSin x x‚àà +·µ£ fst Œî ‚â° arcSin y y‚àà
 z = Integral-additive 0 x y
              0‚â§x x‚â§y
                (Œª r z z‚ÇÅ ‚Üí arcSin' r (z , isTrans‚â§<·µ£ r y 1 z‚ÇÅ y<1))
                ((arcSin x x‚àà))
               (fst Œî)
               (arcSin y y‚àà)
               (subst (Œª f ‚Üí on[ 0 , x ]IntegralOf
                 f is
                 arcSinDef x x‚àà .fst)
                   (funExt‚ÇÉ Œª x' _ _ ‚Üí
                     cong (arcSin' x') (‚àà-isProp (pred‚â§< 0 1) _ _ _))
                   (snd (arcSinDef x x‚àà)))
               (snd Œî) (snd (arcSinDef y y‚àà))
   
 0‚â§Œî : 0 ‚â§·µ£ fst Œî
 0‚â§Œî = isTrans‚â§·µ£ 0 _ _
          (isTrans‚â§‚â°·µ£ _ _ _ (x‚â§y‚Üí0‚â§y-x _ _ x‚â§y) (sym (¬∑IdL (y +·µ£ -·µ£ x))))
          (Integral-‚â§ x y x‚â§y (Œª _ _ _ ‚Üí 1)
            _
            _
            _
            (Œª x' ‚â§x' x'‚â§ ‚Üí (isTrans‚â°‚â§·µ£ _ _ _ 1‚â°arcSin'0
              (arcSin'-Monotone _ _ _ _ (isTrans‚â§·µ£ _ _ _ 0‚â§x ‚â§x'))))
            (IntegralConst‚Ñô x y x‚â§y 1)
            (snd Œî))


  
 arcSin-Monotone : arcSin x x‚àà ‚â§·µ£ arcSin y y‚àà
 arcSin-Monotone =
     isTrans‚â§‚â°·µ£ _ _ _
       (isTrans‚â°‚â§·µ£ _ _ _
         (sym (+IdR _))
         (‚â§·µ£-o+ _ _ _ 0‚â§Œî))
      z


 arcSin-MonotoneStrict : x <·µ£ y ‚Üí arcSin x x‚àà <·µ£ arcSin y y‚àà
 arcSin-MonotoneStrict x<y =
    isTrans<‚â°·µ£ _ _ _
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR _))
         (<·µ£-o+ _ _ _ 0<Œî))
      z
  where
  0<Œî : 0 <·µ£ fst Œî
  0<Œî = isTrans<‚â§·µ£ 0 _ _
          (isTrans<‚â°·µ£ _ _ _ (x<y‚Üí0<y-x _ _ x<y) (sym (¬∑IdL (y +·µ£ -·µ£ x))))
          (Integral-‚â§ x y x‚â§y (Œª _ _ _ ‚Üí 1)
            _
            _
            _
            (Œª x' ‚â§x' x'‚â§ ‚Üí (isTrans‚â°‚â§·µ£ _ _ _ 1‚â°arcSin'0
              (arcSin'-Monotone _ _ _ _ (isTrans‚â§·µ£ _ _ _ 0‚â§x ‚â§x'))))
            (IntegralConst‚Ñô x y x‚â§y 1)
            (snd Œî))


open as-mon public using (arcSin-Monotone)

arcSin-MonotoneStrict : ‚àÄ x y x‚àà y‚àà ‚Üí x <·µ£ y ‚Üí arcSin x x‚àà <·µ£ arcSin y y‚àà
arcSin-MonotoneStrict x y x‚àà y‚àà x<y =
 as-mon.arcSin-MonotoneStrict x y x‚àà y‚àà (<·µ£Weaken‚â§·µ£ _ _ x<y) x<y


secArcSin : ‚àÄ x sinx‚àà (x‚àà : x ‚àà pred‚â§< 0 œÄ-number/2) ‚Üí arcSin (sin x) sinx‚àà ‚â° x
secArcSin x sinx‚àà x‚àà@(0‚â§x , _) =
 let (x' , x<x' , x'<œÄ/2) = (dense‚Ñù x œÄ-number/2 (snd x‚àà))
     0<x' = (isTrans‚â§<·µ£ _ _ _ (fst x‚àà) x<x')
     z = FTOC‚áê'' 0 x' 0<x'
           _ _ (IsUContinuous‚Ñô-const (interval‚Ñô 0 x') _) ([arcSin‚àòSin]'=1 x'
             (isTrans‚â§<·µ£ _ _ _ (fst x‚àà) x<x' , x'<œÄ/2))
          x ((fst x‚àà) , (<·µ£Weaken‚â§·µ£ _ _ x<x'))
 in (cong (arcSin (sin x)) (‚àà-isProp (pred‚â§< 0 1) _ _ _)
       ‚àô sym (ùêë'.+IdR' _ _
         (cong -·µ£_ (cong (uncurry arcSin)
           (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1)) {v = _ , ‚â§·µ£-refl 0 , dec‚Ñö<·µ£? {0} {1}}
            sin0=0) ‚àô arcSin[0]‚â°0 _)  ‚àô -·µ£-rat 0))) ‚àô‚àô IntegralUniq 0 x 0‚â§x (Œª r _ _ ‚Üí 1) _ _
     z (IntegralConst‚Ñô 0 x 0‚â§x 1)
     ‚àô‚àô (¬∑IdL _ ‚àô ùêë'.+IdR' _ _ (-·µ£-rat 0))
 
arcSin‚àà[0,1‚ü© : ‚àÄ x x‚àà ‚Üí arcSin x x‚àà ‚àà pred‚â§< 0 œÄ-number/2
arcSin‚àà[0,1‚ü© x x‚àà =

  PT.rec (‚àà-isProp (pred‚â§< 0 œÄ-number/2) _)
   (Œª (q , x<q , q<1) ‚Üí
     let z = ‚â§·µ£-·µ£ _ _ (‚â§-o+-cancel _ _ _ (subst2 _‚â§·µ£_
             (cong abs·µ£ (cong‚ÇÇ _-·µ£_ sin[œÄ/2]‚â°1 refl)
               ‚àô abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (sin‚â§1 _)))
             (cong abs·µ£ Lùêë.lem--079
               ‚àô abs·µ£Pos _ (x<y‚Üí0<y-x _ _  q<1))
             (sinDiffBound œÄ-number/2
            (œÄ-number/2 -·µ£ (1 -·µ£ rat q)))))
         zz = (isTrans<‚â°·µ£ _ _ _
                   (<·µ£-o+ _ _ _ (-·µ£<·µ£ _ _ ((x<y‚Üí0<y-x _ _  q<1))))
                   (ùêë'.+IdR' _ _ (-·µ£-rat 0)))
         zzz = (x‚â§y‚Üí0‚â§y-x _ _
                 (isTrans‚â§·µ£ _ _ _
                    
                    (isTrans‚â§‚â°·µ£ _ _ _
                      (‚â§·µ£-o+ _ _ _
                       (-·µ£‚â§·µ£ _ _ (isTrans‚â§·µ£ _ _ _
                        (fst x‚àà) (<·µ£Weaken‚â§·µ£ _ _ x<q))))
                      (ùêë'.+IdR' _ _ (-·µ£-rat 0)))
                    (<·µ£Weaken‚â§·µ£ _ _ 1<œÄ-number/2)))
     in isTrans‚â°‚â§·µ£ _ _ _
          (sym (arcSin[0]‚â°0 _))
          (arcSin-Monotone 0 x (‚â§·µ£-refl 0 , dec‚Ñö<·µ£? {0} {1})
            x‚àà (fst x‚àà)) ,
         isTrans<·µ£ _ _ _
           (arcSin-MonotoneStrict x (sin (œÄ-number/2 -·µ£ (1 -·µ£ rat q)))
             x‚àà (isTrans‚â°‚â§·µ£ _ _ _
                  (sym sin0=0)
                  (sin-firstQuarter-Monotone 0
                    _ (‚â§·µ£-refl _ , (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2))
                    (zzz , <·µ£Weaken‚â§·µ£ _ _ zz)
                 zzz) ,
              isTrans<‚â°·µ£ _ _ _
               (sin-firstQuarter-strictMonotone _ _
                (zzz
                  , (<·µ£Weaken‚â§·µ£ _ _ zz))
                (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2 , ‚â§·µ£-refl _) zz)
                sin[œÄ/2]‚â°1)
            (isTrans<‚â§·µ£ _ _ _ x<q
               z)) (isTrans‚â°<·µ£ _ _ _
                 (secArcSin _ _
                  (zzz , zz)) zz))
   (dense‚Ñöin‚Ñù _ _ (snd x‚àà))


retArcSin : ‚àÄ x x‚àà ‚Üí sin (arcSin x x‚àà) ‚â° x
retArcSin x x‚àà =
  let y = sin (arcSin x x‚àà)
      y‚àà = x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© (arcSin x x‚àà)
        (arcSin‚àà[0,1‚ü© x x‚àà)
  in arcSinInj _ _ y‚àà x‚àà
      (secArcSin _ y‚àà (arcSin‚àà[0,1‚ü© x x‚àà))



-‚Ñù‚Çä<‚Ñù‚Çä : (x y : ‚Ñù‚Çä) ‚Üí -·µ£ (fst x) <·µ£ fst y
-‚Ñù‚Çä<‚Ñù‚Çä (x , 0<x) (y , 0<y) = isTrans<·µ£ _ _ _
  (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ 0<x) (-·µ£-rat 0)) 0<y

interval‚Ñô‚äÜointerval‚Ñô : ‚àÄ a' b' a b ‚Üí a <·µ£ a' ‚Üí b' <·µ£ b
  ‚Üí interval‚Ñô a' b' ‚äÜ ointerval‚Ñô a b
interval‚Ñô‚äÜointerval‚Ñô a' b' a b a<a' b'<b x (a'‚â§x , x‚â§b') =
  isTrans<‚â§·µ£ _ _ _ a<a' a'‚â§x ,
   isTrans‚â§<·µ£ _ _ _ x‚â§b' b'<b 

sym-interval‚Ñô‚äÜointerval‚Ñô : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí
  interval‚Ñô (-·µ£ a) a ‚äÜ ointerval‚Ñô (-·µ£ b) b
sym-interval‚Ñô‚äÜointerval‚Ñô a b a<b =
 interval‚Ñô‚äÜointerval‚Ñô _ _ _ _ (-·µ£<·µ£ _ _ a<b) a<b


IsContinuousWithPred-·µ£ : ‚àÄ P f ‚Üí IsContinuousWithPred P f ‚Üí
  IsContinuousWithPred P Œª x x‚àà ‚Üí -·µ£ (f x x‚àà)
IsContinuousWithPred-·µ£ P f fc =
  IsContinuousWP‚àò' P _ _ IsContinuous-·µ£ fc


Integral-additive* : ‚àÄ (P : ‚Ñô ‚Ñù ) a b c ‚Üí a ‚â§·µ£ b ‚Üí  b ‚â§·µ£ c
  ‚Üí ‚àÄ (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù)
  ‚Üí {ab‚äÇP : interval‚Ñô a b ‚äÜ P}
  ‚Üí {bc‚äÇP : interval‚Ñô b c ‚äÜ P}
  ‚Üí {ac‚äÇP : interval‚Ñô a c ‚äÜ P}
  ‚Üí ‚àÄ {s s' s+s'} ‚Üí
  on[ a , b ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f x (ab‚äÇP x (‚â§x , x‚â§))) is s ‚Üí
  on[ b , c ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f x (bc‚äÇP x (‚â§x , x‚â§))) is s' ‚Üí
  on[ a , c ]IntegralOf (Œª x ‚â§x x‚â§ ‚Üí f x (ac‚äÇP x (‚â§x , x‚â§))) is s+s' ‚Üí
  s +·µ£ s' ‚â° s+s'
Integral-additive* P a b c a‚â§b b‚â§c f {s = s} {s'} s‚à´ s'‚à´ s+s'‚à´ =
 Integral-additive a b c a‚â§b b‚â§c _ _ _ _
   (subst (on[ a , b ]IntegralOf_is s)
    (funExt‚ÇÉ Œª x _ _ ‚Üí cong (f x) (snd (P _) _ _)) s‚à´)
   (subst (on[ b , c ]IntegralOf_is s')
    (funExt‚ÇÉ Œª x _ _ ‚Üí cong (f x) (snd (P _) _ _)) s'‚à´)
   s+s'‚à´

IntegralNonNeg : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f s ‚Üí  on[ a , b ]IntegralOf f is s ‚Üí
               (‚àÄ x ‚â§x x‚â§ ‚Üí 0 ‚â§·µ£ f x ‚â§x x‚â§ ) ‚Üí 0 ‚â§·µ£ s 
IntegralNonNeg a b a‚â§b f _ s‚à´ 0‚â§f =
 isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.0LeftAnnihilates _))
  (Integral-‚â§ a b a‚â§b (Œª _ _ _ ‚Üí 0) _ _ _
  0‚â§f (IntegralConst‚Ñô a b a‚â§b  0) s‚à´)

arcSinDiff-Help : ‚àÄ U ‚Üí 0 ‚â§·µ£ U ‚Üí U <·µ£ 1 ‚Üí Œ£[ L ‚àà ‚Ñù‚Çä ]
 (‚àÄ u u' u‚àà u'‚àà ‚Üí  u ‚â§·µ£ U ‚Üí u' ‚â§·µ£ U
               ‚Üí  abs·µ£ (arcSin u u‚àà -·µ£ arcSin u' u'‚àà) ‚â§·µ£
                      
                  abs·µ£ (u -·µ£ u') ¬∑·µ£ fst L )          
arcSinDiff-Help U 0‚â§U U<1 =
   2 ‚Çä¬∑·µ£ L , w
    
 where

  U‚àà = (0‚â§U , U<1)

  L : ‚Ñù‚Çä
  L = arcSin'‚Çä U U‚àà 

  w : _
  w u u' u‚àà@(0‚â§u , u<1) u'‚àà@(0‚â§u' , u'<1) u‚â§U u'‚â§U =
   isTrans‚â§·µ£ _ _ _
   (isTrans‚â°‚â§·µ£ _ _ _
    (cong abs·µ£ (cong‚ÇÇ _-·µ£_ h h' ‚àô Lùêë.lem--081))
      (isTrans‚â§‚â°·µ£ _ _ _
        (abs·µ£-triangle _ _)
        (cong‚ÇÇ _+·µ£_ (abs·µ£NonNeg _
           (IntegralNonNeg _ _ (min‚â§·µ£ u u') _ _ (snd u‚à´ )
            Œª x ‚â§x x< ‚Üí
              <·µ£Weaken‚â§·µ£ _ _ (snd (arcSin'‚Çä _ (_ , isTrans‚â§<·µ£ _ _ _ x< _)))))
         (sym (-abs·µ£ _)  ‚àô abs·µ£NonNeg _
           ((IntegralNonNeg _ _ (min‚â§·µ£' u u') _ _ (snd u'‚à´)
             Œª x ‚â§x x< ‚Üí
              <·µ£Weaken‚â§·µ£ _ _ (snd (arcSin'‚Çä _ (_ , isTrans‚â§<·µ£ _ _ _ x< _))))))))) 
    (isTrans‚â§·µ£ _ _ _
      (‚â§·µ£Monotone+·µ£ _ _ _ _
        (Integral-‚â§ _ _ (min‚â§·µ£ u u') _ _ _ _
          (Œª x ‚â§x x‚â§ ‚Üí
            arcSin'-Monotone _ _ _ U‚àà
              (isTrans‚â§·µ£ _ _ _ x‚â§ (u‚â§U)) )
          (snd u‚à´) (IntegralConst‚Ñô _ _ (min‚â§·µ£ u u') (fst L)))
        (Integral-‚â§ _ _ (min‚â§·µ£' u u') _ _ _ _
          (Œª x ‚â§x x‚â§ ‚Üí 
            arcSin'-Monotone _ _ _ U‚àà
               (isTrans‚â§·µ£ _ _ _ x‚â§ u'‚â§U))
          (snd u'‚à´) (IntegralConst‚Ñô _ _ (min‚â§·µ£' u u') (fst L))))
      (isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â°‚â§·µ£ _ _ _
        (sym (¬∑DistL+ _ _ _) ‚àô ¬∑·µ£Comm _ _ )
         
        (‚â§·µ£-¬∑·µ£o _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (snd L))
         (isTrans‚â§‚â°·µ£ _ _ _
           (‚â§·µ£Monotone+·µ£ _ _ _ _
             (‚â§·µ£-+o _ _ _ (‚â§max·µ£ u u'))
             (‚â§·µ£-+o _ _ _ (isTrans‚â§‚â°·µ£ _ _ _ (‚â§max·µ£ u' u) (max·µ£Comm u' u))))
           (x+x‚â°2x _ ‚àô (¬∑·µ£Comm _ _ ))))
         ) (sym (¬∑·µ£Assoc _ 2 (fst L)) ‚àô cong‚ÇÇ _¬∑·µ£_ (sym (abs·µ£NonNeg _
         (fst (x‚â§y‚âÉ0‚â§y-x _ _)
         (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ u u' ) (‚â§max·µ£ u u'))))
         ‚àô abs·µ£-min-max u u') refl) ) )
    where


       u‚äìu' = min·µ£‚ÇÄ‚Çä (_ ,  0‚â§u) (_ , 0‚â§u')
       u‚äìu'‚àà = snd u‚äìu' , isTrans‚â§<·µ£ _ _ _ (min‚â§·µ£ _ _) u<1

       u‚à´ = (PT.rec
                  (Integrated‚ÑôProp‚Ñô _ _ (min‚â§·µ£ u u') _)
                   ((Integrate-UContinuous‚Ñô
                   (fst u‚äìu') 
                   u
                   (min‚â§·µ£ u u')
                   (Œª x' x'‚àà ‚Üí arcSin' _ _))
                   ‚àò IsUContinuous‚Ñô-restr (interval‚Ñô 0 u)
                      (interval‚Ñô _ _) _
                      Œª x ‚Üí map-fst (isTrans‚â§·µ£ _ _ _ (snd u‚äìu') ))
                   ((arcSin'-UC u u‚àà)))

       u'‚à´ = (PT.rec
                  (Integrated‚ÑôProp‚Ñô _ _ (min‚â§·µ£' u u') _)
                   ((Integrate-UContinuous‚Ñô
                   (fst u‚äìu') 
                   u'
                   (min‚â§·µ£' u u')
                   (Œª x' x'‚àà ‚Üí arcSin' _ _))
                   ‚àò IsUContinuous‚Ñô-restr (interval‚Ñô 0 u')
                      (interval‚Ñô _ _) _
                      Œª x ‚Üí map-fst (isTrans‚â§·µ£ _ _ _ (snd u‚äìu') ))
                   ((arcSin'-UC u' u'‚àà)))

       h : _
       h = sym (Integral-additive* (pred‚â§< 0 1)
               0 (fst u‚äìu') u (snd u‚äìu') (min‚â§·µ£ u u') arcSin'
               (snd (arcSinDef _ u‚äìu'‚àà))
                (snd u‚à´)
                (snd (arcSinDef _ _)))


       h' : _
       h' = sym (Integral-additive* (pred‚â§< 0 1)
               0 (fst u‚äìu') u' (snd u‚äìu') (min‚â§·µ£' u u') arcSin'
               (snd (arcSinDef _ u‚äìu'‚àà))
                (snd u'‚à´)
                (snd (arcSinDef _ _)))
           
IsContinuousWithPredArcSin : IsContinuousWithPred (pred‚â§< 0 1) arcSin
IsContinuousWithPredArcSin u Œµ u‚àà@(0‚â§u , u<1) = do
  let (b , u<b , b<1) = dense‚Ñù _ _ u<1
  (Œ∑ , 0<Œ∑ , Œ∑<b-u) ‚Üê dense‚Ñöin‚Ñù _ _ (x<y‚Üí0<y-x _ _ u<b)
  let L , ‚â§L = arcSinDiff-Help b
            (isTrans‚â§·µ£ _ _ _ 0‚â§u (<·µ£Weaken‚â§·µ£ _ _ u<b)) b<1
  (œÖ , L<œÖ) ‚Üê ‚àÉ‚Ñö‚ÇäLargerThan‚Ñù‚Çä L
  let Œ∑‚Çä = Œ∑ , ‚Ñö.<‚Üí0< Œ∑ (<·µ£‚Üí<‚Ñö 0 Œ∑ 0<Œ∑)
      Œ¥ = ‚Ñö.min‚Çä Œ∑‚Çä (inv‚Ñö‚Çä œÖ  ‚Ñö‚Çä¬∑ Œµ)   
  ‚à£ Œ¥ , (Œª v v‚àà u‚àºv ‚Üí
      invEq (‚àº‚âÉabs<Œµ _ _ _)
       let z = fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv
           zz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                (isTrans‚â°<·µ£ _ _ _ (minusComm-abs·µ£ _ _) (isTrans<‚â§·µ£ _ _ _ z
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ Œ∑ _))))
       in isTrans‚â§<·µ£ _ _ _  (‚â§L u v u‚àà v‚àà (<·µ£Weaken‚â§·µ£ _ _ u<b)
                       (<·µ£Weaken‚â§·µ£ _ _ (isTrans<·µ£ _ _ _
                         (a-b<c‚áía<c+b _ _ _ zz)
                         (a<b-c‚áía+c<b _ _ _ Œ∑<b-u))))
           (isTrans<‚â°·µ£ _ _ _
             (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
               (0‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ (snd L))
               (isTrans<‚â§·µ£ _ _ _
                 z
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' Œ∑ _))) L<œÖ)
                
                  ((¬∑·µ£Comm _ _ ‚àô sym (rat¬∑·µ£rat _ _) ‚àô 
                 cong rat (‚Ñö.y¬∑[x/y] œÖ _))))) ‚à£‚ÇÅ

ointerval‚Üíabs< : ‚àÄ x y ‚Üí x ‚àà ointerval‚Ñô (-·µ£ y) y ‚Üí abs·µ£ x <·µ£ y
ointerval‚Üíabs< x y (-y<x , x<y) =
   isTrans‚â°<·µ£ _ _ _  (abs-max _)
    (max<-lem x (-·µ£ x) y x<y (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ -y<x) (-·µ£Invol _)))

abs<‚Üíointerval : ‚àÄ x y ‚Üí abs·µ£ x <·µ£ y ‚Üí x ‚àà ointerval‚Ñô (-·µ£ y) y 
abs<‚Üíointerval x y ‚à£x‚à£<y =
     isTrans<‚â°·µ£ _ _ _
       ( -·µ£<·µ£ _ _ (isTrans‚â§<·µ£ _ _ _
        (isTrans‚â§‚â°·µ£ _ _ _ (‚â§abs·µ£ (-·µ£ x)) (sym (-abs·µ£ x)))
       ‚à£x‚à£<y)) (-·µ£Invol x)
   , isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ x) ‚à£x‚à£<y

abs‚â§‚Üíinterval : ‚àÄ x y ‚Üí abs·µ£ x ‚â§·µ£ y ‚Üí x ‚àà interval‚Ñô (-·µ£ y) y 
abs‚â§‚Üíinterval x y ‚à£x‚à£‚â§y =
     isTrans‚â§‚â°·µ£ _ _ _
       ( -·µ£‚â§·µ£ _ _ (isTrans‚â§·µ£ _ _ _
        (isTrans‚â§‚â°·µ£ _ _ _ (‚â§abs·µ£ (-·µ£ x)) (sym (-abs·µ£ x)))
       ‚à£x‚à£‚â§y)) (-·µ£Invol x)
   , isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ x) ‚à£x‚à£‚â§y

opaque
 arcSin‚ü®‚ü© : ‚àÄ x ‚Üí (x‚àà : x ‚àà ointerval‚Ñô -1 1) ‚Üí ‚Ñù
 arcSin‚ü®‚ü© x x‚àà =
   -·µ£ (arcSin (clamp·µ£ 0 1 (-·µ£ x))
    ((‚â§clamp·µ£ 0 1 (-·µ£ x) dec‚Ñö‚â§·µ£?) ,
     isTrans‚â§<·µ£ _ (max·µ£ 0 (-·µ£ x)) _
         (min‚â§·µ£ (max·µ£ 0 (-·µ£ x)) 1 )
         (max<-lem 0 (-·µ£ x) 1 (dec‚Ñö<·µ£? {0} {1})
           ((isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (fst x‚àà))
            (-·µ£-rat -1))))))
    +·µ£ arcSin (clamp·µ£ 0 1 x)
     ((‚â§clamp·µ£ 0 1 x dec‚Ñö‚â§·µ£?)
      , isTrans‚â§<·µ£ _ (max·µ£ 0 x) _
         (min‚â§·µ£ (max·µ£ 0 x) 1 )
         (max<-lem 0 x 1 (dec‚Ñö<·µ£? {0} {1}) (snd x‚àà)) )

 arcSin‚ü®‚ü©‚àà : ‚àÄ x x‚àà ‚Üí arcSin‚ü®‚ü© x x‚àà ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2
 arcSin‚ü®‚ü©‚àà x x‚àà@(‚â§x , x‚â§) =
     isTrans<‚â§·µ£ _ _ _
       (-·µ£<·µ£ _ _ ((snd (arcSin‚àà[0,1‚ü© (clamp·µ£ 0 1 (-·µ£ x))
           clamp-negx‚àà))))
       (isTrans‚â°‚â§·µ£ _ _ _
        (sym (+IdR _))
        (‚â§·µ£-o+ 0 _ _ ((isTrans‚â°‚â§·µ£ _ _ _
           (sym (arcSin[0]‚â°0 _))
           (arcSin-Monotone 0 (clamp·µ£ 0 1 x)
             (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?)
              clamp-x‚àà ((‚â§clamp·µ£ _ _ x dec‚Ñö‚â§·µ£?)))))))
   , isTrans‚â§<·µ£ _ _ _
      (isTrans‚â§‚â°·µ£ _ _ _
       (‚â§·µ£-+o _ _ _ (-·µ£‚â§·µ£ 0 _
         (isTrans‚â°‚â§·µ£ _ _ _
           (sym (arcSin[0]‚â°0 _))
           (arcSin-Monotone 0 (clamp·µ£ 0 1 (-·µ£ x))
             (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?)
              clamp-negx‚àà ((‚â§clamp·µ£ _ _ (-·µ£ x) dec‚Ñö‚â§·µ£?))))))
       ((ùêë'.+IdL' _ _ (-·µ£-rat 0))))
      (snd (arcSin‚àà[0,1‚ü© (clamp·µ£ 0 1 x)
       clamp-x‚àà))

    where
    clamp-x‚àà : (clamp·µ£ 0 1 x) ‚àà pred‚â§< 0 1
    clamp-x‚àà = ((‚â§clamp·µ£ 0 1 x dec‚Ñö‚â§·µ£?)
       , isTrans‚â§<·µ£ _ (max·µ£ 0 x) _
          (min‚â§·µ£ (max·µ£ 0 x) 1 )
          (max<-lem 0 x 1 (dec‚Ñö<·µ£? {0} {1}) (snd x‚àà)))

    clamp-negx‚àà : (clamp·µ£ 0 1 (-·µ£ x)) ‚àà pred‚â§< 0 1
    clamp-negx‚àà = ((‚â§clamp·µ£ 0 1 (-·µ£ x) dec‚Ñö‚â§·µ£?) ,
     isTrans‚â§<·µ£ _ (max·µ£ 0 (-·µ£ x)) _
         (min‚â§·µ£ (max·µ£ 0 (-·µ£ x)) 1 )
         (max<-lem 0 (-·µ£ x) 1 (dec‚Ñö<·µ£? {0} {1})
           ((isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (fst x‚àà))
            (-·µ£-rat -1)))))

 -- IsContinuousWPArcSin‚ü®‚ü© : IsContinuousWithPred (ointerval‚Ñô -1 1) arcSin‚ü®‚ü© 
 -- IsContinuousWPArcSin‚ü®‚ü© = {!!}

 arcSin‚ü®‚ü©[0]‚â°0 : arcSin‚ü®‚ü© 0 (dec‚Ñö<·µ£? { -1} {0} , dec‚Ñö<·µ£? {0} {1}) ‚â° 0
 arcSin‚ü®‚ü©[0]‚â°0 =
    cong‚ÇÇ _+·µ£_
      (cong -·µ£_ (cong (uncurry arcSin)
       (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
         {u = clamp·µ£ 0 1 (-·µ£ 0) , _}
         {rat [ pos 0 / 1 ] , ‚â§·µ£-refl 0 , dec‚Ñö<·µ£?}
         (cong (clamp·µ£ 0 1) (-·µ£-rat 0)))
        ‚àô arcSin[0]‚â°0 (‚â§·µ£-refl 0 , (dec‚Ñö<·µ£? {0} {1})))
        ‚àô -·µ£-rat 0)
      (cong (uncurry arcSin)
       (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1)) refl) ‚àô
   arcSin[0]‚â°0 (‚â§·µ£-refl 0 , (dec‚Ñö<·µ£? {0} {1})))
   ‚àô +·µ£-rat 0 0

 arcSin‚ü®‚ü©‚àòsin-‚Ñö : ‚àÄ (Q : ‚Ñö‚Çä) ‚Üí (Q<œÄ/2 : rat (fst Q) <·µ£ œÄ-number/2)
  ‚Üí ‚àÄ q ‚Üí (0 ‚Ñö.‚â§ q) ‚äé (q ‚Ñö.‚â§ 0)
  ‚Üí  (q‚àà : rat q ‚àà interval‚Ñô (-·µ£ (rat (fst Q))) (rat (fst Q)))
  ‚Üí ‚àÄ sinq‚àà
   ‚Üí arcSin‚ü®‚ü© (sin (rat q)) sinq‚àà
  
   ‚â° (rat q) 
 arcSin‚ü®‚ü©‚àòsin-‚Ñö Q Q<œÄ/2 q (inl 0‚â§q') (_ , q<Q) sinq‚àà@(_ , sinq<1) =
  let 0‚â§q : 0 ‚â§·µ£ (rat q) 
      0‚â§q = ‚â§‚Ñö‚Üí‚â§·µ£ _ _ 0‚â§q'
      q<œÄ/2 : (rat q) <·µ£ œÄ-number/2
      q<œÄ/2 = isTrans‚â§<·µ£ _ _ _ q<Q Q<œÄ/2
      0‚â§sinq : 0 ‚â§·µ£ sin (rat q)
      0‚â§sinq = fst $ x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© (rat q)
          (0‚â§q , q<œÄ/2)
      
  in ùêë'.+IdL' _ _ (
       cong -·µ£_
         (cong (uncurry arcSin)
            (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
             (x‚â§‚Üíclamp·µ£‚â° 0 1 (-·µ£ (sin (rat q)))
              dec‚Ñö‚â§·µ£?
              (isTrans‚â§‚â°·µ£ _ _ _ (-·µ£‚â§·µ£ _ _  0‚â§sinq)
               (-·µ£-rat 0)  )))
           ‚àô arcSin[0]‚â°0 (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?)) 
       ‚àô -·µ£-rat 0)
     ‚àô cong (uncurry arcSin)
         ((Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
          (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _ ( 0‚â§sinq , sin‚â§1 _)))))
          ‚àô secArcSin _ (0‚â§sinq , sinq<1) (0‚â§q , q<œÄ/2)
 arcSin‚ü®‚ü©‚àòsin-‚Ñö Q Q<œÄ/2 q (inr q'‚â§0) (-Q<-q , _) sinq‚àà@(-1<sinq , _) =
  let 0‚â§-q : 0 ‚â§·µ£ -·µ£ rat q
      0‚â§-q = isTrans‚â°‚â§·µ£ _ _ _ (sym (-·µ£-rat 0))
              (-·µ£‚â§·µ£ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ q'‚â§0))
      
      sin-q<1 : sin (-·µ£ rat q) <·µ£ 1
      sin-q<1 = subst2 _<·µ£_ (sin-odd (rat q)) (-·µ£-rat -1)
          (-·µ£<·µ£ _ _ -1<sinq)

      -q<œÄ/2 : -·µ£ rat q <·µ£ œÄ-number/2
      -q<œÄ/2 = isTrans‚â§<·µ£ _ _ _ (-·µ£‚â§·µ£ _ _ -Q<-q)
                (isTrans‚â°<·µ£ _ _ _ (-·µ£Invol _) Q<œÄ/2)

      sinq‚â§0 : sin (rat q) ‚â§·µ£ 0
      sinq‚â§0 = ‚â§·µ£-·µ£ _ _
        (subst2 _‚â§·µ£_ (sym (-·µ£-rat 0)) (sym (sin-odd (rat q)))
         (fst (x‚àà[0,œÄ/2‚ü©‚Üísin[x]‚àà[0,1‚ü© (-·µ£ (rat q))
          (0‚â§-q , -q<œÄ/2))))
         
  in ùêë'.+IdR' _ _
      (cong (uncurry arcSin)
            (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
             (x‚â§‚Üíclamp·µ£‚â° 0 1 (sin (rat q))
              dec‚Ñö‚â§·µ£? sinq‚â§0))
           ‚àô arcSin[0]‚â°0 (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?))
     ‚àô cong -·µ£_
       (cong (uncurry arcSin)
         (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1)) {clamp·µ£ 0 1 (-·µ£ sin (rat q)) , _}
           (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° 0 1 _
             (isTrans‚â°‚â§·µ£ _ _ _ (sym (-·µ£-rat 0)) (-·µ£‚â§·µ£ _ _ sinq‚â§0) ,
              (isTrans‚â§·µ£ _ _ _ (isTrans‚â§‚â°·µ£ _ _ _
               (‚â§abs·µ£ _) (sym (-abs·µ£ _))) (‚à£sin‚à£‚â§1 (rat q))))) ‚àô sin-odd _))
         ‚àô secArcSin _ (subst2 _‚â§·µ£_
           (-·µ£-rat 0) (sin-odd _) (-·µ£‚â§·µ£ _ _ sinq‚â§0) , sin-q<1)
           (0‚â§-q , -q<œÄ/2))
     ‚àô -·µ£Invol (rat q)



 ‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© : ‚àÄ x ‚Üí x ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2
       ‚Üí sin x ‚àà ointerval‚Ñô -1 1
 ‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© x x‚àà@(<x , x<) =
  isTrans‚â°<·µ£ _ _ _ ((sym (-·µ£-rat 1) ‚àô cong -·µ£_ (sym (sin[œÄ/2]‚â°1)))
   ‚àô sin-odd œÄ-number/2)
   (sin-strictMonotone (-·µ£ œÄ-number/2) x
     (‚â§·µ£-refl _ , <·µ£Weaken‚â§·µ£ _ _ (-‚Ñù‚Çä<‚Ñù‚Çä œÄ-number/2‚Çä œÄ-number/2‚Çä)) (ointerval‚Ñô‚äÜinterval‚Ñô _ _ x x‚àà) <x) ,
   isTrans<‚â°·µ£ _ _ _
     (sin-strictMonotone x (œÄ-number/2)
      (ointerval‚Ñô‚äÜinterval‚Ñô _ _ x x‚àà)
       (<·µ£Weaken‚â§·µ£ _ _ ((-‚Ñù‚Çä<‚Ñù‚Çä œÄ-number/2‚Çä œÄ-number/2‚Çä)) , ‚â§·µ£-refl _) x<)
     sin[œÄ/2]‚â°1

 sin‚àòarcSin‚ü®‚ü©‚Ñö :
      ‚àÄ q q‚àà ‚Üí (0 ‚Ñö.‚â§ q) ‚äé (q ‚Ñö.‚â§ 0)
    ‚Üí sin (arcSin‚ü®‚ü© (rat q) q‚àà) ‚â° (rat q)
 sin‚àòarcSin‚ü®‚ü©‚Ñö q (-1<q , q<1) (inl 0‚â§q') =
   let 0‚â§q = ‚â§‚Ñö‚Üí‚â§·µ£ 0 q 0‚â§q'
       
   in cong sin (ùêë'.+IdL' _ _
        (cong -·µ£_
          (cong (uncurry arcSin)
            (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
             (x‚â§‚Üíclamp·µ£‚â° 0 1 (-·µ£ rat q)
              dec‚Ñö‚â§·µ£?
              (isTrans‚â§‚â°·µ£ _ _ _ (-·µ£‚â§·µ£ _ _  0‚â§q)
               (-·µ£-rat 0)  )))
           ‚àô arcSin[0]‚â°0 (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?))  ‚àô
          -·µ£-rat 0)
          ‚àô cong (uncurry arcSin)
              (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
                (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° 0 1 _
                 (0‚â§q , <·µ£Weaken‚â§·µ£ _ _ q<1)))))
         ‚àô retArcSin _ (0‚â§q , q<1)
 sin‚àòarcSin‚ü®‚ü©‚Ñö q (-1<q , _) (inr q‚â§0') =
   let q‚â§0 = ‚â§‚Ñö‚Üí‚â§·µ£ q 0 q‚â§0'
       0‚â§-q : 0 ‚â§·µ£ -·µ£ rat q
       0‚â§-q = isTrans‚â°‚â§·µ£ _ _ _ (sym (-·µ£-rat 0)) (-·µ£‚â§·µ£ _ _ q‚â§0)
       -q<1 : -·µ£ rat q <·µ£ 1
       -q<1 = isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ -1<q)
                (-·µ£-rat -1) 
   in cong sin (ùêë'.+IdR' _ _ (cong (uncurry arcSin)
            (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
             (x‚â§‚Üíclamp·µ£‚â° 0 1 (rat q)
              dec‚Ñö‚â§·µ£? q‚â§0))
              ‚àô arcSin[0]‚â°0 (‚â§·µ£-refl 0 , dec‚Ñö<·µ£?))
      ‚àô cong -·µ£_ (cong (uncurry arcSin)
         (Œ£‚â°Prop (‚àà-isProp (pred‚â§< 0 1))
           (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° 0 1 _ (0‚â§-q , (<·µ£Weaken‚â§·µ£ _ _ -q<1)))))))
     ‚àô sym (sin-odd _)
     ‚àô cong -·µ£_ (retArcSin _ (0‚â§-q , -q<1))
     ‚àô -·µ£Invol _



 
 opaque
  unfolding _+·µ£_
  IsContinuousWPArcSin‚ü®‚ü© : IsContinuousWithPred (ointerval‚Ñô -1 1) arcSin‚ü®‚ü©
  IsContinuousWPArcSin‚ü®‚ü© =
    contDiagNE‚ÇÇWP sumR (ointerval‚Ñô -1 1)
             (Œª x x‚àà ‚Üí -·µ£ (arcSin (clamp·µ£ 0 1 (-·µ£ x))
             ((‚â§clamp·µ£ 0 1 (-·µ£ x) dec‚Ñö‚â§·µ£?) ,
              isTrans‚â§<·µ£ _ (max·µ£ 0 (-·µ£ x)) _
                  (min‚â§·µ£ (max·µ£ 0 (-·µ£ x)) 1 )
                  (max<-lem 0 (-·µ£ x) 1 (dec‚Ñö<·µ£? {0} {1})
                    ((isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (fst x‚àà))
                     (-·µ£-rat -1)))))))
           (Œª x x‚àà ‚Üí
             arcSin (clamp·µ£ 0 1 x)
              ((‚â§clamp·µ£ 0 1 x dec‚Ñö‚â§·µ£?)
               , isTrans‚â§<·µ£ _ (max·µ£ 0 x) _
                  (min‚â§·µ£ (max·µ£ 0 x) 1 )
                  (max<-lem 0 x 1 (dec‚Ñö<·µ£? {0} {1}) (snd x‚àà))))
            (IsContinuousWithPred-·µ£ (ointerval‚Ñô -1 1)
              _
              (IsContinuousWP‚àò (pred‚â§< 0 1) (ointerval‚Ñô -1 1)
             _
             _ _
             IsContinuousWithPredArcSin
             (IsContinuousWP‚àò (ointerval‚Ñô -1 1) (ointerval‚Ñô -1 1)
              _
              _
              (Œª x (<x , x<) ‚Üí (isTrans‚â°<·µ£ _ _ _ (sym (-·µ£-rat 1))
                (-·µ£<·µ£ _ _ x<)) ,
               (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ <x) (-·µ£-rat -1)))
              (AsContinuousWithPred (ointerval‚Ñô -1 1)
                _ (IsContinuousClamp 0 1))
              ((AsContinuousWithPred (ointerval‚Ñô -1 1)
                _ IsContinuous-·µ£)))))
            (IsContinuousWP‚àò (pred‚â§< 0 1) (ointerval‚Ñô -1 1)
             arcSin
             _ _
             IsContinuousWithPredArcSin
             (((AsContinuousWithPred (ointerval‚Ñô -1 1)
              (clamp·µ£ 0 1 ) (IsContinuousClamp 0 1)))))

  
arcSin‚ü®‚ü©‚àòsin : ‚àÄ x sinx‚àà
 ‚Üí x ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2
 ‚Üí arcSin‚ü®‚ü© (sin x) sinx‚àà ‚â° x
arcSin‚ü®‚ü©‚àòsin x sinx‚àà@(<negx , x<) x‚àà =
  PT.rec (isSet‚Ñù _ _)
    (Œª (Q , ‚à£x‚à£<Q , Q<œÄ/2) ‚Üí
      let Q‚Çä = (Q , (‚Ñö.<‚Üí0< Q (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _ (0‚â§abs·µ£ _) ‚à£x‚à£<Q))))
          x‚ààQ : x ‚àà interval‚Ñô (rat (‚Ñö.- Q)) (rat Q)
          x‚ààQ = isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â°‚â§·µ£ _ _ _ (sym (-·µ£-rat Q))
                 (-·µ£‚â§·µ£ _ _
                  (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _)
                    (isTrans‚â°‚â§·µ£ _ _ _ (sym (-abs·µ£ _)) (<·µ£Weaken‚â§·µ£ _ _ ‚à£x‚à£<Q) ))))
                    (-·µ£Invol _ ) ,
                 isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _)
                 (<·µ£Weaken‚â§·µ£ _ _ ‚à£x‚à£<Q )

          zzz = cong (uncurry arcSin‚ü®‚ü©)
                (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô (-1) 1))
                  {u = _ , (<negx , x<)}
                  {v = _ , _}
                      (cong sin
                       ((‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat ((‚Ñö.- Q))) (rat Q)
                 x x‚ààQ))))
          
      in zzz ‚àô‚àô
         ‚â°Continuous
           (Œª x ‚Üí arcSin‚ü®‚ü© (sin (clamp·µ£ (rat (‚Ñö.- Q)) (rat Q) x))
                     (‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© _ (sym-interval‚Ñô‚äÜointerval‚Ñô _ _ Q<œÄ/2
                      _ (
                        subst (Œª -Q ‚Üí clamp·µ£ (rat (‚Ñö.- Q)) (rat Q) x ‚àà
                          interval‚Ñô -Q (rat Q))
                          (sym (-·µ£-rat Q))
                           ((clamp·µ£‚àà‚Ñöinterval‚Ñô (rat (‚Ñö.- Q)) (rat Q)
                             (isTrans‚â°‚â§·µ£ _ _ _
                               (sym (-·µ£-rat Q))
                               (<·µ£Weaken‚â§·µ£ _ _ (-‚Ñù‚Çä<‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä Q‚Çä) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Q‚Çä)))) x))))))
           (Œª x ‚Üí clamp·µ£ (rat ((‚Ñö.- Q))) (rat Q) x)
           (IsContinuousWithPred‚àòIsContinuous
              (ointerval‚Ñô -1 1)
               arcSin‚ü®‚ü© _ _
               IsContinuousWPArcSin‚ü®‚ü©
                (IsContinuous‚àò _ _
                  (isContinuousSin)
                  (IsContinuousClamp (rat ((‚Ñö.- Q))) (rat Q))))
           (IsContinuousClamp (rat ((‚Ñö.- Q))) (rat Q))

           (Œª q ‚Üí
            let z = sym (clamp·µ£-rat (‚Ñö.- Q) Q q)
                q‚àà = (subst-‚àà (interval‚Ñô (-·µ£ rat Q) (rat Q))
                     ((cong clamp·µ£ (-·µ£-rat Q) ‚â°$ rat Q ‚â°$ rat q) ‚àô sym z)
                     (clamp·µ£‚àà‚Ñöinterval‚Ñô _ (rat Q)
                       (<·µ£Weaken‚â§·µ£ _ _ (-‚Ñù‚Çä<‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä Q‚Çä) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Q‚Çä))) (rat q)))
                sinq‚àà : sin (rat (‚Ñö.clamp (‚Ñö.- Q) Q q)) ‚àà ointerval‚Ñô -1 1
                sinq‚àà = ‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© _
                  (sym-interval‚Ñô‚äÜointerval‚Ñô (rat Q) œÄ-number/2
                    Q<œÄ/2 (rat (‚Ñö.clamp (‚Ñö.- Q) Q q)) q‚àà)
            in cong (uncurry arcSin‚ü®‚ü©)
                (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô (-1) 1))
                      (cong sin (sym z)))
                  ‚àô‚àô arcSin‚ü®‚ü©‚àòsin-‚Ñö Q‚Çä Q<œÄ/2
                   (‚Ñö.clamp (‚Ñö.- Q) Q q)
                    (‚Ñö.‚â§cases 0 (‚Ñö.clamp (‚Ñö.- Q) Q q)) q‚àà sinq‚àà ‚àô‚àô z)
               x 
         ‚àô‚àô (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat ((‚Ñö.- Q))) (rat Q)
                 x x‚ààQ)))
    (dense‚Ñöin‚Ñù (abs·µ£ x) œÄ-number/2  (
     ointerval‚Üíabs< x œÄ-number/2 x‚àà))

sym-clamp-rat : ‚àÄ q (Q : ‚Ñö‚Çä) ‚Üí
                     clamp·µ£ (-·µ£ rat (fst Q)) (rat (fst Q)) (rat q) ‚â°
                    rat (‚Ñö.clamp (‚Ñö.- (fst Q)) (fst Q) q) 
sym-clamp-rat q Q = (cong clamp·µ£ (-·µ£-rat (fst Q))
  ‚â°$ (rat (fst Q)) ‚â°$ rat q) ‚àô clamp·µ£-rat (‚Ñö.- (fst Q)) (fst Q) q



sin‚àòarcSin‚ü®‚ü© : ‚àÄ x x‚àà ‚Üí sin (arcSin‚ü®‚ü© x x‚àà) ‚â° x
sin‚àòarcSin‚ü®‚ü© x x‚àà = fst (propTruncIdempotent‚âÉ (isSet‚Ñù _ _)) $ do
  let h = Œª (x : ‚Ñù) ‚Üí substEquiv (Œª X ‚Üí x ‚àà
          ointerval‚Ñô X (rat [ pos 1 / 1+ 0 ]))
         (sym (-·µ£-rat 1))
  (q , ‚à£x‚à£<q , q<1) ‚Üê dense‚Ñöin‚Ñù (abs·µ£ x) 1 (ointerval‚Üíabs< x 1
        (fst (h x) x‚àà))
  let q‚Çä : ‚Ñö‚Çä
      q‚Çä = q , ‚Ñö.<‚Üí0< q (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _ (0‚â§abs·µ£ _) ‚à£x‚à£<q))
      p = ‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (-·µ£ (rat q)) (rat q) x
            (abs‚â§‚Üíinterval x (rat q) (<·µ£Weaken‚â§·µ£ _ _ ‚à£x‚à£<q))
      hh = clamp·µ£‚àà‚Ñöinterval‚Ñô _ _
                (<·µ£Weaken‚â§·µ£ _ _ (-‚Ñù‚Çä<‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä q‚Çä) (‚Ñö‚Çä‚Üí‚Ñù‚Çä q‚Çä)))
  ‚à£ cong sin (cong (uncurry arcSin‚ü®‚ü©)
       (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô _ _))
         p))
    ‚àô‚àô ‚â°Continuous
        (Œª x ‚Üí sin (arcSin‚ü®‚ü©
          (clamp·µ£ (-·µ£ (rat q)) (rat q) x)
            (invEq (h _) (sym-interval‚Ñô‚äÜointerval‚Ñô (rat q) 1 q<1  _
               (hh x)))))
        (clamp·µ£ (-·µ£ (rat q)) (rat q))
        (IsContinuous‚àò _ _ isContinuousSin
           (IsContinuousWithPred‚àòIsContinuous
             (ointerval‚Ñô -1 1)
             _
             _
             (Œª x ‚Üí invEq (h _)
                (sym-interval‚Ñô‚äÜointerval‚Ñô (rat q) 1 q<1  _ _))
             IsContinuousWPArcSin‚ü®‚ü©
             (IsContinuousClamp (-·µ£ (rat q)) (rat q))))
        (IsContinuousClamp (-·µ£ (rat q)) (rat q))
         (Œª y ‚Üí
         let p' = sym (sym-clamp-rat y q‚Çä)
         in cong sin (cong (uncurry arcSin‚ü®‚ü©)
              (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô -1 1))
                (sym p'))) ‚àô 
             sin‚àòarcSin‚ü®‚ü©‚Ñö 
             (‚Ñö.clamp (‚Ñö.- q) q y)
             (invEq (h _) (sym-interval‚Ñô‚äÜointerval‚Ñô (rat q) 1 q<1  _
                  ((subst-‚àà (interval‚Ñô (-·µ£ rat q) (rat q))
                     (sym-clamp-rat y q‚Çä)
                    (hh (rat y)) ))))
              (‚Ñö.‚â§cases 0 (‚Ñö.clamp (‚Ñö.- q) q y))
                 ‚àô p')
         x
    ‚àô‚àô sym p ‚à£‚ÇÅ


sinIso‚ü®-œÄ/2,œÄ2‚ü© : Iso (Œ£ _ (_‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2))
                      (Œ£ _ (_‚àà ointerval‚Ñô -1 1))
sinIso‚ü®-œÄ/2,œÄ2‚ü© .Iso.fun (x , x‚àà) = sin x , ‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© x x‚àà
sinIso‚ü®-œÄ/2,œÄ2‚ü© .Iso.inv (x , x‚àà) = arcSin‚ü®‚ü© x x‚àà , arcSin‚ü®‚ü©‚àà x x‚àà
sinIso‚ü®-œÄ/2,œÄ2‚ü© .Iso.rightInv (x , x‚àà) =
 Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô -1 1))
  (sin‚àòarcSin‚ü®‚ü© _ _)
sinIso‚ü®-œÄ/2,œÄ2‚ü© .Iso.leftInv (x , x‚àà) =
 Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2))
  (arcSin‚ü®‚ü©‚àòsin _ _ x‚àà)


equivSin‚ü®‚ü© : (Œ£ _ (_‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2))
             ‚âÉ (Œ£ _ (_‚àà ointerval‚Ñô -1 1))
equivSin‚ü®‚ü© = isoToEquiv sinIso‚ü®-œÄ/2,œÄ2‚ü©
