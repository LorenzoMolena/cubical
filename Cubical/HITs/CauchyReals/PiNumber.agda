{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.PiNumber where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.Uniform


0‚â§·µ£x¬≤ : ‚àÄ x ‚Üí 0 ‚â§·µ£ (x ^‚Åø 2)
0‚â§·µ£x¬≤ = ‚â§Cont
 (IsContinuousConst 0)
 (IsContinuous^‚Åø 2)
 (Œª q ‚Üí isTrans‚â§‚â°·µ£ _ _ _
   (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§x¬≤ q))
   (rat¬∑·µ£rat _ _ ‚àô
    cong‚ÇÇ _¬∑·µ£_
     (sym (¬∑IdL _))
     refl) )

x¬≤‚â§1‚Üí‚à£x‚à£‚â§1 : ‚àÄ x ‚Üí x ^‚Åø 2 ‚â§·µ£ 1 ‚Üí abs·µ£ x ‚â§·µ£ 1  
x¬≤‚â§1‚Üí‚à£x‚à£‚â§1 x x¬≤‚â§1 =
  PT.rec (isProp‚â§·µ£ _ _)
    (‚äé.rec
       (<·µ£Weaken‚â§·µ£ _ _ )
        (Œª 1/2<‚à£x‚à£ ‚Üí
             ^‚ÅøMonotone‚Åª¬π 2 (‚Ñï.‚â§-solver 1 2)
              (isTrans<·µ£ _ _ _
                (dec‚Ñö<·µ£? {0} { [ 1 / 2 ] })
                1/2<‚à£x‚à£) (dec‚Ñö<·µ£? {0} {1})
                (subst2 _‚â§·µ£_
                  (abs[x^¬≤‚Åø] 1 x ‚àô abs·µ£^‚Åø x 2) -- 
                  (sym (1^‚Åø 2))
                  x¬≤‚â§1)
        ))
    (Dichotomy‚Ñù' (rat [ 1 / 2 ]) (abs·µ£ x) 1
     (dec‚Ñö<·µ£? { [ 1 / 2 ] } {1})) 

x¬≤<1‚Üí‚à£x‚à£<1 : ‚àÄ x ‚Üí x ^‚Åø 2 <·µ£ 1 ‚Üí abs·µ£ x <·µ£ 1  
x¬≤<1‚Üí‚à£x‚à£<1 x x¬≤<1 =
  PT.rec (isProp<·µ£ _ _)
    (‚äé.rec (idfun _)
        (Œª 1/2<‚à£x‚à£ ‚Üí
             ^‚ÅøStrictMonotone‚Åª¬π 2 (‚Ñï.‚â§-solver 1 2)
              (isTrans<·µ£ _ _ _
                (dec‚Ñö<·µ£? {0} { [ 1 / 2 ] })
                1/2<‚à£x‚à£) (dec‚Ñö<·µ£? {0} {1})
                (subst2 _<·µ£_
                  (abs[x^¬≤‚Åø] 1 x ‚àô abs·µ£^‚Åø x 2) -- 
                  (sym (1^‚Åø 2))
                  x¬≤<1)
        ))
    (Dichotomy‚Ñù' (rat [ 1 / 2 ]) (abs·µ£ x) 1
     (dec‚Ñö<·µ£? { [ 1 / 2 ] } {1})) 

‚à£sin‚à£‚â§1 : ‚àÄ x ‚Üí abs·µ£ (sin x) ‚â§·µ£ 1
‚à£sin‚à£‚â§1 x = x¬≤‚â§1‚Üí‚à£x‚à£‚â§1 (sin x)
  (isTrans‚â§‚â°·µ£ _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _
      (sym (+IdR _)) (‚â§·µ£-o+ _ _ _ (0‚â§·µ£x¬≤ _))) (sin¬≤+cos¬≤=1 x))

‚à£cos‚à£‚â§1 : ‚àÄ x ‚Üí abs·µ£ (cos x) ‚â§·µ£ 1
‚à£cos‚à£‚â§1 x = x¬≤‚â§1‚Üí‚à£x‚à£‚â§1 (cos x)
  (isTrans‚â§‚â°·µ£ _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _
      (sym (+IdR _)) (‚â§·µ£-o+ _ _ _ (0‚â§·µ£x¬≤ _))) (+·µ£Comm _ _ ‚àô sin¬≤+cos¬≤=1 x))



bounded-sin : ‚àÄ P ‚Üí Bounded P (Œª x _ ‚Üí sin x)
bounded-sin P = 1 , Œª x _ ‚Üí ‚à£sin‚à£‚â§1 x

bounded-cos : ‚àÄ P ‚Üí Bounded P (Œª x _ ‚Üí cos x)
bounded-cos P = 1 , Œª x _ ‚Üí ‚à£cos‚à£‚â§1 x

Lipschitz-‚Ñù‚Üí‚Ñù‚ÜíIsUContinuous‚Ñô : ‚àÄ L f ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù L f ‚Üí
  ‚àÄ P ‚Üí IsUContinuous‚Ñô P Œª x _ ‚Üí f x
Lipschitz-‚Ñù‚Üí‚Ñù‚ÜíIsUContinuous‚Ñô L f fLip P Œµ =
  inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ Œµ  , Œª u v u‚àà v‚àà x ‚Üí
   subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ)) (fLip u v ( inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ Œµ ) x) 


‚Ñö^‚Åø-dist¬∑ : ‚àÄ p q n ‚Üí (p ‚Ñö.¬∑ q) ‚Ñö^‚Åø n ‚â° (p ‚Ñö^‚Åø n) ‚Ñö.¬∑ (q ‚Ñö^‚Åø n) 
‚Ñö^‚Åø-dist¬∑ p q zero = refl
‚Ñö^‚Åø-dist¬∑ p q (suc n) =
  cong‚ÇÇ ‚Ñö._¬∑_ (‚Ñö^‚Åø-dist¬∑ p q n) refl ‚àô
    lem--086

^‚Åø-MonotoneR-inv
        : (x : ‚Ñù) ‚Üí 0 ‚â§·µ£ x ‚Üí x ‚â§·µ£ 1 ‚Üí  (m n : ‚Ñï) ‚Üí 
          
           m ‚Ñï.‚â§ n ‚Üí (x ^‚Åø n) ‚â§·µ£ (x ^‚Åø m)
^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 zero zero _ = ‚â§·µ£-refl _
^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 zero (suc n) _ =
  isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
    (dec‚Ñö‚â§·µ£? {0} {1}) 0‚â§x
    (^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 zero n ‚Ñï.zero-‚â§)
    x‚â§1)
     (sym (rat¬∑·µ£rat 1 1))
^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 (suc m) zero m‚â§zero =
  ‚ä•.rec (‚Ñï.¬¨-<-zero m‚â§zero)
^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 (suc m) (suc n) sm‚â§sn =
  ‚â§·µ£-¬∑·µ£o _ _ x
    0‚â§x
    (^‚Åø-MonotoneR-inv x 0‚â§x x‚â§1 m n (‚Ñï.pred-‚â§-pred sm‚â§sn))


opaque
 lim0FromRatioBound : ‚àÄ (s : Seq) (q : ‚Ñö‚Çä) ‚Üí (q<1 : fst q ‚Ñö.< 1)
      (sBound : Œ£[ b ‚àà ‚Ñö‚Çä ] ‚àÄ n ‚Üí abs·µ£ (s n)  ‚â§·µ£ rat (fst b))
      ‚Üí (0ÔºÉs : ‚àÄ n ‚Üí 0 ÔºÉ s n)
      ‚Üí ‚àÄ N 
      ‚Üí ((n : ‚Ñï) ‚Üí
           N ‚Ñï.< n ‚Üí
           abs·µ£ ((s (suc n) Ôºè·µ£[ s n , 0ÔºÉs n ])) <·µ£
           rat (fst q))
      ‚Üí lim'‚Çô‚Üí‚àû s is 0
 lim0FromRatioBound s r r<1 (b , ‚â§b) 0ÔºÉs N Y Œ∑ =
  let Œµ = Œ∑ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä b
      (p' , 1+ q) , _ , p/q‚â°r = ‚Ñö.reduced (fst r)
      (p , sp=p') = w p' q (subst ‚Ñö.0<_ (sym p/q‚â°r) (snd r))
      (ùíë' , 1+ ùíí) , _ , ùíë/ùíí‚â°Œµ = ‚Ñö.reduced (fst Œµ)
      (ùíë , sùíë=ùíë') = w ùíë' ùíí (subst ‚Ñö.0<_ (sym ùíë/ùíí‚â°Œµ) (snd Œµ))
      uu = subst2 (‚Ñ§._<_)
         (‚Ñ§.¬∑IdR p' ‚àô sym (sp=p')) refl
          (subst (‚Ñö._< 1) (sym p/q‚â°r) r<1)
      M , X = ‚Ñïk‚Åø<Œµ (suc ùíí) (suc ùíë) (suc q) (suc p) (‚Ñï.zero-<-suc {ùíë})
        (fst (‚Ñ§.pos-<-pos‚âÉ‚Ñï<  _ _)
         uu)
  in (suc N ‚Ñï.+ M) , Œª n (u , =n) ‚Üí
     let z : rat (fst (r ‚Ñö‚Çä^‚Åø M) ) <·µ£ rat (fst (inv‚Ñö‚Çä b)) ¬∑·µ£ rat (fst Œ∑) 
         z = subst2 _<·µ£_
              (cong‚ÇÇ _¬∑·µ£_ refl (inv‚Ñù‚Çä-rat _) ‚àô
                 sym (rat¬∑·µ£rat _ _) ‚àô
                  cong rat ((cong‚ÇÇ ‚Ñö._¬∑_ refl (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _))
                       ‚àô sym (‚Ñö^‚Åø-dist¬∑ _ _ M) ‚àô cong (_‚Ñö^‚Åø M)
                      (((inv‚Ñö‚Çä-[/] (pos (suc p)) q
                   ‚àô cong [_/ 1+ q ] sp=p') ‚àô p/q‚â°r))) )
              (((cong‚ÇÇ _¬∑·µ£_ refl (inv‚Ñù‚Çä-rat _) ‚àô
                sym (rat¬∑·µ£rat _ _) ‚àô
                 cong rat ((inv‚Ñö‚Çä-[/] (pos (suc ùíë)) ùíí
                   ‚àô cong [_/ 1+ ùíí ] sùíë=ùíë') ‚àô ùíë/ùíí‚â°Œµ)) ‚àô rat¬∑·µ£rat _ _ ) ‚àô ¬∑·µ£Comm _ _)
            (invEq (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x
                (rat [ pos (suc ùíë) / 1 ])
                (rat ([ pos (suc p) / 1 ] ‚Ñö^‚Åø M))
                     (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (suc ùíí) / 1 ] , _))
                     (‚Ñö‚Çä‚Üí‚Ñù‚Çä (([ pos (suc q) / 1 ] , _) ‚Ñö‚Çä^‚Åø M)))
               (subst2 _<·µ£_
                  (cong rat (sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _)
                     ‚àô cong‚ÇÇ ‚Ñö._¬∑_ refl (sym (‚Ñö.fromNat-^ (suc p) M) ))
                      ‚àô rat¬∑·µ£rat _ _)
                  (cong rat ((sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _)
                     ‚àô ‚Ñö.¬∑Comm _ _
                        ‚àô cong‚ÇÇ ‚Ñö._¬∑_ (sym (‚Ñö.fromNat-^ (suc q) M) ) refl))
                       ‚àô rat¬∑·µ£rat _ _)
                 (<‚Ñö‚Üí<·µ£ _ _
                   (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                     (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _) X)))))
            
     in subst2 _<·µ£_
             (cong abs·µ£ (sym (ùêë'.+IdR' _ _ (-·µ£-rat 0))))
             refl
             (isTrans‚â§<·µ£ _ _ _
               (isTrans‚â§‚â°·µ£ _ _ _
                 (isTrans‚â§·µ£ _ _ _
                   (isTrans‚â§·µ£ _ _ _
                     (isTrans‚â°‚â§·µ£ _ _ _
                       (cong (abs·µ£ ‚àò s) (sym =n ‚àô
                         ‚Ñï.+-suc _ _ ‚àô cong suc
                          (cong‚ÇÇ ‚Ñï._+_ refl (‚Ñï.+-comm _ _)
                           ‚àô ‚Ñï.+-assoc _ _ _)))
                       (Y' (u ‚Ñï.+ M)))
                     (‚â§·µ£-¬∑·µ£o (rat (fst (r ‚Ñö‚Çä^‚Åø (suc u ‚Ñï.+ M)))) _ _ (0‚â§abs·µ£ _)
                       (subst2 _‚â§·µ£_
                         (^‚Åø-‚Ñö^‚Åø _ _)
                         (^‚Åø-‚Ñö^‚Åø _ _)
                         (^‚Åø-MonotoneR-inv _
                           (<·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä r)))
                           (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ r<1))
                           M
                           (suc u ‚Ñï.+ M)
                           (‚Ñï.‚â§SumRight {M} {suc u}))))) (‚â§·µ£-o¬∑ _ _ _
                     (‚Ñö.0‚â§‚Ñö‚Çä (r ‚Ñö‚Çä^‚Åø M))
                     (‚â§b (suc N))))
                 (cong‚ÇÇ _¬∑·µ£_ refl
                  (cong fst (sym (inv‚Ñù‚ÇäInvol (‚Ñö‚Çä‚Üí‚Ñù‚Çä b))) ‚àô
                   cong (fst ‚àò inv‚Ñù‚Çä)
                     (‚Ñù‚Çä‚â° (inv‚Ñù‚Çä-rat _)))))
               (invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä b)))
                 z))

  where
   w : ‚àÄ p' q ‚Üí ‚Ñö.0< [ p' / 1+ q ] ‚Üí (Œ£ _ Œª p ‚Üí pos (suc p) ‚â° p') 
   w (pos (suc n)) q x = n , refl

   Y'' : ‚àÄ M ‚Üí abs·µ£ (s (suc M ‚Ñï.+ suc N)) ‚â§·µ£
      rat (r .fst) ¬∑·µ£ abs·µ£ (s (M ‚Ñï.+ suc N))
   Y'' M =
    let zz = isTrans‚â°<·µ£ _ _ _ (cong‚ÇÇ _¬∑·µ£_ refl (sym (abs·µ£-inv‚Ñù _ _))
              ‚àô sym (¬∑abs·µ£ _ _))
            (Y (M ‚Ñï.+ suc N) (‚Ñï.‚â§-+-< (‚Ñï.zero-‚â§ {M}) (‚Ñï.‚â§-refl {suc N}))) 
    in isTrans‚â§‚â°·µ£ _ _ _
        (<·µ£Weaken‚â§·µ£ _ _ (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _) zz))
         (¬∑·µ£Comm _ _)


   Y' : ‚àÄ M ‚Üí abs·µ£ (s (suc M ‚Ñï.+ (suc N))) ‚â§·µ£
      rat (fst (r ‚Ñö‚Çä^‚Åø suc M)) ¬∑·µ£ abs·µ£ (s (suc N))
   Y' zero = isTrans‚â§‚â°·µ£ _ _ _ (Y'' zero)
    (cong‚ÇÇ _¬∑·µ£_ (cong rat (sym (‚Ñö.¬∑IdL _))) refl)
   Y' (suc M) = isTrans‚â§·µ£ _ _ _
       (Y'' (suc M))
       (isTrans‚â§‚â°·µ£ _ _ _
        (‚â§·µ£-o¬∑ _ _ _ (‚Ñö.0‚â§‚Ñö‚Çä r) (Y' M))
        (¬∑·µ£Assoc _ _ _ ‚àô cong‚ÇÇ _¬∑·µ£_  (¬∑·µ£Comm _ _ ‚àô sym (rat¬∑·µ£rat _ _)) refl))

IntegralOf-clamp : ‚àÄ (a b : ‚Ñù) ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f s ‚Üí
    on[ a , b ]IntegralOf (f ‚àò clamp·µ£ a b) is' s
  ‚âÉ on[ a , b ]IntegralOf f is' s
IntegralOf-clamp a b a‚â§b f s =
 substEquiv {A = {r : Partition[ a , b ]}   
              (r‚ÇÅ : Sample r) ‚Üí
              (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù }
           {a = Œª {p} pt f ‚Üí riemannSum' {a} {b} pt (f ‚àò clamp·µ£ a b)}
            {riemannSum' {a} {b}}
  (Œª rsf
     ‚Üí (‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
     ‚àÄ ((p , t) : TaggedPartition[ a , b ]) ‚Üí
     (mesh‚â§·µ£ p (rat (fst Œ¥)) ‚Üí
       abs·µ£ (rsf t f -·µ£ s) <·µ£ rat (fst Œµ))))
  (implicitFunExt (funExt‚ÇÇ
   Œª t f ‚Üí riemannSum'‚â° t _ _ Œª x x‚àà ‚Üí
     sym (cong f (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° a b x x‚àà)) ))

clamp·µ£-IntegralOf
   : ‚àÄ (a b : ‚Ñù) (a‚â§b : a ‚â§·µ£ b) f
     (s : ‚Ñù) ‚Üí
     (on[ a , b ]IntegralOf f is' s)
     ‚âÉ (on[ a , b ]IntegralOf (Œª x _ _ ‚Üí f x) is s)
clamp·µ£-IntegralOf a b a‚â§b f s =
  invEquiv (IntegralOf-clamp a b a‚â§b f s)
   ‚àô‚Çë clamp·µ£-IntegralOf' a b a‚â§b (Œª x _ ‚Üí f x) s

Integrate-UContinuous‚àà : ‚àÄ (a b : ‚Ñù) ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f
   ‚Üí IsUContinuous‚Ñô (interval‚Ñô a b) (Œª x _ ‚Üí f x)
   ‚Üí Œ£ ‚Ñù Œª R ‚Üí on[ a , b ]IntegralOf f is' R
Integrate-UContinuous‚àà a b a‚â§b f icF =
 let z = Integrate-UContinuous‚Ñô a b a‚â§b (Œª x _ ‚Üí f x) icF
     zz = invEq (clamp·µ£-IntegralOf' a b a‚â§b (Œª x _ ‚Üí f x) _) (snd z)
 in _ , fst (IntegralOf-clamp a b a‚â§b _ _) zz
 

ratioTest‚Çä‚â§' : ‚àÄ (s : Seq) (q : ‚Ñö‚Çä) ‚Üí (q<1 : fst q ‚Ñö.< 1)
     ‚Üí (sPos : ‚àÄ n ‚Üí rat 0 <·µ£ (s n))
     ‚Üí lim'‚Çô‚Üí‚àû s is 0
     ‚Üí (Œ£[ N ‚àà ‚Ñï ]
       ((n : ‚Ñï) ‚Üí
          N ‚Ñï.< n ‚Üí
          abs·µ£ ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ])) <·µ£
          rat (fst q)))
     ‚Üí IsConvSeries' s
ratioTest‚Çä‚â§' s q q<1 sPos l' N¬Ω Œµ‚Çä@(Œµ , 0<Œµ) =
  N , ww

 where

  
 ¬Ω·µ£ = (‚Ñö‚Çä‚Üí‚Ñù‚Çä q)
 Œµ/2 : ‚Ñö‚Çä
 Œµ/2 = Œµ‚Çä ‚Ñö‚Çä¬∑ q

 1-q‚Çä : ‚Ñö‚Çä
 1-q‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ q<1
 Œµ/2' : ‚Ñö‚Çä
 Œµ/2' = Œµ‚Çä ‚Ñö‚Çä¬∑ 1-q‚Çä 
 
 NŒµ = (l' Œµ/2')

 N : ‚Ñï
 N = suc (‚Ñï.max (suc (fst N¬Ω)) (fst NŒµ))

 ww : ‚àÄ m n ‚Üí abs·µ£ (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ (rat Œµ)
 ww m n = isTrans‚â§<·µ£ _ _ _
   (‚â°·µ£Weaken‚â§·µ£ _ _
     (abs·µ£NonNeg (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n)
     (0‚â§seqŒ£ _ (Œª n ‚Üí <·µ£Weaken‚â§·µ£ _ _ (sPos (n ‚Ñï.+ (m ‚Ñï.+ suc N)))) _))) pp

  where
  opaque
   unfolding -·µ£_ _+·µ£_

   s' : Seq
   s' = s ‚àò (‚Ñï._+ (suc (m ‚Ñï.+ N)))


   f' : ((n : ‚Ñï) ‚Üí  N ‚Ñï.‚â§ n ‚Üí
          (s (suc n)) ‚â§·µ£
          s n ¬∑·µ£ rat (fst q))
   f' n n< =
      subst2 {x = ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ])
                      ) ¬∑·µ£ s n }
         _‚â§·µ£_ (
           [x/y]¬∑y·µ£ _ _ _) (¬∑·µ£Comm _ _)
        ((<·µ£Weaken‚â§·µ£ _ _
           (<·µ£-¬∑·µ£o _ _ (s n , sPos _)
            (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
              (snd N¬Ω n (
               ‚Ñï.<-trans (‚Ñï.left-‚â§-max {suc (fst N¬Ω)} {fst NŒµ})
                n<))))))


   p : ‚àÄ n ‚Üí s' n ‚â§·µ£ geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£) n
   p zero =
      isTrans‚â§·µ£ _ _ _ ((f' (m ‚Ñï.+ N) (‚Ñï.‚â§SumRight {N} {m}) ))
              (subst ((s (m ‚Ñï.+ N) ¬∑·µ£ rat (fst q)) ‚â§·µ£_)
                 (¬∑IdR _)
                  (‚â§·µ£-o¬∑·µ£ (fst ¬Ω·µ£) 1 (s (m ‚Ñï.+ N))
                    (<·µ£Weaken‚â§·µ£ _ _ (sPos _))
                   (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ q<1))))

   p (suc n) =
     isTrans‚â§·µ£ _ _ _ (f' _
       (subst (N ‚Ñï.‚â§_) (sym (‚Ñï.+-assoc n (1 ‚Ñï.+ m) N))
         ‚Ñï.‚â§SumRight))
       (‚â§·µ£-¬∑·µ£o _ _ (rat (fst q)) ((<·µ£Weaken‚â§·µ£ 0 (rat (fst q))
         (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä q)))) (p n))

   p' : ‚àÄ n ‚Üí seqSumUpTo' s' n ‚â§·µ£ seqSumUpTo' (geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£)) n
   p' = Seq'‚â§‚ÜíŒ£‚â§ s' (geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£))
         p

   s<Œµ : (s (m ‚Ñï.+ N)) <·µ£ rat (fst Œµ/2')
   s<Œµ = subst (_<·µ£ rat (fst Œµ/2')) (+IdR _)
            ((isTrans‚â§<·µ£ _ _ _
           (‚â§abs·µ£ ((s (m ‚Ñï.+ N)) +·µ£ (-·µ£ 0))) (snd NŒµ _
            (‚Ñï.‚â§<-trans ‚Ñï.right-‚â§-max ‚Ñï.‚â§SumRight))))


   pp : (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ (rat Œµ)
   pp =
       subst {x = ‚Ñï._+ suc (m ‚Ñï.+ N) } {y = Œª z ‚Üí z ‚Ñï.+ (m ‚Ñï.+ suc N)}
            (Œª h ‚Üí seqŒ£ (s ‚àòS h) n <·µ£ rat Œµ)

           (funExt (Œª x ‚Üí cong (x ‚Ñï.+_) (sym (‚Ñï.+-suc _ _)) ))
           (isTrans‚â§<·µ£ _ _ _ (p' n)
             (isTrans‚â§<·µ£ _ _ _
               (‚â°·µ£Weaken‚â§·µ£ _ _ (seqSumUpTo‚â°seqSumUpTo' _ _))
                 (isTrans<‚â§·µ£ _ _ _
                  (S‚Çô-sup (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£)
                    n (sPos _) (snd ¬Ω·µ£)
                     (<‚Ñö‚Üí<·µ£ _ _ q<1))
                      
                   ((isTrans‚â§·µ£ _ _ _
                   (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ (rat (inv‚Ñö (fst 1-q‚Çä) _))
                         (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<‚Ñö‚Çä Œµ/2')))
                           (<·µ£Weaken‚â§·µ£ _ _
                              ((0<1/x _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä 1-q‚Çä)))))

                     (<·µ£Weaken‚â§·µ£ _ _ s<Œµ)
                     (‚â°·µ£Weaken‚â§·µ£ _ _
                        (inv‚Ñù-rat _ _ (inl (‚Ñö.0<‚Ñö‚Çä 1-q‚Çä)))))
                         (‚â°·µ£Weaken‚â§·µ£ _ _ (sym (rat¬∑·µ£rat _  _) ‚àô
                           cong rat (sym (‚Ñö.¬∑Assoc _ _ _) ‚àô
                             cong (Œµ ‚Ñö.¬∑_)
                              (‚Ñö.‚Ñö-y/y (fst 1-q‚Çä) (inl (‚Ñö.0<‚Ñö‚Çä 1-q‚Çä)))
                              ‚àô ‚Ñö.¬∑IdR _))))))))


ratioTest‚Çä‚â§ : ‚àÄ (s : Seq) (sBound : Œ£[ b ‚àà ‚Ñö‚Çä ] ‚àÄ n ‚Üí abs·µ£ (s n)  ‚â§·µ£ rat (fst b))
 (q : ‚Ñö‚Çä) ‚Üí (q<1 : fst q ‚Ñö.< 1)
     ‚Üí (sPos : ‚àÄ n ‚Üí rat 0 <·µ£ (s n))
     
     ‚Üí (Œ£[ N ‚àà ‚Ñï ]
       ((n : ‚Ñï) ‚Üí
          N ‚Ñï.< n ‚Üí
          abs·µ£ ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ])) <·µ£
          rat (fst q)))
     ‚Üí IsConvSeries' s 
ratioTest‚Çä‚â§ s sBound q q<1 sPos N¬Ω =  
  ratioTest‚Çä‚â§' s q q<1 sPos
    ((lim0FromRatioBound _ q q<1 sBound (inl ‚àò sPos)
      (fst N¬Ω  ) (snd N¬Ω)))
    N¬Ω 

tent : ‚Ñù ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
tent Œµ Œ¥ x‚ÇÄ x = Œµ ¬∑·µ£ max·µ£ 0 (1 -·µ£ abs·µ£ (x -·µ£ x‚ÇÄ) ¬∑·µ£ fst (inv‚Ñù‚Çä Œ¥))

Integral'Const1 : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí
      on[ a , b ]IntegralOf
      (Œª _ ‚Üí 1) is'
      (b -·µ£ a)
Integral'Const1 a b a‚â§b Œµ =
  ‚à£ 1 , (Œª tp _ ‚Üí isTrans‚â°<·µ£ _ _ _
    (cong abs·µ£ (ùêë'.+InvR' _ _ (riemannSum'Const (snd tp) 1 ‚àô ¬∑IdL _))
     ‚àô abs·µ£0) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ

Integral'Const0 : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí
      on[ a , b ]IntegralOf
      (Œª _ ‚Üí 0) is' 0
Integral'Const0 a b a‚â§b Œµ =
  ‚à£ 1 , (Œª tp _ ‚Üí isTrans‚â°<·µ£ _ _ _
    (cong abs·µ£ (ùêë'.+InvR' _ _ (riemannSum'Const (snd tp) 0 ‚àô
     ùêë'.0LeftAnnihilates _))
     ‚àô abs·µ£0) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ


Integral'Const : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ C ‚Üí 
      on[ a , b ]IntegralOf
      (Œª _ ‚Üí C) is'
      (C ¬∑·µ£ (b -·µ£ a))
Integral'Const a b a‚â§b C Œµ =
  ‚à£ 1 , (Œª tp _ ‚Üí isTrans‚â°<·µ£ _ _ _
    (cong abs·µ£ (ùêë'.+InvR' _ _ (riemannSum'Const (snd tp) C))
     ‚àô abs·µ£0) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ


IntegralConst‚Ñô : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ C ‚Üí 
      on[ a , b ]IntegralOf
      (Œª _ _ _ ‚Üí C) is
      (C ¬∑·µ£ (b -·µ£ a))
IntegralConst‚Ñô a b a‚â§b C Œµ =
  ‚à£ 1 , (Œª tp _ ‚Üí isTrans‚â°<·µ£ _ _ _
    (cong abs·µ£ (ùêë'.+InvR' _ _ (riemannSum'Const (snd tp) C))
     ‚àô abs·µ£0) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))) ‚à£‚ÇÅ



sin‚â§1 : ‚àÄ x ‚Üí sin x ‚â§·µ£ 1
sin‚â§1 x = isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _) (‚à£sin‚à£‚â§1 x)

-1‚â§sin : ‚àÄ x ‚Üí -1 ‚â§·µ£ sin x 
-1‚â§sin x = subst2 _‚â§·µ£_
  (-·µ£-rat 1)
  (sym (cong -·µ£_ (sin-odd x)) ‚àô -·µ£Invol _)
  (-·µ£‚â§·µ£ _ _ (sin‚â§1 (-·µ£ x)))

open ‚Ñö.HLP

Integral'-< : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí ‚àÄ f f' s s'
            ‚Üí (‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí f x ‚â§·µ£ f' x)
            ‚Üí ‚à• IsUContinuous‚Ñô (interval‚Ñô a b) (Œª x _ ‚Üí f x) ‚à•‚ÇÅ
            ‚Üí ‚à• IsUContinuous‚Ñô (interval‚Ñô a b) (Œª x _ ‚Üí f' x) ‚à•‚ÇÅ
            ‚Üí on[ a , b ]IntegralOf f is' s
            ‚Üí on[ a , b ]IntegralOf f' is' s'
            ‚Üí f a <·µ£ f' a
            ‚Üí s <·µ£ s'
Integral'-< a b a<b f f' s s' f‚â§f' fUC‚ÇÅ fUC'‚ÇÅ ‚à´f=s ‚à´f'=s' fa<fa' = 
  fst (propTruncIdempotent‚âÉ (isProp<·µ£ _ _)) $ do
   fUC ‚Üê fUC‚ÇÅ
   fUC' ‚Üê fUC'‚ÇÅ
         
 
   (Œµ‚Çä@(Œµ , 0<Œµ) , Œµ<œÄn) ‚Üê
     lower‚ÑöBound _ (x<y‚Üí0<y-x _ _ fa<fa')
   let (Œ¥f , X) = fUC (/2‚Çä Œµ‚Çä)
       (Œ¥f' , X') = fUC' (/4‚Çä Œµ‚Çä)
       Œ¥ = (‚Ñö.min‚Çä Œ¥f Œ¥f')
       Œ¥' = min·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥)) (_ , x<y‚Üí0<y-x _ _ a<b)
       a' = a +·µ£ fst Œ¥'
       a'‚â§b : a' ‚â§·µ£ b
       a'‚â§b = isTrans‚â§‚â°·µ£ _ _ _
                (‚â§·µ£-o+ _ _ a (min‚â§·µ£' (rat (fst (/2‚Çä Œ¥))) (b -·µ£ a)))
                Lùêë.lem--05
       a<a' : a <·µ£ a'
       a<a' = isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
                 (<·µ£-o+ _ _ a (snd Œ¥'))
       aa'‚äÜab : interval‚Ñô a a' ‚äÜ interval‚Ñô a b
       aa'‚äÜab x x‚àà = fst x‚àà , isTrans‚â§·µ£ _ _ _ (snd x‚àà) a'‚â§b
       a'b‚äÜab : interval‚Ñô a' b ‚äÜ interval‚Ñô a b
       a'b‚äÜab x x‚àà = isTrans‚â§·µ£ _ _ _  (<·µ£Weaken‚â§·µ£ _ _ a<a') (fst x‚àà) , snd x‚àà
   ‚à£ subst2 _<·µ£_
         ((Integral'-additive a a' b (<·µ£Weaken‚â§·µ£ _ _ a<a') a'‚â§b
              f _ _ s
                (snd (Integrate-UContinuous‚àà a a' (<·µ£Weaken‚â§·µ£ _ _ a<a') f
                  (IsUContinuous‚Ñô-restr _ _ _ aa'‚äÜab fUC)))
                (snd (Integrate-UContinuous‚àà a' b a'‚â§b f
                  (IsUContinuous‚Ñô-restr _ _ _ a'b‚äÜab fUC)))
                ‚à´f=s))
         (Integral'-additive a a' b (<·µ£Weaken‚â§·µ£ _ _ a<a') a'‚â§b
              f' _ _ s'
                (snd (Integrate-UContinuous‚àà a a' (<·µ£Weaken‚â§·µ£ _ _ a<a') f'
                  (IsUContinuous‚Ñô-restr _ _ _ aa'‚äÜab fUC')))
                (snd (Integrate-UContinuous‚àà a' b a'‚â§b f'
                  (IsUContinuous‚Ñô-restr _ _ _ a'b‚äÜab fUC')))
                ‚à´f'=s')
         (<‚â§·µ£Monotone+·µ£ _ _ _ _
           (isTrans<‚â§·µ£ _ _ _
             (isTrans‚â°<·µ£ _ _ _
                (sym (+IdR _))
                (<·µ£-o+ _ _ _
                 (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/4‚Çä (Œµ , 0<Œµ))
                      ‚Çä¬∑·µ£ (_ , x<y‚Üí0<y-x _ _ a<a')))))
             ((Integral'-‚â§ a a' (<·µ£Weaken‚â§·µ£ _ _ a<a')
              (Œª x ‚Üí f x +·µ£ rat (fst (/4‚Çä Œµ‚Çä)))
              f' _ _
             (Œª x x‚àà ‚Üí
                let x‚àºa = (invEq (‚àº‚âÉabs<Œµ _ _ Œ¥)
                                (isTrans‚â°<·µ£ _ _ _
                                  (abs-max _)
                                   (max<-lem _ _ _
                                    (isTrans‚â§<·µ£ _ (fst Œ¥') _
                                      (a‚â§c+b‚áía-c‚â§b _ _ _
                                        (snd x‚àà))
                                      (isTrans‚â§<·µ£ _ _ _
                                        (min‚â§·µ£ (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥))) (b -·µ£ a))
                                         (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥) )))
                                    (isTrans‚â°<·µ£ _ _ _
                                     (-[x-y]‚â°y-x _ _)
                                      (isTrans‚â§<·µ£ _ _ _
                                        (x‚â§y‚Üíx-y‚â§0 _ _ (fst x‚àà ))
                                         (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥)))))))
                    zzz = a-b‚â§c‚áía-c‚â§b _ _ _ $ isTrans‚â§·µ£ _ _ _
                            (‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _)
                             (X x a
                              (aa'‚äÜab x x‚àà)
                              (‚â§·µ£-refl a , <·µ£Weaken‚â§·µ£ _ _  a<b)
                               (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºa))))
                    zzz' = a-b‚â§c‚áía-c‚â§b _ _ _ $ isTrans‚â§·µ£ _ _ _
                            (‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _)
                            (X' a x ((‚â§·µ£-refl a , <·µ£Weaken‚â§·µ£ _ _  a<b))
                               (aa'‚äÜab x x‚àà)
                               (sym‚àº _ _ _
                                (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) x‚àºa)))))
                in isTrans‚â§·µ£ _ _ _
                     (isTrans‚â°‚â§·µ£ _ _ _
                       (cong‚ÇÇ _+·µ£_ refl
                         (cong rat 
                    (dist‚Ñö! Œµ ¬∑[
                         (ge[ ‚Ñö.[ 1 / 4 ] ])
                       ‚â°  ((neg-ge ge[ ‚Ñö.[ 1 / 2 ] ]) +ge ge1)
                         +ge (neg-ge  ge[ ‚Ñö.[ 1 / 4 ] ] ) ]) ‚àô sym (+·µ£-rat _ _)
                           ‚àô cong‚ÇÇ _+·µ£_ (sym (+·µ£-rat _ _)
                            ‚àô cong‚ÇÇ _+·µ£_ (sym (-·µ£-rat _)) refl)
                             (sym (-·µ£-rat _))) ‚àô +·µ£Assoc _ _ _)
                       (‚â§·µ£-+o _ _ _ (isTrans‚â°‚â§·µ£ _ _ _
                         (+·µ£Assoc _ _ _ ‚àô +·µ£Comm _ _) (<·µ£Weaken‚â§·µ£ _ _
                         ((isTrans‚â§<·µ£ _ _ _
                           (‚â§·µ£-o+ _ _ _ zzz)
                           (a<b-c‚áía+c<b _ _ _ Œµ<œÄn)))))))
                     zzz')
             (Integral'-+ a a' (<·µ£Weaken‚â§·µ£ _ _ a<a') _ _ _ _
                ((snd (Integrate-UContinuous‚àà a a' (<·µ£Weaken‚â§·µ£ _ _ a<a') f
                  (IsUContinuous‚Ñô-restr _ _ _ aa'‚äÜab fUC))))
                (Integral'Const a a' (<·µ£Weaken‚â§·µ£ _ _ a<a')
                 (rat (fst (/4‚Çä (Œµ , 0<Œµ))))))
             (snd (Integrate-UContinuous‚àà a a' (<·µ£Weaken‚â§·µ£ _ _ a<a') f'
                  (IsUContinuous‚Ñô-restr _ _ _ aa'‚äÜab fUC'))))))
           (Integral'-‚â§ a' b a'‚â§b f f' _ _
             (Œª x x‚àà ‚Üí f‚â§f' x
               (isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ a<a') (fst x‚àà) , snd x‚àà))
             (snd (Integrate-UContinuous‚àà a' b a'‚â§b f
                  (IsUContinuous‚Ñô-restr _ _ _ a'b‚äÜab fUC)))
             (snd (Integrate-UContinuous‚àà a' b a'‚â§b f'
                  (IsUContinuous‚Ñô-restr _ _ _ a'b‚äÜab fUC'))))) ‚à£‚ÇÅ

IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval : ‚àÄ (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí
                (‚àÄ a b ‚Üí rat a <·µ£ rat b ‚Üí
                  IsUContinuous‚Ñô (interval‚Ñô (rat a) (rat b)) (Œª x _ ‚Üí f x) )
               ‚Üí ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí
                ‚à• IsUContinuous‚Ñô (interval‚Ñô a b) (Œª x _ ‚Üí f x) ‚à•‚ÇÅ
IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval f X a b a‚â§b =
  PT.map2
     (Œª (a' , _ , a'<a) (b' , b<b' , _) ‚Üí
       IsUContinuous‚Ñô-restr (interval‚Ñô (rat a') (rat b'))
         (interval‚Ñô a b) (Œª x _ ‚Üí f x)
         (Œª x x‚àà ‚Üí isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ a'<a) (fst x‚àà) ,
          isTrans‚â§·µ£ _ _ _ (snd x‚àà) (<·µ£Weaken‚â§·µ£ _ _ b<b'))
           (X a' b' (isTrans<·µ£ _ _ _ a'<a
           (isTrans‚â§<·µ£ _ _ _ a‚â§b b<b'))))
   (dense‚Ñöin‚Ñù (a +·µ£ (rat -1)) a (isTrans<‚â°·µ£ _ _ _
        
        (<·µ£-o+ _ _ a (dec‚Ñö<·µ£? { -1 } {0}))
        (+IdR a)))
   (dense‚Ñöin‚Ñù b (b +·µ£ 1) (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR b))
        (<·µ£-o+ _ _ b (dec‚Ñö<·µ£? {0} {1}))) )

œÄ-seq : ‚Ñï ‚Üí ‚Ñù 
œÄ-seq zero = 0
œÄ-seq (suc n) = œÄ-seq n +·µ£ cos (œÄ-seq n)

œÄ-seq‚â°Œ£diffs : ‚àÄ n ‚Üí
  œÄ-seq n ‚â°
    seqŒ£ (Œª k ‚Üí œÄ-seq (suc k) -·µ£ œÄ-seq k) n
œÄ-seq‚â°Œ£diffs (zero) = refl
œÄ-seq‚â°Œ£diffs (suc n) = cong‚ÇÇ _+·µ£_ (œÄ-seq‚â°Œ£diffs n)
   (sym Lùêë.lem--063)

‚à´sin : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí on[ a , b ]IntegralOf (Œª x _ _ ‚Üí sin x) is
       (cos a -·µ£ cos b) 
‚à´sin a b a‚â§b =
  PT.rec
   {A = IsUContinuous‚Ñô (interval‚Ñô a b') (Œª x _ ‚Üí sin x)}
   (isPropŒ† Œª _ ‚Üí squash‚ÇÅ)
   (Œª iuc ‚Üí
     let zz = FTOC‚áê'' a b' a<b' _ _ iuc
              ((subst2 (uDerivativeOf‚Ñô interval‚Ñô a b' ,_is_)
                      (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _) )
                      (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _) ‚àô -·µ£Invol _ )
                      (C¬∑uDerivative‚Ñô (interval‚Ñô a b') -1 _ _
                      (cos'=-sin-uder' a b' a<b')))) b
            (a‚â§b , <·µ£Weaken‚â§·µ£ _ _ b<b')
     in subst {x = (-·µ£ cos b -·µ£ -·µ£ cos a)} {cos a -·µ£ cos b}
          (on[ a , b ]IntegralOf (Œª x _ _ ‚Üí sin x) is_)
          
          (sym (-·µ£Distr (cos b) (-·µ£ cos a))
           ‚àô -[x-y]‚â°y-x (cos b) (cos a)) zz
          )
   (IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval _ pre-uContSin a b' (<·µ£Weaken‚â§·µ£ _ _ a<b'))
 where
 b' = b +·µ£ 1
 b<b' : b <·µ£ b'
 b<b' = isTrans‚â°<·µ£ _ _ _ (sym (+IdR _)) (<·µ£-o+ _ _ _ (dec‚Ñö<·µ£? {0} {1}))
 a<b' : a <·µ£ b'
 a<b' = isTrans‚â§<·µ£ _ _ _ a‚â§b b<b'

abs·µ£Diff‚â°max-min : ‚àÄ a b ‚Üí abs·µ£ (a -·µ£ b) ‚â° max·µ£ a b -·µ£ min·µ£ a b
abs·µ£Diff‚â°max-min a b = sym (abs·µ£-min-max a b) ‚àô
  abs·µ£NonNeg _ ((x‚â§y‚Üí0‚â§y-x _ _
            (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _))))


abs·µ£diffCont : ‚àÄ f ‚Üí IsContinuous f ‚Üí ‚àÄ a b ‚Üí  
      abs·µ£ (f (min·µ£ a b) -·µ£ f (max·µ£ a b)) ‚â°
      abs·µ£ (f a -·µ£ f b)
abs·µ£diffCont f fC =
  ‚â°Cont‚ÇÇ (cont‚àò‚ÇÇ IsContinuousAbs·µ£
      (IsContinuous-‚ÇÇ‚àò
        (cont‚àò‚ÇÇ fC (contNE‚ÇÇ minR ))
        (cont‚àò‚ÇÇ fC (contNE‚ÇÇ maxR))))
    (cont‚àò‚ÇÇ IsContinuousAbs·µ£
       (IsContinuous-‚ÇÇ‚àò ((Œª _ ‚Üí IsContinuousConst _) , Œª _ ‚Üí fC)
        ((Œª _ ‚Üí fC) , Œª _ ‚Üí IsContinuousConst _)))
     (‚Ñö.elimBy‚â§ (Œª x y ‚Üí
       cong abs·µ£ (cong‚ÇÇ _-·µ£_ (cong f (min·µ£Comm (rat y) (rat x)))
        ((cong f (max·µ£Comm (rat y) (rat x)))))
         ‚àô‚àô_‚àô‚àô minusComm-abs·µ£ _ _ )
         Œª x y x‚â§y ‚Üí
          cong abs·µ£
           ((cong‚ÇÇ _-·µ£_ (cong f (‚â§‚Üímin·µ£ (rat x) (rat y) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚â§y)))
        ((cong f (‚â§‚Üímax·µ£ (rat x) (rat y) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚â§y)))))))

cosDiffBound : ‚àÄ a b ‚Üí abs·µ£ (cos a -·µ£ cos b) ‚â§·µ£ abs·µ£ (a -·µ£ b) 
cosDiffBound a b = subst2 _‚â§·µ£_
   (abs·µ£diffCont cos isContinuousCos a b)
   (sym (abs·µ£Diff‚â°max-min a b))
   zz'

 where
  a‚äìb‚â§a‚äîb = (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _))
  zz' : abs·µ£ (cos (min·µ£ a b) -·µ£ cos (max·µ£ a b)) ‚â§·µ£ max·µ£ a b -·µ£ min·µ£ a b
  zz' = PT.rec (isProp‚â§·µ£ _ _)
         (Œª iuc ‚Üí
            let intCos = ((Integrate-UContinuous‚Ñô _ _ a‚äìb‚â§a‚äîb _
                       (IsUContinuous‚àò‚Ñô _
                         IsUContinuousAbs·µ£ iuc)))
            in isTrans‚â§·µ£ _ _ _ (Integral'-abs‚â§ (min·µ£ a b) (max·µ£ a b)
                a‚äìb‚â§a‚äîb
                 sin
                 _
                 _
                 (‚à´sin _ _ ((isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _))))
                 (snd intCos))
                    (Integral'-‚â§ (min·µ£ a b) (max·µ£ a b)
                      ((isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _)
                     (‚â§max·µ£ _ _)))
                     (Œª x ‚Üí abs·µ£ (sin x)) _ _ _
                      (Œª x _ ‚Üí ‚à£sin‚à£‚â§1 x) (snd intCos)
                      (Integral'Const1
                    (min·µ£ a b) (max·µ£ a b) a‚äìb‚â§a‚äîb)))

                (IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval _ pre-uContSin (min·µ£ a b) (max·µ£ a b)
                   a‚äìb‚â§a‚äîb)
    



‚à´cos : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí on[ a , b ]IntegralOf (Œª x _ _ ‚Üí cos x) is
       (sin b -·µ£ sin a)  
‚à´cos a b a‚â§b = 
  PT.rec
     {A = IsUContinuous‚Ñô (interval‚Ñô a b') (Œª x _ ‚Üí cos x)}
     (isPropŒ† Œª _ ‚Üí squash‚ÇÅ)
     (Œª iuc ‚Üí
         FTOC‚áê'' a b' a<b' _ _ iuc
              (sin'=cos-uder' a b' a<b') b
              (a‚â§b , <·µ£Weaken‚â§·µ£ _ _ b<b'))
     (IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval _ pre-uContCos a b' (<·µ£Weaken‚â§·µ£ _ _ a<b'))


 where
 b' = b +·µ£ 1
 b<b' : b <·µ£ b'
 b<b' = isTrans‚â°<·µ£ _ _ _ (sym (+IdR _)) (<·µ£-o+ _ _ _ (dec‚Ñö<·µ£? {0} {1}))
 a<b' : a <·µ£ b'
 a<b' = isTrans‚â§<·µ£ _ _ _ a‚â§b b<b'

sinDiffBound : ‚àÄ a b ‚Üí abs·µ£ (sin a -·µ£ sin b) ‚â§·µ£ abs·µ£ (a -·µ£ b) 
sinDiffBound a b = 
 subst2 _‚â§·µ£_
   (minusComm-abs·µ£ _ _ ‚àô abs·µ£diffCont sin isContinuousSin a b)
   (sym (abs·µ£Diff‚â°max-min a b))
   zz'

 where
  a‚äìb‚â§a‚äîb = (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _))
  zz' : abs·µ£ (sin (max·µ£ a b) -·µ£ sin (min·µ£ a b)) ‚â§·µ£ max·µ£ a b -·µ£ min·µ£ a b
  zz' = 
    PT.rec (isProp‚â§·µ£ _ _)
         (Œª iuc ‚Üí
            let intSin = ((Integrate-UContinuous‚Ñô _ _ a‚äìb‚â§a‚äîb _
                       (IsUContinuous‚àò‚Ñô _
                         IsUContinuousAbs·µ£ iuc)))
            in isTrans‚â§·µ£ _ _ _ (Integral'-abs‚â§ (min·µ£ a b) (max·µ£ a b)
                a‚äìb‚â§a‚äîb
                 cos
                 _
                 _
                 ((‚à´cos _ _ ((isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _)))))
                  -- 
                 (snd intSin))
                    (Integral'-‚â§ (min·µ£ a b) (max·µ£ a b)
                      ((isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _)
                     (‚â§max·µ£ _ _)))
                     (Œª x ‚Üí abs·µ£ (cos x)) _ _ _
                      (Œª x _ ‚Üí ‚à£cos‚à£‚â§1 x) ((snd intSin))
                      (Integral'Const1
                    (min·µ£ a b) (max·µ£ a b) a‚äìb‚â§a‚äîb)))

                ((IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval _
                 pre-uContCos (min·µ£ a b) (max·µ£ a b)
                   a‚äìb‚â§a‚äîb))


0ÔºÉ‚à£cos‚à£‚Üí‚à£sin‚à£<1 : ‚àÄ x ‚Üí 0 ÔºÉ (cos x)  ‚Üí abs·µ£ (sin x) <·µ£ 1
0ÔºÉ‚à£cos‚à£‚Üí‚à£sin‚à£<1 x 0ÔºÉcos =
  x¬≤<1‚Üí‚à£x‚à£<1 _ (isTrans<‚â°·µ£ _ _ _
    (isTrans‚â°<·µ£ _ _ _
      (sym (+IdR _)) (<·µ£-o+ _ _ _ 0<cos¬≤)) (sin¬≤+cos¬≤=1 x))

 where 
 0<cos¬≤ : 0 <·µ£ (cos x ^‚Åø 2)
 0<cos¬≤ = isTrans<‚â°·µ£ _ _ _
  (0<x^‚Åø _ 2 (0ÔºÉ‚Üí0<abs _ 0ÔºÉcos))
  (sym (abs·µ£^‚Åø (cos x) 2) ‚àô sym (abs[x^¬≤‚Åø] 1 (cos x)))


t<œÄ-seq‚Üí0<cos[t] : ‚àÄ t n ‚Üí
  0 ‚â§·µ£ t ‚Üí  t ‚â§·µ£ (œÄ-seq (suc n)) ‚Üí 0 <·µ£ cos t

0<Œ∑-seq[n] : ‚àÄ n ‚Üí 0 <·µ£ œÄ-seq (suc n)

t<œÄ-seq‚Üí0<cos[t] t zero 0‚â§t t‚â§0+1 =
    isTrans<‚â°·µ£ _ _ _
    (PT.elim
    (Œª ich ‚Üí
       isProp<·µ£
        0
        (fromCauchySequence'‚ÇÅ (seqŒ£ (Œª k ‚Üí cosSeries k t)) ich)
        )
    (Œª ich ‚Üí
      (isTrans<‚â§·µ£ _ (rat [ 1 / 2 ]) _
          (dec‚Ñö<·µ£? {0} {[ 1 / 2 ]})
          (isTrans‚â°‚â§·µ£ _ _ _
            (sym (fromCauchySequence'-const _ _))

             (isTrans‚â§‚â°·µ£ _ _ _
              (fromCauchySequence'‚â§ (Œª _ ‚Üí rat [ 1 / 2 ])
                (isCauchySequence'-const _) _ _
                 Œª n ‚Üí
                  isTrans‚â§·µ£ _ _ _
                    (isTrans‚â§‚â°·µ£ _ _ _
                      (a‚â§b-c‚áíc‚â§b-a _ _ _
                       (isTrans‚â§‚â°·µ£ _ _ _
                        (isTrans‚â°‚â§·µ£ _ _ _
                         (sym (expSeq'‚â°expSeq _ _))
                         (invEq (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _)
                           (isTrans‚â§‚â°·µ£ _ 1 _
                            (^‚â§1 t 0‚â§t 2 t‚â§1)
                            (dec‚Ñö‚â°·µ£? {1} {[ pos (1 ‚Ñï.¬∑ 2 !) / 1 ]
                             ‚Ñö.¬∑ ([ pos 1 / 1 ] ‚Ñö.- [ 1 / 2 ])} ‚àô rat¬∑·µ£rat _ _))))
                        (sym (-·µ£-rat‚ÇÇ _ _))))
                      (sym (+IdL _)))
                    (isTrans‚â§‚â°·µ£ _ _ _
                      (seqŒ£-truncateNonNeg _ w 1 (suc n)
                       (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})))
                      (sym (seqŒ£‚àò¬∑2 _ _)) ))
             ((sym (snd (cauchySequenceFaster (seqŒ£ (Œª k ‚Üí cosSeries k t))
          (Œª n ‚Üí ((suc n) ‚Ñï.¬∑ 2) ,
           subst (‚Ñï._‚â§ ((suc n) ‚Ñï.¬∑ 2)) (¬∑-identity ≥ n)
            (
             ‚Ñï.‚â§monotone¬∑ (‚Ñï.‚â§-suc‚Ñï {n}) (‚Ñï.‚â§-suc‚Ñï {1}) 
            )) ich))))))
          ))
    (cos-ch t)) (sym (cosImpl _))

  where
  t‚â§1 = (isTrans‚â§‚â°·µ£ _ _ _ t‚â§0+1
                                ( (+IdL _) ‚àô cos0=1))
  w : (k : ‚Ñï) ‚Üí
      0 ‚â§·µ£ cosSeries (k ‚Ñï.¬∑ 2) t +·µ£ cosSeries (suc (k ‚Ñï.¬∑ 2)) t
  w k = isTrans‚â§‚â°·µ£ _ _ _
     (x‚â§y‚Üí0‚â§y-x _ _
         (invEq (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x _ _ _ _)
          (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
           (<·µ£Weaken‚â§·µ£ _ _
            (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä
       ([ pos (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2 !) / 1 ] ,
        ‚Ñö.<‚Üí0< [ pos (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2 !) / 1 ]
        (‚Ñö.<‚Ñ§‚Üí<‚Ñö 0 (pos (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2 !))
         (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos (suc 0) (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2 !)
          (‚Ñï.0<! (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2))))))))
            (0‚â§x^‚Åø t (suc (k ‚Ñï.¬∑ 2) ‚Ñï.¬∑ 2) 0‚â§t)
            ((‚â§‚Ñö‚Üí‚â§·µ£ _ _
             (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
              (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
               (‚Ñï.Monotone! (‚Ñï.‚â§SumRight {k = 2}))))))
                (^‚Åø-MonotoneR-inv t 0‚â§t t‚â§1 _ _
                  ((‚Ñï.‚â§SumRight {k ‚Ñï.¬∑ 2 ‚Ñï.¬∑ 2} {2}))))))
     (cong‚ÇÇ _+·µ£_
       (sym (-1‚Åø¬∑-¬∑2 k _) ‚àô cong (-1‚Åø¬∑ _) (expSeq'‚â°expSeq _ _))
       (cong -·µ£_ (sym (-1‚Åø¬∑-¬∑2 k _))  ‚àô sym (-1‚Åø¬∑-suc _ _) ‚àô cong (-1‚Åø¬∑ _) (expSeq'‚â°expSeq _ _)))
  
t<œÄ-seq‚Üí0<cos[t] t n@(suc n-1) 0‚â§t t‚â§ =
 fst (propTruncIdempotent‚âÉ (isProp<·µ£ _ _)) $ do
   let 0<cos[seq[n]]
          = (t<œÄ-seq‚Üí0<cos[t] (œÄ-seq n) n-1
               (<·µ£Weaken‚â§·µ£ _ _ (0<Œ∑-seq[n] n-1)) (‚â§·µ£-refl _))
   (Œµ‚Çä@(Œµ , 0<Œµ) , Œµ<œÄn) ‚Üê lower‚ÑöBound _ 0<cos[seq[n]]
     
   (Œ¥ , X) ‚Üê isContinuousCos (œÄ-seq n) Œµ‚Çä
   
   z ‚Üê Dichotomy‚Ñù' (œÄ-seq n)
          t ((œÄ-seq n) +·µ£ rat (fst Œ¥))
           ((isTrans‚â°<·µ£ _ _ _
              (sym (+IdR _))
                 (<·µ£-o+ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥)))))
   ‚äé.rec
     (Œª t<œÄn+1 ‚Üí
       do zz ‚Üê Dichotomy‚Ñù' (œÄ-seq n -·µ£ rat (fst Œ¥))
               t (œÄ-seq n) (isTrans<‚â°·µ£ _ _ _
                 (<·µ£-o+ _ _ _
                  (isTrans<‚â°·µ£ _ _ _
                   (-·µ£<·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥)))
                   (-·µ£-rat 0))) (+IdR _))
          ‚äé.rec
            (‚à£_‚à£‚ÇÅ ‚àò t<œÄ-seq‚Üí0<cos[t] t n-1 0‚â§t ‚àò <·µ£Weaken‚â§·µ£ _ _ )
            (Œª œÄn-Œ¥<t ‚Üí
              let zwz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                    (fst (‚àº‚âÉabs<Œµ _ _ _)
                     (X t (invEq (‚àº‚âÉabs<Œµ _ _ _)
                      (isTrans‚â°<·µ£ _ _ _
                       (abs-max _)
                       (max<-lem _ _ _
                        (a-b<c‚áía-c<b _ _ _ œÄn-Œ¥<t)
                        (isTrans‚â°<·µ£ _ _ _
                         (-[x-y]‚â°y-x _ _)
                         (a<c+b‚áía-c<b _ _ _ t<œÄn+1)))))))
              in ‚à£ isTrans<·µ£ _ _ _ (x<y‚Üí0<y-x _ _ Œµ<œÄn )
                   (a-b<c‚áía-c<b _ _ _ zwz) ‚à£‚ÇÅ)
            zz)
       (Œª œÄn<t ‚Üí
         return $ isTrans‚â°<·µ£ _ (-·µ£ (œÄ-seq (suc n) -·µ£ œÄ-seq n) +·µ£ cos (œÄ-seq n )) _
            (sym (ùêë'.+InvL' _ _ (sym (+·µ£Assoc _ _ _) ‚àô Lùêë.lem--05)))
            (isTrans<‚â°·µ£ _ _ _ (<·µ£-+o _ _ _ (-·µ£<·µ£ _ _
              (isTrans<‚â§·µ£ _ _ _

                (Integral'-< (œÄ-seq n) t (œÄn<t)
                  sin (const 1)  (cos (œÄ-seq (suc n-1)) -·µ£ cos t)
                    (t -·µ£ œÄ-seq (suc n-1) )  (Œª x _ ‚Üí sin‚â§1 x)
                    (IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval _ pre-uContSin _ _
                      (<·µ£Weaken‚â§·µ£ _ _ œÄn<t))
                    ‚à£ IsUContinuous‚Ñô-const _ 1 ‚à£‚ÇÅ
                  (‚à´sin (œÄ-seq n) t (<·µ£Weaken‚â§·µ£ _ _ œÄn<t))
                    (Integral'Const1 (œÄ-seq n) t (<·µ£Weaken‚â§·µ£ _ _ œÄn<t))
                   ((isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (0ÔºÉ‚à£cos‚à£‚Üí‚à£sin‚à£<1
                     (œÄ-seq (suc n-1))
                       (inl 0<cos[seq[n]]))))
                   )
                (‚â§·µ£-+o _ _ _
                  t‚â§))))
            (cong‚ÇÇ _+·µ£_ (-[x-y]‚â°y-x _ _) refl
             ‚àô ùêë'.minusPlus (cos t) (cos (œÄ-seq n )) )))
     z

0<Œ∑-seq[n] zero =
  isTrans<‚â°·µ£ _ _ _
   (dec‚Ñö<·µ£? {0} {1})
   (sym cos0=1 ‚àô sym (+IdL _))
0<Œ∑-seq[n] (suc n) =
 isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat 0 0))
  (<·µ£Monotone+·µ£ _ _ _ _
    (0<Œ∑-seq[n] n)
     (t<œÄ-seq‚Üí0<cos[t] (œÄ-seq n +·µ£ cos (œÄ-seq n)) n
      (<·µ£Weaken‚â§·µ£ _ _ (0<Œ∑-seq[n] n)) (‚â§·µ£-refl _)))

œÄ-seq-incr : ‚àÄ n ‚Üí œÄ-seq n <·µ£ œÄ-seq (suc n) 
œÄ-seq-incr zero = 0<Œ∑-seq[n] zero
œÄ-seq-incr (suc n) =
  isTrans‚â°<·µ£ _ _ _
    (sym (+IdR _))
     (<·µ£-o+ 0 _ (œÄ-seq (suc n))
      (t<œÄ-seq‚Üí0<cos[t] (œÄ-seq n +·µ£ cos (œÄ-seq n)) n
      (<·µ£Weaken‚â§·µ£ _ _ (0<Œ∑-seq[n] n)) (‚â§·µ£-refl _)))

œÄ-seq-monotoneStrict : ‚àÄ m n ‚Üí m ‚Ñï.< n ‚Üí œÄ-seq m <·µ£ œÄ-seq n 
œÄ-seq-monotoneStrict m n (zero , p) =
  isTrans<‚â°·µ£ _ _ _
   (œÄ-seq-incr m)
   (cong œÄ-seq p)
œÄ-seq-monotoneStrict m zero m<0 = ‚ä•.rec (‚Ñï.¬¨-<-zero m<0)
œÄ-seq-monotoneStrict m (suc n) (suc k , p) = 
  isTrans<·µ£ _ _ _
    (œÄ-seq-monotoneStrict m n (k , ‚Ñï.injSuc p))
     (œÄ-seq-incr n)

œÄ-seq-monotone : ‚àÄ m n ‚Üí m ‚Ñï.‚â§ n ‚Üí œÄ-seq m ‚â§·µ£ œÄ-seq n 
œÄ-seq-monotone m n =
    ‚äé.rec
      (<·µ£Weaken‚â§·µ£ _ _ ‚àò œÄ-seq-monotoneStrict m n)
      (‚â°·µ£Weaken‚â§·µ£ _ _ ‚àò cong œÄ-seq)
  ‚àò ‚Ñï.‚â§-split


‚â§·µ£‚Üí‚âØ·µ£ : ‚àÄ x y ‚Üí  x ‚â§·µ£ y ‚Üí (y <·µ£ x) ‚Üí ‚ä•
‚â§·µ£‚Üí‚âØ·µ£ x y x‚â§y y<x = 
 let x=y = isAntisym‚â§·µ£ x y x‚â§y (<·µ£Weaken‚â§·µ£ _ _ y<x)
 in isAsym<·µ£ y x y<x (subst2 _<·µ£_ (sym x=y) x=y y<x)

œÄ-seq1=1 : œÄ-seq 1 ‚â° 1
œÄ-seq1=1 = (+IdL _) ‚àô cos0=1

sin[1]‚â§sin[t] : ‚àÄ t n ‚Üí  1 <·µ£ t ‚Üí t ‚â§·µ£ (œÄ-seq (suc n))
       ‚Üí sin 1 ‚â§·µ£ sin t
sin[1]‚â§sin[t] t zero x x‚ÇÅ = ‚ä•.rec (‚â§·µ£‚Üí‚âØ·µ£ _ _ x‚ÇÅ
  (isTrans‚â°<·µ£ _ _ _ œÄ-seq1=1 x))
sin[1]‚â§sin[t] t n@(suc n') 1<t t‚â§œÄ-seq-sn = 
  x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí fst (propTruncIdempotent‚âÉ (isProp<·µ£ _ _)) $ do
    cosC ‚Üê IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval cos pre-uContCos 1 t (<·µ£Weaken‚â§·µ£ _ _ 1<t)
    ((ùíï , ùíï‚àà) , T) ‚Üê meanValue 1 t 1<t
            (‚â§·µ£-refl 1 , <·µ£Weaken‚â§·µ£ _ _ 1<t)
            (<·µ£Weaken‚â§·µ£ _ _ 1<t , ‚â§·µ£-refl t)
            (Œª x _ ‚Üí sin x)
            (Œª x _ ‚Üí cos x)
            cosC
            (sin'=cos-uder' 1 t 1<t)
            Œµ

    ‚à£ isTrans<‚â°·µ£
       (sin 1)
       (rat (fst Œµ) +·µ£ sin t)
       (sin t +·µ£ rat (fst Œµ))
       (a-b<c‚áía<c+b
         (sin 1)
         (sin t)
         (rat (fst Œµ))
         (isTrans‚â§<·µ£ _ _ _
         (isTrans‚â§·µ£ _ _ _
          (isTrans‚â°‚â§·µ£ _ _ _
            (sym (+IdL _))
            (‚â§·µ£-+o _ _ _
              (<·µ£Weaken‚â§·µ£ _ _
               (snd ((_ ,
                 t<œÄ-seq‚Üí0<cos[t] ùíï n
                   (isTrans‚â§·µ£ _ _ _ (dec‚Ñö‚â§·µ£? {0} {1}) (fst ùíï‚àà))
                   (isTrans‚â§·µ£ _ _ _ (snd ùíï‚àà) t‚â§œÄ-seq-sn) )
                  ‚Çä¬∑·µ£ (_ , (x<y‚Üí0<y-x _ _ 1<t)))))))
           (isTrans‚â§‚â°·µ£ _ _ _
             (‚â§abs·µ£ _)
             (cong abs·µ£ (+·µ£Assoc _ _ _) ‚àô minusComm-abs·µ£ _ _ ‚àô cong abs·µ£
               (cong‚ÇÇ _+·µ£_ refl (-·µ£Distr _ _ ‚àô +·µ£Comm _ _)
                 ‚àô +·µ£Assoc _ _ _ )))) T))
        (+·µ£Comm _ _) ‚à£‚ÇÅ


œÄ-seq-dist : ‚àÄ n ‚Üí œÄ-seq (suc (suc (suc (suc n)))) -·µ£ œÄ-seq (suc (suc (suc n)))
                   ‚â§·µ£ (1 -·µ£ sin 1) ¬∑·µ£ (œÄ-seq (suc (suc (suc n))) -·µ£ œÄ-seq (suc (suc n)))
œÄ-seq-dist n' =
 x<y+Œ¥‚Üíx‚â§y _ _
   Œª Œµ ‚Üí
     fst (propTruncIdempotent‚âÉ (isProp<·µ£ _ _)) $ do
      sinC ‚Üê IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval sin pre-uContSin
           (œÄ-seq n) (œÄ-seq (suc n)) (<·µ£Weaken‚â§·µ£ _ _ (œÄ-seq-incr n))
      ((t , t‚àà) , T) ‚Üê meanValue (œÄ-seq n) (œÄ-seq (suc n)) (œÄ-seq-incr n)
         (‚â§·µ£-refl _ , œÄ-seq-monotone n (suc n) ‚Ñï.‚â§-suc‚Ñï)
         (œÄ-seq-monotone n (suc n) ‚Ñï.‚â§-suc‚Ñï , ‚â§·µ£-refl _)
          (Œª x _ ‚Üí cos x) (Œª x _ ‚Üí -·µ£ sin x)
         (IsUContinuous‚Ñô-·µ£‚àò _ (Œª x _ ‚Üí sin x) sinC)
         (cos'=-sin-uder' (œÄ-seq n) (œÄ-seq (suc n)) (œÄ-seq-incr n)) Œµ
      let zz =
             isTrans<‚â°·µ£ _ _ _
               (a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (isTrans‚â°<·µ£ _ _ _
             (cong abs·µ£
              (cong‚ÇÇ _-·µ£_ (Lùêë.lem--041 ‚àô +·µ£Comm _ _) (
               (¬∑DistR+ _ _ _
                ‚àô cong‚ÇÇ _+·µ£_  (¬∑IdL _) refl) ‚àô +·µ£Comm _ _)
                ‚àô Lùêë.lem--075))
             T))) (+·µ£Comm _ _)
      ‚à£ isTrans<‚â§·µ£ _ _ _ zz
        (‚â§·µ£-+o _ _ (rat (fst Œµ))
          (‚â§·µ£-¬∑·µ£o
               (rat [ pos 1 / 1+ 0 ] +·µ£ -·µ£ sin t)
               (rat [ pos 1 / 1+ 0 ] -·µ£ sin 1)
              (œÄ-seq (suc n) -·µ£ œÄ-seq n)
               (x‚â§y‚Üí0‚â§y-x _ _
                 (<·µ£Weaken‚â§·µ£ _ _ (œÄ-seq-incr n)))
                  (‚â§·µ£-o+ _ _ 1
                    (-·µ£‚â§·µ£ _ _
                      (sin[1]‚â§sin[t] t (suc (suc n'))
                        (isTrans<‚â§·µ£ _ _ _ (
                          isTrans‚â°<·µ£ _ _ _
                           (sym ((+IdL _) ‚àô cos0=1))
                            (œÄ-seq-monotoneStrict 1 n
                             (‚Ñï.suc-‚â§-suc (‚Ñï.zero-<-suc {n'}))))
                            (fst t‚àà)) (snd t‚àà))
                       )))
          ) ‚à£‚ÇÅ

 where
 n = suc (suc n')


0<sin1 : 0 <·µ£ sin 1
0<sin1 = isTrans<‚â°·µ£ _ _ _ 
       (Integral'-< 0 1 (dec‚Ñö<·µ£? {0} {1}) (Œª _ ‚Üí 0) cos
         0 (sin 1 -·µ£ sin 0)  (Œª x x‚àà ‚Üí <·µ£Weaken‚â§·µ£ _ _
            (t<œÄ-seq‚Üí0<cos[t] x 0 (fst x‚àà)
               (isTrans‚â§‚â°·µ£ _ _ _ (snd x‚àà) (sym œÄ-seq1=1))))
                 ‚à£ IsUContinuous‚Ñô-const _ 0 ‚à£‚ÇÅ
                 (IsUContinuous‚Ñô-from‚àÄ‚Ñöinterval cos pre-uContCos 0 1
                  (dec‚Ñö‚â§·µ£? {0} {1}))
           (Integral'Const0 0 1 (dec‚Ñö‚â§·µ£? {0} {1}))
           ((invEq (clamp·µ£-IntegralOf 0 1 (dec‚Ñö‚â§·µ£? {0} {1}) cos (sin 1 -·µ£ sin 0))
             (‚à´cos 0 1 (dec‚Ñö‚â§·µ£? {0} {1}))))
           (isTrans<‚â°·µ£ _ _ _ (dec‚Ñö<·µ£? {0} {1})
             (sym cos0=1))) (ùêë'.+IdR' _ _ (cong -·µ£_ sin0=0 ‚àô -·µ£-rat 0))
 

œÄ-seq-dist‚Åø : ‚àÄ n m ‚Üí œÄ-seq (suc (suc (suc (m ‚Ñï.+ n))))
                      -·µ£ œÄ-seq (suc (suc (m ‚Ñï.+ n)))
                   ‚â§·µ£ (1 -·µ£ sin 1) ^‚Åø m ¬∑·µ£
                     (œÄ-seq (suc (suc (suc n))) -·µ£ œÄ-seq (suc (suc n)))
œÄ-seq-dist‚Åø n zero = ‚â°·µ£Weaken‚â§·µ£ _ _ (sym (¬∑IdL _))
œÄ-seq-dist‚Åø n (suc m) = 
  isTrans‚â§·µ£ _ _ _
   (œÄ-seq-dist (m ‚Ñï.+ n))
   (isTrans‚â§‚â°·µ£ _ _ _
     (‚â§·µ£-o¬∑·µ£ _ _ (1 -·µ£ sin 1)
     (x‚â§y‚Üí0‚â§y-x _ _ (sin‚â§1 _))
     (œÄ-seq-dist‚Åø n m))
     ( (¬∑·µ£Assoc _ _ _) ‚àô cong‚ÇÇ _¬∑·µ£_ (¬∑·µ£Comm _ _) refl))

isConvSeriesŒ£œÄ-seq-diffs : ‚à• (IsConvSeries'
  Œª n ‚Üí (œÄ-seq (suc n) -·µ£ œÄ-seq n)) ‚à•‚ÇÅ
isConvSeriesŒ£œÄ-seq-diffs =
 PT.map 
  (Œª (Œ∑ , 1-sin1<Œ∑ , Œ∑<1) ‚Üí
    ratioTest‚Çä‚â§ (Œª n ‚Üí œÄ-seq (suc n) -·µ£ œÄ-seq n)
       (1 , (Œª n ‚Üí isTrans‚â°‚â§·µ£ _ _ _
          (cong abs·µ£ Lùêë.lem--063)
          (‚à£cos‚à£‚â§1 (œÄ-seq n))))
       (Œ∑ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _
        (x‚â§y‚Üí0‚â§y-x _ _ (sin‚â§1 _))
        1-sin1<Œ∑)
         )) (<·µ£‚Üí<‚Ñö _ _ Œ∑<1)
      (Œª n ‚Üí (x<y‚Üí0<y-x _ _ (œÄ-seq-incr n)))
      
      (1 , Œª n 3<n ‚Üí isTrans‚â§<·µ£ _ _ _
          (zz n 3<n)
           1-sin1<Œ∑))
   (dense‚Ñöin‚Ñù (1 -·µ£ sin 1) 1
     (isTrans<‚â°·µ£ _ _ _
       (<·µ£-o+ _ _ _ (-·µ£<·µ£ _ _ 0<sin1))
      (cong‚ÇÇ _+·µ£_ refl (-·µ£-rat 0) ‚àô +IdR 1)))
  where
  zz :  (n : ‚Ñï) ‚Üí
         1 ‚Ñï.< n ‚Üí
         abs·µ£ ((œÄ-seq (suc (suc n)) -·µ£ œÄ-seq (suc n)) Ôºè·µ£[
          œÄ-seq (suc n) -·µ£ œÄ-seq n , inl
            (x<y‚Üí0<y-x _ _ (œÄ-seq-incr n)) ])
            ‚â§·µ£ 1 -·µ£ sin 1
  zz zero x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
  zz (suc zero) x = ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred x ))
  zz (suc (suc n)) _ =
    isTrans‚â°‚â§·µ£ _ _ _
      (cong abs·µ£ (cong‚ÇÇ _¬∑·µ£_ refl
          (sym (inv‚Ñù‚Çä‚â°inv‚Ñù (_ ,
           (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc n))))) _)) )
        ‚àô abs·µ£Pos _ (snd
          ((_ , (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc (suc n))))))
            ‚Çä¬∑·µ£ inv‚Ñù‚Çä (_ , (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc n))))))))
      (invEq (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _)
        (isTrans‚â§‚â°·µ£ _ _ _
         (œÄ-seq-dist n)
         (¬∑·µ£Comm _ _)))
         

œÄ-seq-cauchy : ‚à• IsCauchySequence' œÄ-seq ‚à•‚ÇÅ
œÄ-seq-cauchy = PT.map (Œª X ‚Üí subst IsCauchySequence'
  (sym (funExt œÄ-seq‚â°Œ£diffs)) 
  (fst (IsConvSeries'‚âÉIsCauchySequence'Sum
    (Œª n ‚Üí œÄ-seq (suc n) -·µ£ œÄ-seq n)) X)) isConvSeriesŒ£œÄ-seq-diffs


opaque
 œÄ-number/2 : ‚Ñù
 œÄ-number/2 = fromCauchySequence'‚ÇÅ œÄ-seq œÄ-seq-cauchy

 œÄ-seq-lim : ‚à• lim'‚Çô‚Üí‚àû œÄ-seq is œÄ-number/2  ‚à•‚ÇÅ
 œÄ-seq-lim = do
  ics ‚Üê œÄ-seq-cauchy
  ‚à£ subst (lim'‚Çô‚Üí‚àû œÄ-seq is_)
    (fromCauchySequence'‚ÇÅ-‚â°-lem _ ‚à£ ics ‚à£‚ÇÅ œÄ-seq-cauchy)
     (fromCauchySequence'-lim _ ics) ‚à£‚ÇÅ  

œÄ-number : ‚Ñù
œÄ-number = 2 ¬∑·µ£ œÄ-number/2


Lipschitz-cos : Lipschitz-‚Ñù‚Üí‚Ñù 1 cos
Lipschitz-cos u v Œµ x =
  invEq (‚àº‚âÉabs<Œµ _ _ _)
    ((isTrans‚â§<·µ£ _ _ _ (cosDiffBound u v)
       
        (fst (‚àº‚âÉabs<Œµ _ _ (1 ‚Ñö‚Çä¬∑ Œµ)) (subst‚àº (sym (‚Ñö.¬∑IdL _)) x))))

Lipschitz-sin : Lipschitz-‚Ñù‚Üí‚Ñù 1 sin
Lipschitz-sin u v Œµ x =
  invEq (‚àº‚âÉabs<Œµ _ _ _)
    ((isTrans‚â§<·µ£ _ _ _ (sinDiffBound u v)
       
        (fst (‚àº‚âÉabs<Œµ _ _ (1 ‚Ñö‚Çä¬∑ Œµ)) (subst‚àº (sym (‚Ñö.¬∑IdL _)) x))))


0‚â§Œ∑-seq[n] : ‚àÄ n ‚Üí 0 ‚â§·µ£ œÄ-seq n
0‚â§Œ∑-seq[n] zero = ‚â§·µ£-refl 0
0‚â§Œ∑-seq[n] (suc n) = <·µ£Weaken‚â§·µ£ _ _  (0<Œ∑-seq[n] n)

opaque
 unfolding œÄ-number/2

 1<œÄ-number/2 : 1 <·µ£ œÄ-number/2
 1<œÄ-number/2 = isTrans<‚â§·µ£ _ (œÄ-seq 2) _
   (isTrans‚â°<·µ£ _ _ _ (sym (cos0=1) ‚àô sym (+IdL _))
    (œÄ-seq-incr 1)) 

  (isTrans‚â§‚â°·µ£ _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _ (sym (fromCauchySequence'-const (œÄ-seq 2) _ ) )
    (fromCauchySequence'‚ÇÅ‚â§ (Œª _ ‚Üí (œÄ-seq 2)) (œÄ-seq ‚àò suc ‚àò suc) 
      ‚à£ isCauchySequence'-const (œÄ-seq 2) ‚à£‚ÇÅ
         (PT.map (Œª x ‚Üí fst (cauchySequenceFaster
           œÄ-seq (Œª k ‚Üí suc (suc k) , ‚Ñï.‚â§-+k {0} {2} {k} (‚Ñï.‚â§-solver 0 2)) x))
            œÄ-seq-cauchy)
        Œª n ‚Üí œÄ-seq-monotone 2 (suc (suc n))
         (‚Ñï.‚â§-k+ {0} {n} {2} (‚Ñï.zero-‚â§ {n}))))
         (sym (fromCauchySequence'‚ÇÅ-‚àò+ œÄ-seq 2 _ _)))


 0<œÄ-number/2 : 0 <·µ£ œÄ-number/2
 0<œÄ-number/2 = isTrans<·µ£ _ _ _ (dec‚Ñö<·µ£? {0} {1}) 1<œÄ-number/2

œÄ-number/2‚Çä : ‚Ñù‚Çä
œÄ-number/2‚Çä = œÄ-number/2 , 0<œÄ-number/2

œÄ-number‚Çä : ‚Ñù‚Çä
œÄ-number‚Çä = 2 ‚Çä¬∑·µ£ (_ , 0<œÄ-number/2)

0<cos-œÄ-seq : ‚àÄ n ‚Üí 0 <·µ£ cos (œÄ-seq n)
0<cos-œÄ-seq n = t<œÄ-seq‚Üí0<cos[t] (œÄ-seq n) n (0‚â§Œ∑-seq[n] n)
  (<·µ£Weaken‚â§·µ£ _ _ (œÄ-seq-incr n))


x¬≤‚â°0‚Üíx‚â°0 : ‚àÄ x ‚Üí x ¬∑·µ£ x ‚â° 0 ‚Üí x ‚â° 0
x¬≤‚â°0‚Üíx‚â°0 x x¬≤=0 =
 fst (‚àº‚âÉ‚â° _ _) 
  (Œª Œµ ‚Üí
    invEq (‚àº‚âÉabs<Œµ _ _ _)
     (isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (cong‚ÇÇ _+·µ£_ refl (-·µ£-rat 0) ‚àô
         +IdR _ ))
         let uu = isTrans<‚â°·µ£ _ _ _
                     (isTrans‚â°<·µ£ _ _ _ (sym (¬∑abs·µ£ _ _)
                    ‚àô cong abs·µ£ (sym (cong‚ÇÇ _+·µ£_ refl (-·µ£-rat 0) ‚àô
                   +IdR _ ))) (fst ((‚àº‚âÉabs<Œµ _ _ _)) ((invEq (‚àº‚âÉ‚â° _ _) x¬≤=0)
                   (Œµ ‚Ñö‚Çä¬∑ Œµ))))
                   (rat¬∑·µ£rat _ _)
         in PT.rec (isProp<·µ£ _ _)
             (‚äé.rec (idfun _)
              Œª Œµ/2<x ‚Üí ‚ä•.rec
                let zz = (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                           (<·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ))))
                           (<·µ£Weaken‚â§·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ))))
                            Œµ/2<x Œµ/2<x)
                 in isAsym<·µ£ 0
                     ((rat (fst (/2‚Çä Œµ))) ¬∑·µ£
                       (rat (fst (/2‚Çä Œµ))))
                        ((snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ) ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ))))
                         (isTrans<‚â°·µ£ _ _ _ zz
                           (sym (¬∑abs·µ£ _ _) ‚àô cong abs·µ£ x¬≤=0 ‚àô
                            abs·µ£0)))
             (Dichotomy‚Ñù' (rat (fst (/2‚Çä Œµ))) (abs·µ£ x)
               (rat (fst Œµ))
               (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œµ)))))
    
opaque
 unfolding œÄ-number/2
 cos[œÄ/2]‚â°0 : cos œÄ-number/2 ‚â° 0
 cos[œÄ/2]‚â°0 =
   PT.rec (isSet‚Ñù _ _)
   (Œª (Œ∑ , 1-sin1<Œ∑ , Œ∑<1) ‚Üí
     snd (map-fromCauchySequence'‚ÇÅ 1
      œÄ-seq œÄ-seq-cauchy cos Lipschitz-cos) ‚àô
       fromCauchySequence'‚ÇÅ‚â° (cos ‚àò œÄ-seq)
        _ 0
         Œª Œµ ‚Üí
           let zwz = lim0FromRatioBound (cos ‚àò œÄ-seq)
                      (Œ∑ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _
                       (x‚â§y‚Üí0‚â§y-x _ _ (sin‚â§1 _))
                       1-sin1<Œ∑)
                        ))
                      (<·µ£‚Üí<‚Ñö _ _ Œ∑<1) (1 , (Œª _ ‚Üí ‚à£cos‚à£‚â§1 _))
                      (inl ‚àò 0<cos-œÄ-seq) 1
                       (Œª n x ‚Üí isTrans‚â§<·µ£ _ _ _
                         (isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£
                           (cong‚ÇÇ _¬∑·µ£_ (sym Lùêë.lem--063)
                            (cong (uncurry inv‚Ñù)
                              (Œ£‚â°Prop (isPropÔºÉ 0)
                               (sym Lùêë.lem--063))))) (zz n x))
                         1-sin1<Œ∑)
                       Œµ
            in ‚à£ zwz ‚à£‚ÇÅ)
    (dense‚Ñöin‚Ñù (1 -·µ£ sin 1) 1
      (isTrans<‚â°·µ£ _ _ _
        (<·µ£-o+ _ _ _ (-·µ£<·µ£ _ _ 0<sin1))
       (cong‚ÇÇ _+·µ£_ refl (-·µ£-rat 0) ‚àô +IdR 1)))


  where


  zz :  (n : ‚Ñï) ‚Üí
         1 ‚Ñï.< n ‚Üí
         abs·µ£ ((œÄ-seq (suc (suc n)) -·µ£ œÄ-seq (suc n)) Ôºè·µ£[
          œÄ-seq (suc n) -·µ£ œÄ-seq n , inl
            (x<y‚Üí0<y-x _ _ (œÄ-seq-incr n)) ])
            ‚â§·µ£ 1 -·µ£ sin 1
  zz zero x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
  zz (suc zero) x = ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred x ))
  zz (suc (suc n)) _ =
    isTrans‚â°‚â§·µ£ _ _ _
      (cong abs·µ£ (cong‚ÇÇ _¬∑·µ£_ refl
          (sym (inv‚Ñù‚Çä‚â°inv‚Ñù (_ ,
           (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc n))))) _)) )
        ‚àô abs·µ£Pos _ (snd
          ((_ , (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc (suc n))))))
            ‚Çä¬∑·µ£ inv‚Ñù‚Çä (_ , (x<y‚Üí0<y-x _ _ (œÄ-seq-incr (suc (suc n))))))))
      (invEq (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _)
        (isTrans‚â§‚â°·µ£ _ _ _
         (œÄ-seq-dist n)
         (¬∑·µ£Comm _ _)))

œÄ-num : ‚Ñù
œÄ-num = 2 ¬∑·µ£ œÄ-number/2

uContSin : ‚àÄ P ‚Üí IsUContinuous‚Ñô P (Œª x‚ÇÅ _ ‚Üí sin x‚ÇÅ)
uContSin = Lipschitz-‚Ñù‚Üí‚Ñù‚ÜíIsUContinuous‚Ñô _ _  Lipschitz-sin

uContCos : ‚àÄ P ‚Üí IsUContinuous‚Ñô P (Œª x‚ÇÅ _ ‚Üí cos x‚ÇÅ)
uContCos = Lipschitz-‚Ñù‚Üí‚Ñù‚ÜíIsUContinuous‚Ñô _ _ Lipschitz-cos


0‚â§x<œÄ/2‚Üí0<cos[x] : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí x <·µ£ œÄ-number/2 ‚Üí 0 <·µ£ cos x
0‚â§x<œÄ/2‚Üí0<cos[x] x 0‚â§x x<œÄ/2 =
  PT.rec2 (isProp<·µ£ _ _)
    (Œª (Œµ , 0<Œµ , Œµ<) ics ‚Üí
     let NN = ics (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ))  -- ics 
         z = snd NN (suc (fst NN)) (‚Ñï.‚â§-refl {suc (fst NN)})
         zz = <-o+-cancel _ _ _ $ isTrans‚â§<·µ£ _ _ _
          (isTrans‚â§‚â°·µ£ _ _ _
           (‚â§abs·µ£ _)
           (minusComm-abs·µ£ _ _))
          (isTrans<·µ£ _ _ _ z Œµ<)
     in t<œÄ-seq‚Üí0<cos[t] x (fst NN) 0‚â§x
        (<·µ£Weaken‚â§·µ£ _ _ (<·µ£-·µ£ _ _ zz)))
    (dense‚Ñöin‚Ñù 0 _ (x<y‚Üí0<y-x _ _ x<œÄ/2) )
    œÄ-seq-lim
    
x‚â§œÄ/2‚Üí0‚â§cos[x] : ‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 œÄ-number/2 ‚Üí 0 ‚â§·µ£ cos x
x‚â§œÄ/2‚Üí0‚â§cos[x] x x‚àà = 
 isTrans‚â§‚â°·µ£ _ _ _
   (z (x ¬∑·µ£ fst (inv‚Ñù‚Çä (_ , 0<œÄ-number/2))))
   (cong cos (cong (clamp·µ£ 0 _) ([x/‚Çäy]¬∑y·µ£ _ _) ‚àô
    sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° 0 œÄ-number/2 x x‚àà)))
  

  where
  z : (x : ‚Ñù) ‚Üí
       0 ‚â§·µ£ _
  z = ‚â§Cont (IsContinuousConst 0)
        (IsContinuous‚àò _ _
         isContinuousCos 
         (IsContinuous‚àò _ _
           (IsContinuousClamp 0 (œÄ-number/2))
           (IsContinuous¬∑·µ£R (œÄ-number/2))))
           
             (‚Ñö.byTrichotomy 1 w )
    where
    w : ‚Ñö.TrichotomyRec 1
         (Œª q ‚Üí 0 ‚â§·µ£ cos _)
    w .‚Ñö.TrichotomyRec.lt-case m m<1 =
     let ww = max<-lem _ _ _  0<œÄ-number/2
             (isTrans<‚â°·µ£ _ _ _ 
           (
             (<·µ£-¬∑·µ£o (rat m) 1 (_ , 0<œÄ-number/2) (<‚Ñö‚Üí<·µ£ _ _ m<1)))
             (¬∑IdL _))

     in <·µ£Weaken‚â§·µ£ _ _ (0‚â§x<œÄ/2‚Üí0<cos[x]
         (clamp·µ£ 0 œÄ-number/2 (rat m ¬∑·µ£ œÄ-number/2))
        (‚â§clamp·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ 0 œÄ-number/2 0<œÄ-number/2))
         (isTrans‚â°<·µ£ _ (max·µ£ 0 ((rat m ¬∑·µ£ œÄ-number/2))) _
         (‚â§‚Üímin·µ£ _ _ (<·µ£Weaken‚â§·µ£ _ _ ww))
         ww)) 
    w .‚Ñö.TrichotomyRec.eq-case =
      ‚â°·µ£Weaken‚â§·µ£ _ _ (sym cos[œÄ/2]‚â°0 ‚àô
       cong cos (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° 0 œÄ-number/2 œÄ-number/2
         (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2 , ‚â§·µ£-refl _)
         ‚àô cong (clamp·µ£ 0 œÄ-number/2) (sym (¬∑IdL _))))
    w .‚Ñö.TrichotomyRec.gt-case m 1<m =
      ‚â°·µ£Weaken‚â§·µ£ _ _
       ((sym cos[œÄ/2]‚â°0 ‚àô
        cong cos (sym ((‚â§x‚Üíclamp·µ£‚â° 0 œÄ-number/2 (rat m ¬∑·µ£ œÄ-number/2)
         ((<·µ£Weaken‚â§·µ£ 0 œÄ-number/2 0<œÄ-number/2))
          (isTrans‚â°‚â§·µ£ _ _ _ (sym (¬∑IdL _))
           (<·µ£Weaken‚â§·µ£ _ _
             (<·µ£-¬∑·µ£o 1 (rat m) (_ , 0<œÄ-number/2) (<‚Ñö‚Üí<·µ£ _ _ 1<m)))))) ) ))



module sin-cos-of-sum where

 module _ (b : ‚Ñù) where
  g h g' h' : ‚Ñù ‚Üí ‚Ñù
  g a = sin (a  +·µ£ b) -·µ£ (sin a ¬∑·µ£ cos b +·µ£ cos a ¬∑·µ£ sin b)

  

  h a = cos (a +·µ£ b) -·µ£ (cos a ¬∑·µ£ cos b -·µ£ sin a ¬∑·µ£ sin b)

  g' a = h a
  h' a = -·µ£ (g a)


  module _ (aQ bQ : ‚Ñù) (a<b : aQ <·µ£ bQ) where


   gBd : Bounded (interval‚Ñô aQ bQ) (Œª x _ ‚Üí g x)
   gBd = (bounded-·µ£ _ _ _ (1 , Œª x _ ‚Üí ‚à£sin‚à£‚â§1 (x +·µ£ b))
                      (bounded-+ _ _ _
                        (bounded-¬∑ _ _ _ (bounded-sin _)
                          (1 , Œª _ _ ‚Üí ‚à£cos‚à£‚â§1 b))
                        (bounded-¬∑ _ _ _ (bounded-cos _)
                          (1 , Œª _ _ ‚Üí ‚à£sin‚à£‚â§1 b))))

   hBd : Bounded (interval‚Ñô aQ bQ) (Œª x _ ‚Üí h x)
   hBd = bounded-·µ£ _ _ _
          ((1 , Œª x _ ‚Üí ‚à£cos‚à£‚â§1 (x +·µ£ b)))
          (bounded-·µ£ _ _ _
            (bounded-¬∑ _ _ _ (bounded-cos _) (1 , Œª _ _ ‚Üí ‚à£cos‚à£‚â§1 b))
            (bounded-¬∑ _ _ _ (bounded-sin _) (1 , Œª _ _ ‚Üí ‚à£sin‚à£‚â§1 b)))


   gC : IsUContinuous‚Ñô (interval‚Ñô aQ bQ) (Œª x _ ‚Üí g x)
   gC = IsUContinuous‚Ñô+·µ£‚ÇÇ _ _ _
         (IsUContinuous‚Ñô-transl _ b _ (uContSin _))
         (IsUContinuous‚Ñô-·µ£‚àò _ _
           (IsUContinuous‚Ñô+·µ£‚ÇÇ _ _ _
             (IsUContinuous‚Ñô¬∑·µ£‚ÇÇ _ _ _
               (bounded-sin _)
               (1 , Œª _ _ ‚Üí ‚à£cos‚à£‚â§1 b)
               (uContSin _)
               (IsUContinuous‚Ñô-const _ _))
             (IsUContinuous‚Ñô¬∑·µ£‚ÇÇ _ _ _
               (bounded-cos _)
               (1 , Œª _ _ ‚Üí ‚à£sin‚à£‚â§1 b)
               (uContCos _)
               (IsUContinuous‚Ñô-const _ _))))
   
   hC : IsUContinuous‚Ñô (interval‚Ñô aQ bQ) (Œª x _ ‚Üí h x)
   hC = IsUContinuous‚Ñô+·µ£‚ÇÇ _ _ _
           (IsUContinuous‚Ñô-transl _ b _ (uContCos _))
           (IsUContinuous‚Ñô-·µ£‚àò _ _
            (IsUContinuous‚Ñô+·µ£‚ÇÇ _ _ _
              ((IsUContinuous‚Ñô¬∑·µ£‚ÇÇ _ _ _
               (bounded-cos _)
               (1 , Œª _ _ ‚Üí ‚à£cos‚à£‚â§1 b)
               (uContCos _)
               (IsUContinuous‚Ñô-const _ _)))
              (IsUContinuous‚Ñô-·µ£‚àò _ _(IsUContinuous‚Ñô¬∑·µ£‚ÇÇ _ _ _
               (bounded-sin _)
               (1 , Œª _ _ ‚Üí ‚à£sin‚à£‚â§1 b)
               (uContSin _)
               (IsUContinuous‚Ñô-const _ _)))))


   P = (interval‚Ñô (aQ) (bQ))
   gD : uDerivativeOf‚Ñô P ,
          (Œª x _ ‚Üí g x) is (Œª x _ ‚Üí g' x)
   gD = -uDerivative‚Ñô _ _ _ _ _
         (uDerivativeOf‚Ñô-restr _ P
           _ _ (Œª x (‚â§x , x‚â§) ‚Üí ‚â§·µ£-+o _ _ _ ‚â§x , ‚â§·µ£-+o _ _ _ x‚â§)
           ((uDerivativeOf‚Ñô-transl
              (interval‚Ñô (aQ +·µ£ b) (bQ +·µ£ b)) _ _ b
               (sin'=cos-uder' _ _ (<·µ£-+o _ _ _ a<b))))
           )
          (+uDerivative‚Ñô _ _ _ _ _
            (¬∑CuDerivative‚Ñô _ _ _ _ (sin'=cos-uder' _ _ a<b))
              ((subst
               (uDerivativeOf‚Ñô interval‚Ñô (aQ) (bQ) ,
                 (Œª r _ ‚Üí cos r ¬∑·µ£ sin b) is_)
            (funExt‚ÇÇ Œª _ _ ‚Üí -·µ£¬∑ _ _)
             (¬∑CuDerivative‚Ñô _ _ _ _ (cos'=-sin-uder' _ _ a<b))))) 

   hD : uDerivativeOf‚Ñô (interval‚Ñô (aQ) (bQ)) ,
          (Œª x _ ‚Üí h x) is (Œª x _ ‚Üí h' x)
   hD = subst (uDerivativeOf‚Ñô (interval‚Ñô (aQ) (bQ)) ,
          (Œª x _ ‚Üí h x) is_)
           (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£Distr _ _))
           (-uDerivative‚Ñô _ _ _ _ _
            ((uDerivativeOf‚Ñô-restr _ P
           _ _ (Œª x (‚â§x , x‚â§) ‚Üí ‚â§·µ£-+o _ _ _ ‚â§x , ‚â§·µ£-+o _ _ _ x‚â§)
           ((uDerivativeOf‚Ñô-transl
              (interval‚Ñô (aQ +·µ£ b) (bQ +·µ£ b)) _ _ b
               (cos'=-sin-uder' _ _ (<·µ£-+o _ _ _ a<b))))
           ))
           
             (subst (uDerivativeOf‚Ñô interval‚Ñô (aQ) (bQ) ,
           (Œª r _ ‚Üí cos r ¬∑·µ£ cos b -·µ£ sin r ¬∑·µ£ sin b) is_)
           (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£Distr _ _))
           (-uDerivative‚Ñô _ _ _ _ _
             (subst
               (uDerivativeOf‚Ñô interval‚Ñô (aQ) (bQ) ,
                 (Œª r _ ‚Üí cos r ¬∑·µ£ cos b) is_)
            (funExt‚ÇÇ Œª _ _ ‚Üí -·µ£¬∑ _ _)
             (¬∑CuDerivative‚Ñô _ _ _ _ (cos'=-sin-uder' _ _ a<b)))
             ((¬∑CuDerivative‚Ñô _ _ _ _ (sin'=cos-uder' _ _ a<b))))) )

   D[g¬≤+f¬≤] : uDerivativeOf‚Ñô (interval‚Ñô (aQ) (bQ)) ,
          (Œª x _ ‚Üí g x ¬∑·µ£ g x +·µ£ h x ¬∑·µ£ h x) is (Œª _ _ ‚Üí 0)
   D[g¬≤+f¬≤] = subst (uDerivativeOf‚Ñô (interval‚Ñô (aQ) (bQ)) ,
          (Œª x _ ‚Üí g x ¬∑·µ£ g x +·µ£ h x ¬∑·µ£ h x) is_)
           (funExt‚ÇÇ Œª _ _ ‚Üí
              sym (¬∑DistL+ _ _ _) ‚àô cong (2 ¬∑·µ£_)
               (cong‚ÇÇ _+·µ£_ refl (-·µ£¬∑ _ _) ‚àô
                ùêë'.+InvR' _ _ (¬∑·µ£Comm _ _))
                ‚àô sym (rat¬∑·µ£rat _ 0))
      (+uDerivative‚Ñô _ _ _ _ _
              (uDerivativeOf‚Ñô¬≤ (aQ) (bQ) a<b
                _ _ gBd
                    gC
                    hBd
                    gD)
              (uDerivativeOf‚Ñô¬≤ (aQ) (bQ) a<b
                _ _ hBd
                    hC
                    (-·µ£bounded _ _ gBd)
                    hD))

  [g¬≤+f¬≤]0 : g 0 ¬∑·µ£ g 0 +·µ£ h 0 ¬∑·µ£ h 0 ‚â° 0 
  [g¬≤+f¬≤]0 = cong‚ÇÇ _+·µ£_
            (cong‚ÇÇ _¬∑·µ£_ g0 g0 ‚àô sym (rat¬∑·µ£rat 0 0))
            (cong‚ÇÇ _¬∑·µ£_ h0 h0 ‚àô sym (rat¬∑·µ£rat 0 0))
              ‚àô +·µ£-rat 0 0  
   where
   g0 : g 0 ‚â° 0
   g0 = cong‚ÇÇ _-·µ£_ (cong sin (+IdL _))
         (cong‚ÇÇ _+·µ£_
          (ùêë'.0LeftAnnihilates' _ _ sin0=0)
          (ùêë'.¬∑IdL' _ _ cos0=1)) ‚àô
           ùêë'.+InvR' _ _ (sym (+IdL _))

   h0 : h 0 ‚â° 0
   h0 = cong‚ÇÇ _-·µ£_ (cong cos (+IdL _))
        ((cong‚ÇÇ _-·µ£_
          (ùêë'.¬∑IdL' _ _ cos0=1)
          (ùêë'.0LeftAnnihilates' _ _ sin0=0)))
      ‚àô ùêë'.+InvR' _ _ (sym (+IdR _) ‚àô cong‚ÇÇ _+·µ£_ refl (sym (-·µ£-rat 0)))

  [g¬≤+f¬≤]=0-a<0 : ‚àÄ a ‚Üí a <·µ£ 0 ‚Üí g a ¬∑·µ£ g a +·µ£ h a ¬∑·µ£ h a ‚â° 0
  [g¬≤+f¬≤]=0-a<0 a a<0 =
    let z = nullDerivative‚Üíconst a 0
          (‚â§·µ£-refl a , <·µ£Weaken‚â§·µ£ _ _ a<0)
          (<·µ£Weaken‚â§·µ£ _ _ a<0 , ‚â§·µ£-refl 0)
           a<0 _
           (D[g¬≤+f¬≤] a 0 a<0) 
    in z ‚àô [g¬≤+f¬≤]0

  [g¬≤+f¬≤]=0-0<a : ‚àÄ a ‚Üí 0 <·µ£ a ‚Üí g a ¬∑·µ£ g a +·µ£ h a ¬∑·µ£ h a ‚â° 0
  [g¬≤+f¬≤]=0-0<a a 0<a =
    let z = nullDerivative‚Üíconst 0 a
          (‚â§·µ£-refl 0 , <·µ£Weaken‚â§·µ£ _ _ 0<a)
          (<·µ£Weaken‚â§·µ£ _ _ 0<a , ‚â§·µ£-refl a) 0<a _
           (D[g¬≤+f¬≤] 0 a 0<a) 
    in sym z ‚àô [g¬≤+f¬≤]0

  cG : IsContinuous g
  cG = IsUContinuous‚Ñô‚ÜíIsContinuous g Œª _ _ ‚Üí gC _ _

  cH : IsContinuous h
  cH = IsUContinuous‚Ñô‚ÜíIsContinuous h Œª _ _ ‚Üí hC _ _


  [g¬≤+f¬≤]=0 : ‚àÄ a ‚Üí g a ¬∑·µ£ g a +·µ£ h a ¬∑·µ£ h a ‚â° 0
  [g¬≤+f¬≤]=0 = ‚â°Continuous _ _
    (cont‚ÇÇ+·µ£ _ _
      (cont‚ÇÇ¬∑·µ£ _ _ cG cG)
      (cont‚ÇÇ¬∑·µ£ _ _ cH cH))
    (IsContinuousConst _)
    (‚Ñö.byTrichotomy 0 td)
    where
    td : ‚Ñö.TrichotomyRec 0
          (Œª z ‚Üí g (rat z) ¬∑·µ£ g (rat z) +·µ£ h (rat z) ¬∑·µ£ h (rat z) ‚â° 0)
    td .‚Ñö.TrichotomyRec.lt-case a = [g¬≤+f¬≤]=0-a<0 (rat a) ‚àò <‚Ñö‚Üí<·µ£ _ _
    td .‚Ñö.TrichotomyRec.eq-case = [g¬≤+f¬≤]0
    td .‚Ñö.TrichotomyRec.gt-case a = [g¬≤+f¬≤]=0-0<a (rat a) ‚àò <‚Ñö‚Üí<·µ£ _ _

  g=0 : ‚àÄ a ‚Üí g a ‚â° 0
  g=0 a =
   let z = isAntisym‚â§·µ£ (g a ¬∑·µ£ g a) 0
            (subst2 _‚â§·µ£_
              (+IdR _)
              ([g¬≤+f¬≤]=0 a)
              (‚â§·µ£-o+ _ _ (g a ¬∑·µ£ g a) (isTrans‚â§‚â°·µ£ _ _ _
             (0‚â§·µ£x¬≤ (h a))
             (cong‚ÇÇ _¬∑·µ£_  (¬∑IdL _) refl))))
            (isTrans‚â§‚â°·µ£ _ _ _ (0‚â§·µ£x¬≤ (g a)) (cong‚ÇÇ _¬∑·µ£_  (¬∑IdL _) refl))
   in x¬≤‚â°0‚Üíx‚â°0 (g a) z
   
  h=0 : ‚àÄ a ‚Üí h a ‚â° 0
  h=0 a = x¬≤‚â°0‚Üíx‚â°0 (h a)
    (sym (ùêë'.+IdL' _ _ (cong‚ÇÇ _¬∑·µ£_ (g=0 a) (g=0 a) ‚àô sym (rat¬∑·µ£rat 0 0)))
     ‚àô [g¬≤+f¬≤]=0 a)

 sinOfSum : ‚àÄ a b ‚Üí sin (a  +·µ£ b) ‚â° sin a ¬∑·µ£ cos b +·µ£ cos a ¬∑·µ£ sin b
 sinOfSum a b = ùêë'.equalByDifference _ _ (g=0 b a)

 cosOfSum : ‚àÄ a b ‚Üí cos (a +·µ£ b) ‚â° cos a ¬∑·µ£ cos b -·µ£ sin a ¬∑·µ£ sin b
 cosOfSum a b = ùêë'.equalByDifference _ _ (h=0 b a)

open sin-cos-of-sum public using (sinOfSum; cosOfSum)
