{-# OPTIONS --lossy-unification #-}

module Cubical.HITs.CauchyReals.Sequence where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse

¬∑abs·µ£ : ‚àÄ x y ‚Üí abs·µ£ (x ¬∑·µ£ y) ‚â° abs·µ£ x ¬∑·µ£ abs·µ£ y
¬∑abs·µ£ x = ‚â°Continuous _ _
  ((IsContinuous‚àò _ _  IsContinuousAbs·µ£ (IsContinuous¬∑·µ£L x)
                    ))
  (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (abs·µ£ x))
                    IsContinuousAbs·µ£)
  Œª y' ‚Üí
    ‚â°Continuous _ _
  ((IsContinuous‚àò _ _  IsContinuousAbs·µ£ (IsContinuous¬∑·µ£R (rat y'))
                    ))
  (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (abs·µ£ (rat y')))
                    IsContinuousAbs·µ£)
                     (Œª x' ‚Üí
                       cong abs·µ£ (sym (rat¬∑·µ£rat _ _)) ‚àô‚àô
                        cong rat (sym (‚Ñö.abs'¬∑abs' _ _)) ‚àô‚àô rat¬∑·µ£rat _ _) x

Seq : Type
Seq = ‚Ñï ‚Üí ‚Ñù


‚â§·µ£-¬∑·µ£o : ‚àÄ m n o ‚Üí 0 ‚â§·µ£ o  ‚Üí  m ‚â§·µ£ n ‚Üí (m ¬∑·µ£ o ) ‚â§·µ£ (n ¬∑·µ£ o)
‚â§·µ£-¬∑·µ£o m n o 0‚â§o m‚â§n = subst (Œª o ‚Üí
   (m ¬∑·µ£ o ) ‚â§·µ£ (n ¬∑·µ£ o)) 0‚â§o (w ‚àô
      cong (_¬∑·µ£ max·µ£ (rat [ pos 0 / 1+ 0 ]) o) m‚â§n)
 where
 w : max·µ£ (m ¬∑·µ£ max·µ£ 0 o ) (n ¬∑·µ£ max·µ£ 0 o) ‚â°  (max·µ£ m n ¬∑·µ£ max·µ£ 0 o)
 w = ‚â°Continuous _ _
     (cont‚ÇÇmax·µ£ _ _
       ((IsContinuous‚àò _ _
         (IsContinuous¬∑·µ£L m) (IsContinuousMaxL 0)  ))
       ((IsContinuous‚àò _ _
         (IsContinuous¬∑·µ£L n) (IsContinuousMaxL 0)  )))
     (IsContinuous‚àò _ _
         (IsContinuous¬∑·µ£L _) (IsContinuousMaxL 0)  )
      (Œª o' ‚Üí
        ‚â°Continuous _ _
          (IsContinuous‚àò _ _ (IsContinuousMaxR ((n ¬∑·µ£ max·µ£ 0 (rat o'))))
                (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))) )
          (IsContinuous‚àò _ _  (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o')))
                                (IsContinuousMaxR n))
          (Œª m' ‚Üí
            ‚â°Continuous
              (Œª n ‚Üí max·µ£ (rat m' ¬∑·µ£ max·µ£ 0 (rat o') ) (n ¬∑·µ£ max·µ£ 0 (rat o')))
              (Œª n ‚Üí  max·µ£ (rat m') n ¬∑·µ£ max·µ£ 0 (rat o'))
              ((IsContinuous‚àò _ _
                (IsContinuousMaxL (((rat m') ¬∑·µ£ max·µ£ 0 (rat o'))))
                (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))) ))
              (IsContinuous‚àò _ _ ((IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))))
                  (IsContinuousMaxL (rat m')))
              (Œª n' ‚Üí
                 (cong‚ÇÇ max·µ£ (sym (rat¬∑·µ£rat _ _)) (sym (rat¬∑·µ£rat _ _)))
                  ‚àô‚àô cong rat (sym (‚Ñö.¬∑MaxDistr‚Ñö' m' n' (‚Ñö.max 0 o')
                      (‚Ñö.‚â§max 0 o'))) ‚àô‚àô
                  rat¬∑·µ£rat _ _
                 ) n) m) o

‚â§·µ£-o¬∑·µ£ : ‚àÄ m n o ‚Üí 0 ‚â§·µ£ o ‚Üí  m ‚â§·µ£ n ‚Üí (o ¬∑·µ£ m   ) ‚â§·µ£ (o ¬∑·µ£ n)
‚â§·µ£-o¬∑·µ£ m n o 0‚â§o p = subst2 _‚â§·µ£_
  (¬∑·µ£Comm _ _)
  (¬∑·µ£Comm _ _)
  (‚â§·µ£-¬∑·µ£o m n o 0‚â§o p)

‚â§·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ m n o s ‚Üí 0 ‚â§·µ£ n ‚Üí 0 ‚â§·µ£ o
       ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s
       ‚Üí (m ¬∑·µ£ o) ‚â§·µ£ (n ¬∑·µ£ s)
‚â§·µ£‚ÇäMonotone¬∑·µ£ m n o s 0‚â§n 0‚â§o m‚â§n o‚â§s =
  isTrans‚â§·µ£ _ _ _ (‚â§·µ£-¬∑·µ£o m n o 0‚â§o m‚â§n)
    (‚â§·µ£-o¬∑·µ£ o s n 0‚â§n o‚â§s)




‚Ñù‚Çä¬∑ : (m : ‚Ñù‚Çä) (n : ‚Ñù‚Çä) ‚Üí 0 <·µ£ (fst m) ¬∑·µ£ (fst n)
‚Ñù‚Çä¬∑ (m , 0<m) (n , 0<n) = PT.map2
  (Œª ((q , q') , 0‚â§q , q<q' , q'‚â§m) ‚Üí
   Œª ((r , r') , 0‚â§r , r<r' , r'‚â§n) ‚Üí
    let 0<r' = ‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö 0 r 0‚â§r) r<r'
        qr‚Çä = (q' , ‚Ñö.<‚Üí0< _ (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö 0 q 0‚â§q) q<q'))
               ‚Ñö‚Çä¬∑ (r' , ‚Ñö.<‚Üí0< _ 0<r')
    in (fst (/2‚Çä qr‚Çä) , fst qr‚Çä) ,
         ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§‚Ñö‚Çä (/2‚Çä qr‚Çä)) ,
           x/2<x qr‚Çä ,
           subst (_‚â§·µ£ (m ¬∑·µ£ n))
             (sym (rat¬∑·µ£rat q' r'))
              (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat q')
                (m) (rat r') n (<·µ£Weaken‚â§·µ£ _ _ 0<m)
                               (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ 0<r'))
                             q'‚â§m r'‚â§n) ) 0<m 0<n

_‚Çä+·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
(m , 0<m) ‚Çä+·µ£ (n , 0<n) = m +·µ£ n , <·µ£Monotone+·µ£ 0 m 0 n 0<m 0<n

_‚Çä¬∑·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù‚Çä
(m , 0<m) ‚Çä¬∑·µ£ (n , 0<n) = _ , ‚Ñù‚Çä¬∑ (m , 0<m) (n , 0<n)

_‚ÇäÔºè·µ£‚Çä_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù‚Çä
(q , 0<q) ‚ÇäÔºè·µ£‚Çä (r , 0<r) = (q Ôºè·µ£[ r , inl (0<r) ] ,
  ‚Ñù‚Çä¬∑ (q , 0<q) (_ , inv‚Ñù-pos r 0<r) )




0<1/x : ‚àÄ x 0ÔºÉx ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ inv‚Ñù x 0ÔºÉx
0<1/x x 0ÔºÉx 0<x = subst (0 <·µ£_)  (sym (inv‚Ñùimpl x 0ÔºÉx)) (‚Ñù‚Çä¬∑
  (_ , 0<sign·µ£ x 0ÔºÉx 0<x)
  (_ , inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x 0ÔºÉx)))

<·µ£-¬∑·µ£o : ‚àÄ m n (o : ‚Ñù‚Çä) ‚Üí  m <·µ£ n ‚Üí (m ¬∑·µ£ (fst o)) <·µ£ (n ¬∑·µ£ (fst o))
<·µ£-¬∑·µ£o m n (o , 0<o) p =
  let z = subst (0 <·µ£_) (¬∑DistR+ n (-·µ£ m) o ‚àô
                   cong ((n ¬∑·µ£ o) +·µ£_) (-·µ£¬∑ m o))
           (‚Ñù‚Çä¬∑ (_ , x<y‚Üí0<y-x _ _ p) (o , 0<o))
  in 0<y-x‚Üíx<y _ _ z

<·µ£-o¬∑·µ£ : ‚àÄ m n (o : ‚Ñù‚Çä) ‚Üí  m <·µ£ n ‚Üí ((fst o) ¬∑·µ£ m) <·µ£ ((fst o) ¬∑·µ£ n )
<·µ£-o¬∑·µ£ m n (o , 0<o) p =
  subst2 (_<·µ£_)
    (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _) (<·µ£-¬∑·µ£o m n (o , 0<o) p)



<·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ m n o s ‚Üí (0 ‚â§·µ£ m) ‚Üí (0 ‚â§·µ£ o)
       ‚Üí m <·µ£ n ‚Üí o <·µ£ s
       ‚Üí (m ¬∑·µ£ o) <·µ£ (n ¬∑·µ£ s)
<·µ£‚ÇäMonotone¬∑·µ£ m n o s 0‚â§m 0‚â§o = PT.map2
   (Œª m<n@((q , q') , m‚â§q , q<q' , q'‚â§n) ‚Üí
        Œª ((r , r') , o‚â§r , r<r' , r'‚â§s) ‚Üí
    let 0‚â§q = isTrans‚â§·µ£ _ _ _ 0‚â§m m‚â§q
        0‚â§r = isTrans‚â§·µ£ _ _ _ 0‚â§o o‚â§r
        0‚â§r' = isTrans‚â§·µ£ _ _ _ 0‚â§r (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ r<r'))
        0‚â§n = isTrans‚â§·µ£ _ _ _ 0‚â§m (<·µ£Weaken‚â§·µ£ _ _ ‚à£ m<n ‚à£‚ÇÅ)
     in (q ‚Ñö.¬∑ r , q' ‚Ñö.¬∑ r') ,
           subst (m ¬∑·µ£ o ‚â§·µ£_) (sym (rat¬∑·µ£rat _ _))
              (‚â§·µ£‚ÇäMonotone¬∑·µ£ m (rat q) o (rat r)
               (0‚â§q) 0‚â§o m‚â§q o‚â§r) ,
                ‚Ñö.<Monotone¬∑-onPos _ _ _ _
                  q<q' r<r' (‚â§·µ£‚Üí‚â§‚Ñö _ _ 0‚â§q)
                            (‚â§·µ£‚Üí‚â§‚Ñö _ _ 0‚â§r) ,
                (subst (_‚â§·µ£ n ¬∑·µ£ s ) (sym (rat¬∑·µ£rat _ _))
                  (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat q') n (rat r') s
                    0‚â§n 0‚â§r'
                    q'‚â§n r'‚â§s)))



/n·µ£-L : (n : ‚Ñï‚Çä‚ÇÅ) ‚Üí Œ£ _ (Lipschitz-‚Ñù‚Üí‚Ñù _)
/n·µ£-L n = (fromLipschitz ([ 1 / n ] , _)
  (_ , Lipschitz-rat‚àò ([ 1 / n ] , _) (‚Ñö._¬∑ [ 1 / n ])
   Œª q r Œµ x ‚Üí
     subst (‚Ñö._< ([ 1 / n ]) ‚Ñö.¬∑ (fst Œµ))
      (sym (‚Ñö.pos¬∑abs [ 1 / n ] (q ‚Ñö.- r)
       (‚Ñö.<Weaken‚â§ 0 [ 1 / n ]
           ( (‚Ñö.0<‚Üí< [ 1 / n ] _))))
       ‚àô cong ‚Ñö.abs (‚Ñö.¬∑Comm _ _ ‚àô ‚Ñö.¬∑DistR+ q (‚Ñö.- r) [ 1 / n ]
        ‚àô cong ((q ‚Ñö.¬∑ [ 1 / n ]) ‚Ñö.+_)
            (sym (‚Ñö.¬∑Assoc -1 r [ 1 / n ]))))
      (‚Ñö.<-o¬∑ (‚Ñö.abs (q ‚Ñö.- r)) (fst Œµ) [ 1 / n ]
       ((‚Ñö.0<‚Üí< [ 1 / n ] _))
       x)))

/n·µ£ : ‚Ñï‚Çä‚ÇÅ ‚Üí ‚Ñù ‚Üí ‚Ñù
/n·µ£ = fst ‚àò /n·µ£-L

/n·µ£-Ôºè·µ£ : ‚àÄ n x (p : 0 ÔºÉ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n))
            ‚Üí /n·µ£ n x ‚â° (x Ôºè·µ£[ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) , p ] )
/n·µ£-Ôºè·µ£ n x p = ‚â°Continuous _ _
  (Lipschitz‚ÜíIsContinuous _ (fst (/n·µ£-L n)) (snd (/n·µ£-L n)))
   (IsContinuous¬∑·µ£R _)
  (Œª r ‚Üí cong rat (cong (r ‚Ñö.¬∑_) (cong [ 1 /_] (sym (¬∑‚Çä‚ÇÅ-identityÀ° _))))
    ‚àô rat¬∑·µ£rat _ _ ‚àô
      cong (rat r ¬∑·µ£_) (sym (inv‚Ñù-rat _ _ (fst (ratÔºÉ _ _) p)) )) x

/n·µ£-pos : ‚àÄ n x ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ /n·µ£ n x
/n·µ£-pos n x 0<x = subst (0 <·µ£_) (sym (/n·µ£-Ôºè·µ£ _ _ _))
                     (‚Ñù‚Çä¬∑ (_ , 0<x) (_ , inv‚Ñù-pos _
                         (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<‚Üí< _ tt))))

seqSumUpTo : (‚Ñï ‚Üí ‚Ñù) ‚Üí ‚Ñï ‚Üí  ‚Ñù
seqSumUpTo s zero = 0
seqSumUpTo s (suc n) = s zero +·µ£ seqSumUpTo (s ‚àò suc) n

seqSumUpTo¬∑ : ‚àÄ s r n ‚Üí seqSumUpTo s n ¬∑·µ£ r ‚â° seqSumUpTo ((_¬∑·µ£ r) ‚àò s) n
seqSumUpTo¬∑ s r zero = ùêë'.0LeftAnnihilates r
seqSumUpTo¬∑ s r (suc n) =
  ¬∑DistR+ (s zero) (seqSumUpTo (s ‚àò suc) n) r ‚àô
   cong ((s zero ¬∑·µ£ r) +·µ£_) (seqSumUpTo¬∑ (s ‚àò suc) r n)



seqSumUpTo' : (‚Ñï ‚Üí ‚Ñù) ‚Üí ‚Ñï ‚Üí  ‚Ñù
seqSumUpTo' s zero = 0
seqSumUpTo' s (suc n) = seqSumUpTo' s n +·µ£ s n

seqŒ£ : Seq ‚Üí Seq
seqŒ£ = seqSumUpTo'

seqŒ£' : Seq ‚Üí Seq
seqŒ£' = seqSumUpTo


seqSumUpTo-suc : ‚àÄ f n ‚Üí seqSumUpTo f n +·µ£ f n ‚â°
      f zero +·µ£ seqSumUpTo (Œª x ‚Üí f (suc x)) n
seqSumUpTo-suc f zero = +·µ£Comm _ _
seqSumUpTo-suc f (suc n) =
  sym (+·µ£Assoc _ _ _) ‚àô
    cong ((f zero) +·µ£_ ) (seqSumUpTo-suc _ _)

seqSumUpTo‚â°seqSumUpTo' : ‚àÄ f n ‚Üí seqSumUpTo' f n ‚â° seqSumUpTo f n
seqSumUpTo‚â°seqSumUpTo' f zero = refl
seqSumUpTo‚â°seqSumUpTo' f (suc n) =
 cong (_+·µ£ (f n)) (seqSumUpTo‚â°seqSumUpTo' (f) n) ‚àô
   seqSumUpTo-suc f n

<-¬∑sk-cancel : ‚àÄ {m n k} ‚Üí m ‚Ñï.¬∑ suc k ‚Ñï.< n ‚Ñï.¬∑ suc k ‚Üí m ‚Ñï.< n
<-¬∑sk-cancel {n = zero} x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
<-¬∑sk-cancel {zero} {n = suc n} x = ‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})
<-¬∑sk-cancel {suc m} {n = suc n} {k} x =
  ‚Ñï.suc-‚â§-suc {suc m} {n}
    (<-¬∑sk-cancel {m} {n} {k}
     (‚Ñï.‚â§-k+-cancel (subst (‚Ñï._‚â§ (k ‚Ñï.+ n ‚Ñï.¬∑ suc k))
       (sym (‚Ñï.+-suc _ _)) (‚Ñï.pred-‚â§-pred x))))

2‚â§x‚Üí1<quotient[x/2] : ‚àÄ n ‚Üí 0 ‚Ñï.< (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)
2‚â§x‚Üí1<quotient[x/2] n =
 let z : 0 ‚Ñï.<
             ((‚Ñï.quotient (2 ‚Ñï.+ n) / 2) ‚Ñï.¬∑ 2)
     z = subst (0 ‚Ñï.<_) (‚Ñï.¬∑-comm _ _)
          (‚Ñï.‚â§<-trans ‚Ñï.zero-‚â§ (‚Ñï.<-k+-cancel (subst (‚Ñï._< 2 ‚Ñï.+
             (2 ‚Ñï.¬∑ (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)))
           (‚Ñï.‚â°remainder+quotient 2 (2 ‚Ñï.+ n))
             (‚Ñï.<-+k {k = 2 ‚Ñï.¬∑ (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)}
              (‚Ñï.mod< 1 (2 ‚Ñï.+ n))))))
 in <-¬∑sk-cancel {0} {‚Ñï.quotient (2 ‚Ñï.+ n) / 2 } {k = 1}
     z


open ‚Ñï.Minimal

log2‚Ñï : ‚àÄ n ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 ^ k))
log2‚Ñï n = w n n ‚Ñï.‚â§-refl
 where

  w : ‚àÄ N n ‚Üí n ‚Ñï.‚â§ N
          ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 ^ k))
  w N zero x = 0 , (‚Ñï.‚â§-refl , Œª k' q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero q))
  w N (suc zero) x = 1 , (‚Ñï.‚â§-refl ,
     Œª { zero q ‚Üí ‚Ñï.<-asym (‚Ñï.suc-‚â§-suc ‚Ñï.‚â§-refl)
      ; (suc k') q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred q))})
  w zero (suc (suc n)) x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
  w (suc N) (suc (suc n)) x =
   let (k , (X , Lst)) = w N
          (‚Ñï.quotient 2 ‚Ñï.+ n / 2)
          (‚Ñï.‚â§-trans (‚Ñï.pred-‚â§-pred (‚Ñï.2‚â§x‚Üíquotient[x/2]<x n))
             (‚Ñï.pred-‚â§-pred x))
       z = ‚Ñï.‚â°remainder+quotient 2 (2 ‚Ñï.+ n)
       zz = ‚Ñï.<-+-‚â§ X X
       zzz : suc (suc n) ‚Ñï.< (2 ^ suc k)
       zzz = subst2 (‚Ñï._<_)
           (‚Ñï.+-comm _ _
              ‚àô sym (‚Ñï.+-assoc ((‚Ñï.remainder 2 ‚Ñï.+ n / 2)) _ _)
               ‚àô cong ((‚Ñï.remainder 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
             ((cong ((‚Ñï.quotient 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
              (sym (‚Ñï.+-zero (‚Ñï.quotient 2 ‚Ñï.+ n / 2)))))
             ‚àô z)
           (cong ((2 ^ k) ‚Ñï.+_) (sym (‚Ñï.+-zero (2 ^ k))))
           (‚Ñï.‚â§<-trans
             (‚Ñï.‚â§-k+ (‚Ñï.‚â§-+k (‚Ñï.pred-‚â§-pred (‚Ñï.mod< 1 (2 ‚Ñï.+ n))))) zz)
   in (suc k)
       , zzz
        , Œª { zero 0'<sk 2+n<2^0' ‚Üí
                ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred 2+n<2^0'))
            ; (suc k') k'<sk 2+n<2^k' ‚Üí
               Lst k' (‚Ñï.pred-‚â§-pred k'<sk)
                (<-¬∑sk-cancel {k = 1}
                    (subst2 ‚Ñï._<_ (‚Ñï.¬∑-comm _ _) (‚Ñï.¬∑-comm _ _)
                      (‚Ñï.‚â§<-trans (_ , z)
                         2+n<2^k' )))}





0<x^‚Åø : ‚àÄ x n ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ (x ^‚Åø n)
0<x^‚Åø x zero x‚ÇÅ = <‚Ñö‚Üí<·µ£ _ _ (ùüö.toWitness {Q = ‚Ñö.<Dec 0 1} tt)
0<x^‚Åø x (suc n) x‚ÇÅ = ‚Ñù‚Çä¬∑ (_ , 0<x^‚Åø x n x‚ÇÅ) (_ , x‚ÇÅ)


geometricProgression : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
geometricProgression a r zero = a
geometricProgression a r (suc n) =
  (geometricProgression a r n) ¬∑·µ£ r

geometricProgressionClosed : ‚àÄ a r n ‚Üí
 geometricProgression a r n ‚â° a ¬∑·µ£ (r ^‚Åø n)
geometricProgressionClosed a r zero = sym (¬∑IdR a)
geometricProgressionClosed a r (suc n) =
  cong (_¬∑·µ£ r) (geometricProgressionClosed a r n) ‚àô
   sym (¬∑·µ£Assoc _ _ _)

geometricProgression-suc : ‚àÄ a r n ‚Üí
   geometricProgression a r (suc n) ‚â°
    geometricProgression (a ¬∑·µ£ r) r n
geometricProgression-suc a r zero = refl
geometricProgression-suc a r (suc n) =
  cong (_¬∑·µ£ r) (geometricProgression-suc a r n)


geometricProgression-suc' : ‚àÄ a r n ‚Üí
   geometricProgression a r (suc n) ‚â°
    geometricProgression (a) r n  ¬∑·µ£ r
geometricProgression-suc' a r _ = refl

S‚Çô : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
S‚Çô a r = seqSumUpTo (geometricProgression a r)


S‚Çô-suc : ‚àÄ a r n ‚Üí S‚Çô a r (suc n) ‚â° (a +·µ£ (S‚Çô a r n ¬∑·µ£ r ))
S‚Çô-suc a r n = cong (a +·µ£_) (sym (seqSumUpTo¬∑ (geometricProgression a r) r n) )


S‚ÇôLem' : ‚àÄ a n r ‚Üí (S‚Çô a r n) ¬∑·µ£ (1 +·µ£ (-·µ£ r))  ‚â°
                   a ¬∑·µ£ (1 +·µ£ (-·µ£ (r ^‚Åø n)))
S‚ÇôLem' a n r =
 let z : S‚Çô a r n +·µ£ geometricProgression a r n
            ‚â° (a +·µ£ (S‚Çô a r n ¬∑·µ£ r))
     z = cong (_+·µ£ (geometricProgression a r n))
           (sym (seqSumUpTo‚â°seqSumUpTo' (geometricProgression a r) n))
            ‚àô‚àô seqSumUpTo‚â°seqSumUpTo' (geometricProgression a r) _
          ‚àô‚àô S‚Çô-suc a r n
     z' = ((sym (+IdR _) ‚àô cong ((S‚Çô a r n +·µ£ (-·µ£ (S‚Çô a r n ¬∑·µ£ r))) +·µ£_)
             (sym (+-·µ£ (geometricProgression a r n))))
           ‚àô ùêë'.+ShufflePairs _ _ _ _ )
         ‚àô‚àô cong‚ÇÇ _+·µ£_ z (
           (+·µ£Comm (-·µ£ (S‚Çô a r n ¬∑·µ£ r))
              (-·µ£ (geometricProgression a r n)))) ‚àô‚àô
            (ùêë'.+ShufflePairs _ _ _ _ ‚àô
              cong ((a +·µ£ (-·µ£ (geometricProgression a r n))) +·µ£_)
             ( (+-·µ£ (S‚Çô a r n ¬∑·µ£ r))) ‚àô +IdR _)
 in (¬∑DistL+ (S‚Çô a r n) 1 (-·µ£ r)
      ‚àô cong‚ÇÇ _+·µ£_ (¬∑IdR (S‚Çô a r n)) (ùêë'.-DistR¬∑ (S‚Çô a r n) r))
      ‚àô‚àô z' ‚àô‚àô (cong‚ÇÇ _+·µ£_ (sym (¬∑IdR a))
       (cong (-·µ£_) (geometricProgressionClosed a r n) ‚àô
        sym (ùêë'.-DistR¬∑ _ _))
     ‚àô sym (¬∑DistL+ a 1 (-·µ£ ((r ^‚Åø (n))))))

S‚ÇôLem : ‚àÄ a r (0ÔºÉ1-r : 0 ÔºÉ (1 +·µ£ (-·µ£ r))) n ‚Üí
              (S‚Çô a r n)   ‚â°
                   a ¬∑·µ£ ((1 +·µ£ (-·µ£ (r ^‚Åø n)))
                     Ôºè·µ£[ (1 +·µ£ (-·µ£ r)) , 0ÔºÉ1-r ])
S‚ÇôLem a r 0ÔºÉ1-r n =
     x¬∑y‚â°z‚Üíx‚â°z/y (S‚Çô a r n)
       (a ¬∑·µ£ (1 +·µ£ (-·µ£ (r ^‚Åø n))))
        _ 0ÔºÉ1-r (S‚ÇôLem' a n r)
      ‚àô sym (¬∑·µ£Assoc _ _ _)

S‚Çô-sup : ‚àÄ a r n ‚Üí (0 <·µ£ a) ‚Üí (0 <·µ£ r) ‚Üí (r<1 : r <·µ£ 1) ‚Üí
                (S‚Çô a r n)
                <·µ£ (a ¬∑·µ£ (inv‚Ñù (1 +·µ£ (-·µ£ r)) (inl (x<y‚Üí0<y-x _ _ r<1))))
S‚Çô-sup a r n a<0 0<r r<1  =
   isTrans‚â§<·µ£ _ _ _ (‚â°·µ£Weaken‚â§·µ£ _ _ (S‚ÇôLem a r _ n))
     (<·µ£-o¬∑·µ£ _ _ (a , a<0)
      (isTrans<‚â§·µ£ _ _ _
          (<·µ£-¬∑·µ£o (1 +·µ£ (-·µ£ (r ^‚Åø n))) 1
            (inv‚Ñù (1 +·µ£ (-·µ£ r)) (inl (x<y‚Üí0<y-x _ _ r<1)) ,
              0<1/x _ _ (( (x<y‚Üí0<y-x _ _ r<1))))
            (isTrans<‚â§·µ£ _ _ _
               (<·µ£-o+ _ _ 1 (-·µ£<·µ£ 0 (r ^‚Åø n) (0<x^‚Åø r n 0<r)))
               (‚â°·µ£Weaken‚â§·µ£ _ _ (+IdR _)) ))
          (‚â°·µ£Weaken‚â§·µ£ _ _ (¬∑IdL _ ) )))

Seq<‚ÜíŒ£< : (s s' : Seq) ‚Üí
  (‚àÄ n ‚Üí s n <·µ£ s' n) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo s (suc n) <·µ£ seqSumUpTo s' (suc n)
Seq<‚ÜíŒ£< s s' x zero = subst2 _<·µ£_
  (sym (+IdR _)) (sym (+IdR _)) (x 0)
Seq<‚ÜíŒ£< s s' x (suc n) = <·µ£Monotone+·µ£ _ _ _ _
 (x 0) (Seq<‚ÜíŒ£< (s ‚àò suc) (s' ‚àò suc) (x ‚àò suc) n)

Seq‚â§‚ÜíŒ£‚â§ : (s s' : Seq) ‚Üí
  (‚àÄ n ‚Üí s n ‚â§·µ£ s' n) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo s n ‚â§·µ£ seqSumUpTo s' n
Seq‚â§‚ÜíŒ£‚â§ s s' x zero = ‚â§·µ£-refl _
Seq‚â§‚ÜíŒ£‚â§ s s' x (suc n) = ‚â§·µ£Monotone+·µ£ _ _ _ _
 (x 0) (Seq‚â§‚ÜíŒ£‚â§ (s ‚àò suc) (s' ‚àò suc) (x ‚àò suc) n)

Seq'‚â§‚ÜíŒ£‚â§ : (s s' : Seq) ‚Üí
  (‚àÄ n ‚Üí s n ‚â§·µ£ s' n) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo' s n ‚â§·µ£ seqSumUpTo' s' n
Seq'‚â§‚ÜíŒ£‚â§ s s' x zero = ‚â§·µ£-refl _
Seq'‚â§‚ÜíŒ£‚â§ s s' x (suc n) =
 ‚â§·µ£Monotone+·µ£ _ _ _ _
 (Seq'‚â§‚ÜíŒ£‚â§ s s' x n)  (x n)

0‚â§seqŒ£ : ‚àÄ s ‚Üí (‚àÄ n ‚Üí 0 ‚â§·µ£ s n)
            ‚Üí ‚àÄ n ‚Üí 0 ‚â§·µ£ seqŒ£ s n
0‚â§seqŒ£ s x zero = ‚â§·µ£-refl _
0‚â§seqŒ£ s x (suc n) =
  ‚â§·µ£Monotone+·µ£ _ _ _ _ (0‚â§seqŒ£ s x n) (x n)

seriesDiff : (s : Seq)  ‚Üí
  ‚àÄ N n ‚Üí (seqŒ£ s (n ‚Ñï.+ N) +·µ£ (-·µ£ seqŒ£ s N)) ‚â°
     seqŒ£ (s ‚àò (‚Ñï._+ N)) n
seriesDiff s N zero = +-·µ£ (seqŒ£ s N)
seriesDiff s N (suc n) =
  cong (_+·µ£ _) (+·µ£Comm _ _) ‚àô‚àô
  sym (+·µ£Assoc _ _ _) ‚àô‚àô
   cong (s (n ‚Ñï.+ N) +·µ£_) (seriesDiff s N n)
    ‚àô +·µ£Comm (s (n ‚Ñï.+ N)) (seqŒ£ (s ‚àò (‚Ñï._+ N)) n)


IsCauchySequence : Seq ‚Üí Type
IsCauchySequence s =
  ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
    abs·µ£ ((s n) +·µ£ (-·µ£ (s m))) <·µ£ fst Œµ   )


IsConvSeries : Seq ‚Üí Type
IsConvSeries s =
    ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí
     Œ£[ N ‚àà ‚Ñï ] ‚àÄ n m ‚Üí
       abs·µ£ (seqŒ£ (s ‚àò (‚Ñï._+ (n ‚Ñï.+ (suc N)))) m) <·µ£ fst Œµ


IsoIsConvSeriesIsCauchySequenceSum : (s : Seq) ‚Üí
  Iso (IsConvSeries s) (IsCauchySequence (seqŒ£ s))
IsoIsConvSeriesIsCauchySequenceSum s =
   codomainIsoDep Œª Œµ ‚Üí
     Œ£-cong-iso-snd Œª N ‚Üí
        isProp‚ÜíIso (isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ)
         (isPropŒ†4 Œª _ _ _ _ ‚Üí squash‚ÇÅ )
         (Œª f ‚Üí ‚Ñï.elimBy‚â§
           (Œª n n' X <n <n' ‚Üí subst (_<·µ£ fst Œµ)
             (minusComm-abs·µ£ _ _) (X <n' <n))
           Œª n n' n‚â§n' N<n' N<n ‚Üí
              subst ((_<·µ£ fst Œµ) ‚àò abs·µ£)
                 (cong (Œª x ‚Üí seqŒ£ (s ‚àò (‚Ñï._+ x)) (n' ‚à∏ n))
                    (‚Ñï.[n-m]+m (suc N) n N<n)
                   ‚àô‚àô sym (seriesDiff s n (n' ‚à∏ n)) ‚àô‚àô
                   cong (_+·µ£ (-·µ£ seqŒ£ s n))
                     (cong (seqŒ£ s)
                       (‚Ñï.[n-m]+m n n' n‚â§n')))
                 (f (n ‚à∏ (suc N)) (n' ‚à∏ n)))
         Œª f n m ‚Üí
           subst ((_<·µ£ fst Œµ) ‚àò abs·µ£)
             (seriesDiff s (n ‚Ñï.+ suc N) m)
               (f (n ‚Ñï.+ (suc N)) (m ‚Ñï.+ (n ‚Ñï.+ suc N))
               (subst (N ‚Ñï.<_) (sym (‚Ñï.+-assoc _ _ _))
                 (‚Ñï.‚â§SumRight {suc N} {m ‚Ñï.+ n}))
               (‚Ñï.‚â§SumRight {suc N} {n}))


IsConvSeries‚âÉIsCauchySequenceSum : (s : Seq) ‚Üí
  IsConvSeries s ‚âÉ IsCauchySequence (seqŒ£ s)
IsConvSeries‚âÉIsCauchySequenceSum s =
  isoToEquiv (IsoIsConvSeriesIsCauchySequenceSum s)



isCauchyAprox : (‚Ñö‚Çä ‚Üí ‚Ñù) ‚Üí Type
isCauchyAprox f = (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí
  (abs·µ£ (f Œ¥ +·µ£ (-·µ£  f Œµ)) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))

lim' : ‚àÄ x ‚Üí isCauchyAprox x ‚Üí ‚Ñù
lim' x y = lim x Œª Œ¥ Œµ  ‚Üí (invEq (‚àº‚âÉabs<Œµ _ _ _)) (y Œ¥ Œµ)


fromCauchySequence : ‚àÄ s ‚Üí IsCauchySequence s ‚Üí ‚Ñù
fromCauchySequence s ics =
  lim x y

 where
 x : ‚Ñö‚Çä ‚Üí ‚Ñù
 x q = s (suc (fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä q))))

 y : (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí x Œ¥ ‚àº[ Œ¥ ‚Ñö‚Çä+ Œµ ] x Œµ
 y Œ¥ Œµ = invEq (‚àº‚âÉabs<Œµ _ _ _)
    (ww (‚Ñï.Dichotomy‚Ñï Œ¥‚Çô Œµ‚Çô) )
  where
  Œ¥‚Çô = fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥))
  Œµ‚Çô = fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))

  ww : _ ‚äé _ ‚Üí abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ))
  ww (inl Œ¥‚Çô‚â§Œµ‚Çô) =
   let z = snd (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥)) (suc Œµ‚Çô) (suc Œ¥‚Çô)
              ‚Ñï.‚â§-refl  (‚Ñï.suc-‚â§-suc Œ¥‚Çô‚â§Œµ‚Çô )
   in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œ¥))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' (fst Œ¥) (fst Œ¥) Œµ (‚Ñö.isRefl‚â§ (fst Œ¥))))
  ww (inr Œµ‚Çô<Œ¥‚Çô) =
    let z = snd (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)) (suc Œµ‚Çô) (suc Œ¥‚Çô)
               (‚Ñï.‚â§-suc Œµ‚Çô<Œ¥‚Çô) ‚Ñï.‚â§-refl
    in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œµ))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z ((<‚Ñö‚Üí<·µ£ _ _
               (subst ((fst Œµ) ‚Ñö.<_) (‚Ñö.+Comm _ _)
               (‚Ñö.<+‚Ñö‚Çä' (fst Œµ) (fst Œµ) Œ¥ (‚Ñö.isRefl‚â§ (fst Œµ))))))

lim‚Çô‚Üí‚àû_is_ : Seq ‚Üí ‚Ñù ‚Üí Type
lim‚Çô‚Üí‚àû s is x =
  ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ]
    (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
      abs·µ£ ((s n) +·µ£ (-·µ£ x)) <·µ£ (fst Œµ))



Lim‚Çô‚Üí‚àû : Seq ‚Üí Type
Lim‚Çô‚Üí‚àû s = Œ£ _ (lim‚Çô‚Üí‚àû s is_)


Œµ<2‚Åø : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] fst Œµ ‚Ñö.< 2 ‚Ñö^‚Åø n 
Œµ<2‚Åø Œµ = let n = fst (log2‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ))) in n ,
         subst (fst Œµ ‚Ñö.<_) (sym (‚Ñö.fromNat-^ _ _))
          (‚Ñö.isTrans< _ _ (fromNat (2 ^ n))
                  ((snd (‚Ñö.ceil‚Ñö‚Çä Œµ)))
                   (‚Ñö.<‚Ñ§‚Üí<‚Ñö (‚Ñ§.pos ((fst (‚Ñö.ceil‚Ñö‚Çä Œµ))))
                     _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
                    (fst (snd (log2‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ))))))))


1/2‚Åø<Œµ : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] [ 1 / 2 ] ‚Ñö^‚Åø n ‚Ñö.< fst Œµ
1/2‚Åø<Œµ Œµ =
 let (n , 1/Œµ<n) = Œµ<2‚Åø (inv‚Ñö‚Çä Œµ)
 in n , invEq (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä (([ 1 / 2 ] , _) ‚Ñö‚Çä^‚Åø n) Œµ)
         (subst (fst (inv‚Ñö‚Çä Œµ) ‚Ñö.<_)
           (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø ([ 1 / 2 ] , _) n)) 1/Œµ<n)


-- TODO : generalize properly 
ratioTest‚Çä : ‚àÄ (s : Seq) ‚Üí (sPos : ‚àÄ n ‚Üí rat 0 <·µ£ (s n))
     ‚Üí lim‚Çô‚Üí‚àû s is 0
     ‚Üí (lim‚Çô‚Üí‚àû (Œª n ‚Üí  s (suc n) Ôºè·µ£[ s n , inl ((sPos n)) ]) is 0)     
     ‚Üí IsConvSeries s
ratioTest‚Çä s sPos l' l Œµ‚Çä@(Œµ , 0<Œµ) =
  N , ww

 where
 ¬Ω·µ£ = (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))
 N¬Ω = l ¬Ω·µ£
 Œµ/2 : ‚Ñù‚Çä
 Œµ/2 = (Œµ ¬∑·µ£ rat [ 1 / 2 ]) , ‚Ñù‚Çä¬∑ Œµ‚Çä ¬Ω·µ£ 
 NŒµ = (l' (Œµ/2))

 N : ‚Ñï
 N = suc (‚Ñï.max (suc (fst N¬Ω)) (fst NŒµ))

 ww : ‚àÄ m n ‚Üí abs·µ£ (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ Œµ
 ww m n = isTrans‚â§<·µ£ _ _ _
   (‚â°·µ£Weaken‚â§·µ£ _ _
     (abs·µ£NonNeg (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n)
     (0‚â§seqŒ£ _ (Œª n ‚Üí <·µ£Weaken‚â§·µ£ _ _ (sPos (n ‚Ñï.+ (m ‚Ñï.+ suc N)))) _))) pp

  where
  s' : Seq
  s' = s ‚àò (‚Ñï._+ (suc (m ‚Ñï.+ N)))


  f' : ((n : ‚Ñï) ‚Üí  N ‚Ñï.‚â§ n ‚Üí
         (s (suc n)) ‚â§·µ£
         s n ¬∑·µ£ rat [ 1 / 2 ])
  f' n n< =
     subst2 {x = ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ])
                    +·µ£ 0 ) ¬∑·µ£ s n }
        _‚â§·µ£_ (congS (_¬∑·µ£ s n) (+IdR _) ‚àô
          [x/y]¬∑y·µ£ _ _ _) (¬∑·µ£Comm _ _)
       ((<·µ£Weaken‚â§·µ£ _ _
          (<·µ£-¬∑·µ£o _ _ (s n , sPos _)
           (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
             (snd N¬Ω n (
              ‚Ñï.<-trans (‚Ñï.left-‚â§-max {suc (fst N¬Ω)} {fst NŒµ})
               n<)))))) 


  p : ‚àÄ n ‚Üí s' n ‚â§·µ£ geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£) n 
  p zero =
     isTrans‚â§·µ£ _ _ _ ((f' (m ‚Ñï.+ N) (‚Ñï.‚â§SumRight {N} {m}) ))
             (subst ((s (m ‚Ñï.+ N) ¬∑·µ£ rat [ ‚Ñ§.pos 1 / 1+ 1 ]) ‚â§·µ£_)
                (¬∑IdR _)
                 (‚â§·µ£-o¬∑·µ£ (fst ¬Ω·µ£) 1 (s (m ‚Ñï.+ N))
                   (<·µ£Weaken‚â§·µ£ _ _ (sPos _))
                  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.‚â§Dec ([ 1 / 2 ]) 1} _))))) 

  p (suc n) = 
    isTrans‚â§·µ£ _ _ _ (f' _
      (subst (N ‚Ñï.‚â§_) (sym (‚Ñï.+-assoc n (1 ‚Ñï.+ m) N))
        ‚Ñï.‚â§SumRight))
      (‚â§·µ£-¬∑o _ _ ([ 1 / 2 ]) ((ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 ([ 1 / 2 ])} _)) (p n))

  p' = Seq'‚â§‚ÜíŒ£‚â§ s' (geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£))
        p 

  s<Œµ : (s (m ‚Ñï.+ N)) <·µ£ fst Œµ/2
  s<Œµ = subst (_<·µ£ fst Œµ/2) (+IdR _) (isTrans‚â§<·µ£ _ _ _
          (‚â§abs·µ£ ((s (m ‚Ñï.+ N)) +·µ£ (-·µ£ 0))) (snd NŒµ _
           (‚Ñï.‚â§<-trans ‚Ñï.right-‚â§-max ‚Ñï.‚â§SumRight)))

  pp : (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ Œµ
  pp =
      subst {x = ‚Ñï._+ suc (m ‚Ñï.+ N) } {y = Œª z ‚Üí z ‚Ñï.+ (m ‚Ñï.+ suc N)}
           (Œª h ‚Üí seqŒ£ (s ‚àòS h) n <·µ£ Œµ)
         
          (funExt (Œª x ‚Üí cong (x ‚Ñï.+_) (sym (‚Ñï.+-suc _ _)) ))
          (isTrans‚â§<·µ£ _ _ _ (p' n)
            (isTrans‚â§<·µ£ _ _ _
              (‚â°·µ£Weaken‚â§·µ£ _ _ (seqSumUpTo‚â°seqSumUpTo' _ _))
                (isTrans<‚â§·µ£ _ _ _
                 (S‚Çô-sup (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£)
                   n (sPos _) (snd ¬Ω·µ£)
                    (<‚Ñö‚Üí<·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.<Dec [ 1 / 2 ] 1} tt))))
                (isTrans‚â§·µ£ _ _ _
                  (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ 2
                        (<·µ£Weaken‚â§·µ£ _ _ (snd Œµ/2))
                          (<·µ£Weaken‚â§·µ£ _ _
                             ((0<1/x _ _ (
                       <‚Ñö‚Üí<·µ£ _ _
                       (ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} tt)))))
                         
                    (<·µ£Weaken‚â§·µ£ _ _ s<Œµ)
                    (‚â°·µ£Weaken‚â§·µ£ _ _
                       (inv‚Ñù-rat _ _
                        (inl ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} tt))))))
                  (‚â°·µ£Weaken‚â§·µ£ _ _
                     (sym (¬∑·µ£Assoc _ _ _) ‚àô‚àô
                       cong (Œµ ¬∑·µ£_) (sym (rat¬∑·µ£rat _ _)
                         ‚àô cong rat (ùüö.toWitness {Q = ‚Ñö.discrete‚Ñö
                           ([ 1 / 2 ] ‚Ñö.¬∑ 2) 1} tt))
                        ‚àô‚àô ¬∑IdR Œµ))))))


expSeq : ‚Ñù ‚Üí Seq
expSeq x zero = 1
expSeq x (suc n) = /n·µ£ (1+ n) (expSeq x n ¬∑·µ£ x)

expSeqPos : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí ‚àÄ n ‚Üí 0 <·µ£ expSeq x n
expSeqPos x 0<x zero = dec‚Ñö<·µ£?
expSeqPos x 0<x (suc n) =
 /n·µ£-pos (1+ n) _ (‚Ñù‚Çä¬∑ (_ , expSeqPos x 0<x n) (_ , 0<x)) 

lim‚Çô‚Üí‚àû[expSeq]=0 : ‚àÄ x ‚Üí lim‚Çô‚Üí‚àû expSeq (rat x) is 0
lim‚Çô‚Üí‚àû[expSeq]=0 = {!!}

lim‚Çô‚Üí‚àû[expSeqRatio]=0 : ‚àÄ x ‚Üí ‚àÄ (0<x : 0 ‚Ñö.< x)  ‚Üí lim‚Çô‚Üí‚àû
      (Œª n ‚Üí
         expSeq (rat x) (suc n) Ôºè·µ£[ expSeq (rat x) n ,
         inl (expSeqPos (rat x) (<‚Ñö‚Üí<·µ£ 0 x 0<x) n) ])
      is 0
lim‚Çô‚Üí‚àû[expSeqRatio]=0 x 0<x =
  subst (lim‚Çô‚Üí‚àû_is 0)
    (funExt w)
    w'

 where
 0<·µ£x = <‚Ñö‚Üí<·µ£ 0 x 0<x
 w : ‚àÄ n ‚Üí /n·µ£ (1+ (suc n)) (rat x) ‚â° (expSeq (rat x) (suc n) Ôºè·µ£[ expSeq (rat x) n ,
                    inl (expSeqPos (rat x) 0<·µ£x n) ])
 w = {!!}

 w' : lim‚Çô‚Üí‚àû (Œª x‚ÇÅ ‚Üí /n·µ£ (2+ x‚ÇÅ) (rat x)) is 0
 w' Œµ =
  let cN = ‚Ñö.ceil‚Ñö‚Çä
  in {!!} , (Œª n' <n' ‚Üí isTrans‚â°<·µ£ _ _ _
      (cong abs·µ£ (+IdR _) ‚àô abs·µ£Pos _ (/n·µ£-pos _ _ 0<·µ£x))
       {!!} )

expSeriesConvergesAt‚Ñö : ‚àÄ x ‚Üí 0 ‚Ñö.< x ‚Üí IsConvSeries (expSeq (rat x))
expSeriesConvergesAt‚Ñö x 0<x =
 ratioTest‚Çä (expSeq (rat x)) (expSeqPos (rat x) (<‚Ñö‚Üí<·µ£ _ _ 0<x))
      (lim‚Çô‚Üí‚àû[expSeq]=0 x) (lim‚Çô‚Üí‚àû[expSeqRatio]=0 x 0<x)
