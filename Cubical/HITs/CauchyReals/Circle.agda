{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.Circle where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Path

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Surjection
open import Cubical.Functions.Embedding


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad


open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.ExponentiationMore
open import Cubical.HITs.CauchyReals.Uniform
open import Cubical.HITs.CauchyReals.PiNumber
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Summation

open import Cubical.Algebra.Ring.BigOps


open import Cubical.Algebra.CommRing.Properties
open import Cubical.Algebra.CommRing.Base
import Cubical.Data.FinData as FD

open import Cubical.HITs.CauchyReals.TrigonometricIdentities
open import Cubical.HITs.CauchyReals.ArcSin

open import Cubical.HITs.SetQuotients as SQ renaming ([_] to [_]/)
open import Cubical.Relation.Binary.Base
open import Cubical.Tactics.CommRingSolver



x^¬≤=x¬∑x : ‚àÄ x ‚Üí x ^‚Åø 2 ‚â° x ¬∑·µ£ x
x^¬≤=x¬∑x x = cong (_¬∑·µ£ x) (¬∑IdL _)


cartNorm¬≤ : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù
cartNorm¬≤ (x , y) = x ¬∑·µ£ x +·µ£ y ¬∑·µ£ y 


cartDist¬≤ : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù
cartDist¬≤ (x , y) (x' , y') = cartNorm¬≤ (x -·µ£ x' , y -·µ£ y')


cartDis¬≤Comm : ‚àÄ p p' ‚Üí cartDist¬≤ p p' ‚â° cartDist¬≤ p' p 
cartDis¬≤Comm p p' = solve! ‚Ñùring

distCircle : Type
distCircle = Œ£ (‚Ñù √ó ‚Ñù) Œª xy ‚Üí cartNorm¬≤ xy ‚â° 1 


distCircle‚â° : ‚àÄ {x y : distCircle}
  ‚Üí (fst (fst x)) ‚â° fst (fst y)
  ‚Üí (snd (fst x)) ‚â° snd (fst y)
  ‚Üí x ‚â° y
distCircle‚â° x=x' y=y' =
 Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù  _ _) (cong‚ÇÇ _,_ x=x' y=y')
 
isSetDistCircle : isSet distCircle
isSetDistCircle = isSetŒ£ (isSet√ó isSet‚Ñù isSet‚Ñù) (isProp‚ÜíisSet ‚àò Œª _ ‚Üí isSet‚Ñù _ _ )

‚àö¬Ω : ‚Ñù‚Çä
‚àö¬Ω = (root 2 (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)))

‚àö¬Ω<3/4 : fst ‚àö¬Ω <·µ£ rat [ 3 / 4 ]
‚àö¬Ω<3/4 = isTrans<‚â°·µ£ _ _ _
  (‚Çô‚àö-StrictMonotone {y = ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 9 / 16 ] , _)} 2
    dec‚Ñö<·µ£?) (cong fst (cong (root 2)
      (‚Ñù‚Çä‚â° (sym (cong fst (^‚Ñ§-rat _ 2)) ) )
     ‚àô Iso.leftInv (nth-pow-root-iso 2)
      (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 3 / 4 ] , tt))))

0<x¬≤‚Üí0<abs[x] : ‚àÄ x ‚Üí 0 <·µ£ x ^‚Åø 2 ‚Üí 0 <·µ£ abs·µ£ x
0<x¬≤‚Üí0<abs[x] x 0<x¬≤ =
  PT.rec (isProp<·µ£ _ _)
    (‚äé.rec
      (‚ä•.rec ‚àò
        (Œª ‚à£a‚à£< ‚Üí
          let z = isTrans‚â°<·µ£ _ _ _ (abs[x^¬≤‚Åø] 1 x ‚àô abs·µ£^‚Åø x 2)
                  (isTrans<‚â°·µ£ _ _ _ (^‚Åø-StrictMonotone 2 (‚Ñï.‚â§-solver 1 2)
                   (0‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _
                     (snd (root 2 ((x ^‚Åø 2) , 0<x¬≤)))) ‚à£a‚à£<)
                      (cong fst (Iso.rightInv (nth-pow-root-iso 2) (_ , 0<x¬≤))))
           in isIrrefl<·µ£ _ z))
      (idfun _))
    (Dichotomy‚Ñù' 0 (abs·µ£ x) _ (snd (root 2 (_ , 0<x¬≤))))


-- pre-distCircle‚Üíangle : ‚àÄ x y ‚Üí x ^‚Åø 2 +·µ£ y ^‚Åø 2 ‚â° 1 
--   ‚Üí abs·µ£ x ‚â§·µ£ (rat [ 3 / 4 ])
--   ‚Üí Œ£[ œÜ ‚àà ‚Ñù ] {!œÜ = ?!} √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y))
-- pre-distCircle‚Üíangle x y x¬≤+y¬≤=1 ‚à£x‚à£‚â§3/4 =
--  let x‚àà : x ‚àà interval‚Ñô (-·µ£ rat [ 3 / 4 ]) (rat [ 3 / 4 ])
--      x‚àà = abs‚â§‚Üíinterval x (rat [ 3 / 4 ]) ‚à£x‚à£‚â§3/4

--      x¬≤<1 : (x ^‚Åø 2) <·µ£ 1
--      x¬≤<1 = (isTrans‚â°<·µ£ _ _ _
--                   (abs[x^¬≤‚Åø] 1 x
--                     ‚àô abs·µ£^‚Åø x 2)
--                   (^<1 (abs·µ£ x) (0‚â§abs·µ£ x) 1
--                    (isTrans‚â§<·µ£ _ _ _ ‚à£x‚à£‚â§3/4 dec‚Ñö<·µ£?)))
--      0<y¬≤ : 0 <·µ£ y ^‚Åø 2
--      0<y¬≤ = <-o+-cancel _ _ _
--               (isTrans<‚â°·µ£ _ _ _
--                 (isTrans‚â°<·µ£ _ _ _ (+IdR _) x¬≤<1)
--                 (sym x¬≤+y¬≤=1))
--      0<‚à£y‚à£ : 0 <·µ£ abs·µ£ y
--      0<‚à£y‚à£ = 0<x¬≤‚Üí0<abs[x] y 0<y¬≤
--      x‚àà = (subst (Œª X ‚Üí x ‚àà
--             ointerval‚Ñô X 1)
--            (-·µ£-rat 1) (sym-interval‚Ñô‚äÜointerval‚Ñô _ 1 dec‚Ñö<·µ£? x x‚àà))
--      œÜ = arcSin‚ü®‚ü© x x‚àà
        
--      sin= = sin‚àòarcSin‚ü®‚ü© x _
--      zz :  (cos œÜ ^‚Åø 2) ‚â° (y ^‚Åø 2)
--      zz = sym (ùêë'.plusMinus _ _) ‚àô 
--       cong (_-·µ£ (x ^‚Åø 2))
--        (+·µ£Comm _ _ ‚àô cong (_+·µ£ (cos œÜ ^‚Åø 2))
--         (sym (cong (_^‚Åø 2) sin=)) ‚àô sin¬≤+cos¬≤=1 œÜ ‚àô sym x¬≤+y¬≤=1
--          ‚àô +·µ£Comm _ _)
--          ‚àô ùêë'.plusMinus _ _ 
       
--      cos= : cos œÜ ‚â° abs·µ£ y
--      cos= =  
--          cong fst (invEq (congEquiv
--            {x = _ , ‚à£x‚à£<œÄ/2‚Üí0<cos[x] œÜ (arcSin‚ü®‚ü©‚àà _ x‚àà)}
--            {_ , 0<‚à£y‚à£}
--            (_ , isEquiv-‚Çä^‚Åø 2))
--               (‚Ñù‚Çä‚â° (zz
--                   ‚àô abs[x^¬≤‚Åø] 1 y
--                     ‚àô abs·µ£^‚Åø y 2)))

--  in ‚äé.rec
--       (Œª 0<y ‚Üí
--         œÜ , {!!} , sin= , cos= ‚àô abs·µ£Pos y 0<y)
--       (Œª y<0 ‚Üí
--         œÄ-number -·µ£ œÜ , {!!} ,
--           cong sin (+·µ£Comm _ _)
--            ‚àô sin[x]=-sin[x+œÄ] (-·µ£ œÜ)
--            ‚àô sin-odd _ ‚àô
--             cong sin (-·µ£Invol _) ‚àô sin= 
--           , cong cos (+·µ£Comm _ _)
--             ‚àô cos[x]=-cos[x+œÄ] (-·µ£ œÜ)
--             ‚àô cong -·µ£_ (
--               (sym (cos-even œÜ) ‚àô cos=)
--               ‚àô abs·µ£Neg _ y<0)
--              ‚àô -·µ£Invol _)
--       (decCut y 0<‚à£y‚à£)


pre-distCircle‚Üíangle : ‚àÄ x y ‚Üí x ^‚Åø 2 +·µ£ y ^‚Åø 2 ‚â° 1 
  ‚Üí abs·µ£ x ‚â§·µ£ (rat [ 3 / 4 ])
  ‚Üí Œ£[ œÜ ‚àà ‚Ñù ] ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
              ‚äé (œÜ ‚àà ointerval‚Ñô œÄ-number/2 (œÄ-number/2 +·µ£ œÄ-number)))
      √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y))
pre-distCircle‚Üíangle x y x¬≤+y¬≤=1 ‚à£x‚à£‚â§3/4 =
 let x‚àà : x ‚àà interval‚Ñô (-·µ£ rat [ 3 / 4 ]) (rat [ 3 / 4 ])
     x‚àà = abs‚â§‚Üíinterval x (rat [ 3 / 4 ]) ‚à£x‚à£‚â§3/4

     x¬≤<1 : (x ^‚Åø 2) <·µ£ 1
     x¬≤<1 = (isTrans‚â°<·µ£ _ _ _
                  (abs[x^¬≤‚Åø] 1 x
                    ‚àô abs·µ£^‚Åø x 2)
                  (^<1 (abs·µ£ x) (0‚â§abs·µ£ x) 1
                   (isTrans‚â§<·µ£ _ _ _ ‚à£x‚à£‚â§3/4 dec‚Ñö<·µ£?)))
     0<y¬≤ : 0 <·µ£ y ^‚Åø 2
     0<y¬≤ = <-o+-cancel _ _ _
              (isTrans<‚â°·µ£ _ _ _
                (isTrans‚â°<·µ£ _ _ _ (+IdR _) x¬≤<1)
                (sym x¬≤+y¬≤=1))
     0<‚à£y‚à£ : 0 <·µ£ abs·µ£ y
     0<‚à£y‚à£ = 0<x¬≤‚Üí0<abs[x] y 0<y¬≤
     x‚àà = (subst (Œª X ‚Üí x ‚àà
            ointerval‚Ñô X 1)
           (-·µ£-rat 1) (sym-interval‚Ñô‚äÜointerval‚Ñô _ 1 dec‚Ñö<·µ£? x x‚àà))
     œÜ = arcSin‚ü®‚ü© x x‚àà
     œÜ‚àà = arcSin‚ü®‚ü©‚àà x x‚àà   
     sin= = sin‚àòarcSin‚ü®‚ü© x _
     zz :  (cos œÜ ^‚Åø 2) ‚â° (y ^‚Åø 2)
     zz = sym (ùêë'.plusMinus _ _) ‚àô 
      cong (_-·µ£ (x ^‚Åø 2))
       (+·µ£Comm _ _ ‚àô cong (_+·µ£ (cos œÜ ^‚Åø 2))
        (sym (cong (_^‚Åø 2) sin=)) ‚àô sin¬≤+cos¬≤=1 œÜ ‚àô sym x¬≤+y¬≤=1
         ‚àô +·µ£Comm _ _)
         ‚àô ùêë'.plusMinus _ _ 
       
     cos= : cos œÜ ‚â° abs·µ£ y
     cos= =  
         cong fst (invEq (congEquiv
           {x = _ , ‚à£x‚à£<œÄ/2‚Üí0<cos[x] œÜ (arcSin‚ü®‚ü©‚àà _ x‚àà)}
           {_ , 0<‚à£y‚à£}
           (_ , isEquiv-‚Çä^‚Åø 2))
              (‚Ñù‚Çä‚â° (zz
                  ‚àô abs[x^¬≤‚Åø] 1 y
                    ‚àô abs·µ£^‚Åø y 2)))
     f-inl : 0 <·µ£ y ‚Üí Œ£[ œÜ ‚àà ‚Ñù ] (œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number/2) œÄ-number/2)
                 √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y))
     f-inl 0<y = œÜ , œÜ‚àà , sin= , cos= ‚àô abs·µ£Pos y 0<y

     f-inr : y <·µ£ 0 ‚Üí Œ£[ œÜ ‚àà ‚Ñù ]
      (œÜ ‚àà ointerval‚Ñô œÄ-number/2 (œÄ-number/2 +·µ£ œÄ-number))
      √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y))
     f-inr y<0 = 
        œÄ-number -·µ£ œÜ ,
          (isTrans‚â°<·µ£ _ _ _
            (sym (ùêë'.plusMinus _ _) ‚àô cong‚ÇÇ _+·µ£_ (x+x‚â°2x _) refl)
            (<·µ£-o+ _ _ œÄ-number (-·µ£<·µ£ _ _ (snd œÜ‚àà)))
          , (isTrans<‚â°·µ£ _ _ _
            (<·µ£-o+ _ _ œÄ-number (-·µ£<·µ£ _ _ (fst œÜ‚àà)))
             (cong‚ÇÇ _+·µ£_ refl (-·µ£Invol _) ‚àô +·µ£Comm _ _))) ,
          cong sin (+·µ£Comm _ _)
           ‚àô sin[x]=-sin[x+œÄ] (-·µ£ œÜ)
           ‚àô sin-odd _ ‚àô
            cong sin (-·µ£Invol _) ‚àô sin= 
          , cong cos (+·µ£Comm _ _)
            ‚àô cos[x]=-cos[x+œÄ] (-·µ£ œÜ)
            ‚àô cong -·µ£_ (
              (sym (cos-even œÜ) ‚àô cos=)
              ‚àô abs·µ£Neg _ y<0)
             ‚àô -·µ£Invol _

 in ‚äé.rec (map-snd (map-fst inl) ‚àò f-inl)
          (map-snd (map-fst inr) ‚àò f-inr)
     (decCut y 0<‚à£y‚à£)



from-‚àö¬Ω< : ‚àÄ x y ‚Üí x ^‚Åø 2 +·µ£ y ^‚Åø 2 ‚â° 1
 ‚Üí fst ‚àö¬Ω <·µ£ abs·µ£ x ‚Üí abs·µ£ (-·µ£ y) ‚â§·µ£ rat [ 3 / 4 ]
from-‚àö¬Ω< x y x¬≤+y¬≤=1 ‚àö¬Ω<‚à£x‚à£ =
 let z = sym (ùêë'.plusMinus _ _)
           ‚àô cong (_-·µ£ (x ^‚Åø 2)) (+·µ£Comm _ _ ‚àô x¬≤+y¬≤=1)
     
     zz = isTrans<‚â°·µ£ _ _ _ (^‚Åø-StrictMonotone 2
           (‚Ñï.‚â§-solver 1 2)
           (<·µ£Weaken‚â§·µ£ _ _ (snd ‚àö¬Ω) )
           (0‚â§abs·µ£ _) ‚àö¬Ω<‚à£x‚à£)
            (sym (abs[x^¬≤‚Åø] 1 x ‚àô abs·µ£^‚Åø x 2))
     zzz : (y ^‚Åø 2) <·µ£ rat [ 1 / 2 ]      
     zzz = isTrans<‚â°·µ£ _ _ (rat [ 1 / 2 ]) (isTrans‚â°<·µ£ _ _ _ z
             (<·µ£-o+ _ _ 1 (-·µ£<·µ£ _ _ zz)))
              (cong (1 +·µ£_) (cong -·µ£_
                (cong fst (Iso.rightInv
                  (nth-pow-root-iso 2) (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))) ))
               ‚àô  (-·µ£-rat‚ÇÇ _ _) ‚àô dec‚Ñö‚â°·µ£?)
      
 in isTrans‚â°‚â§·µ£ _ _ _
    (sym (-abs·µ£ _))
     (^‚ÅøMonotone‚Åª¬π-with0 2 (‚Ñï.‚â§-solver 1 2)
       (0‚â§abs·µ£ _) dec‚Ñö<·µ£?
        (isTrans‚â°‚â§·µ£ _ _ _
          (sym (abs[x^¬≤‚Åø] 1 y ‚àô abs·µ£^‚Åø y 2))
          (isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ zzz)
          (isTrans‚â§‚â°·µ£ _ _ _ dec‚Ñö‚â§·µ£? (sym (cong fst (^‚Ñ§-rat _ 2)))))))


ointerval‚Ñô‚äÜointerval‚Ñô : ‚àÄ {a b a' b'} 
  ‚Üí a' ‚â§·µ£ a ‚Üí b ‚â§·µ£ b'
  ‚Üí ointerval‚Ñô a b ‚äÜ ointerval‚Ñô a' b'
ointerval‚Ñô‚äÜointerval‚Ñô a'‚â§a b‚â§b' _ (a<x , x<b) =
    isTrans‚â§<·µ£ _ _ _ a'‚â§a a<x
  , isTrans<‚â§·µ£ _ _ _ x<b b‚â§b'



distCircle‚Üíangle : ‚àÄ (Œµ : ‚Ñù‚Çä) x y ‚Üí x ^‚Åø 2 +·µ£ y ^‚Åø 2 ‚â° 1 ‚Üí
  ‚àÉ[ œÜ ‚àà ‚Ñù ] ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number) (œÄ-number +·µ£ fst Œµ))
    √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)))
distCircle‚Üíangle Œµ x y x¬≤+y¬≤=1 = do
 c ‚Üê Dichotomy‚Ñù' (fst ‚àö¬Ω) (abs·µ£ x)
      (rat [ 3 / 4 ])
      ‚àö¬Ω<3/4
      
 let f-inl-inl (œÜ , œÜ‚àà , sinœÜ , cosœÜ) =
        ‚à£ œÜ , ointerval‚Ñô‚äÜointerval‚Ñô
            (-·µ£‚â§·µ£ _ _ (isTrans‚â°‚â§·µ£ _ _ _
                (sym (+IdR _))
                (isTrans‚â§‚â°·µ£ _ _ _
                 ((‚â§·µ£-o+ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ 0<œÄ-number/2)))
                  (x+x‚â°2x _))))
            (isTrans‚â§‚â°·µ£ _ _ _
              (isTrans‚â°‚â§·µ£ _ _ _
                (sym (+IdR _))
                (‚â§·µ£-o+ _ _ _ (<·µ£Weaken‚â§·µ£ _ _
                 (snd ((_ , 0<œÄ-number/2) ‚Çä+·µ£ Œµ)))))
              (+·µ£Assoc _ _ _ ‚àô cong‚ÇÇ _+·µ£_ (x+x‚â°2x _) refl))
            œÜ œÜ‚àà , sinœÜ , cosœÜ ‚à£‚ÇÅ
     f-inl-inr (œÜ , œÜ‚àà , sinœÜ , cosœÜ) = do
       c ‚Üê Dichotomy‚Ñù' œÄ-number œÜ (œÄ-number +·µ£ fst Œµ)
             (isTrans‚â°<·µ£ _ _ _
                (sym (+IdR _))
                (<·µ£-o+ _ _ _ (snd Œµ)))
       let f-inl-inr-inl : œÜ <·µ£ œÄ-number +·µ£ fst Œµ ‚Üí
              ‚àÉ[ œÜ ‚àà ‚Ñù ]
                ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number) (œÄ-number +·µ£ fst Œµ))
                 √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)))     
           f-inl-inr-inl œÜ<œÄ+Œµ =
               (‚à£ œÜ , (isTrans<·µ£ _ _ _
                    (-‚Ñù‚Çä<‚Ñù‚Çä œÄ-number‚Çä œÄ-number/2‚Çä) (fst œÜ‚àà)
                      , œÜ<œÄ+Œµ) , sinœÜ , cosœÜ ‚à£‚ÇÅ)
           f-inl-inr-inr : œÄ-number <·µ£ œÜ   ‚Üí
              ‚àÉ[ œÜ ‚àà ‚Ñù ]
                ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number) (œÄ-number +·µ£ fst Œµ))
                 √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)))
           f-inl-inr-inr œÄ<œÜ =
              ‚à£ (œÜ -·µ£ 2 ¬∑·µ£ œÄ-number) ,
                   (isTrans‚â°<·µ£ _ _ _
                      (ùêë'.equalByDifference _ _
                        (sym (-·µ£Distr _ _)
                          ‚àô cong -·µ£_
                           (+·µ£Assoc _ _ _ ‚àô
                            ùêë'.+InvR' _ _
                             (x+x‚â°2x _)) 
                          ‚àô -·µ£-rat 0))
                      (<·µ£-+o _ _ (-·µ£ (2 ¬∑·µ£ œÄ-number)) œÄ<œÜ)
                  , isTrans<·µ£ _ _ _
                      (<·µ£-+o _ _ (-·µ£ (2 ¬∑·µ£ œÄ-number)) (snd œÜ‚àà))
                      (isTrans‚â°<·µ£ _ _ _
                       (cong‚ÇÇ _+·µ£_ refl (cong -·µ£_ (sym (x+x‚â°2x _))
                         ‚àô -·µ£Distr _ _) ‚àô sym (+·µ£Assoc _ _ _) ‚àô
                        cong‚ÇÇ _+·µ£_ refl (+·µ£Assoc _ _ _ ‚àô
                         ùêë'.+IdL' _ _ (+-·µ£ _ ))
                         ‚àô cong‚ÇÇ _+·µ£_ refl (cong -·µ£_ (sym (x+x‚â°2x _))
                         ‚àô -·µ£Distr _ _) ‚àô
                         +·µ£Comm _ _ ‚àô ùêë'.minusPlus _  _)
                         (-‚Ñù‚Çä<‚Ñù‚Çä œÄ-number/2‚Çä (œÄ-number‚Çä ‚Çä+·µ£ Œµ))))
                    , sym (sin-period _) ‚àô
                      cong sin (ùêë'.minusPlus _ _) ‚àô sinœÜ
                    , (sym (cos-period _) ‚àô
                      cong cos (ùêë'.minusPlus _ _)) ‚àô cosœÜ ‚à£‚ÇÅ
       ‚äé.rec f-inl-inr-inl f-inl-inr-inr c
     f-inl = 
          ‚äé.rec f-inl-inl f-inl-inr
       ‚àòS (Œª (œÜ , u , v) ‚Üí ‚äé.map (Œª u ‚Üí œÜ , u , v) (Œª u ‚Üí œÜ , u , v) u)
       ‚àòS pre-distCircle‚Üíangle x y x¬≤+y¬≤=1
       ‚àòS <·µ£Weaken‚â§·µ£ _ _
     f-inr-inl (œÜ , œÜ‚àà , sinœÜ , cosœÜ) =
       ‚à£ œÜ +·µ£ œÄ-number/2 ,
           ((isTrans<·µ£ _ _ _
             (isTrans<‚â°·µ£ _ _ _
               (-·µ£<·µ£ _ _ (snd œÄ-number‚Çä))
               (-·µ£-rat 0 ‚àô sym (+-·µ£ _) ‚àô +·µ£Comm _ _))
             (<·µ£-+o _ _ (œÄ-number/2) (fst œÜ‚àà))) ,
             isTrans<·µ£ _ _ _
               (<·µ£-+o _ _ (œÄ-number/2) (snd œÜ‚àà))
               (isTrans‚â°<·µ£ _ _ _ (x+x‚â°2x _ ‚àô sym (+IdR _))
                 (<·µ£-o+ _ _ _ (snd Œµ))))
             , sin[x+œÄ/2]=cos[x] œÜ ‚àô cosœÜ
             , cos[x+œÄ/2]=-sin[x] œÜ ‚àô
                    cong -·µ£_ sinœÜ ‚àô -·µ£Invol _ ‚à£‚ÇÅ
     f-inr-inr (œÜ , œÜ‚àà , sinœÜ , cosœÜ) = do
       c ‚Üê Dichotomy‚Ñù' œÄ-number/2 œÜ (œÄ-number/2 +·µ£ fst Œµ)
             (isTrans‚â°<·µ£ _ _ _
                (sym (+IdR _))
                (<·µ£-o+ _ _ _ (snd Œµ)))
       let sinœÜ' = sin[x+œÄ/2]=cos[x] œÜ ‚àô cosœÜ
           cosœÜ' = cos[x+œÄ/2]=-sin[x] œÜ ‚àô
                    cong -·µ£_ sinœÜ ‚àô -·µ£Invol _
           f-inr-inr-inl : œÜ <·µ£ œÄ-number/2 +·µ£ fst Œµ ‚Üí
              ‚àÉ[ œÜ ‚àà ‚Ñù ]
                ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number) (œÄ-number +·µ£ fst Œµ))
                 √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)))     
           f-inr-inr-inl œÜ<œÄ/2+Œµ =
               (‚à£ œÜ +·µ£ œÄ-number/2
                 , (isTrans<·µ£ _ _ _
                      (-‚Ñù‚Çä<‚Ñù‚Çä œÄ-number‚Çä (œÄ-number/2‚Çä ‚Çä+·µ£ œÄ-number/2‚Çä))
                      (<·µ£-+o _ _ œÄ-number/2 (fst œÜ‚àà)) ,
                  subst2 _<·µ£_
                    (+·µ£Comm _ _)
                    (+·µ£Assoc _ _ _  ‚àô
                     cong‚ÇÇ _+·µ£_
                       (x+x‚â°2x _)
                       refl)
                    (<·µ£-o+ _ _ œÄ-number/2 œÜ<œÄ/2+Œµ))
                , sinœÜ' , cosœÜ' ‚à£‚ÇÅ)
           f-inr-inr-inr : œÄ-number/2 <·µ£ œÜ   ‚Üí
              ‚àÉ[ œÜ ‚àà ‚Ñù ]
                ((œÜ ‚àà ointerval‚Ñô (-·µ£ œÄ-number) (œÄ-number +·µ£ fst Œµ))
                 √ó ((sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)))
           f-inr-inr-inr œÄ/2<œÜ =
              ‚à£ _ ,
                ( isTrans<‚â°·µ£ _ _ _
                    (a-b<c‚áía<c+b _ _ _
                     (isTrans‚â°<·µ£ _ _ _
                        (cong‚ÇÇ _-·µ£_
                           (cong -·µ£_ (sym (x+x‚â°2x _)))
                           (cong‚ÇÇ _-·µ£_ refl
                             (cong (2 ¬∑·µ£_) (sym (x+x‚â°2x _))
                              ‚àô sym (x+x‚â°2x _)))
                          ‚àô solve! ‚Ñùring)
                          œÄ/2<œÜ))
                    (+·µ£Assoc _ _ _)
                , <-o+-cancel _ _ œÄ-number/2
                  (isTrans<·µ£ _ _ _
                   (isTrans‚â°<·µ£ _ _ _
                     (+·µ£Comm _ _ ‚àô
                      sym (+·µ£Assoc _ _ _ ‚àô +·µ£Assoc _ _ _) ‚àô
                      cong (œÜ +·µ£_) (+·µ£Comm _ _ ‚àô sym (+·µ£Assoc _ _ _) ‚àô
                       cong‚ÇÇ _+·µ£_ (cong -·µ£_ (sym (x+x‚â°2x _))) (x+x‚â°2x _)
                        ‚àô cong‚ÇÇ _+·µ£_ (-·µ£Distr _ _) refl
                          ‚àô ùêë'.minusPlus _ _ ))
                     (<·µ£-o+ _ _ _ (isTrans<‚â°·µ£ _ _ _
                       (-·µ£<·µ£ _ _ (snd (œÄ-number‚Çä)))
                       (-·µ£-rat 0))))
                   (isTrans<‚â°·µ£ _ _ _
                     (<·µ£Monotone+·µ£ _ _ _ _ (snd œÜ‚àà) (snd Œµ))
                     (sym (+·µ£Assoc _ _ _)))))
               , sym (sin-period _) ‚àô
                      cong sin (ùêë'.minusPlus _ _) ‚àô sinœÜ'
               , (sym (cos-period _) ‚àô
                      cong cos (ùêë'.minusPlus _ _)) ‚àô cosœÜ' ‚à£‚ÇÅ
       ‚äé.rec f-inr-inr-inl f-inr-inr-inr c
     f-inr = ‚äé.rec f-inr-inl f-inr-inr
       ‚àòS (Œª (œÜ , u , v) ‚Üí ‚äé.map (Œª u ‚Üí œÜ , u , v) (Œª u ‚Üí œÜ , u , v) u)

 ‚äé.rec 
   f-inl
   (f-inr
    ‚àòS pre-distCircle‚Üíangle (-·µ£ y) x
     (cong‚ÇÇ _+·µ£_ (sym (^‚Åø-even 1 y)) refl ‚àô +·µ£Comm _ _ ‚àô x¬≤+y¬≤=1)
    ‚àòS from-‚àö¬Ω< x y x¬≤+y¬≤=1) c



-- distCircle‚Üíangle : ‚àÄ x y ‚Üí x ^‚Åø 2 +·µ£ y ^‚Åø 2 ‚â° 1 ‚Üí
--   ‚àÉ[ œÜ ‚àà ‚Ñù ] (sin œÜ ‚â° x) √ó (cos œÜ ‚â° y)
-- distCircle‚Üíangle x y x¬≤+y¬≤=1 = do
--  c ‚Üê Dichotomy‚Ñù' (fst ‚àö¬Ω) (abs·µ£ x)
--       (rat [ 3 / 4 ])
--       ‚àö¬Ω<3/4
--  ‚à£ ‚äé.rec 
--    (map-snd snd ‚àò pre-distCircle‚Üíangle x y x¬≤+y¬≤=1  ‚àò <·µ£Weaken‚â§·µ£ _ _)
--    ((Œª (œÜ , _ , sinœÜ , cosœÜ) ‚Üí
--       œÜ +·µ£ œÄ-number/2 , sin[x+œÄ/2]=cos[x] œÜ ‚àô cosœÜ ,
--           cos[x+œÄ/2]=-sin[x] œÜ ‚àô
--            cong -·µ£_ sinœÜ ‚àô -·µ£Invol _ )
--     ‚àòS pre-distCircle‚Üíangle (-·µ£ y) x
--      (cong‚ÇÇ _+·µ£_ (sym (^‚Åø-even 1 y)) refl ‚àô +·µ£Comm _ _ ‚àô x¬≤+y¬≤=1)
--     ‚àòS from-‚àö¬Ω< x y x¬≤+y¬≤=1)
--    c ‚à£‚ÇÅ


abs·µ£x=0‚Üíx=0 : ‚àÄ x ‚Üí abs·µ£ x ‚â° 0 ‚Üí x ‚â° 0
abs·µ£x=0‚Üíx=0 x ‚à£x‚à£‚â°0 = eq‚Ñù _ _ Œª Œµ ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _)
   (isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (ùêë'.+IdR' _ _ (-·µ£-rat 0)) ‚àô ‚à£x‚à£‚â°0) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))


sin-k-period-pos : (a a' : ‚Ñù) ‚Üí ‚àÄ n ‚Üí a -·µ£ a' ‚â° rat [ pos n / 1 ] ‚Üí
 sin (a ¬∑·µ£ (2 ¬∑·µ£ œÄ-number)) ‚â° sin (a' ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))
sin-k-period-pos a a' zero p =
  cong (sin ‚àò (_¬∑·µ£ (2 ¬∑·µ£ œÄ-number)))
   (ùêë'.equalByDifference _ _ p)
sin-k-period-pos a a' (suc n) p =
  (cong sin (sym (ùêë'.minusPlus _ (2 ¬∑·µ£ œÄ-number))
   ‚àô cong‚ÇÇ _+·µ£_ (cong‚ÇÇ _-·µ£_ refl (sym (¬∑IdL _)) ‚àô
    sym (ùêë'.¬∑DistL- _ _ _))  refl) ‚àô sin-period _) ‚àô
   sin-k-period-pos (a -·µ£ 1) a' n (
    ((sym (+·µ£Assoc _ _ _) ‚àô‚àô
     cong (a +·µ£_) (+·µ£Comm _ _)
     ‚àô‚àô +·µ£Assoc _ _ _) ‚àô‚àô cong (_-·µ£ 1) p ‚àô‚àô
     (-·µ£-rat‚ÇÇ _ _ ‚àô cong rat
     (‚Ñö.‚Ñ§-‚Üí‚Ñö- (pos (suc n)) (pos 1)))))


circle-rel : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
circle-rel x y = Œ£[ k ‚àà ‚Ñ§.‚Ñ§ ] x -·µ£ y ‚â° rat [ k / 1 ] 


sin-k-period : (a a' : ‚Ñù) ‚Üí circle-rel a a' ‚Üí
  sin (a ¬∑·µ£ (2 ¬∑·µ£ œÄ-number)) ‚â° sin (a' ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))
sin-k-period a a' (pos n , p) = sin-k-period-pos a a' n p

sin-k-period a a' (‚Ñ§.negsuc n , p) =
 sym (sin-k-period-pos a' a (suc n)
  (sym (-[x-y]‚â°y-x _ _) ‚àô‚àô cong -·µ£_ p
    ‚àô‚àô -·µ£-rat _))

cos-k-period : (a a' : ‚Ñù) ‚Üí circle-rel a a' ‚Üí
  cos (a ¬∑·µ£ (2 ¬∑·µ£ œÄ-number)) ‚â° cos (a' ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))
cos-k-period a a' (k , p) =
  (sym (sin[x+œÄ/2]=cos[x] _) ‚àô
    sym (cong sin (¬∑DistR+ _ _ _ ‚àô
      cong‚ÇÇ _+·µ£_ refl (¬∑·µ£Assoc _ _ _ ‚àô
       ¬∑·µ£Assoc _ _ _ ‚àô ùêë'.¬∑IdL' _ _
        (cong‚ÇÇ _¬∑·µ£_ (sym (rat¬∑·µ£rat _ _)) refl ‚àô sym (rat¬∑·µ£rat _ _)
         ‚àô dec‚Ñö‚â°·µ£?)))))
   ‚àô‚àô sin-k-period (a +·µ£ rat [ 1 / 4 ]) (a' +·µ£ rat [ 1 / 4 ])
      (k , Lùêë.lem--075 ‚àô p)
   ‚àô‚àô
    (cong sin (¬∑DistR+ _ _ _ ‚àô
      cong‚ÇÇ _+·µ£_ refl (¬∑·µ£Assoc _ _ _ ‚àô
       ¬∑·µ£Assoc _ _ _ ‚àô ùêë'.¬∑IdL' _ _
        (cong‚ÇÇ _¬∑·µ£_ (sym (rat¬∑·µ£rat _ _)) refl ‚àô sym (rat¬∑·µ£rat _ _)
         ‚àô dec‚Ñö‚â°·µ£?))) ‚àô sin[x+œÄ/2]=cos[x] _)




isPropCircle-rel : ‚àÄ a b ‚Üí isProp (circle-rel a b)
isPropCircle-rel a b (k , p) (k' , p') =
  Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù  _ _)
   (injFromNat‚Ñö _ _ (inj-rat _ _ (sym p ‚àô p')))


isSymCircleRel : BinaryRelation.isSym circle-rel
isSymCircleRel x y (n , p) =
 ‚Ñ§.- n , (sym (-[x-y]‚â°y-x _ _) ‚àô‚àô cong -·µ£_ p ‚àô‚àô -·µ£-rat _)

isEquivRelCircleRel : BinaryRelation.isEquivRel circle-rel
isEquivRelCircleRel .BinaryRelation.isEquivRel.reflexive x =
  0 , +-·µ£ _
isEquivRelCircleRel .BinaryRelation.isEquivRel.symmetric = isSymCircleRel
isEquivRelCircleRel .BinaryRelation.isEquivRel.transitive
  x y z (n , p) (n' , p') =
   (n ‚Ñ§.+ n') ,
     (sym Lùêë.lem--074
      ‚àô‚àô cong‚ÇÇ _+·µ£_ p p' ‚àô‚àô
      (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.‚Ñ§+‚Üí‚Ñö+ n n')))
      
Circle : Type
Circle = ‚Ñù / circle-rel

fromCircle‚â° : (a b : ‚Ñù) ‚Üí [ a ]/ ‚â° [ b ]/ ‚Üí circle-rel a b
fromCircle‚â° = SQ.effective isPropCircle-rel isEquivRelCircleRel

isSetCircle : isSet Circle
isSetCircle = squash/

injCircle : ‚Ñù ‚Üí Circle 
injCircle = [_]/


sinFromCircle : Circle ‚Üí ‚Ñù
sinFromCircle = SQ.Rec.go w
 where
 w : Rec ‚Ñù
 w .Rec.isSetB = isSet‚Ñù
 w .Rec.f a = sin (a ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))
 w .Rec.f‚àº = sin-k-period

cosFromCircle : Circle ‚Üí ‚Ñù
cosFromCircle = SQ.Rec.go w
 where
 w : Rec ‚Ñù
 w .Rec.isSetB = isSet‚Ñù
 w .Rec.f a = cos (a ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))
 w .Rec.f‚àº = cos-k-period


module _ (Œµ : ‚Ñù‚Çä) where
 circle-rel-overlap : 
   (x y : (Œ£[ x ‚àà ‚Ñù ] x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst Œµ))) ‚Üí Type
 circle-rel-overlap (x , _) (y , _) = circle-rel x y

 CircleOverlap[_] : Type
 CircleOverlap[_] =
  (Œ£[ x ‚àà ‚Ñù ] x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst Œµ))
   / circle-rel-overlap


 CircleOverlap[_]‚ÜíCircle : CircleOverlap[_] ‚Üí Circle
 CircleOverlap[_]‚ÜíCircle = SQ.Rec.go w
  where
  w : Rec _
  w .Rec.isSetB = isSetCircle
  w .Rec.f (a , _) = [ a ]/
  w .Rec.f‚àº _ _ = eq/ _ _

 
Interval‚Ñù : Type
Interval‚Ñù = Œ£ ‚Ñù (_‚àà (interval‚Ñô 0 1))



Circle‚ÜídistCircle : Circle ‚Üí distCircle
Circle‚ÜídistCircle x = (sinFromCircle x , cosFromCircle x) ,
 SQ.ElimProp.go w x  
 where
 w : ElimProp Œª x ‚Üí sinFromCircle x ¬∑·µ£ sinFromCircle x +·µ£
                     cosFromCircle x ¬∑·µ£ cosFromCircle x ‚â° rat [ pos 1 / 1 ]
 w .ElimProp.isPropB _ = isSet‚Ñù _ _
 w .ElimProp.f x = sin¬∑sin+cos¬∑cos=1 (x ¬∑·µ£ (2 ¬∑·µ£ œÄ-number))




Circle‚Üí[sin,cos]-surj : isSurjection Circle‚ÜídistCircle
Circle‚Üí[sin,cos]-surj ((x , y) , x¬≤+y¬≤‚â°1) =
  PT.map (Œª (œÜ , _ , sinœÜ‚â°x , cosœÜ‚â°y) ‚Üí
    injCircle (œÜ Ôºè·µ£‚Çä (2 ‚Çä¬∑·µ£ œÄ-number‚Çä)) ,
      Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
      (cong‚ÇÇ _,_
       (cong sin ([x/‚Çäy]¬∑y·µ£ _ _) ‚àô sinœÜ‚â°x)
       (cong cos ([x/‚Çäy]¬∑y·µ£ _ _) ‚àô cosœÜ‚â°y)))
    (distCircle‚Üíangle 1 x y (cong‚ÇÇ _+·µ£_ (x^¬≤=x¬∑x _) (x^¬≤=x¬∑x _) ‚àô x¬≤+y¬≤‚â°1))



cosx‚â°1‚Üísinx‚â°0 : ‚àÄ x ‚Üí cos x ‚â° 1 ‚Üí sin x ‚â° 0
cosx‚â°1‚Üísinx‚â°0 x cosx=1 = 
  x¬≤‚â°0‚Üíx‚â°0 (sin x)
    (((cong‚ÇÇ _¬∑·µ£_ (sym (¬∑IdL _)) refl 
     ‚àô sym (ùêë'.+IdR' _ _
      (ùêë'.+InvR' _ _ (cong (_^‚Åø 2) cosx=1 ‚àô 1^‚Åø 2))))
      ‚àô +·µ£Assoc _ _ _) ‚àô cong (_-·µ£ 1) (sin¬≤+cos¬≤=1 x) ‚àô +-·µ£ 1)
  

opaque
 scale-sym-ointerval‚Ñô : ‚àÄ a (K : ‚Ñù‚Çä) x
   ‚Üí x ‚àà ointerval‚Ñô (-·µ£ a) a
   ‚Üí x ¬∑·µ£ fst K ‚àà  ointerval‚Ñô (-·µ£ (a ¬∑·µ£ fst K)) (a ¬∑·µ£ fst K)
 scale-sym-ointerval‚Ñô a K x (-a<x , x<a) =
   isTrans‚â°<·µ£ _ _ _ (sym (-·µ£¬∑ _ _)) (<·µ£-¬∑·µ£o _ _ K -a<x)
    , <·µ£-¬∑·µ£o _ _ K x<a


‚ü®0,2œÄ‚ü©‚Üícos<1 : ‚àÄ x ‚Üí x ‚àà ointerval‚Ñô 0 (2 ¬∑·µ£ œÄ-number) ‚Üí cos x <·µ£ 1  
‚ü®0,2œÄ‚ü©‚Üícos<1 x (x<0 , x<2œÄ) =
 let x/2 = ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _ ) ‚Çä¬∑·µ£ (_ , x<0)
 in isTrans‚â°<·µ£ _ _ _ 
    (cong cos (sym (ùêë'.¬∑IdL' _ _ (sym (rat¬∑·µ£rat _ _) ‚àô dec‚Ñö‚â°·µ£?))
      ‚àô sym (¬∑·µ£Assoc _ _ _))
      ‚àô cos[2œÜ]=2cos¬≤[œÜ]-1 (rat [ 1 / 2 ] ¬∑·µ£ x))
        (a<c+b‚áía-c<b _ _ _
         (isTrans<‚â°·µ£ _ _ _
           (<·µ£-o¬∑·µ£ _ _ 2
            (isTrans‚â°<·µ£ _ _ _
              (abs[x^¬≤‚Åø] 1 _ ‚àô abs·µ£^‚Åø _ 2)
              (^<1 (abs·µ£ _) (0‚â§abs·µ£ _) 1
               (isTrans‚â°<·µ£ _ _ _
                 (cong abs·µ£ (cos[x]=-sin[x-œÄ/2] _) ‚àô sym (-abs·µ£ _))
                 ((ointerval‚Üíabs< _ _
                      (map-fst (isTrans‚â°<·µ£ _ _ _ (-·µ£-rat 1)) (
                    ‚ü®-œÄ/2,œÄ/2‚ü©‚Üísin‚àà‚ü®-1,1‚ü© _
                     (isTrans‚â°<·µ£ _ _ _ (sym (+IdL _))
                       (<·µ£-+o _ _ _ (snd $ x/2) )
                       ,  
                          isTrans<‚â°·µ£ _ _ _  
                          (<·µ£-+o _ _ (-·µ£ œÄ-number/2)
                            (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _ )) x<2œÄ))
                            (cong‚ÇÇ _-·µ£_
                              (((¬∑·µ£Assoc _ _ _) ‚àô
                              ùêë'.¬∑IdL' _ _ (sym (rat¬∑·µ£rat  _ _) ‚àô
                                dec‚Ñö‚â°·µ£?))
                               ‚àô sym (x+x‚â°2x _)) refl
                             ‚àô ùêë'.plusMinus œÄ-number/2 œÄ-number/2)
                       )))
                   
                       ))))))
           (sym (x+x‚â°2x 1))))
     

cos=1‚áí : ‚àÄ x ‚Üí cos (x ¬∑·µ£ (2 ¬∑·µ£ œÄ-number)) ‚â° 1 ‚Üí circle-rel x 0
cos=1‚áí x p = PT.rec
  (isPropCircle-rel _ _)
  (Œª (q , x<q , q<x+Œµ) ‚Üí
    let ((z , q-z) , z+[q-z]=q , 0‚â§q-z , q-z<1) = ‚Ñö.floor-frac q

        pp = sym (cos-k-period x _ (z , Lùêë.lem--079))
        x‚â°z : x  ‚â° rat [ z / 1+ 0 ]
        x‚â°z = ‚äé.rec
            (Œª Œµ‚â§q-z ‚Üí
               ‚ä•.rec (‚â§·µ£‚Üí‚âØ·µ£ 1 (cos (x ¬∑·µ£ (2 ¬∑·µ£ œÄ-number)))
                           (‚â°·µ£Weaken‚â§·µ£ _ _ (sym p))
                            (isTrans‚â°<·µ£ _ _ _ (sym pp)
                              (‚ü®0,2œÄ‚ü©‚Üícos<1
                               ((x -·µ£ rat [ z / 1 ]) ¬∑·µ£ (2 ¬∑·µ£ œÄ-number) )
                               ((isTrans<‚â°·µ£ _ _ _
                                 (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (2 ‚Çä¬∑·µ£ œÄ-number‚Çä))
                                (isTrans‚â°<·µ£ _ _ _
                                 (ùêë'.0LeftAnnihilates _)
                                 (x<y‚Üí0<y-x _ _
                                   (<-+o-cancel _ _ _ (isTrans‚â°<·µ£ _ _ _
                                  (+·µ£-rat [ z / 1 ] q-z ‚àô cong rat z+[q-z]=q)
                                  (isTrans<‚â§·µ£ _ _ _
                                   q<x+Œµ (‚â§·µ£-o+ _ _ _
                                      (‚â§‚Ñö‚Üí‚â§·µ£ _ q-z Œµ‚â§q-z))))))))
                                (¬∑·µ£Comm _ _))
                               ,
                               isTrans<‚â°·µ£ _ _ _
                                (<·µ£-¬∑·µ£o _ _ (2 ‚Çä¬∑·µ£ œÄ-number‚Çä)
                                  (isTrans‚â§<·µ£ _ _ _
                                    (a‚â§c+b‚áía-c‚â§b _ _ _
                                     (isTrans‚â§‚â°·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ x<q)
                                      (cong rat (sym z+[q-z]=q) ‚àô
                                       sym (+·µ£-rat _ _))))
                                    (<‚Ñö‚Üí<·µ£ q-z 1 q-z<1)))
                                 (¬∑IdL _ ))))))
            (Œª q-z<Œµ ‚Üí
               let x-z‚àà = subst (Œª X ‚Üí (x -·µ£ rat [ z / 1+ 0 ])
                        ¬∑·µ£ (rat [ pos 2 / 1+ 0 ] ¬∑·µ£ œÄ-number)
                          ‚àà ointerval‚Ñô (-·µ£ X) X)
                          (¬∑·µ£Assoc _ _ _ ‚àô‚àô ¬∑·µ£Assoc _ _ _ ‚àô‚àô
                            ùêë'.¬∑IdL' _ _  (cong‚ÇÇ _¬∑·µ£_ (sym (rat¬∑·µ£rat _ _))
                               refl  ‚àô
                              sym (rat¬∑·µ£rat _ _) ‚àô
                               dec‚Ñö‚â°·µ£?))
                          (scale-sym-ointerval‚Ñô (rat [ 1 / 4 ]) (2 ‚Çä¬∑·µ£ œÄ-number‚Çä)
                         (x -·µ£ rat [ z / 1+ 0 ])
                          (isTrans<‚â§·µ£ _ _ _
                            (a+c<b‚áía<b-c _ _ _ (isTrans‚â°<·µ£ _ _ _ (+·µ£Comm _ _)
                              (a<c+b‚áía-b<c _ _ _ q<x+Œµ)))
                              (‚â§·µ£-o+ _ _ _
                                (-·µ£‚â§·µ£ _ _ (isTrans‚â°‚â§·µ£ _ _ _
                                  (sym (+IdR _))
                                  (isTrans‚â§‚â°·µ£ _ _ _
                                  (‚â§·µ£-o+ _ _
                                  (rat [ z / 1 ])
                                   (‚â§‚Ñö‚Üí‚â§·µ£ 0 q-z 0‚â§q-z))
                                   (+·µ£-rat _ _ ‚àô cong rat z+[q-z]=q)))))
                                   , isTrans<·µ£ _ _ _
                            (isTrans<‚â°·µ£ _ _ _ (<·µ£-+o _ _ (-·µ£ rat [ z / 1+ 0 ])
                             (isTrans<‚â°·µ£ _ _ _ x<q (cong rat (sym z+[q-z]=q)
                               ‚àô sym (+·µ£-rat [ z / 1 ] q-z) ‚àô +·µ£Comm _ _)))
                            (ùêë'.plusMinus _ _)) (<‚Ñö‚Üí<·µ£ q-z _ q-z<Œµ)))
                   uu = fst (invEquiv
                        (congEquiv
                          {x = (x -·µ£ rat [ z / 1+ 0 ]) ¬∑·µ£ (2 ¬∑·µ£ œÄ-number) ,
                          x-z‚àà}
                          {y = 0 , isTrans<‚â°·µ£ _ _ _
                             (-·µ£<·µ£ _ _ 0<œÄ-number/2) (-·µ£-rat 0) , 0<œÄ-number/2}
                           equivSin‚ü®‚ü©))
                          (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô -1 1))
                            (cosx‚â°1‚Üísinx‚â°0 _
                             (sym (cos-k-period x _
                              (z , Lùêë.lem--079)) ‚àô p) ‚àô sym sin0=0))
               in ùêë'.equalByDifference _ _
                   ( ((x¬∑y‚â°z‚Üíx‚â°z/‚Çäy _ _ (2 ‚Çä¬∑·µ£ œÄ-number‚Çä) (cong fst uu))) ‚àô
                     ùêë'.0LeftAnnihilates _))
            
                (‚Ñö.Dichotomy‚Ñö (fst Œµ) q-z) 
        
    in z , (ùêë'.+IdR' _ _ (-·µ£-rat 0)) ‚àô x‚â°z)
  (dense‚Ñöin‚Ñù x (x +·µ£ rat (fst Œµ))
    (isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
      (<·µ£-o+ _ _ x (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))))

 where
 Œµ : ‚Ñö‚Çä
 Œµ = [ 1 / 4 ] , _


cDist : Circle ‚Üí Circle ‚Üí ‚Ñù
cDist = SQ.Rec2.go w
 where

 zzz :  (x a a' : ‚Ñù) ‚Üí
      circle-rel a a' ‚Üí
         cos ((x -·µ£ a) ¬∑·µ£ 2 ¬∑·µ£ œÄ-number)
       ‚â° cos ((x -·µ£ a') ¬∑·µ£ 2 ¬∑·µ£ œÄ-number)
 zzz x a a' (n , p) =
     cong cos (sym (¬∑·µ£Assoc _ _ _))
   ‚àô‚àô cos-k-period _ _ (‚Ñ§.- n ,
     Lùêë.lem--062
      ‚àô sym (-[x-y]‚â°y-x _ _) ‚àô cong -·µ£_ p ‚àô -·µ£-rat _)
  ‚àô‚àô cong cos (¬∑·µ£Assoc _ _ _)

 w : Rec2 ‚Ñù
 w .Rec2.isSetB = isSet‚Ñù
 w .Rec2.f x y = 1 -·µ£ cos ((x -·µ£ y) ¬∑·µ£ 2 ¬∑·µ£ œÄ-number) 
 w .Rec2.f‚àº x a a' r = 
    cong‚ÇÇ _-·µ£_ refl (zzz x a a' r) 
 w .Rec2.‚àºf a a' x r =
    cong‚ÇÇ _-·µ£_ refl (
          sym (cong cos
        (sym (¬∑·µ£Assoc _ _ _)
         ‚àô‚àô cong‚ÇÇ _¬∑·µ£_ (sym (-[x-y]‚â°y-x _ _)) refl ‚àô -·µ£¬∑ _ _
         ‚àô‚àô cong -·µ£_ (¬∑·µ£Assoc _ _ _))
           ‚àô sym (cos-even _))
       ‚àô‚àô zzz x a a' r
       ‚àô‚àô (cong cos
        (sym (¬∑·µ£Assoc _ _ _)
         ‚àô‚àô cong‚ÇÇ _¬∑·µ£_ (sym (-[x-y]‚â°y-x _ _)) refl ‚àô -·µ£¬∑ _ _
         ‚àô‚àô cong -·µ£_ (¬∑·µ£Assoc _ _ _))
           ‚àô sym (cos-even _)))

