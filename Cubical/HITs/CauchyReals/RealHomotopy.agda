{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.RealHomotopy where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Path

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Surjection
open import Cubical.Functions.Embedding


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
-- open import Cubical.Data.Fin

import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos;‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad

open import Cubical.HITs.SetTruncation as ST
open import Cubical.HITs.GroupoidTruncation as GT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.ExponentiationMore
open import Cubical.HITs.CauchyReals.Uniform
open import Cubical.HITs.CauchyReals.PiNumber
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Summation

open import Cubical.Algebra.Ring.BigOps


open import Cubical.Algebra.CommRing.Properties
open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
open import Cubical.Algebra.AbGroup
open import Cubical.Algebra.CommRing.Base
import Cubical.Data.FinData as FD

open import Cubical.HITs.CauchyReals.TrigonometricIdentities
open import Cubical.HITs.CauchyReals.ArcSin

open import Cubical.HITs.SetQuotients as SQ renaming ([_] to [_]/)
open import Cubical.HITs.GroupoidQuotients as GQ renaming ([_] to [_]//)
open import Cubical.Relation.Binary.Base
open import Cubical.HITs.CauchyReals.Circle
open import Cubical.HITs.CauchyReals.CircleMore
open import Cubical.Tactics.CommRingSolver
open import Cubical.Algebra.Group.Instances.Int

open import Cubical.Categories.Category

open import Cubical.WildCat.Base

open import Cubical.Algebra.Group.ZAction

open import Cubical.Structures.Pointed
open import Cubical.Structures.Product

import Cubical.Homotopy.Loopspace as Lsp
import Cubical.Homotopy.Group.Base as HG

open import Cubical.HITs.SequentialColimit as Seq
open import Cubical.Data.Sequence
import Cubical.Foundations.Pointed as P


-- Iso.fun (PathIdTrunc‚ÇÄIso {b = b}) p =
--   transport (Œª i ‚Üí rec {B = TypeOfHLevel _ 1} (isOfHLevelTypeOfHLevel 1)
--                         (Œª a ‚Üí ‚à• a ‚â° b ‚à•‚ÇÅ , squash‚ÇÅ) (p (~ i)) .fst)
--             ‚à£ refl ‚à£‚ÇÅ
-- Iso.inv PathIdTrunc‚ÇÄIso = pRec (squash‚ÇÇ _ _) (cong ‚à£_‚à£‚ÇÇ)
-- Iso.rightInv PathIdTrunc‚ÇÄIso _ = squash‚ÇÅ _ _
-- Iso.leftInv PathIdTrunc‚ÇÄIso _ = squash‚ÇÇ _ _ _ _

congSq‚ÇÇ : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} ‚Üí
  {a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : A} {a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ}
  {a‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ : a‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ}
  {a'‚ÇÄ‚ÇÄ a'‚ÇÄ‚ÇÅ : A} {a'‚ÇÄ‚Çã : a'‚ÇÄ‚ÇÄ ‚â° a'‚ÇÄ‚ÇÅ}
  {a'‚ÇÅ‚ÇÄ a'‚ÇÅ‚ÇÅ : A} {a'‚ÇÅ‚Çã : a'‚ÇÅ‚ÇÄ ‚â° a'‚ÇÅ‚ÇÅ}
  {a'‚Çã‚ÇÄ : a'‚ÇÄ‚ÇÄ ‚â° a'‚ÇÅ‚ÇÄ} {a'‚Çã‚ÇÅ : a'‚ÇÄ‚ÇÅ ‚â° a'‚ÇÅ‚ÇÅ}
  ‚Üí (f : A ‚Üí A ‚Üí B)
  ‚Üí Square (a‚ÇÄ‚Çã) (a‚ÇÅ‚Çã) (a‚Çã‚ÇÄ) (a‚Çã‚ÇÅ)
  ‚Üí Square (a'‚ÇÄ‚Çã) (a'‚ÇÅ‚Çã) (a'‚Çã‚ÇÄ) (a'‚Çã‚ÇÅ)
  ‚Üí Square (Œª i ‚Üí f (a‚ÇÄ‚Çã i) (a'‚ÇÄ‚Çã i))
           (Œª i ‚Üí f (a‚ÇÅ‚Çã i) (a'‚ÇÅ‚Çã i))
           (Œª i ‚Üí f (a‚Çã‚ÇÄ i) (a'‚Çã‚ÇÄ i))
           (Œª i ‚Üí f (a‚Çã‚ÇÅ i) (a'‚Çã‚ÇÅ i))
congSq‚ÇÇ f x x‚ÇÅ i j = f (x i j) (x‚ÇÅ i  j) 
{-# INLINE congSq‚ÇÇ #-}

congSqP : ‚àÄ {‚Ñì ‚Ñì'} {A : I ‚Üí I ‚Üí Type ‚Ñì} {B : I ‚Üí I ‚Üí Type ‚Ñì'}
  {a‚ÇÄ‚ÇÄ : A i0 i0} {a‚ÇÄ‚ÇÅ : A i0 i1} {a‚ÇÄ‚Çã : PathP (Œª j ‚Üí A i0 j) a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÄ : A i1 i0} {a‚ÇÅ‚ÇÅ : A i1 i1} {a‚ÇÅ‚Çã : PathP (Œª j ‚Üí A i1 j) a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ}
  {a‚Çã‚ÇÄ : PathP (Œª i ‚Üí A i i0) a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ : PathP (Œª i ‚Üí A i i1) a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ}
  ‚Üí (f : ‚àÄ i j ‚Üí A i j ‚Üí B i j)
  ‚Üí SquareP A a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ
  ‚Üí SquareP B (congP (f i0) a‚ÇÄ‚Çã) (congP (f i1) a‚ÇÅ‚Çã)
              (congP (Œª i ‚Üí f i i0) a‚Çã‚ÇÄ) (congP (Œª i ‚Üí f i i1) a‚Çã‚ÇÅ)
congSqP f sq i j = f i j (sq i j)
{-# INLINE congSqP #-}

--  stichGpdFns : isGroupoid A ‚Üí (‚àÄ x x< <x ‚Üí f x x< ‚â° g x <x) ‚Üí ‚Ñù ‚Üí A
--  stichGpdFns gpdA f=g x =
--    PT.rec‚ÜíGpd gpdA (‚äé.rec (f x) (g x))
--     (w x)
--      (Dichotomy‚Ñù' a x b a<b)
--   where

--   w-coh : ‚àÄ x ‚Üí (x‚ÇÇ y z : (x <·µ£ b) ‚äé (a <·µ£ x)) ‚Üí
--       Square (w‚ÇÇ f=g x x‚ÇÇ y) (w‚ÇÇ f=g x x‚ÇÇ z) refl (w‚ÇÇ f=g x y z)
--   w-coh x (inl x‚ÇÅ) (inl x‚ÇÇ) (inl x‚ÇÉ) =
--     congP (Œª _ ‚Üí cong (f x)) (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ _ _) _ _ _ _)
--   w-coh x (inl x‚ÇÅ) (inl x‚ÇÇ) (inr x‚ÇÉ) =
--     {!!} ‚ñ∑ {!!} ‚àô
--      cong‚ÇÇ _‚àô_ refl (Œª _ j ‚Üí f=g x {!isProp<·µ£ x b x‚ÇÅ x‚ÇÇ j  !} x‚ÇÉ i1) ‚àô sym (rUnit _)
--     -- f=g x {!!} x‚ÇÉ (i ‚àß j)
--     -- let zz = congSqP
--     --        (Œª i j x< ‚Üí
--     --        f=g x x< x‚ÇÉ (i ‚àß j))
--     --        (isSet‚ÜíisSet' (isProp‚ÜíisSet (isProp<·µ£ x b))
--     --           refl {!!} refl {!!})
--     -- in {!zz!}
--   w-coh x (inl x‚ÇÅ) (inr x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   w-coh x (inl x‚ÇÅ) (inr x‚ÇÇ) (inr x‚ÇÉ) = {!!}
--   w-coh x (inr x‚ÇÅ) (inl x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   w-coh x (inr x‚ÇÅ) (inl x‚ÇÇ) (inr x‚ÇÉ) = {!!}
--   w-coh x (inr x‚ÇÅ) (inr x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   w-coh x (inr x‚ÇÅ) (inr x‚ÇÇ) (inr x‚ÇÉ) =
--     congP (Œª _ ‚Üí cong (g x)) (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ _ _) _ _ _ _)
  
--   w : ‚àÄ x ‚Üí 3-Constant (‚äé.rec (f x) (g x))
--   w x .3-Constant.link = w‚ÇÇ f=g x
--   w x .3-Constant.coh‚ÇÅ = w-coh x
--   -- w x .3-Constant.coh‚ÇÅ (inl x‚ÇÅ) (inl x‚ÇÇ) (inl x‚ÇÉ) =
--   --   congP (Œª _ ‚Üí cong (f x)) (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ _ _) _ _ _ _)
--   -- w x .3-Constant.coh‚ÇÅ (inl x‚ÇÅ) (inl x‚ÇÇ) (inr x‚ÇÉ) =
--   --  let z = congSqP
--   --          (Œª i j x< ‚Üí
--   --          f=g x x< x‚ÇÉ (i ‚àß j))
--   --          (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ x b)
--   --            {!!}
--   --            {!!}
--   --            {!!}
--   --            {!!})
--   --  in {!z!}
--   --   -- congP (Œª i ‚Üí congP (Œª j y ‚Üí f=g x {!!} {!!} (i ‚àß j)))
--   --   --      (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ _ _) _ _ _ _)
--   -- w x .3-Constant.coh‚ÇÅ (inl x‚ÇÅ) (inr x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   -- w x .3-Constant.coh‚ÇÅ (inl x‚ÇÅ) (inr x‚ÇÇ) (inr x‚ÇÉ) = {!!}
--   -- w x .3-Constant.coh‚ÇÅ (inr x‚ÇÅ) (inl x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   -- w x .3-Constant.coh‚ÇÅ (inr x‚ÇÅ) (inl x‚ÇÇ) (inr x‚ÇÉ) = {!!}
--   -- w x .3-Constant.coh‚ÇÅ (inr x‚ÇÅ) (inr x‚ÇÇ) (inl x‚ÇÉ) = {!!}
--   -- w x .3-Constant.coh‚ÇÅ (inr x‚ÇÅ) (inr x‚ÇÇ) (inr x‚ÇÉ) =
--   --  congP (Œª _ ‚Üí cong (g x)) (isProp‚ÜíSquareP (Œª _ _ ‚Üí isProp<·µ£ _ _) _ _ _ _)
-- -- stichGpdFns : ‚àÄ {‚Ñì} (A : Type ‚Ñì) ‚Üí (isGroupoid A) ‚Üí (a b : ‚Ñù) ‚Üí a <·µ£ b
-- --            ‚Üí (f : ‚àÄ x ‚Üí x <·µ£ b ‚Üí A)
-- --            ‚Üí (g : ‚àÄ x ‚Üí a <·µ£ x ‚Üí A)
-- --            ‚Üí (‚àÄ x x< <x ‚Üí f x x< ‚â° g x <x)
-- --            ‚Üí ‚Ñù ‚Üí A
-- -- stichGpdFns A isGroupoidA a b a<b f g f=g x =
-- --   PT.rec‚ÜíGpd isGroupoidA
-- --     (‚äé.rec (f x) (g x))
-- --     w
-- --    (Dichotomy‚Ñù' a x b a<b)
-- --  where
-- --  w : 3-Constant (‚äé.rec (f x) (g x))
-- --  w .3-Constant.link = {!!}
-- --  w .3-Constant.coh‚ÇÅ = {!!}
-- --  -- w : 2-Constant (‚äé.rec (f x) (g x))
-- --  -- w (inl u) (inl v) = cong (f x) (isProp<·µ£ _ _ u v)
-- --  -- w (inl u) (inr v) = f=g x u v
-- --  -- w (inr u) (inl v) = sym (f=g x v u)
-- --  -- w (inr u) (inr v) = cong (g x) (isProp<·µ£ _ _ u v)





record MetricSpaceStr {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where

  constructor metricSpaceStr

  field
   is-set : isSet A
   ùëë[_,_] : A ‚Üí A ‚Üí ‚Ñù
   ùëë-nonNeg : ‚àÄ x y ‚Üí 0 ‚â§·µ£ ùëë[ x , y ]
   ùëë-sym : ‚àÄ x y ‚Üí ùëë[ x , y ] ‚â° ùëë[ y , x ]
   ùëë-pos : ‚àÄ x y ‚Üí (0 <·µ£ ùëë[ x , y ]) ‚Üí x ‚â° y ‚Üí ‚ä•
   ùëë-zero‚Üí‚â° : ‚àÄ x y ‚Üí 0 ‚â° ùëë[ x , y ] ‚Üí x ‚â° y
   ùëë-‚â°‚Üízero : ‚àÄ x y ‚Üí x ‚â° y ‚Üí 0 ‚â° ùëë[ x , y ]
   ùëë-triangle : ‚àÄ x y z ‚Üí ùëë[ x , z ] ‚â§·µ£ ùëë[ x , y ] +·µ£ ùëë[ y , z ]
   
MetricSpace : ‚àÄ ‚Ñì ‚Üí Type (‚Ñì-suc ‚Ñì)
MetricSpace ‚Ñì = TypeWithStr ‚Ñì MetricSpaceStr

MetricSpace‚ÇÄ = MetricSpace ‚Ñì-zero

‚ÑùMetricSpace : MetricSpace‚ÇÄ
‚ÑùMetricSpace .fst = ‚Ñù
‚ÑùMetricSpace .snd .MetricSpaceStr.is-set = isSet‚Ñù
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë[_,_] x y = abs·µ£ (x -·µ£ y)
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-nonNeg _ _ = 0‚â§abs·µ£ _
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-sym = minusComm-abs·µ£
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-pos _ _ 0<d x=y =
  ‚â§·µ£‚Üí‚âØ·µ£ (abs·µ£ _) 0
   (‚â°·µ£Weaken‚â§·µ£ _ _ (cong abs·µ£ (ùêë'.+InvR' _ _ x=y) ‚àô abs·µ£0)) 0<d
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-zero‚Üí‚â° _ _ 0=d =
  ùêë'.equalByDifference _ _ (abs·µ£x=0‚Üíx=0 _ (sym 0=d))
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-‚â°‚Üízero _ _ 0=d =
  sym abs·µ£0 ‚àô cong abs·µ£ (sym (ùêë'.+InvR' _ _ 0=d))
‚ÑùMetricSpace .snd .MetricSpaceStr.ùëë-triangle = abs·µ£-triangle-midpt

MetricSubSpace : ‚àÄ {‚Ñì} (A : Type ‚Ñì) ‚Üí (P : ‚Ñô A)
  ‚Üí MetricSpaceStr A
  ‚Üí MetricSpaceStr (Œ£ A (_‚àà P))
MetricSubSpace A P msp = w
 where
 open MetricSpaceStr msp
 w : MetricSpaceStr (Œ£ A (_‚àà P))
 w .MetricSpaceStr.is-set = isSetŒ£ is-set (isProp‚ÜíisSet ‚àò ‚àà-isProp P)
 w .ùëë[_,_] (x , _) (y , _) = ùëë[ x , y ] 
 w .ùëë-nonNeg _ _ = ùëë-nonNeg _ _
 w .ùëë-sym _ _ = ùëë-sym _ _
 w .ùëë-pos _ _ 0<d = ùëë-pos _ _ 0<d ‚àò cong fst
 w .ùëë-zero‚Üí‚â° _ _ 0=d = Œ£‚â°Prop (‚àà-isProp P) (ùëë-zero‚Üí‚â° _ _ 0=d)
 w .ùëë-‚â°‚Üízero _ _ = ùëë-‚â°‚Üízero _ _ ‚àò cong fst
 w .ùëë-triangle _ _ _ = ùëë-triangle _ _ _


IsUContMap : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'}
         (AM : MetricSpaceStr A) (f : A ‚Üí B) (BM : MetricSpaceStr B)
         ‚Üí Type ‚Ñì
IsUContMap AM f BM =
 ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ Œ¥ ‚àà ‚Ñö‚Çä ]
   ‚àÄ x y ‚Üí AM.ùëë[ x , y ] <·µ£ rat (fst Œ¥)
         ‚Üí BM.ùëë[ f x , f y ] <·µ£ rat (fst Œµ)
 where
    module AM = MetricSpaceStr AM
    module BM = MetricSpaceStr BM

UContMap : ‚àÄ {‚Ñì ‚Ñì'} ‚Üí MetricSpace ‚Ñì ‚Üí MetricSpace ‚Ñì' ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
UContMap (_ , A) (_ , B) = Œ£ _ Œª f ‚Üí ‚à• IsUContMap A f B ‚à•‚ÇÅ



IntervalMetricSpace : MetricSpace‚ÇÄ
IntervalMetricSpace = _ , MetricSubSpace _  (interval‚Ñô 0 1) (snd ‚ÑùMetricSpace)


isUContMap‚àò : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''}
  ‚Üí (A : MetricSpace ‚Ñì)
  ‚Üí (B : MetricSpace ‚Ñì')
  ‚Üí (C : MetricSpace ‚Ñì'')
  ‚Üí ‚àÄ f g
  ‚Üí IsUContMap (snd B) f (snd C)
  ‚Üí IsUContMap (snd A) g (snd B)
  ‚Üí IsUContMap (snd A) (f ‚àò g) (snd C)  
isUContMap‚àò = {!!}

uContConstMap : ‚àÄ {‚Ñì ‚Ñì'}
  ‚Üí (A : MetricSpace ‚Ñì)
  ‚Üí (B : MetricSpace ‚Ñì')
  ‚Üí (b : ‚ü® B ‚ü©) ‚Üí IsUContMap (snd A) (const b) (snd B) 
uContConstMap A B a = (Œª Œµ ‚Üí 1 , Œª _ _ _ ‚Üí isTrans‚â°<·µ£ _ _ _ {!!} {!!} )

Interval¬≤MetricSpaceStr : MetricSpaceStr
 ((Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)) √ó (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)))
Interval¬≤MetricSpaceStr = {!!}

Interval¬≤MetricSpace : MetricSpace‚ÇÄ
Interval¬≤MetricSpace = (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)) √ó (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1))
  , Interval¬≤MetricSpaceStr
  --MetricSubSpace _  (interval‚Ñô 0 1) (snd ‚ÑùMetricSpace)


ùêø‚ÇÅ-Metric : ‚àÄ {‚Ñì}
  ‚Üí (A : MetricSpace ‚Ñì)
  ‚Üí UContMap IntervalMetricSpace A
  ‚Üí UContMap IntervalMetricSpace A ‚Üí ‚Ñù 
ùêø‚ÇÅ-Metric A f g = {!!}

UContMapEq : ‚àÄ {‚Ñì ‚Ñì'} ‚Üí (A : MetricSpace ‚Ñì)
          ‚Üí (A' : MetricSpace ‚Ñì') ‚Üí
            (f g : UContMap A A')
            ‚Üí (‚àÄ x ‚Üí fst f x ‚â° fst g x ) ‚Üí f ‚â° g
UContMapEq A A' f g x = Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ) (funExt x)

ùêø‚ÇÅ-MetricSpace : ‚àÄ {‚Ñì}
  ‚Üí (A : MetricSpace ‚Ñì)
  ‚Üí MetricSpaceStr (UContMap IntervalMetricSpace A) 
ùêø‚ÇÅ-MetricSpace A = w
 where
 module AM = MetricSpaceStr (snd A)

 w : MetricSpaceStr (UContMap IntervalMetricSpace A)
 w .MetricSpaceStr.is-set =
   isSetŒ£ (isSet‚Üí AM.is-set) Œª _ ‚Üí isProp‚ÜíisSet squash‚ÇÅ
 w .MetricSpaceStr.ùëë[_,_] = ùêø‚ÇÅ-Metric A
 w .MetricSpaceStr.ùëë-nonNeg = {!!}
 w .MetricSpaceStr.ùëë-sym = {!c!}
 w .MetricSpaceStr.ùëë-pos = {!!}
 w .MetricSpaceStr.ùëë-zero‚Üí‚â° = {!!}
 w .MetricSpaceStr.ùëë-‚â°‚Üízero = {!!}
 w .MetricSpaceStr.ùëë-triangle = {!!}

ùêø‚ÇÅ-MetricSpace‚Åø :  ‚àÄ {‚Ñì} ‚Üí ‚Ñï ‚Üí MetricSpace ‚Ñì ‚Üí MetricSpace ‚Ñì 
ùêø‚ÇÅ-MetricSpace‚Åø zero A = A
ùêø‚ÇÅ-MetricSpace‚Åø (suc n) A = _ , ùêø‚ÇÅ-MetricSpace (ùêø‚ÇÅ-MetricSpace‚Åø n A)


private
 variable
  ‚Ñì ‚Ñì' : Level

‚àôMetricSpaceStr : Type ‚Ñì ‚Üí Type ‚Ñì
‚àôMetricSpaceStr = ProductStructure PointedStructure MetricSpaceStr

‚àôMetricSpace : ‚àÄ ‚Ñì ‚Üí Type (‚Ñì-suc ‚Ñì)
‚àôMetricSpace ‚Ñì = TypeWithStr ‚Ñì ‚àôMetricSpaceStr

‚àôMetricSpace‚ÜíPointed : ‚àÄ {‚Ñì} ‚Üí ‚àôMetricSpace ‚Ñì ‚Üí P.Pointed ‚Ñì
‚àôMetricSpace‚ÜíPointed (A , a , _) = (A , a)

‚àôMetricSpace‚ÜíMetricSpace : ‚àÄ {‚Ñì} ‚Üí ‚àôMetricSpace ‚Ñì ‚Üí MetricSpace ‚Ñì
‚àôMetricSpace‚ÜíMetricSpace (_ , _ , A) = (_ , A)


instance
  fromNatUnitInterval : HasFromNat (Œ£ _ (_‚àà interval‚Ñô 0 1))
  fromNatUnitInterval .HasFromNat.Constraint zero = Unit
  fromNatUnitInterval .HasFromNat.Constraint (suc zero) = Unit
  fromNatUnitInterval .HasFromNat.Constraint (suc (suc x)) = ‚ä•
  fromNatUnitInterval .HasFromNat.fromNat zero = (0 , dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)
  fromNatUnitInterval .HasFromNat.fromNat (suc zero) = (1 , dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)
  -- record { Constraint = Œª _ ‚Üí Unit ; fromNat = Œª n ‚Üí rat [ pos n / 1 ] }


open BinaryRelation 


module ‚ÑùPaths {‚Ñì} (A : MetricSpace ‚Ñì) where


 open MetricSpaceStr (snd A)

 data ‚ÑùPath  : ‚ü® A ‚ü© ‚Üí ‚ü® A ‚ü© ‚Üí Type ‚Ñì where
  ùï£path : (f : UContMap IntervalMetricSpace A) ‚Üí
               ‚ÑùPath   (fst f 0)
                       (fst f 1) 


 ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí MetricSpaceStr (‚ÑùPath a‚ÇÄ a‚ÇÅ)
 ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr a‚ÇÄ a‚ÇÅ = {!!}
 
 Œ£‚ÑùPath : ‚ü® A ‚ü© ‚Üí ‚ü® A ‚ü© ‚Üí Type ‚Ñì 
 Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ = Œ£[ f ‚àà (UContMap IntervalMetricSpace A) ]
    ((fst f 0 ‚â° a‚ÇÄ) √ó (fst f 1 ‚â° a‚ÇÅ))

 isTransŒ£‚ÑùPath : isTrans Œ£‚ÑùPath
 isTransŒ£‚ÑùPath a b c x x‚ÇÅ = {!!}
 
 module _ (a‚ÇÄ a‚ÇÅ : ‚ü® A ‚ü©) where
  Œ£‚ÑùPath‚Üí‚ÑùPath : Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ ‚Üí ‚ÑùPath a‚ÇÄ a‚ÇÅ
  Œ£‚ÑùPath‚Üí‚ÑùPath (f , f0 , f1) = subst2 ‚ÑùPath f0 f1 (ùï£path f)

  ‚ÑùPath‚ÜíŒ£‚ÑùPath : ‚ÑùPath a‚ÇÄ a‚ÇÅ ‚Üí Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ
  ‚ÑùPath‚ÜíŒ£‚ÑùPath (ùï£path f) = f , refl , refl

  sec-IsoŒ£‚ÑùPath‚ÑùPath :
    section ‚ÑùPath‚ÜíŒ£‚ÑùPath Œ£‚ÑùPath‚Üí‚ÑùPath
  sec-IsoŒ£‚ÑùPath‚ÑùPath (f , f0 , f1) =
    Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (is-set _ _) (is-set _ _))
    (UContMapEq IntervalMetricSpace A _ _
     Œª x ‚Üí
       (transportRefl _ ‚àô transportRefl _)
         ‚àô cong (fst f) (transportRefl _ ‚àô transportRefl x))

  IsoŒ£‚ÑùPath‚ÑùPath : Iso (‚ÑùPath a‚ÇÄ a‚ÇÅ) (Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ)
  IsoŒ£‚ÑùPath‚ÑùPath .Iso.fun = ‚ÑùPath‚ÜíŒ£‚ÑùPath
  IsoŒ£‚ÑùPath‚ÑùPath .Iso.inv = Œ£‚ÑùPath‚Üí‚ÑùPath
  IsoŒ£‚ÑùPath‚ÑùPath .Iso.rightInv = sec-IsoŒ£‚ÑùPath‚ÑùPath
  IsoŒ£‚ÑùPath‚ÑùPath .Iso.leftInv (ùï£path _) = transportRefl _

 UpTo‚ÑùPath‚ÇÇ : Type ‚Ñì
 UpTo‚ÑùPath‚ÇÇ = ‚ü® A ‚ü© / ‚ÑùPath

 ùï£refl : ‚àÄ x ‚Üí ‚ÑùPath x x 
 ùï£refl x = ùï£path (const x , ‚à£ uContConstMap IntervalMetricSpace A x ‚à£‚ÇÅ)


 Loops : ‚ü® A ‚ü© ‚Üí ‚àôMetricSpace ‚Ñì
 Loops a = _ , ùï£refl a , (ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr a a)


module _ {‚Ñì} (A : MetricSpace ‚Ñì) where

 data Shape : Type ‚Ñì 


 constFromCube : ‚àÄ n ‚Üí ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø n A ‚ü© ‚Üí ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø (suc n) A ‚ü©
 constFromCube n a = (Œª _ ‚Üí a) , {!!}
 
 data Shape where
  œÉ : ‚àÄ n ‚Üí ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø n A ‚ü© ‚Üí Shape
  œÉ‚Üë : ‚àÄ n a x ‚Üí œÉ n (fst a x) ‚â° œÉ (suc n) a
  œÉ‚â° : ‚àÄ n a x x' ‚Üí
          (œÉ‚Üë n (constFromCube n a) x)
       ‚â°  (œÉ‚Üë n (constFromCube n a) x') 

--  œÉ-‚Üë : ‚àÄ n (a : ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø (suc (suc n)) A ‚ü©) ‚Üí
--              ‚ü® IntervalMetricSpace ‚ü©
--             ‚Üí (x : ‚ü® IntervalMetricSpace ‚ü© )
--             ‚Üí œÉ (suc n) (((Œª t ‚Üí fst (fst a t) x) , {!!})) ‚â° œÉ (suc (suc n)) a
--  œÉ-‚Üë n a t‚ÇÄ x =
--    sym (œÉ‚Üë n ((Œª t ‚Üí fst (fst a t) x) , _) t‚ÇÄ) ‚àô‚àô
--       œÉ‚Üë n (fst a t‚ÇÄ) x ‚àô‚àô œÉ‚Üë (suc n) a t‚ÇÄ
 
--  ends-path : ‚àÄ n ‚Üí (f : ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø (suc n) A ‚ü©) ‚Üí
--         œÉ n (fst f 0) ‚â° œÉ n (fst f 1)
--  ends-path n f = œÉ‚Üë n f 0 ‚àô‚àô
--     refl {x = œÉ (suc n) f}
--    ‚àô‚àô sym (œÉ‚Üë n f 1)

--  ends-Œ£path : ‚àÄ n {a} {b} ‚Üí ‚ÑùPaths.Œ£‚ÑùPath (ùêø‚ÇÅ-MetricSpace‚Åø n A) a b ‚Üí
--         œÉ n a ‚â° œÉ n b
--  ends-Œ£path n (f , f0 , f1) =
--     cong (œÉ n) (sym f0) ‚àô‚àô
--      ends-path n f
--     ‚àô‚àô cong (œÉ n) f1

--  œÉ‚Üë-comm : ‚àÄ n (a : ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø (suc (suc n)) A ‚ü©) x t‚ÇÄ ‚Üí
--     (sym (œÉ‚Üë n ((Œª v ‚Üí fst (fst a v) x) , _) t‚ÇÄ) ‚àô‚àô
--       œÉ‚Üë n (fst a t‚ÇÄ) x ‚àô‚àô œÉ‚Üë (suc n) a t‚ÇÄ) ‚â°
--        sym (œÉ‚Üë n ((Œª v ‚Üí fst (fst a v) x) , {!!}) x)
--          ‚àô‚àô œÉ‚Üë n (fst a x) x ‚àô‚àô œÉ‚Üë (suc n) a x 
--  œÉ‚Üë-comm = {!!}
 
--  sq-shape : ‚àÄ n (f : ‚ü® ùêø‚ÇÅ-MetricSpace‚Åø (suc (suc n)) A ‚ü©)
--    ‚Üí Square
--       (ends-path n (fst f 0))
--       (ends-path n (fst f 1))
--       (ends-path n ((Œª x ‚Üí fst (fst f x) 0) , {!!}))
--       (ends-path n ((Œª x ‚Üí fst (fst f x) 1) , {!!}))
--  sq-shape n f i j =
--    hcomp
--      (Œª k ‚Üí Œª {
--        (i = i0) ‚Üí
--          hcomp
--            (Œª k' ‚Üí Œª {
--              (k = i0) ‚Üí œÉ‚Üë (suc n) f 0 k'
--             ;(j = i0) ‚Üí {!!}
--             ;(j = i1) ‚Üí {!!}
--             })
--             (œÉ (suc n) (fst f 0))
--       ;(i = i1) ‚Üí
--          hcomp
--            (Œª k' ‚Üí Œª {
--              (k = i0) ‚Üí œÉ‚Üë (suc n) f 1 k'
--             ;(j = i0) ‚Üí {!!}
--             ;(j = i1) ‚Üí {!!}
--             })
--             (œÉ (suc n) (fst f 1))
--       ;(j = i0) ‚Üí
--           hcomp
--            (Œª k' ‚Üí Œª {
--              (k = i0) ‚Üí œÉ-‚Üë n f 0 0 k'
--             ;(i = i0) ‚Üí {!!}
--             ;(i = i1) ‚Üí {!!}
--             })
--             (œÉ-‚Üë n f 0 0 i0)
--       ;(j = i1) ‚Üí
--           hcomp
--            (Œª k' ‚Üí Œª {
--              (k = i0) ‚Üí œÉ-‚Üë n f 0 1 k'
--             ;(i = i0) ‚Üí {!!}
--             ;(i = i1) ‚Üí {!!}
--             })
--             (œÉ-‚Üë n f 0 1 i0)
--       })
--      (œÉ (suc (suc n)) f)
--   where
--    t‚ÇÄ : ‚ü® IntervalMetricSpace ‚ü© 
--    t‚ÇÄ = {!!}
   
-- --  ends-path-comp : ‚àÄ n a b c
-- --     ‚Üí (f : ‚ÑùPaths.Œ£‚ÑùPath (ùêø‚ÇÅ-MetricSpace‚Åø n A) a b)
-- --     ‚Üí (g : ‚ÑùPaths.Œ£‚ÑùPath (ùêø‚ÇÅ-MetricSpace‚Åø n A) b c)
-- --     ‚Üí Square (ends-Œ£path n f)
-- --         (ends-Œ£path n
-- --         (‚ÑùPaths.isTransŒ£‚ÑùPath (ùêø‚ÇÅ-MetricSpace‚Åø n A) a b c f g))
-- --         refl
-- --         (ends-Œ£path n g)
-- --  ends-path-comp = {!!}
 
-- -- -- module _ where
-- -- --  open ‚ÑùPaths

-- -- --  record ElimShape {‚Ñì'} (A : MetricSpace ‚Ñì) (T : Shape A ‚Üí Type ‚Ñì') :
-- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- --   field
-- -- --    f-œÉ : ‚àÄ n a ‚Üí T (œÉ n a)
-- -- --    f-œÉ‚Üë :  ‚àÄ n a x ‚Üí
-- -- --      PathP (Œª i ‚Üí T (œÉ‚Üë n a x i))
-- -- --        (f-œÉ n (fst a x))
-- -- --        (f-œÉ (suc n) a)
-- -- --    f-œÉ-refl : ‚àÄ n a x x' ‚Üí
-- -- --      SquareP (Œª i j ‚Üí T (œÉ-refl n a x x' i j))
-- -- --        (f-œÉ‚Üë n (constFromCube A n a) x)
-- -- --        (f-œÉ‚Üë n (constFromCube A n a) x')
-- -- --        refl
-- -- --        refl

-- -- --   go : ‚àÄ x ‚Üí T x
-- -- --   go (œÉ n x) = f-œÉ n x
-- -- --   go (œÉ‚Üë n a x i) = f-œÉ‚Üë n a x i
-- -- --   go (œÉ-refl n a x x' i i‚ÇÅ) = f-œÉ-refl n a x x' i i‚ÇÅ

-- -- --  record ElimShape2Groupoid {‚Ñì'} (A : MetricSpace ‚Ñì)
-- -- --      (T : Shape A ‚Üí Shape A ‚Üí Type ‚Ñì') :
-- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- --   field
-- -- --    isGroupoidT : ‚àÄ x y ‚Üí isGroupoid (T x y)
-- -- --    f-œÉ-œÉ : ‚àÄ n a n' a' ‚Üí T (œÉ n a) (œÉ n' a')
-- -- --    -- f-œÉ‚Üë :  ‚àÄ n a x ‚Üí
-- -- --    --   PathP (Œª i ‚Üí T (œÉ‚Üë n a x i))
-- -- --    --     (f-œÉ n (fst a x))
-- -- --    --     (f-œÉ (suc n) a)
-- -- --    -- f-œÉ-refl : ‚àÄ n a x x' ‚Üí
-- -- --    --   SquareP (Œª i j ‚Üí T (œÉ-refl n a x x' i j))
-- -- --    --     (f-œÉ‚Üë n (constFromCube A n a) x)
-- -- --    --     (f-œÉ‚Üë n (constFromCube A n a) x')
-- -- --    --     refl
-- -- --    --     refl

-- -- --   go : ‚àÄ x y ‚Üí T x y
-- -- --   go = ElimShape.go w
-- -- --    where
-- -- --    w : ElimShape A (Œª z ‚Üí (y : Shape A) ‚Üí T z y)
-- -- --    w .ElimShape.f-œÉ n a = ElimShape.go ww
-- -- --     where
-- -- --     ww : ElimShape A (Œª z ‚Üí T (œÉ n a) z)
-- -- --     ww .ElimShape.f-œÉ = f-œÉ-œÉ n a
-- -- --     ww .ElimShape.f-œÉ‚Üë = {!!}
-- -- --     ww .ElimShape.f-œÉ-refl = {!!}
-- -- --    w .ElimShape.f-œÉ‚Üë = {!!}
-- -- --    w .ElimShape.f-œÉ-refl = {!!}


-- -- --   -- path : (p : UContMap IntervalMetricSpace A)
-- -- --   --          ‚Üí pt (fst p 0) ‚â° pt (fst p 1)
-- -- --   -- sq : (s : UContMap Interval¬≤MetricSpace A)
-- -- --   --          ‚Üí Square
-- -- --   --              (path ((Œª x ‚Üí fst s (0 , x)) , {!!}))
-- -- --   --              (path ((Œª x ‚Üí fst s (1 , x)) , {!!}))
-- -- --   --              (path ((Œª x ‚Üí fst s (x , 0)) , {!!}))
-- -- --   --              (path ((Œª x ‚Üí fst s (x , 1)) , {!!}))
-- -- --   -- const‚â°refl : ‚àÄ a icid ‚Üí path ((Œª _ ‚Üí a) , icid) ‚â° Œª _ ‚Üí pt a




-- -- -- -- isUContMap‚àò : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''}
-- -- -- --   ‚Üí (A : MetricSpace ‚Ñì)
-- -- -- --   ‚Üí (B : MetricSpace ‚Ñì')
-- -- -- --   ‚Üí (C : MetricSpace ‚Ñì'')
-- -- -- --   ‚Üí ‚àÄ f g
-- -- -- --   ‚Üí IsUContMap (snd B) f (snd C)
-- -- -- --   ‚Üí IsUContMap (snd A) g (snd B)
-- -- -- --   ‚Üí IsUContMap (snd A) (f ‚àò g) (snd C)  
-- -- -- -- isUContMap‚àò = {!!}

-- -- -- -- uContConstMap : ‚àÄ {‚Ñì ‚Ñì'}
-- -- -- --   ‚Üí (A : MetricSpace ‚Ñì)
-- -- -- --   ‚Üí (B : MetricSpace ‚Ñì')
-- -- -- --   ‚Üí (b : ‚ü® B ‚ü©) ‚Üí IsUContMap (snd A) (const b) (snd B) 
-- -- -- -- uContConstMap A B a = (Œª Œµ ‚Üí 1 , Œª _ _ _ ‚Üí isTrans‚â°<·µ£ _ _ _ {!!} {!!} )

-- -- -- -- IntervalMetricSpace : MetricSpace‚ÇÄ
-- -- -- -- IntervalMetricSpace = _ , MetricSubSpace _  (interval‚Ñô 0 1) (snd ‚ÑùMetricSpace)

-- -- -- -- Interval¬≤MetricSpaceStr : MetricSpaceStr
-- -- -- --  ((Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)) √ó (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)))
-- -- -- -- Interval¬≤MetricSpaceStr = {!!}

-- -- -- -- Interval¬≤MetricSpace : MetricSpace‚ÇÄ
-- -- -- -- Interval¬≤MetricSpace = (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1)) √ó (Œ£ ‚Ñù (_‚àà interval‚Ñô 0 1))
-- -- -- --   , Interval¬≤MetricSpaceStr
-- -- -- --   --MetricSubSpace _  (interval‚Ñô 0 1) (snd ‚ÑùMetricSpace)


-- -- -- -- ùêø‚ÇÅ-Metric : ‚àÄ {‚Ñì}
-- -- -- --   ‚Üí (A : MetricSpace ‚Ñì)
-- -- -- --   ‚Üí UContMap IntervalMetricSpace A
-- -- -- --   ‚Üí UContMap IntervalMetricSpace A ‚Üí ‚Ñù 
-- -- -- -- ùêø‚ÇÅ-Metric A f g = {!!}

-- -- -- -- UContMapEq : ‚àÄ {‚Ñì ‚Ñì'} ‚Üí (A : MetricSpace ‚Ñì)
-- -- -- --           ‚Üí (A' : MetricSpace ‚Ñì') ‚Üí
-- -- -- --             (f g : UContMap A A')
-- -- -- --             ‚Üí (‚àÄ x ‚Üí fst f x ‚â° fst g x ) ‚Üí f ‚â° g
-- -- -- -- UContMapEq A A' f g x = Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ) (funExt x)


-- -- -- -- private
-- -- -- --  variable
-- -- -- --   ‚Ñì ‚Ñì' : Level

-- -- -- -- ‚àôMetricSpaceStr : Type ‚Ñì ‚Üí Type ‚Ñì
-- -- -- -- ‚àôMetricSpaceStr = ProductStructure PointedStructure MetricSpaceStr

-- -- -- -- ‚àôMetricSpace : ‚àÄ ‚Ñì ‚Üí Type (‚Ñì-suc ‚Ñì)
-- -- -- -- ‚àôMetricSpace ‚Ñì = TypeWithStr ‚Ñì ‚àôMetricSpaceStr

-- -- -- -- ‚àôMetricSpace‚ÜíPointed : ‚àÄ {‚Ñì} ‚Üí ‚àôMetricSpace ‚Ñì ‚Üí P.Pointed ‚Ñì
-- -- -- -- ‚àôMetricSpace‚ÜíPointed (A , a , _) = (A , a)

-- -- -- -- ‚àôMetricSpace‚ÜíMetricSpace : ‚àÄ {‚Ñì} ‚Üí ‚àôMetricSpace ‚Ñì ‚Üí MetricSpace ‚Ñì
-- -- -- -- ‚àôMetricSpace‚ÜíMetricSpace (_ , _ , A) = (_ , A)


-- -- -- -- instance
-- -- -- --   fromNatUnitInterval : HasFromNat (Œ£ _ (_‚àà interval‚Ñô 0 1))
-- -- -- --   fromNatUnitInterval .HasFromNat.Constraint zero = Unit
-- -- -- --   fromNatUnitInterval .HasFromNat.Constraint (suc zero) = Unit
-- -- -- --   fromNatUnitInterval .HasFromNat.Constraint (suc (suc x)) = ‚ä•
-- -- -- --   fromNatUnitInterval .HasFromNat.fromNat zero = (0 , dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)
-- -- -- --   fromNatUnitInterval .HasFromNat.fromNat (suc zero) = (1 , dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)
-- -- -- --   -- record { Constraint = Œª _ ‚Üí Unit ; fromNat = Œª n ‚Üí rat [ pos n / 1 ] }

-- -- -- -- PathIdTrunc‚ÇÅIso : {A : Type ‚Ñì} {a b : A} ‚Üí Iso (‚à£ a ‚à£‚ÇÉ ‚â° ‚à£ b ‚à£‚ÇÉ) ‚à• a ‚â° b ‚à•‚ÇÇ
-- -- -- -- PathIdTrunc‚ÇÅIso = {!!}

-- -- -- -- module ‚ÑùPaths {‚Ñì} (A : MetricSpace ‚Ñì) where

-- -- -- --  open MetricSpaceStr (snd A)

-- -- -- --  data ‚ÑùPath  : ‚ü® A ‚ü© ‚Üí ‚ü® A ‚ü© ‚Üí Type ‚Ñì where
-- -- -- --   ùï£path : (f : UContMap IntervalMetricSpace A) ‚Üí
-- -- -- --                ‚ÑùPath   (fst f 0)
-- -- -- --                        (fst f 1) 



-- -- -- --  data Pieces : Type ‚Ñì where
-- -- -- --   pt : ‚ü® A ‚ü© ‚Üí Pieces
-- -- -- --   path : (p : UContMap IntervalMetricSpace A)
-- -- -- --            ‚Üí pt (fst p 0) ‚â° pt (fst p 1)
-- -- -- --   sq : (s : UContMap Interval¬≤MetricSpace A)
-- -- -- --            ‚Üí Square
-- -- -- --                (path ((Œª x ‚Üí fst s (0 , x)) , {!!}))
-- -- -- --                (path ((Œª x ‚Üí fst s (1 , x)) , {!!}))
-- -- -- --                (path ((Œª x ‚Üí fst s (x , 0)) , {!!}))
-- -- -- --                (path ((Œª x ‚Üí fst s (x , 1)) , {!!}))
-- -- -- --   const‚â°refl : ‚àÄ a icid ‚Üí path ((Œª _ ‚Üí a) , icid) ‚â° Œª _ ‚Üí pt a



 
-- -- -- --  Œ£‚ÑùPath : ‚ü® A ‚ü© ‚Üí ‚ü® A ‚ü© ‚Üí Type ‚Ñì 
-- -- -- --  Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ = Œ£[ f ‚àà (UContMap IntervalMetricSpace A) ]
-- -- -- --     ((fst f 0 ‚â° a‚ÇÄ) √ó (fst f 1 ‚â° a‚ÇÅ))

-- -- -- --  module _ (a‚ÇÄ a‚ÇÅ : ‚ü® A ‚ü©) where
-- -- -- --   Œ£‚ÑùPath‚Üí‚ÑùPath : Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ ‚Üí ‚ÑùPath a‚ÇÄ a‚ÇÅ
-- -- -- --   Œ£‚ÑùPath‚Üí‚ÑùPath (f , f0 , f1) = subst2 ‚ÑùPath f0 f1 (ùï£path f)

-- -- -- --   ‚ÑùPath‚ÜíŒ£‚ÑùPath : ‚ÑùPath a‚ÇÄ a‚ÇÅ ‚Üí Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ
-- -- -- --   ‚ÑùPath‚ÜíŒ£‚ÑùPath (ùï£path f) = f , refl , refl

-- -- -- --   sec-IsoŒ£‚ÑùPath‚ÑùPath :
-- -- -- --     section ‚ÑùPath‚ÜíŒ£‚ÑùPath Œ£‚ÑùPath‚Üí‚ÑùPath
-- -- -- --   sec-IsoŒ£‚ÑùPath‚ÑùPath (f , f0 , f1) =
-- -- -- --     Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (is-set _ _) (is-set _ _))
-- -- -- --     (UContMapEq IntervalMetricSpace A _ _
-- -- -- --      Œª x ‚Üí
-- -- -- --        (transportRefl _ ‚àô transportRefl _)
-- -- -- --          ‚àô cong (fst f) (transportRefl _ ‚àô transportRefl x))

-- -- -- --   IsoŒ£‚ÑùPath‚ÑùPath : Iso (‚ÑùPath a‚ÇÄ a‚ÇÅ) (Œ£‚ÑùPath a‚ÇÄ a‚ÇÅ)
-- -- -- --   IsoŒ£‚ÑùPath‚ÑùPath .Iso.fun = ‚ÑùPath‚ÜíŒ£‚ÑùPath
-- -- -- --   IsoŒ£‚ÑùPath‚ÑùPath .Iso.inv = Œ£‚ÑùPath‚Üí‚ÑùPath
-- -- -- --   IsoŒ£‚ÑùPath‚ÑùPath .Iso.rightInv = sec-IsoŒ£‚ÑùPath‚ÑùPath
-- -- -- --   IsoŒ£‚ÑùPath‚ÑùPath .Iso.leftInv (ùï£path _) = transportRefl _

-- -- -- --  UpTo‚ÑùPath‚ÇÇ : Type ‚Ñì
-- -- -- --  UpTo‚ÑùPath‚ÇÇ = ‚ü® A ‚ü© / ‚ÑùPath

-- -- -- --  open BinaryRelation 

-- -- -- --  opaque
-- -- -- --   isTrans‚ÑùPath : isTrans ‚ÑùPath
-- -- -- --   isTrans‚ÑùPath a b c d x‚ÇÅ = {!!}

-- -- -- --   isTrans‚ÑùPath-const : ‚àÄ x cid ‚Üí isTrans‚ÑùPath x x x (ùï£path ((Œª _ ‚Üí x) , cid))
-- -- -- --        (ùï£path ((Œª _ ‚Üí x) , cid))
-- -- -- --        ‚â° ùï£path ((Œª _ ‚Üí x) , cid) 
-- -- -- --   isTrans‚ÑùPath-const = {!!}


-- -- -- --  ùï£path‚Üípath : ‚àÄ {a‚ÇÄ a‚ÇÅ} ‚Üí ‚ÑùPath a‚ÇÄ a‚ÇÅ ‚Üí pt a‚ÇÄ ‚â° pt a‚ÇÅ 
-- -- -- --  ùï£path‚Üípath (ùï£path f) = path f
 
-- -- -- --  comp-ùï£paths : ‚àÄ {a} {b} {c}
-- -- -- --    (r : ‚ÑùPath a b)
-- -- -- --    (s : ‚ÑùPath b c) ‚Üí
-- -- -- --     Square
-- -- -- --      (ùï£path‚Üípath r )
-- -- -- --       (ùï£path‚Üípath (isTrans‚ÑùPath _ _ _ r s))
-- -- -- --       refl
-- -- -- --       (ùï£path‚Üípath s)
-- -- -- --  comp-ùï£paths r s = {!r !}


-- -- -- --   --  cong (cong ‚à£_‚à£‚ÇÉ ‚àò ùï£path‚Üípath)
-- -- -- --   --       (sym ((IsoŒ£‚ÑùPath‚ÑùPath _  _ .Iso.leftInv) r))
-- -- -- --   --      ‚óÅ congP (Œª _ ‚Üí cong ‚à£_‚à£‚ÇÉ) (ww (‚ÑùPath‚ÜíŒ£‚ÑùPath a b r) s) ‚ñ∑
-- -- -- --   --         cong (cong ‚à£_‚à£‚ÇÉ ‚àò ùï£path‚Üípath ‚àò flip (isTrans‚ÑùPath a b c) s)
-- -- -- --   --          ((IsoŒ£‚ÑùPath‚ÑùPath _  _ .Iso.leftInv) r)

-- -- -- --   -- where
-- -- -- --   -- -- w : {a b : ‚ü® A ‚ü©} ‚Üí ‚ÑùPath a b ‚Üí pt a ‚â° pt b
-- -- -- --   -- -- w (‚ÑùPaths.ùï£path f) = (path f)

-- -- -- --   -- ww : {a b c : ‚ü® A ‚ü©} (r : Œ£‚ÑùPath a b) (s : ‚ÑùPath b c) ‚Üí
-- -- -- --   --     Square (ùï£path‚Üípath (Œ£‚ÑùPath‚Üí‚ÑùPath a b r))
-- -- -- --   --            (ùï£path‚Üípath (isTrans‚ÑùPath a b c (Œ£‚ÑùPath‚Üí‚ÑùPath a b r) s))
-- -- -- --   --       refl (ùï£path‚Üípath s)
-- -- -- --   -- ww {a} {b} {c} (f , f0 , f1) (‚ÑùPaths.ùï£path g) =
-- -- -- --   --   wwwL ‚óÅ {!!}
-- -- -- --   --     ‚ñ∑ {!!}
-- -- -- --   -- -- www
-- -- -- --   --  where
-- -- -- --   --  wwwL : ùï£path‚Üípath (subst2 ‚ÑùPath f0 f1 (ùï£path f))
-- -- -- --   --           ‚â° (cong pt (sym f0) ‚àô‚àô
-- -- -- --   --                path f
-- -- -- --   --                ‚àô‚àô cong pt f1)
-- -- -- --   --  wwwL = {!!}
-- -- -- --   --  www : {!!}
-- -- -- --   --  www = {!!}


-- -- -- --  UpTo‚ÑùPath‚ÇÉ : Type ‚Ñì
-- -- -- --  UpTo‚ÑùPath‚ÇÉ = ‚ü® A ‚ü© // isTrans‚ÑùPath



-- -- -- --  ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí MetricSpaceStr (‚ÑùPath a‚ÇÄ a‚ÇÅ)
-- -- -- --  ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr a‚ÇÄ a‚ÇÅ = {!!}

-- -- -- --  ùï£refl : ‚àÄ x ‚Üí ‚ÑùPath x x 
-- -- -- --  ùï£refl x = ùï£path (const x , ‚à£ uContConstMap IntervalMetricSpace A x ‚à£‚ÇÅ)

-- -- -- --  -- ùï£sym : ‚àÄ x y ‚Üí ‚ÑùPath x y ‚Üí  ‚ÑùPath y x 
-- -- -- --  -- ùï£sym x y (ùï£path (f , fc)) = ùï£path ({!!} , {!!})

-- -- -- -- -- module ‚ÑùLoopspace {‚Ñì} (A : ‚àôMetricSpace ‚Ñì) where

-- -- -- --  Loops : ‚ü® A ‚ü© ‚Üí ‚àôMetricSpace ‚Ñì
-- -- -- --  Loops a = _ , ùï£refl a , (ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr a a)

-- -- -- -- module _ where
-- -- -- --  open ‚ÑùPaths

-- -- -- --  record ElimPieces {‚Ñì'} (A : MetricSpace ‚Ñì) (T : Pieces A ‚Üí Type ‚Ñì') :
-- -- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- --   field
-- -- -- --    pt-f : ‚àÄ x ‚Üí T (pt x) 
-- -- -- --    path-f : ‚àÄ p ‚Üí PathP (Œª i ‚Üí T (path p i))
-- -- -- --      (pt-f (fst p 0))
-- -- -- --      (pt-f (fst p 1))
-- -- -- --    sq-f : ‚àÄ s ‚Üí
-- -- -- --      SquareP (Œª i j ‚Üí T (sq s i j))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (0 , x)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (1 , x)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (x , 0)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (x , 1)) , {!!}))
       
-- -- -- --    const‚â°refl-f : ‚àÄ x cid ‚Üí
-- -- -- --      SquareP (Œª i j ‚Üí T (const‚â°refl x cid i j))
-- -- -- --        (path-f ((Œª _ ‚Üí x) , cid))
-- -- -- --        refl
-- -- -- --        refl
-- -- -- --        refl

-- -- -- --   go : ‚àÄ x ‚Üí T x
-- -- -- --   go (pt x) = pt-f x
-- -- -- --   go (path p i) = path-f p i
-- -- -- --   go (sq s i j) = sq-f s i j  
-- -- -- --   go (const‚â°refl a cid i i‚ÇÅ) = const‚â°refl-f a cid i i‚ÇÅ

-- -- -- --  record ElimPiecesSet {‚Ñì'} (A : MetricSpace ‚Ñì) (T : Pieces A ‚Üí Type ‚Ñì') :
-- -- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- --   no-eta-equality
-- -- -- --   field
-- -- -- --    pt-f : ‚àÄ x ‚Üí T (pt x) 
-- -- -- --    path-f : ‚àÄ p ‚Üí PathP (Œª i ‚Üí T (path p i))
-- -- -- --      (pt-f (fst p 0))
-- -- -- --      (pt-f (fst p 1))
-- -- -- --    isSetT : ‚àÄ x ‚Üí isSet (T x)

-- -- -- --   go : ‚àÄ x ‚Üí T x
-- -- -- --   go = ElimPieces.go w
-- -- -- --    where
-- -- -- --    w : ElimPieces A T
-- -- -- --    w .ElimPieces.pt-f = pt-f
-- -- -- --    w .ElimPieces.path-f = path-f
-- -- -- --    w .ElimPieces.sq-f s =
-- -- -- --      isSet‚ÜíSquareP {A = Œª i j ‚Üí T (sq s i j)}
-- -- -- --       (Œª i j ‚Üí isSetT (sq s i j))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (0 , x)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (1 , x)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (x , 0)) , {!!}))
-- -- -- --        (path-f ((Œª x ‚Üí fst s (x , 1)) , {!!})) 

-- -- -- --    w .ElimPieces.const‚â°refl-f x _ =
-- -- -- --      isSet‚ÜíSquareP (Œª _ _ ‚Üí isSetT _) _ _ _ _ 

-- -- -- --  record ElimPiecesProp {‚Ñì'} (A : MetricSpace ‚Ñì) (T : Pieces A ‚Üí Type ‚Ñì') :
-- -- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- --   no-eta-equality
-- -- -- --   field
-- -- -- --    pt-f : ‚àÄ x ‚Üí T (pt x) 
-- -- -- --    isPropT : ‚àÄ x ‚Üí isProp (T x)

-- -- -- --   go : ‚àÄ x ‚Üí T x
-- -- -- --   go = ElimPiecesSet.go w
-- -- -- --    where
-- -- -- --    w : ElimPiecesSet A (Œª z ‚Üí T z)
-- -- -- --    w .ElimPiecesSet.pt-f = pt-f
-- -- -- --    w .ElimPiecesSet.path-f _ = isProp‚ÜíPathP (Œª _ ‚Üí isPropT _) _ _ 
-- -- -- --    w .ElimPiecesSet.isSetT _ = isProp‚ÜíisSet (isPropT _)

-- -- -- --  record ElimPiecesSet‚ÇÇ {‚Ñì'} (A B : MetricSpace ‚Ñì)
-- -- -- --    (T : Pieces A ‚Üí Pieces B ‚Üí Type ‚Ñì') :
-- -- -- --    Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- --   no-eta-equality
-- -- -- --   field
-- -- -- --    pt-pt-f : ‚àÄ a b ‚Üí T (pt a) (pt b)
-- -- -- --    pt-path-f : ‚àÄ a p
-- -- -- --      ‚Üí PathP (Œª i ‚Üí T (pt a) (path p i))
-- -- -- --      (pt-pt-f a (fst p 0))
-- -- -- --      (pt-pt-f a (fst p 1))
-- -- -- --    path-pt-f : ‚àÄ p b
-- -- -- --      ‚Üí PathP (Œª i ‚Üí T (path p i) (pt b))
-- -- -- --      (pt-pt-f (fst p 0) b)
-- -- -- --      (pt-pt-f (fst p 1) b)
-- -- -- --    isSetT : ‚àÄ x y ‚Üí isSet (T x y)

-- -- -- --   go : ‚àÄ x y ‚Üí T x y
-- -- -- --   go = ElimPiecesSet.go w
-- -- -- --    where
-- -- -- --     w : ElimPiecesSet A (Œª z ‚Üí (y : Pieces B) ‚Üí T z y)
-- -- -- --     w .ElimPiecesSet.pt-f x = ElimPiecesSet.go ww
-- -- -- --      where
-- -- -- --      ww : ElimPiecesSet B (Œª z ‚Üí T (pt x) z)
-- -- -- --      ww .ElimPiecesSet.pt-f = pt-pt-f x
-- -- -- --      ww .ElimPiecesSet.path-f = pt-path-f x
-- -- -- --      ww .ElimPiecesSet.isSetT _ = isSetT _ _

-- -- -- --     w .ElimPiecesSet.path-f p = funExt (ElimPiecesProp.go ww)
-- -- -- --      where
-- -- -- --      ww : ElimPiecesProp B
-- -- -- --            (Œª z ‚Üí
-- -- -- --               PathP (Œª z‚ÇÅ ‚Üí T (path p z‚ÇÅ) z)
-- -- -- --               (w .ElimPiecesSet.pt-f (fst p 0) z)
-- -- -- --               (w .ElimPiecesSet.pt-f (fst p 1) z))
-- -- -- --      ww .ElimPiecesProp.pt-f b = path-pt-f p b
-- -- -- --      ww .ElimPiecesProp.isPropT x = isOfHLevelPathP' 1 (isSetT _ _) _ _
-- -- -- --     w .ElimPiecesSet.isSetT _ = isSetŒ† Œª _ ‚Üí isSetT _ _

-- -- -- -- module _ (A : MetricSpace ‚Ñì) where
-- -- -- --  open ‚ÑùPaths A
-- -- -- --  ‚à•Pieces‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© : ‚à• Pieces ‚à•‚ÇÇ ‚Üí UpTo‚ÑùPath‚ÇÇ
-- -- -- --  ‚à•Pieces‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© = ST.rec squash/
-- -- -- --    (ElimPiecesSet.go w)
-- -- -- --   where
-- -- -- --   w : ElimPiecesSet _ _
-- -- -- --   w .ElimPiecesSet.pt-f x = [ x ]/  
-- -- -- --   w .ElimPiecesSet.path-f p = eq/ _ _ (ùï£path p)
-- -- -- --   w .ElimPiecesSet.isSetT _ = squash/ 

-- -- -- --  UpTo‚ÑùPath‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ : UpTo‚ÑùPath‚ÇÇ ‚Üí ‚à• Pieces ‚à•‚ÇÇ
-- -- -- --  UpTo‚ÑùPath‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ = SQ.Rec.go w 
-- -- -- --   where
-- -- -- --   w : Rec _
-- -- -- --   w .Rec.isSetB = squash‚ÇÇ
-- -- -- --   w .Rec.f = ‚à£_‚à£‚ÇÇ ‚àò pt
-- -- -- --   w .Rec.f‚àº a a' (ùï£path f) = cong ‚à£_‚à£‚ÇÇ (path f)

-- -- -- --  IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ : Iso ‚à• Pieces ‚à•‚ÇÇ UpTo‚ÑùPath‚ÇÇ
-- -- -- --  IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ .Iso.fun = ‚à•Pieces‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü©
-- -- -- --  IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ .Iso.inv = UpTo‚ÑùPath‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ
-- -- -- --  IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ .Iso.rightInv =
-- -- -- --    SQ.ElimProp.go w
-- -- -- --   where
-- -- -- --   w : ElimProp _
-- -- -- --   w .ElimProp.isPropB _ = squash/ _ _
-- -- -- --   w .ElimProp.f _ = refl
-- -- -- --  IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ .Iso.leftInv =
-- -- -- --   ST.elim (Œª _ ‚Üí isProp‚ÜíisSet (squash‚ÇÇ _ _))
-- -- -- --    (ElimPiecesProp.go w)
-- -- -- --    where
-- -- -- --    w : ElimPiecesProp _ _
-- -- -- --    w .ElimPiecesProp.pt-f _ = refl
-- -- -- --    w .ElimPiecesProp.isPropT _ = squash‚ÇÇ _ _

-- -- -- --  -- ‚à•Pieces‚à•‚ÇÉ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© : ‚à• Pieces ‚à•‚ÇÉ ‚Üí UpTo‚ÑùPath‚ÇÉ
-- -- -- --  -- ‚à•Pieces‚à•‚ÇÉ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© = GT.rec squash//
-- -- -- --  --   (ElimPieces.go w)
-- -- -- --  --  where
-- -- -- --  --  ww : ‚àÄ p ‚Üí _ ‚â° _
-- -- -- --  --  ww p = eq// (ùï£path p)
-- -- -- --  --  w : ElimPieces _ _
-- -- -- --  --  w .ElimPieces.pt-f x = [ x ]// 
-- -- -- --  --  w .ElimPieces.path-f = ww
-- -- -- --  --  w .ElimPieces.sq-f s =
-- -- -- --  --    compPath‚ÜíSquare
-- -- -- --  --      (sym (comp'// _ isTrans‚ÑùPath _ _) ‚àô‚àô
-- -- -- --  --       {!
-- -- -- --  --       !}
-- -- -- --  --       ‚àô‚àô comp'// _ isTrans‚ÑùPath _ _)
-- -- -- --  --  w .ElimPieces.const‚â°refl-f x cid =
-- -- -- --  --   refl‚â°Id isTrans‚ÑùPath (ùï£path ((Œª _ ‚Üí x) , cid)) (isTrans‚ÑùPath-const x cid) 
    
  
-- -- -- --  -- UpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ : UpTo‚ÑùPath‚ÇÉ ‚Üí ‚à• Pieces ‚à•‚ÇÉ
-- -- -- --  -- UpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ = GQ.rec
-- -- -- --  --   isTrans‚ÑùPath
-- -- -- --  --   squash‚ÇÉ
-- -- -- --  --   (‚à£_‚à£‚ÇÉ ‚àò pt)
-- -- -- --  --   (cong ‚à£_‚à£‚ÇÉ ‚àò ùï£path‚Üípath)
-- -- -- --  --   Œª {a} {b} {c} r s i j ‚Üí
-- -- -- --  --     ‚à£ comp-ùï£paths r s i j ‚à£‚ÇÉ

-- -- -- -- --  IsoUpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ : Iso ‚à• Pieces ‚à•‚ÇÉ UpTo‚ÑùPath‚ÇÉ
-- -- -- -- --  IsoUpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ .Iso.fun = ‚à•Pieces‚à•‚ÇÉ‚ÜíUpTo‚ÑùPath‚ü®A‚ü©
-- -- -- -- --  IsoUpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ .Iso.inv = UpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ
-- -- -- -- --  IsoUpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ .Iso.rightInv =
-- -- -- -- --    GQ.elimSet isTrans‚ÑùPath
-- -- -- -- --     (Œª _ ‚Üí squash// _ _)
-- -- -- -- --     (Œª _ ‚Üí refl)
-- -- -- -- --     Œª { (‚ÑùPaths.ùï£path f) i j ‚Üí eq// (ùï£path f) i }
   
-- -- -- -- --  IsoUpTo‚ÑùPath‚ÇÉ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÉ .Iso.leftInv =
-- -- -- -- --   GT.elim (Œª _ ‚Üí isSet‚ÜíisGroupoid (squash‚ÇÉ _ _))
-- -- -- -- --    (ElimPiecesSet.go w)
   
-- -- -- -- --   where
-- -- -- -- --   w : ElimPiecesSet _ _
-- -- -- -- --   w .ElimPiecesSet.pt-f _ = refl
-- -- -- -- --   w .ElimPiecesSet.path-f p i _ = ‚à£ path p i ‚à£‚ÇÉ
-- -- -- -- --   w .ElimPiecesSet.isSetT _ = squash‚ÇÉ _ _

-- -- -- -- -- -- record ElimPiecesGroupoid‚ÇÇ {‚Ñì'} (A B : Type ‚Ñì) (T : Pieces A ‚Üí Pieces B ‚Üí Type ‚Ñì') :
-- -- -- -- -- --   Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- --  no-eta-equality
-- -- -- -- -- --  field
-- -- -- -- -- --   pt-pt-f : ‚àÄ a b ‚Üí T (pt a) (pt b)
-- -- -- -- -- --   pt-path-f : ‚àÄ a p
-- -- -- -- -- --     ‚Üí PathP (Œª i ‚Üí T (pt a) (path p i))
-- -- -- -- -- --     (pt-pt-f a (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- -- -- -- --     (pt-pt-f a (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- -- -- -- --   path-pt-f : ‚àÄ p b
-- -- -- -- -- --     ‚Üí PathP (Œª i ‚Üí T (path p i) (pt b))
-- -- -- -- -- --     (pt-pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
-- -- -- -- -- --     (pt-pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
-- -- -- -- -- --   path-path-f : ‚àÄ p p' ‚Üí SquareP (Œª j i ‚Üí T (path p i) (path p' j))

-- -- -- -- -- --         (path-pt-f p (p' 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- -- -- -- --         (path-pt-f p (p' 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- -- -- -- --         (pt-path-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) p')
-- -- -- -- -- --         (pt-path-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) p')
-- -- -- -- -- --   const-refl‚â°-Left : ‚àÄ a (x : B) ‚Üí
-- -- -- -- -- --      SquareP (Œª i j ‚Üí T (pt a) (const‚â°refl x i j))
-- -- -- -- -- --      (pt-path-f a (Œª _ _ ‚Üí x)) refl refl refl
-- -- -- -- -- --   const-refl‚â°-Right : ‚àÄ a (x : B) ‚Üí
-- -- -- -- -- --      SquareP (Œª i j ‚Üí T (const‚â°refl a i j) (pt x))
-- -- -- -- -- --      (path-pt-f (Œª _ _ ‚Üí a) x) refl refl refl
-- -- -- -- -- --   isGroupoidT : ‚àÄ x y ‚Üí isGroupoid (T x y)

-- -- -- -- -- --  go : ‚àÄ x y ‚Üí T x y
-- -- -- -- -- --  go = ElimPieces.go w
-- -- -- -- -- --   where
-- -- -- -- -- --    w : ElimPieces A (Œª z ‚Üí (y : Pieces B) ‚Üí T z y)
-- -- -- -- -- --    w .ElimPieces.pt-f a = ElimPieces.go ww
-- -- -- -- -- --      where
-- -- -- -- -- --       ww : ElimPieces B (Œª z ‚Üí T (pt a) z)
-- -- -- -- -- --       ww .ElimPieces.pt-f = pt-pt-f a
-- -- -- -- -- --       ww .ElimPieces.path-f = pt-path-f a
-- -- -- -- -- --       ww .ElimPieces.const‚â°refl-f = const-refl‚â°-Left a
-- -- -- -- -- --    w .ElimPieces.path-f p = funExt (ElimPiecesSet.go ww)
-- -- -- -- -- --      where
-- -- -- -- -- --       ww : ElimPiecesSet B _
-- -- -- -- -- --       ww .ElimPiecesSet.pt-f = path-pt-f p
-- -- -- -- -- --       ww .ElimPiecesSet.path-f = path-path-f p 
-- -- -- -- -- --       ww .ElimPiecesSet.isSetT _ = isOfHLevelPathP' 2 (isGroupoidT _ _) _ _

-- -- -- -- -- --    w .ElimPieces.const‚â°refl-f x = congP (Œª _ ‚Üí funExt)
-- -- -- -- -- --      (funExt (ElimPiecesProp.go ww))
-- -- -- -- -- --     where
-- -- -- -- -- --     ww : ElimPiecesProp B _
-- -- -- -- -- --     ww .ElimPiecesProp.pt-f b = const-refl‚â°-Right x b
-- -- -- -- -- --     ww .ElimPiecesProp.isPropT _ =
-- -- -- -- -- --       isOfHLevelPathP' 1 (isGroupoidT _ _ _ _) _ _

-- -- -- -- module _ where
-- -- -- --  open ‚ÑùPaths
-- -- -- --  mapPieces : ‚àÄ {‚Ñì} (A B : MetricSpace ‚Ñì) ‚Üí UContMap A B ‚Üí Pieces A ‚Üí Pieces B
-- -- -- --  mapPieces A B (f , ucf) = ElimPieces.go w
-- -- -- --   where
-- -- -- --   w : ElimPieces _ _
-- -- -- --   w .ElimPieces.pt-f = pt ‚àò f
-- -- -- --   w .ElimPieces.path-f p = path (f ‚àò fst p , {!!})
-- -- -- --   w .ElimPieces.sq-f s = sq (f ‚àò fst s , {!!})
-- -- -- --   w .ElimPieces.const‚â°refl-f x cid = const‚â°refl _ _

-- -- -- -- -- --  isoPieces : Iso A B ‚Üí Iso (Pieces A) (Pieces B)
-- -- -- -- -- --  isoPieces isoAB = w
-- -- -- -- -- --    where
-- -- -- -- -- --    open Iso isoAB

-- -- -- -- -- --    secMap : {f : A ‚Üí B} {g : B ‚Üí A} ‚Üí section f g
-- -- -- -- -- --               ‚Üí section (mapPieces f) (mapPieces g)
-- -- -- -- -- --    secMap s = ElimPieces.go ww
-- -- -- -- -- --     where
-- -- -- -- -- --        ww : ElimPieces _ _
-- -- -- -- -- --        ww .ElimPieces.pt-f x = cong pt (s _)
-- -- -- -- -- --        ww .ElimPieces.path-f p i j = path (Œª t t‚àà ‚Üí s (p t t‚àà) j) i
-- -- -- -- -- --        ww .ElimPieces.const‚â°refl-f a i j k = const‚â°refl (s a k) i j
       
-- -- -- -- -- --    w : Iso (Pieces _) (Pieces _)
-- -- -- -- -- --    w .Iso.fun = mapPieces fun
-- -- -- -- -- --    w .Iso.inv = mapPieces inv
-- -- -- -- -- --    w .Iso.rightInv = secMap rightInv
-- -- -- -- -- --    w .Iso.leftInv = secMap leftInv



-- -- -- -- {- loop space of a pointed metric space -}
-- -- -- -- Œ© : ‚àôMetricSpace ‚Ñì ‚Üí ‚àôMetricSpace ‚Ñì
-- -- -- -- Œ© (_ , a , m) = ‚ÑùPaths.Loops (_ , m) a


-- -- -- -- Œ©^_ : ‚àÄ {‚Ñì} ‚Üí ‚Ñï ‚Üí ‚àôMetricSpace ‚Ñì ‚Üí ‚àôMetricSpace ‚Ñì
-- -- -- -- (Œ©^ 0) p = p
-- -- -- -- (Œ©^ (suc n)) p = Œ© ((Œ©^ n) p)

-- -- -- -- module _ {‚Ñì} (A : MetricSpace ‚Ñì) where

-- -- -- --  open ‚ÑùPaths A 
 
-- -- -- --  ‚ÑùPathGroupoid : Category ‚Ñì ‚Ñì
-- -- -- --  ‚ÑùPathGroupoid .Category.ob = ‚ü® A ‚ü©
-- -- -- --  ‚ÑùPathGroupoid .Category.Hom[_,_] x y =
-- -- -- --    ‚ÑùPaths.UpTo‚ÑùPath‚ÇÇ (_ , ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr x y)
-- -- -- --  ‚ÑùPathGroupoid .Category.id = [ ùï£refl _ ]/
-- -- -- --  ‚ÑùPathGroupoid .Category._‚ãÜ_ = {!!}
-- -- -- --  ‚ÑùPathGroupoid .Category.‚ãÜIdL = {!!}
-- -- -- --  ‚ÑùPathGroupoid .Category.‚ãÜIdR = {!!}
-- -- -- --  ‚ÑùPathGroupoid .Category.‚ãÜAssoc = {!!}
-- -- -- --  ‚ÑùPathGroupoid .Category.isSetHom = squash/

-- -- -- --  ‚ÑùLoopGroup : ‚ü® A ‚ü© ‚Üí Group ‚Ñì
-- -- -- --  ‚ÑùLoopGroup x .fst = ‚ÑùPaths.UpTo‚ÑùPath‚ÇÇ (_ , ùêø‚ÇÅ-‚ÑùPathsMetricSpaceStr x x)
-- -- -- --  ‚ÑùLoopGroup x .snd .GroupStr.1g = [ ùï£refl _ ]/
-- -- -- --  ‚ÑùLoopGroup x .snd .GroupStr._¬∑_ = {!!}
-- -- -- --  ‚ÑùLoopGroup x .snd .GroupStr.inv = {!!}
-- -- -- --  ‚ÑùLoopGroup x .snd .GroupStr.isGroup = {!!}
 
-- -- -- -- -- module n-fold-‚ÑùLoopspace {‚Ñì} (A : ‚àôMetricSpace ‚Ñì) where

-- -- -- -- œÄGr : ‚àÄ {‚Ñì} (n : ‚Ñï) (A : ‚àôMetricSpace ‚Ñì) ‚Üí Group ‚Ñì
-- -- -- -- œÄGr n A‚ÇÄ =
-- -- -- --  let (_ , a , A) = (Œ©^ (suc n)) A‚ÇÄ
-- -- -- --  in ‚ÑùLoopGroup (_ , A) a

-- -- -- -- Pieces‚Çô : ‚Ñï ‚Üí MetricSpace ‚Ñì ‚Üí Type ‚Ñì
-- -- -- -- Pieces‚Çô = {!!}

-- -- -- -- -- ‚Ñù‚Åø-MetricSpaceStr : {!!}
-- -- -- -- -- ‚Ñù‚Åø-MetricSpaceStr = {!!}

-- -- -- -- -- Interval‚Åø-MetricSpace : ‚Ñï ‚Üí MetricSpace‚ÇÄ
-- -- -- -- -- Interval‚Åø-MetricSpace = {!!}

-- -- -- -- module _ {‚Ñì} (A : MetricSpace ‚Ñì) where


-- -- -- --  Œ†-seq‚Çô : ‚Ñï ‚Üí Type ‚Ñì
-- -- -- --  Œ†-seq‚Çô n = ‚ÑùPaths.Pieces (ùêø‚ÇÅ-MetricSpace‚Åø n A)
-- -- -- --  -- UContMap (Interval‚Åø-MetricSpace n) A

-- -- -- --  Œ†-seq‚Çô-map : ‚àÄ n ‚Üí Œ†-seq‚Çô n ‚Üí Œ†-seq‚Çô (suc n)
-- -- -- --  Œ†-seq‚Çô-map n = mapPieces (ùêø‚ÇÅ-MetricSpace‚Åø n A)
-- -- -- --   (ùêø‚ÇÅ-MetricSpace‚Åø (suc n) A)
-- -- -- --    ((Œª x ‚Üí _ ,
-- -- -- --     ‚à£ uContConstMap IntervalMetricSpace (ùêø‚ÇÅ-MetricSpace‚Åø n A) x ‚à£‚ÇÅ) ,
-- -- -- --      ‚à£ {!!} ‚à£‚ÇÅ)
 
-- -- -- --  Œ†-seq : Sequence ‚Ñì
-- -- -- --  Œ†-seq .Sequence.obj = Œ†-seq‚Çô
-- -- -- --  Œ†-seq .Sequence.map = Œ†-seq‚Çô-map _

-- -- -- --  Œ† : Type ‚Ñì 
-- -- -- --  Œ† = SeqColim Œ†-seq

-- -- -- --  ‚àôŒ† : ‚ü® A ‚ü© ‚Üí P.Pointed ‚Ñì
-- -- -- --  ‚àôŒ† a = Œ† , incl {n = 0} (‚ÑùPaths.pt a)

-- -- -- --  -- UpTo‚ÑùPath‚ü®A‚ü©‚Üí‚à•Œ†‚à•‚ÇÇ : ‚à• ? ‚à•‚ÇÇ  ‚Üí ‚à• Œ† ‚à•‚ÇÇ 
-- -- -- --  -- UpTo‚ÑùPath‚ü®A‚ü©‚Üí‚à•Œ†‚à•‚ÇÇ = SQ.Rec.go w 
-- -- -- --  --  where
-- -- -- --  --  w : Rec _
-- -- -- --  --  w .Rec.isSetB = squash‚ÇÇ
-- -- -- --  --  w .Rec.f = ‚à£_‚à£‚ÇÇ ‚àò incl {n = 0} ‚àò (‚ÑùPaths.pt)
-- -- -- --  --  w .Rec.f‚àº a a' (‚ÑùPaths.ùï£path f) = 
-- -- -- --  --   cong (‚à£_‚à£‚ÇÇ ‚àò incl) (‚ÑùPaths.path f)

             
                 
 
-- -- -- --  evalFromCubeDiag : ‚àÄ n ‚Üí ‚ü® IntervalMetricSpace ‚ü©
-- -- -- --                         ‚Üí UContMap (ùêø‚ÇÅ-MetricSpace‚Åø n A) A
-- -- -- --  evalFromCubeDiag zero _ = {!!}
-- -- -- --  evalFromCubeDiag (suc n) t = {!!}


-- -- -- --  liftPath : ‚àÄ (p : UContMap IntervalMetricSpace A) ‚Üí Square {A = Œ†}
-- -- -- --               (cong (incl {n = 0}) (‚ÑùPaths.path p))
-- -- -- --               (cong (incl {n = 1}) (‚ÑùPaths.path ((Œª x ‚Üí (Œª _ ‚Üí fst p x) ,
-- -- -- --                  {!!}) , {!!})))
-- -- -- --               (push (‚ÑùPaths.pt (p .fst 0)))
-- -- -- --               (push (‚ÑùPaths.pt (p .fst 1)))
-- -- -- --  liftPath p i j = push {n = 0} (‚ÑùPaths.path p j ) i


-- -- -- --  liftPath' : ‚àÄ (p : UContMap IntervalMetricSpace A) ‚Üí Square {A = Œ†}
-- -- -- --               (cong (incl {n = 0}) (‚ÑùPaths.path p))
-- -- -- --               (cong (incl {n = 1}) (‚ÑùPaths.path ((Œª x ‚Üí (Œª _ ‚Üí fst p x) ,
-- -- -- --                  {!!}) , {!!})))
-- -- -- --               {!!}
-- -- -- --               {!!}
-- -- -- --  liftPath' p i j = {!!}


-- -- -- --  -- a = evalFromCubeDiag n t (fst a t)
 
-- -- -- --  -- ‚à•Œ†‚Çô‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© : ‚àÄ n ‚Üí ‚à• Œ†-seq‚Çô n ‚à•‚ÇÇ ‚Üí ‚ÑùPaths.UpTo‚ÑùPath A
-- -- -- --  -- ‚à•Œ†‚Çô‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© n = ST.rec squash/
-- -- -- --  --   (ElimPiecesSet.go w)
-- -- -- --  --  where
-- -- -- --  --  w : ElimPiecesSet (ùêø‚ÇÅ-MetricSpace‚Åø n A) (Œª _ ‚Üí ‚ÑùPaths.UpTo‚ÑùPath A)
-- -- -- --  --  w .ElimPiecesSet.pt-f = [_]/ ‚àò fst (evalFromCubeDiag n 0)
-- -- -- --  --  w .ElimPiecesSet.path-f p = eq/ _ _ (‚ÑùPaths.ùï£path {!!})
-- -- -- --  --  w .ElimPiecesSet.isSetT _ = squash/ 
  
-- -- -- --  -- ‚à•Œ†‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© : ‚à• Œ† ‚à•‚ÇÇ ‚Üí ‚à• ‚ÑùPaths.Pieces A ‚à•‚ÇÇ
-- -- -- --  -- ‚à•Œ†‚à•‚ÇÇ‚ÜíUpTo‚ÑùPath‚ü®A‚ü© = ST.rec squash/
-- -- -- --  --   (Seq.elim _ _ (elimdata (Œª {n} ‚Üí ElimPiecesSet.go (w n))
-- -- -- --  --     {!!}))
-- -- -- --  --   where
-- -- -- --  --   w : ‚àÄ n ‚Üí ElimPiecesSet _ _
-- -- -- --  --   w n .ElimPiecesSet.pt-f = [_]/ ‚àò fst (evalFromCubeDiag n 0)
-- -- -- --  --   w n .ElimPiecesSet.path-f p = eq/ _ _ (‚ÑùPaths.ùï£path {!p!})
-- -- -- --  --   w n .ElimPiecesSet.isSetT _ = squash/
   
-- -- -- --  -- Œ†‚ÇÅ‚âÉ : ‚ÑùPaths.UpTo‚ÑùPath A ‚âÉ ‚à• Œ† ‚à•‚ÇÇ
-- -- -- --  -- Œ†‚ÇÅ‚âÉ = isoToEquiv (invIso (IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ A)) ‚àô‚Çë
-- -- -- --  --   {!!} 

-- -- -- --  Œ†-isInfGpd‚ÇÇ-fun : ‚àÄ (a : ‚ü® A ‚ü©) n ‚Üí  ‚à•
-- -- -- --       ‚ÑùPaths.Pieces
-- -- -- --       ((Œ©^ n) (fst A , a , snd A) .fst ,
-- -- -- --        (Œ©^ n) (fst A , a , snd A) .snd .snd)
-- -- -- --       ‚à•‚ÇÇ ‚Üí
-- -- -- --       ‚à• fst ((Lsp.Œ©^ n) (‚àôŒ† a)) ‚à•‚ÇÇ
-- -- -- --  Œ†-isInfGpd‚ÇÇ-fun a zero = {!!}
-- -- -- --  Œ†-isInfGpd‚ÇÇ-fun a (suc n) = {!!}
 
-- -- -- --  Œ†-isInfGpd‚ÇÇ : ‚àÄ (a : ‚ü® A ‚ü©) n ‚Üí Iso ‚à•
-- -- -- --       ‚ÑùPaths.Pieces
-- -- -- --       ((Œ©^ n) (fst A , a , snd A) .fst ,
-- -- -- --        (Œ©^ n) (fst A , a , snd A) .snd .snd)
-- -- -- --       ‚à•‚ÇÇ
-- -- -- --       ‚à• fst ((Lsp.Œ©^ n) (‚àôŒ† a)) ‚à•‚ÇÇ
-- -- -- --  Œ†-isInfGpd‚ÇÇ a zero = {!!}
-- -- -- --  Œ†-isInfGpd‚ÇÇ a (suc n) =
-- -- -- --    compIso {!!}  PathIdTrunc‚ÇÅIso
  
-- -- -- --  Œ†-isInfGpd : ‚àÄ (a : ‚ü® A ‚ü©) n ‚Üí
-- -- -- --    -- fst ((Œ©^ n) (_ , a , snd A))
-- -- -- --    ‚ÑùPaths.UpTo‚ÑùPath‚ÇÇ (‚àôMetricSpace‚ÜíMetricSpace ((Œ©^ n) (_ , a , snd A)))
-- -- -- --      ‚âÉ ‚à• fst ((Lsp.Œ©^ n) (‚àôŒ† a)) ‚à•‚ÇÇ
-- -- -- --  Œ†-isInfGpd a n = isoToEquiv (invIso (IsoUpTo‚ÑùPath‚ÇÇ‚ü®A‚ü©‚Üí‚à•Pieces‚à•‚ÇÇ _))
-- -- -- --   ‚àô‚Çë isoToEquiv (Œ†-isInfGpd‚ÇÇ a n)
-- -- -- -- -- -- -- --  {- n-fold loop space of a pointed type -}
-- -- -- -- -- -- -- --  Œ©^_ : ‚àÄ {‚Ñì} ‚Üí ‚Ñï ‚Üí Pointed ‚Ñì ‚Üí Pointed ‚Ñì
-- -- -- -- -- -- -- --  (Œ©^ 0) p = p
-- -- -- -- -- -- -- --  (Œ©^ (suc n)) p = Œ© ((Œ©^ n) p)



-- -- -- -- -- -- -- -- -- ùêë¬≤MetricSpaceStr : MetricSpaceStr (‚Ñù √ó ‚Ñù)
-- -- -- -- -- -- -- -- -- ùêë¬≤MetricSpaceStr = {!!}

-- -- -- -- -- -- -- -- -- distCircleMetricSpaceStr : MetricSpaceStr distCircle 
-- -- -- -- -- -- -- -- -- distCircleMetricSpaceStr =
-- -- -- -- -- -- -- -- --  MetricSubSpace (‚Ñù √ó ‚Ñù)
-- -- -- -- -- -- -- -- --   (Œª z ‚Üí (cartNorm¬≤ z ‚â° 1) , isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- --   ùêë¬≤MetricSpaceStr

-- -- -- -- -- -- -- -- -- unwindDistCirclePath :
-- -- -- -- -- -- -- -- --    (f : IntervalMetricSpace .fst ‚Üí distCircle)
-- -- -- -- -- -- -- -- --  ‚Üí IsUContMap (snd IntervalMetricSpace) f distCircleMetricSpaceStr
-- -- -- -- -- -- -- -- --  ‚Üí Œ£ ((fst IntervalMetricSpace) ‚Üí ‚Ñù)
-- -- -- -- -- -- -- -- --    Œª g ‚Üí ‚àÄ x ‚Üí f x ‚â° f (0 , (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚ÑùS¬π.+
-- -- -- -- -- -- -- -- --      Circle‚ÜídistCircle (injCircle (g x)) 
-- -- -- -- -- -- -- -- -- unwindDistCirclePath = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- ‚ÑùMetricSpace

-- -- -- -- -- -- -- -- -- -- -- -- isEquivInjCircleRestr : ‚àÄ c‚ÇÄ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --   isEquiv {A = Œ£ distCircle Œª (c , _) ‚Üí cartDist¬≤ c‚ÇÄ c <·µ£ 2}
-- -- -- -- -- -- -- -- -- -- -- --           {B = Œ£ _ (_‚àà ointerval‚Ñô (-·µ£ (rat [ 1 / 4 ])) (rat [ 1 / 4 ]))}
          
-- -- -- -- -- -- -- -- -- -- -- --         {!!}
-- -- -- -- -- -- -- -- -- -- -- -- isEquivInjCircleRestr = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyIsomorphicToInterval :
-- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚àÄ (x : distCircle)
-- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚Üí Iso (Œ£ distCircle Œª x' ‚Üí cartDist¬≤ (fst x) (fst x') <·µ£ 2)
-- -- -- -- -- -- -- -- -- -- -- -- -- --          (Œ£ _ (_‚àà ointerval‚Ñô -1 1)) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyIsomorphicToInterval x =
-- -- -- -- -- -- -- -- -- -- -- -- -- --   compIso (rotateToOrigin x) {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyFrom‚Ñù : ‚àÄ x‚ÇÄ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- --     Œ£ ‚Ñù (_‚àà ointerval‚Ñô (x‚ÇÄ -·µ£ rat [ 1 / 2 ]) (x‚ÇÄ +·µ£ rat [ 1 / 2 ]))
-- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚Üí Œ£ distCircle (Œª x ‚Üí cartDist¬≤ (fst x)
-- -- -- -- -- -- -- -- -- -- -- -- -- --                (fst (Circle‚ÜídistCircle (injCircle x‚ÇÄ))) <·µ£ 4)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyFrom‚Ñù x‚ÇÄ (x , x‚àà) .fst = Circle‚ÜídistCircle (injCircle x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyFrom‚Ñù x‚ÇÄ (x , x‚àà) .snd = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyIsomorphicToInterval :
-- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚àÄ x‚ÇÄ ‚Üí isEquiv
-- -- -- -- -- -- -- -- -- -- -- -- -- --     {A = Œ£ ‚Ñù (_‚àà ointerval‚Ñô (x‚ÇÄ -·µ£ rat [ 1 / 2 ]) (x‚ÇÄ +·µ£ rat [ 1 / 2 ]) )}
-- -- -- -- -- -- -- -- -- -- -- -- -- --     {B = Œ£ distCircle Œª x ‚Üí cartDist¬≤ (fst x)
-- -- -- -- -- -- -- -- -- -- -- -- -- --                (fst (Circle‚ÜídistCircle (injCircle x‚ÇÄ))) <·µ£ 4}
-- -- -- -- -- -- -- -- -- -- -- -- -- --                (distCircleLocallyFrom‚Ñù x‚ÇÄ)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- distCircleLocallyIsomorphicToInterval = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- uContCircleMap : (distCircle ‚Üí distCircle) ‚Üí Type
-- -- -- -- -- -- -- -- -- -- -- -- -- uContCircleMap f =
-- -- -- -- -- -- -- -- -- -- -- -- --   IsUContinuous‚Ñô (interval‚Ñô 0 1)
-- -- -- -- -- -- -- -- -- -- -- -- --     (const ‚àò (fst ‚àò fst ‚àò f ‚àò Circle‚ÜídistCircle ‚àò injCircle))
-- -- -- -- -- -- -- -- -- -- -- -- --     √ó
-- -- -- -- -- -- -- -- -- -- -- -- --  IsUContinuous‚Ñô (interval‚Ñô 0 1)
-- -- -- -- -- -- -- -- -- -- -- -- --     (const ‚àò (snd ‚àò fst ‚àò f ‚àò Circle‚ÜídistCircle ‚àò injCircle))


-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π : Type 
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π = Œ£[ f ‚àà _ ] ‚à• uContCircleMap f ‚à•‚ÇÅ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- record Piecewise a b (a<b : a <·µ£ b) (p : Partition[ a , b ]) : Type where
-- -- -- -- -- -- -- -- -- -- -- -- -- --  field
-- -- -- -- -- -- -- -- -- -- -- -- -- --   fns : ‚àÄ k x ‚Üí x ‚àà interval‚Ñô (pts' p (finj k)) (pts' p (fsuc k)) ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- --   fnsEnds : ‚àÄ k ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- --     fns (finj k) (pts' p (fsuc (finj k))) ({!!} , (‚â§·µ£-refl _))
-- -- -- -- -- -- -- -- -- -- -- -- -- --      ‚â° fns (fsuc k) (pts' p (fsuc (finj k)))
-- -- -- -- -- -- -- -- -- -- -- -- -- --          ((‚â°·µ£Weaken‚â§·µ£ _ _ {!!}) , {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- --   fnsUC : ‚àÄ k ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- --      IsUContinuous‚Ñô (interval‚Ñô (pts' p (finj k)) (pts' p (fsuc k)))
-- -- -- -- -- -- -- -- -- -- -- -- -- --        (fns k)
   
-- -- -- -- -- -- -- -- -- -- -- -- -- --  piecewise : ‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- --  piecewise = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- --  piecewiseUC : IsUContinuous‚Ñô (interval‚Ñô a b) piecewise
-- -- -- -- -- -- -- -- -- -- -- -- -- --  piecewiseUC = {!!}


  
-- -- -- -- -- -- -- -- -- -- -- -- -- const-‚Ñù-S¬π‚ÜíS¬π : ‚Ñù-S¬π‚ÜíS¬π
-- -- -- -- -- -- -- -- -- -- -- -- -- const-‚Ñù-S¬π‚ÜíS¬π .fst _ = circle0
-- -- -- -- -- -- -- -- -- -- -- -- -- const-‚Ñù-S¬π‚ÜíS¬π .snd =
-- -- -- -- -- -- -- -- -- -- -- -- --  ‚à£  IsUContinuous‚Ñô-const (interval‚Ñô 0 1) _
-- -- -- -- -- -- -- -- -- -- -- -- --   , IsUContinuous‚Ñô-const (interval‚Ñô 0 1) _ ‚à£‚ÇÅ




-- -- -- -- -- -- -- -- -- -- -- -- -- id-‚Ñù-S¬π‚ÜíS¬π : ‚Ñù-S¬π‚ÜíS¬π
-- -- -- -- -- -- -- -- -- -- -- -- -- id-‚Ñù-S¬π‚ÜíS¬π .fst x = x
-- -- -- -- -- -- -- -- -- -- -- -- -- id-‚Ñù-S¬π‚ÜíS¬π .snd = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚à£ (IsUContinuous‚Ñô‚àò‚Ñô (interval‚Ñô 0 1) (interval‚Ñô 0 1)
-- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!} (uContSin (interval‚Ñô 0 1)) {!!}) , {!!} ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- (IsUContinuous‚àò {!!} {!!}) , {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- homotopy between maps
-- -- -- -- -- -- -- -- -- -- -- -- -- _‚àº_ : (distCircle ‚Üí distCircle) ‚Üí (distCircle ‚Üí distCircle) ‚Üí Type
-- -- -- -- -- -- -- -- -- -- -- -- -- f ‚àº g = ‚àÉ (‚àÄ t ‚Üí t ‚àà interval‚Ñô 0 1 ‚Üí ‚Ñù-S¬π‚ÜíS¬π)
-- -- -- -- -- -- -- -- -- -- -- -- --    Œª h ‚Üí ((fst (h 0 (‚â§·µ£-refl 0 , dec‚Ñö‚â§·µ£? {0} {1})) ‚â° f)
-- -- -- -- -- -- -- -- -- -- -- -- --        √ó (fst (h 1 (dec‚Ñö‚â§·µ£? {0} {1} , ‚â§·µ£-refl 1)) ‚â° g))
-- -- -- -- -- -- -- -- -- -- -- -- --        √ó ((‚àÄ x ‚Üí IsUContinuous‚Ñô (interval‚Ñô 0 1)
-- -- -- -- -- -- -- -- -- -- -- -- --            (Œª t t‚àà ‚Üí fst (fst (fst (h t t‚àà) x))))
-- -- -- -- -- -- -- -- -- -- -- -- --          √ó ((‚àÄ x ‚Üí IsUContinuous‚Ñô (interval‚Ñô 0 1)
-- -- -- -- -- -- -- -- -- -- -- -- --            (Œª t t‚àà ‚Üí snd (fst (fst (h t t‚àà) x))))))


-- -- -- -- -- -- -- -- -- -- -- -- -- isEquivRel‚àº : BinaryRelation.isEquivRel {A = ‚Ñù-S¬π‚ÜíS¬π}
-- -- -- -- -- -- -- -- -- -- -- -- --  (Œª (x , _) (y , _) ‚Üí x ‚àº y)
-- -- -- -- -- -- -- -- -- -- -- -- -- isEquivRel‚àº = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π/‚àº : Type
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π/‚àº = ‚Ñù-S¬π‚ÜíS¬π / Œª (x , _) (y , _) ‚Üí x ‚àº y

-- -- -- -- -- -- -- -- -- -- -- -- -- eff-‚Ñù-S¬π‚ÜíS¬π/‚àº : (a b : ‚Ñù-S¬π‚ÜíS¬π) ‚Üí [ a ]/ ‚â° [ b ]/ ‚Üí a .fst ‚àº b .fst
-- -- -- -- -- -- -- -- -- -- -- -- -- eff-‚Ñù-S¬π‚ÜíS¬π/‚àº = SQ.effective {A = ‚Ñù-S¬π‚ÜíS¬π}
-- -- -- -- -- -- -- -- -- -- -- -- --   {R = Œª (x , _) (y , _) ‚Üí x ‚àº y} (Œª _ _ ‚Üí squash‚ÇÅ) isEquivRel‚àº

-- -- -- -- -- -- -- -- -- -- -- -- -- S¬π‚ÜíS¬π¬∑ : ‚Ñù-S¬π‚ÜíS¬π ‚Üí ‚Ñù-S¬π‚ÜíS¬π ‚Üí ‚Ñù-S¬π‚ÜíS¬π
-- -- -- -- -- -- -- -- -- -- -- -- -- S¬π‚ÜíS¬π¬∑ f g = (Œª x ‚Üí fst f x ‚ÑùS¬π.+ fst g x) ,
-- -- -- -- -- -- -- -- -- -- -- -- --              PT.map2 (Œª cf cg ‚Üí {!!}) (snd f) (snd g)



-- -- -- -- -- -- -- -- -- -- -- -- -- invS¬π‚ÜíS¬π¬∑ : ‚Ñù-S¬π‚ÜíS¬π ‚Üí ‚Ñù-S¬π‚ÜíS¬π
-- -- -- -- -- -- -- -- -- -- -- -- -- invS¬π‚ÜíS¬π¬∑ (f , _) .fst = f ‚àò circleNeg
-- -- -- -- -- -- -- -- -- -- -- -- -- invS¬π‚ÜíS¬π¬∑ (f , fc) .snd = {!!} --PT.map (Œª (xC , yC) ‚Üí yC , xC) fc



-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π : AbGroup ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .fst = ‚Ñù-S¬π‚ÜíS¬π/‚àº
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .AbGroupStr.0g = [ const-‚Ñù-S¬π‚ÜíS¬π ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .AbGroupStr._+_ = SQ.Rec2.go w
-- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- --  w : Rec2 (‚Ñù-œÄ‚ÇÅS¬π .fst)
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.isSetB = squash/
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.f x y = [ S¬π‚ÜíS¬π¬∑ x y ]/
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.f‚àº = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.‚àºf = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- AbGroupStr.- ‚Ñù-œÄ‚ÇÅS¬π .snd = SQ.Rec.go w
-- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- --  w : Rec (‚Ñù-œÄ‚ÇÅS¬π .fst)
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.isSetB = squash/
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f = [_]/ ‚àò invS¬π‚ÜíS¬π¬∑
-- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f‚àº a a' = {!!} -- (h , (px , py) , (t0 , t1)) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- --   -- eq/ _ _
-- -- -- -- -- -- -- -- -- -- -- -- --   --  ((Œª t t‚àà ‚Üí (flipCircle ‚àò (fst (h t t‚àà))) ,
-- -- -- -- -- -- -- -- -- -- -- -- --   --    snd (snd (h t t‚àà)) , fst (snd (h t t‚àà)))
-- -- -- -- -- -- -- -- -- -- -- -- --   --    , ((funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --   --      Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong‚ÇÇ _,_
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong (snd ‚àò fst) (px ‚â°$ x))
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong (fst ‚àò fst) (px ‚â°$ x))))
-- -- -- -- -- -- -- -- -- -- -- -- --   --    , (funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --   --      Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong‚ÇÇ _,_
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong (snd ‚àò fst) (py ‚â°$ x))
-- -- -- -- -- -- -- -- -- -- -- -- --   --      (cong (fst ‚àò fst) (py ‚â°$ x)))))
-- -- -- -- -- -- -- -- -- -- -- -- --   --    , {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .AbGroupStr.isAbGroup =
-- -- -- -- -- -- -- -- -- -- -- -- --   makeIsAbGroup {!!} {!!} {!!} {!!} {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- module ‚ÑùœÄ‚ÇÅS¬π where
-- -- -- -- -- -- -- -- -- -- -- -- --  open AbGroupStr (snd ‚Ñù-œÄ‚ÇÅS¬π) public



-- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§‚Üí‚Ñù-Circle‚ÜíCircle : ‚Ñ§ ‚Üí Circle ‚Üí Circle 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§‚Üí‚Ñù-Circle‚ÜíCircle k = SQ.Rec.go w 
-- -- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- -- --  w : Rec Circle
-- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.isSetB = isSetCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f x = injCircle (rat [ k / 1 ] ¬∑·µ£ x) 
-- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f‚àº a a' (z , p) = eq/ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- --    (k ‚Ñ§.¬∑ z ,
-- -- -- -- -- -- -- -- -- -- -- -- -- --     (sym (ùêë'.¬∑DistR- _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- --      ‚àô‚àô cong (rat [ k / 1 ] ¬∑·µ£_) p ‚àô‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- --      sym (rat¬∑·µ£rat _ _)))
 




-- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/ : ‚Ñ§ ‚Üí ‚Ñù-S¬π‚ÜíS¬π/‚àº 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/ = _‚Ñ§[ AbGroup‚ÜíGroup ‚Ñù-œÄ‚ÇÅS¬π ]¬∑ [ id-‚Ñù-S¬π‚ÜíS¬π ]/

-- -- -- -- -- -- -- -- -- -- -- -- -- -- opaque
-- -- -- -- -- -- -- -- -- -- -- -- -- --  -- unfolding circle0
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* : ‚Ñ§ ‚Üí ‚Ñù-S¬π‚ÜíS¬π 
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* z = (Œª x ‚Üí z ‚Ñ§[ AbGroup‚ÜíGroup ‚ÑùS¬πAbGroup ]¬∑ x) , {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* : ‚àÄ z ‚Üí ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/ z ‚â° [ ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* z ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (pos zero) =
-- -- -- -- -- -- -- -- -- -- -- -- -- --    cong [_]/ (Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- --     refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (pos (suc n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- --    cong ([ id-‚Ñù-S¬π‚ÜíS¬π ]/ ‚ÑùœÄ‚ÇÅS¬π.+_) (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (pos n))
-- -- -- -- -- -- -- -- -- -- -- -- -- --     ‚àô cong [_]/ (Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- --       (funExt Œª x ‚Üí distCircle‚â° refl refl))
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (‚Ñ§.negsuc zero) =
-- -- -- -- -- -- -- -- -- -- -- -- -- --   cong [_]/ (Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ) refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (‚Ñ§.negsuc (suc n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- --    cong (‚ÑùœÄ‚ÇÅS¬π.- [ id-‚Ñù-S¬π‚ÜíS¬π  ]/  ‚ÑùœÄ‚ÇÅS¬π.+_) (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (‚Ñ§.negsuc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- --     ‚àô cong [_]/ (Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- --       (funExt Œª x ‚Üí distCircle‚â° refl refl))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- opaque
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π-winding : ‚àÄ f ‚Üí uContCircleMap f ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    Œ£ ‚Ñ§.‚Ñ§ Œª k ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       Œ£ (fromInterval‚Üí‚Ñù-uC) Œª (g , _) ‚Üí 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ((rat [ k / 1 ] ‚â° g 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) -·µ£ g 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        √ó (((‚àÄ x x‚àà ‚Üí  Circle‚ÜídistCircle (injCircle (g x x‚àà)) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --              f (Circle‚ÜídistCircle (injCircle x))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --              √ó (fst (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* k) ‚àº f))) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-S¬π‚ÜíS¬π-winding f  (ucX , ucY) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (fst pcwŒî) ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ((fst pcwN , fst (snd pcwN)) ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ((snd pcwŒî) , snd (snd pcwN) , ‚àºf))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œµ : ‚Ñö‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œµ = 1

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uc-x : Œ£ ‚Ñö‚Çä Œª Œ¥ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (u v : ‚Ñù) (u‚àà : u ‚àà interval‚Ñô 0 1) (v‚àà : v ‚àà interval‚Ñô 0 1) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  u ‚àº[ Œ¥ ] v ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  fst (fst (f (Circle‚ÜídistCircle (injCircle u)))) ‚àº[ Œµ ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  fst (fst (f (Circle‚ÜídistCircle (injCircle v))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uc-x = ucX Œµ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uc-y : Œ£ ‚Ñö‚Çä Œª Œ¥ ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (u v : ‚Ñù) (u‚àà : u ‚àà interval‚Ñô 0 1) (v‚àà : v ‚àà interval‚Ñô 0 1) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  u ‚àº[ Œ¥ ] v ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  snd (fst (f (Circle‚ÜídistCircle (injCircle u)))) ‚àº[ Œµ ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  snd (fst (f (Circle‚ÜídistCircle (injCircle v))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   uc-y = ucY Œµ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œ¥ : ‚Ñö‚Çä
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œ¥ = ‚Ñö.min‚Çä 1 (‚Ñö.min‚Çä (fst uc-x) (fst uc-y))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   n,n< : Œ£ (‚Ñï √ó ‚Ñö)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (Œª (n , q) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (fromNat n ‚Ñö.+ q ‚â° fst (inv‚Ñö‚Çä Œ¥)) √ó (0 ‚Ñö.‚â§ q) √ó (q ‚Ñö.< 1))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   n,n< = ‚Ñö.floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä Œ¥)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   n : ‚Ñï
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   n = fst (fst n,n<)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcw : ‚àÄ k ‚Üí k ‚Ñï.‚â§ n ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --            Œ£[ g ‚àà (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 (rat [ pos (suc k) / 1+ n ]) ‚Üí ‚Ñù) ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (IsUContinuous‚Ñô (interval‚Ñô 0 (rat [ pos (suc k) / 1+ n ])) g
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  √ó (‚àÄ x x‚àà ‚Üí Circle‚ÜídistCircle (injCircle (g x x‚àà)) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       f (Circle‚ÜídistCircle (injCircle x))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcw zero x = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcw (suc k) x = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcwN : Œ£[ g ‚àà (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí ‚Ñù) ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             ((IsUContinuous‚Ñô (interval‚Ñô 0 1) g) √ó 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (‚àÄ x x‚àà ‚Üí Circle‚ÜídistCircle (injCircle (g x x‚àà)) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       f (Circle‚ÜídistCircle (injCircle x))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcwN = subst (Œª u ‚Üí Œ£[ g ‚àà (‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 u ‚Üí ‚Ñù) ]
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (IsUContinuous‚Ñô (interval‚Ñô 0 u) g
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  √ó (‚àÄ x x‚àà ‚Üí Circle‚ÜídistCircle (injCircle (g x x‚àà)) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       f (Circle‚ÜídistCircle (injCircle x)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (cong rat (‚Ñö.[/]‚â°¬∑ (pos (suc n)) (1+ n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                         ‚àô ‚Ñö.x¬∑inv‚Ñö‚Çä[x] ([ pos (suc n) / 1 ] , _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                         (pcw n (‚Ñï.‚â§-refl {n}))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- f (Circle‚ÜídistCircle (injCircle (fst fwi x x‚àà)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              ‚â° fst fwi x x‚àà

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcwŒî : Œ£[ k ‚àà ‚Ñ§ ] (rat [ k / 1 ] ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --           fst pcwN 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) -·µ£ fst pcwN 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pcwŒî =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    let p : Circle‚ÜídistCircle (injCircle (pcwN .fst 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             Circle‚ÜídistCircle (injCircle (pcwN .fst 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        p = (snd (snd pcwN) 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£? ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             ‚àô‚àô cong (f ‚àò Circle‚ÜídistCircle)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (eq/ _ _ (-1 , -·µ£-rat‚ÇÇ 0 1)) ‚àô‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             sym (snd (snd pcwN) 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        p' = invEq (congEquiv
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --               {x = injCircle (pcwN .fst 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --               {y = injCircle (pcwN .fst 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                Circle‚âÉdistCircle) p  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        z = fromCircle‚â° _ _ (sym p')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    in fst z , sym (snd z)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- ùíà : CircleOverlap[ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _) ] ‚Üí distCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- ùíà = SQ.Rec.go
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    {A = Œ£-syntax ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --          (Œª x ‚Üí x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , tt))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    {R = circle-rel-overlap (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , tt))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    ww
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  -- www : (x : ‚Ñù) ‚Üí distCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  -- www = stichFns' distCircle isSetDistCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --   (rat [ 1 / 2 ]) 1
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --    dec‚Ñö<·µ£?
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --      (Œª x x<1 ‚Üí Circle‚ÜídistCircle (injCircle (fst pcwN (max·µ£ 0 x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --        ((‚â§max·µ£ 0 x) , max‚â§-lem 0 x 1 dec‚Ñö‚â§·µ£? (<·µ£Weaken‚â§·µ£ _ _ x<1)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --      (Œª x 1/2<x ‚Üí {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  --      {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  ww : Rec
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    {A = Œ£-syntax ‚Ñù
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --          (Œª x ‚Üí x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , tt))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    {R = circle-rel-overlap (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , tt))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    distCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  ww .Rec.isSetB = isSetDistCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  ww .Rec.f (x , x‚àà) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --  ww .Rec.f‚àº = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíâ : (t : ‚Ñù) ‚Üí t ‚àà interval‚Ñô 0 1 ‚Üí ‚Ñù-S¬π‚ÜíS¬π
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ùíâ t t‚àà = Circle‚ÜídistCircle ‚àò injCircle ‚àò fst zz ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     zz : {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     zz = fromFWI ({!!} , {!!}) {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- fromFWI
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚àºf : fst (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* (fst pcwŒî)) ‚àº f
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚àºf = ‚à£ (ùíâ , {!!}) ‚à£‚ÇÅ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-Hom : GroupHom ‚Ñ§Group (AbGroup‚ÜíGroup ‚Ñù-œÄ‚ÇÅS¬π)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-Hom .fst = ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-Hom .snd = makeIsGroupHom 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (distr‚Ñ§¬∑ (AbGroup‚ÜíGroup ‚Ñù-œÄ‚ÇÅS¬π) [ id-‚Ñù-S¬π‚ÜíS¬π ]/)
  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-inj : ‚àÄ k ‚Üí ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/ k ‚â° [ const-‚Ñù-S¬π‚ÜíS¬π ]/ ‚Üí k ‚â° 0
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-inj k p = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let w = eff-‚Ñù-S¬π‚ÜíS¬π/‚àº _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (sym (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* k) ‚àô p)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in PT.rec
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (‚Ñ§.isSet‚Ñ§ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª (h , (h0 , h1) , _) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          {!!}) w

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-BijectionIso : BijectionIso ‚Ñ§Group (AbGroup‚ÜíGroup ‚Ñù-œÄ‚ÇÅS¬π)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-BijectionIso .BijectionIso.fun = ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-Hom
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-BijectionIso .BijectionIso.inj = ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-inj
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-BijectionIso .BijectionIso.surj = SQ.ElimProp.go w
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w : ElimProp (isInIm ‚Ñ§-‚Ñù-S¬π‚ÜíS¬π-Hom)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .ElimProp.isPropB _ = squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .ElimProp.f (f , fc) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   PT.map
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (map-snd (Œª {z} w ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π/‚â°‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* z ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (eq/ (‚Ñ§‚Üí‚Ñù-S¬π‚ÜíS¬π* z) (f , fc) (snd (snd (snd w)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ‚àò ‚Ñù-S¬π‚ÜíS¬π-winding f) fc

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π : Group ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .fst = ‚Ñù-S¬π‚ÜíS¬π/‚àº
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .GroupStr.1g = [ const-‚Ñù-S¬π‚ÜíS¬π ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .GroupStr._¬∑_ = SQ.Rec2.go w
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w : Rec2 (‚Ñù-œÄ‚ÇÅS¬π .fst)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.isSetB = squash/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.f x y = [ S¬π‚ÜíS¬π¬∑ x y ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.f‚àº = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec2.‚àºf = {!!}
 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .GroupStr.inv = SQ.Rec.go w
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w : Rec (‚Ñù-œÄ‚ÇÅS¬π .fst)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.isSetB = squash/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f = [_]/ ‚àò invS¬π‚ÜíS¬π¬∑
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  w .Rec.f‚àº a a' (h , (px , py) , (t0 , t1)) = eq/ _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ((Œª t t‚àà ‚Üí (flipCircle ‚àò (fst (h t t‚àà))) ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      snd (snd (h t t‚àà)) , fst (snd (h t t‚àà)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , ((funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong‚ÇÇ _,_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong (snd ‚àò fst) (px ‚â°$ x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong (fst ‚àò fst) (px ‚â°$ x))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , (funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong‚ÇÇ _,_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong (snd ‚àò fst) (py ‚â°$ x))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (cong (fst ‚àò fst) (py ‚â°$ x)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      , {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚Ñù-œÄ‚ÇÅS¬π .snd .GroupStr.isGroup =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   makeIsGroup squash/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    {!!} {!!} {!!} {!!} {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- concatProp : fromWeldedInterval ‚Ñù ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    fromWeldedInterval ‚Ñù ‚Üí fromWeldedInterval ‚Ñù  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- concatProp = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ (Œµ : ‚Ñù‚Çä) where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  circle-rel-overlap : 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (x y : (Œ£[ x ‚àà ‚Ñù ] x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst Œµ))) ‚Üí Type
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  circle-rel-overlap (x , _) (y , _) = circle-rel x y

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  CircleOverlap[_] : Type
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  CircleOverlap[_] =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (Œ£[ x ‚àà ‚Ñù ] x ‚àà ointerval‚Ñô 0 (1 +·µ£ fst Œµ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    / circle-rel-overlap


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  CircleOverlap[_]‚ÜíCircle : CircleOverlap[_] ‚Üí Circle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  CircleOverlap[_]‚ÜíCircle = SQ.Rec.go w
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   w : Rec _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   w .Rec.isSetB = isSetCircle
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   w .Rec.f (a , _) = [ a ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   w .Rec.f‚àº _ _ = eq/ _ _



