{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.Experiment where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Path

import Cubical.Functions.Logic as L
open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Surjection
open import Cubical.Functions.Embedding


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
-- open import Cubical.Data.Fin

import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos;‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.PropositionalTruncation.Monad


open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.IntegrationMore
open import Cubical.HITs.CauchyReals.MeanValue
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.ExponentiationMore
open import Cubical.HITs.CauchyReals.Uniform
open import Cubical.HITs.CauchyReals.PiNumber
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Summation

open import Cubical.Algebra.Ring.BigOps


open import Cubical.Algebra.CommRing.Properties
open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
open import Cubical.Algebra.AbGroup
open import Cubical.Algebra.CommRing.Base
import Cubical.Data.FinData as FD

open import Cubical.HITs.CauchyReals.TrigonometricIdentities
open import Cubical.HITs.CauchyReals.ArcSin
open import Cubical.HITs.S1
open import Cubical.HITs.S2
open import Cubical.HITs.SetQuotients as SQ renaming ([_] to [_]/)
open import Cubical.Relation.Binary.Base
open import Cubical.HITs.CauchyReals.Circle
open import Cubical.HITs.CauchyReals.CircleMore
open import Cubical.Tactics.CommRingSolver
open import Cubical.Algebra.Group.Instances.Int

open import Cubical.Algebra.Group.ZAction

open import Cubical.HITs.SequentialColimit as Seq
open import Cubical.Data.Sequence
open import Cubical.HITs.CauchyReals.RealHomotopy

private
 variable
  ‚Ñì : Level
  A B : Type ‚Ñì
  


module Version1-Metric
   (A : Type ‚Ñì)
   (distA : A ‚Üí A ‚Üí ‚Ñù)
   where
   
 data Space : Type ‚Ñì where
  pt : A ‚Üí Space
  path : (p : ‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí A)
           ‚Üí pt (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚â° pt (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
  const‚â°refl : ‚àÄ a ‚Üí path (Œª _ _ ‚Üí a) ‚â° Œª _ ‚Üí pt a


-- module Version1 where
--  data Space (A : Type ‚Ñì) : Type ‚Ñì where
--   pt : A ‚Üí Space A
--   path : (p : ‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí A)
--            ‚Üí pt (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚â° pt (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
--   const‚â°refl : ‚àÄ a ‚Üí path (Œª _ _ ‚Üí a) ‚â° Œª _ ‚Üí pt a


--  record ElimSpace {‚Ñì'} (A : Type ‚Ñì) (T : Space A ‚Üí Type ‚Ñì') :
--    Type (‚Ñì-max ‚Ñì ‚Ñì') where
--   field
--    pt-f : ‚àÄ x ‚Üí T (pt x) 
--    path-f : ‚àÄ p ‚Üí PathP (Œª i ‚Üí T (path p i))
--      (pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--      (pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) 
--    const‚â°refl-f : ‚àÄ x ‚Üí
--      SquareP (Œª i j ‚Üí T (const‚â°refl x i j))
--        (path-f (Œª _ _ ‚Üí x))
--        refl
--        refl
--        refl

--   go : ‚àÄ x ‚Üí T x
--   go (pt x) = pt-f x
--   go (path p i) = path-f p i
--   go (const‚â°refl a i i‚ÇÅ) = const‚â°refl-f a i i‚ÇÅ

--  record ElimSpaceSet {‚Ñì'} (A : Type ‚Ñì) (T : Space A ‚Üí Type ‚Ñì') :
--    Type (‚Ñì-max ‚Ñì ‚Ñì') where
--   no-eta-equality
--   field
--    pt-f : ‚àÄ x ‚Üí T (pt x) 
--    path-f : ‚àÄ p ‚Üí PathP (Œª i ‚Üí T (path p i))
--      (pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--      (pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--    isSetT : ‚àÄ x ‚Üí isSet (T x)

--   go : ‚àÄ x ‚Üí T x
--   go = ElimSpace.go w
--    where
--    w : ElimSpace A T
--    w .ElimSpace.pt-f = pt-f
--    w .ElimSpace.path-f = path-f
--    w .ElimSpace.const‚â°refl-f x =
--      isSet‚ÜíSquareP (Œª _ _ ‚Üí isSetT _) _ _ _ _ 

--  record ElimSpaceProp {‚Ñì'} (A : Type ‚Ñì) (T : Space A ‚Üí Type ‚Ñì') :
--    Type (‚Ñì-max ‚Ñì ‚Ñì') where
--   no-eta-equality
--   field
--    pt-f : ‚àÄ x ‚Üí T (pt x) 
--    isPropT : ‚àÄ x ‚Üí isProp (T x)

--   go : ‚àÄ x ‚Üí T x
--   go = ElimSpaceSet.go w
--    where
--    w : ElimSpaceSet A (Œª z ‚Üí T z)
--    w .ElimSpaceSet.pt-f = pt-f
--    w .ElimSpaceSet.path-f _ = isProp‚ÜíPathP (Œª _ ‚Üí isPropT _) _ _ 
--    w .ElimSpaceSet.isSetT _ = isProp‚ÜíisSet (isPropT _)
   
--  record ElimSpaceSet‚ÇÇ {‚Ñì'} (A B : Type ‚Ñì) (T : Space A ‚Üí Space B ‚Üí Type ‚Ñì') :
--    Type (‚Ñì-max ‚Ñì ‚Ñì') where
--   no-eta-equality
--   field
--    pt-pt-f : ‚àÄ a b ‚Üí T (pt a) (pt b)
--    pt-path-f : ‚àÄ a p
--      ‚Üí PathP (Œª i ‚Üí T (pt a) (path p i))
--      (pt-pt-f a (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--      (pt-pt-f a (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--    path-pt-f : ‚àÄ p b
--      ‚Üí PathP (Œª i ‚Üí T (path p i) (pt b))
--      (pt-pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
--      (pt-pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
--    isSetT : ‚àÄ x y ‚Üí isSet (T x y)

--   go : ‚àÄ x y ‚Üí T x y
--   go = ElimSpaceSet.go w
--    where
--     w : ElimSpaceSet A (Œª z ‚Üí (y : Space B) ‚Üí T z y)
--     w .ElimSpaceSet.pt-f x = ElimSpaceSet.go ww
--      where
--      ww : ElimSpaceSet B (Œª z ‚Üí T (pt x) z)
--      ww .ElimSpaceSet.pt-f = pt-pt-f x
--      ww .ElimSpaceSet.path-f = pt-path-f x
--      ww .ElimSpaceSet.isSetT _ = isSetT _ _
     
--     w .ElimSpaceSet.path-f p = funExt (ElimSpaceProp.go ww)
--      where
--      ww : ElimSpaceProp B
--            (Œª z ‚Üí
--               PathP (Œª z‚ÇÅ ‚Üí T (path p z‚ÇÅ) z)
--               (w .ElimSpaceSet.pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) z)
--               (w .ElimSpaceSet.pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) z))
--      ww .ElimSpaceProp.pt-f b = path-pt-f p b
--      ww .ElimSpaceProp.isPropT x = isOfHLevelPathP' 1 (isSetT _ _) _ _
--     w .ElimSpaceSet.isSetT _ = isSetŒ† Œª _ ‚Üí isSetT _ _

--  record ElimSpaceGroupoid‚ÇÇ {‚Ñì'} (A B : Type ‚Ñì) (T : Space A ‚Üí Space B ‚Üí Type ‚Ñì') :
--    Type (‚Ñì-max ‚Ñì ‚Ñì') where
--   no-eta-equality
--   field
--    pt-pt-f : ‚àÄ a b ‚Üí T (pt a) (pt b)
--    pt-path-f : ‚àÄ a p
--      ‚Üí PathP (Œª i ‚Üí T (pt a) (path p i))
--      (pt-pt-f a (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--      (pt-pt-f a (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--    path-pt-f : ‚àÄ p b
--      ‚Üí PathP (Œª i ‚Üí T (path p i) (pt b))
--      (pt-pt-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
--      (pt-pt-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) b)
--    path-path-f : ‚àÄ p p' ‚Üí SquareP (Œª j i ‚Üí T (path p i) (path p' j))
         
--          (path-pt-f p (p' 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--          (path-pt-f p (p' 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
--          (pt-path-f (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) p')
--          (pt-path-f (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) p')
--    const-refl‚â°-Left : ‚àÄ a (x : B) ‚Üí
--       SquareP (Œª i j ‚Üí T (pt a) (const‚â°refl x i j))
--       (pt-path-f a (Œª _ _ ‚Üí x)) refl refl refl
--    const-refl‚â°-Right : ‚àÄ a (x : B) ‚Üí
--       SquareP (Œª i j ‚Üí T (const‚â°refl a i j) (pt x))
--       (path-pt-f (Œª _ _ ‚Üí a) x) refl refl refl
--    isGroupoidT : ‚àÄ x y ‚Üí isGroupoid (T x y)

--   go : ‚àÄ x y ‚Üí T x y
--   go = ElimSpace.go w
--    where
--     w : ElimSpace A (Œª z ‚Üí (y : Space B) ‚Üí T z y)
--     w .ElimSpace.pt-f a = ElimSpace.go ww
--       where
--        ww : ElimSpace B (Œª z ‚Üí T (pt a) z)
--        ww .ElimSpace.pt-f = pt-pt-f a
--        ww .ElimSpace.path-f = pt-path-f a
--        ww .ElimSpace.const‚â°refl-f = const-refl‚â°-Left a
--     w .ElimSpace.path-f p = funExt (ElimSpaceSet.go ww)
--       where
--        ww : ElimSpaceSet B _
--        ww .ElimSpaceSet.pt-f = path-pt-f p
--        ww .ElimSpaceSet.path-f = path-path-f p 
--        ww .ElimSpaceSet.isSetT _ = isOfHLevelPathP' 2 (isGroupoidT _ _) _ _
      
--     w .ElimSpace.const‚â°refl-f x = congP (Œª _ ‚Üí funExt)
--       (funExt (ElimSpaceProp.go ww))
--      where
--      ww : ElimSpaceProp B _
--      ww .ElimSpaceProp.pt-f b = const-refl‚â°-Right x b
--      ww .ElimSpaceProp.isPropT _ =
--        isOfHLevelPathP' 1 (isGroupoidT _ _ _ _) _ _


--  mapSpace : (A ‚Üí B) ‚Üí Space A ‚Üí Space B
--  mapSpace f = ElimSpace.go w
--   where
--   w : ElimSpace _ _
--   w .ElimSpace.pt-f = pt ‚àò f
--   w .ElimSpace.path-f p = path (Œª t t‚àà ‚Üí f (p t t‚àà))
--   w .ElimSpace.const‚â°refl-f a = const‚â°refl (f a)

--  isoSpace : Iso A B ‚Üí Iso (Space A) (Space B)
--  isoSpace isoAB = w
--    where
--    open Iso isoAB

--    secMap : {f : A ‚Üí B} {g : B ‚Üí A} ‚Üí section f g
--               ‚Üí section (mapSpace f) (mapSpace g)
--    secMap s = ElimSpace.go ww
--     where
--        ww : ElimSpace _ _
--        ww .ElimSpace.pt-f x = cong pt (s _)
--        ww .ElimSpace.path-f p i j = path (Œª t t‚àà ‚Üí s (p t t‚àà) j) i
--        ww .ElimSpace.const‚â°refl-f a i j k = const‚â°refl (s a k) i j
       
--    w : Iso (Space _) (Space _)
--    w .Iso.fun = mapSpace fun
--    w .Iso.inv = mapSpace inv
--    w .Iso.rightInv = secMap rightInv
--    w .Iso.leftInv = secMap leftInv


--  ‚ÑùPath : {A : Type ‚Ñì} ‚Üí A ‚Üí A ‚Üí Type ‚Ñì
--  ‚ÑùPath {A = A} a‚ÇÄ a‚ÇÅ =
--    Œ£ (‚àÄ t ‚Üí t ‚àà interval‚Ñô 0 1 ‚Üí A)
--     Œª p ‚Üí (a‚ÇÄ ‚â° p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) √ó (a‚ÇÅ ‚â° p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))

--  sym‚ÑùPath : ‚àÄ (a b : A) ‚Üí ‚ÑùPath a b ‚Üí ‚ÑùPath b a
--  sym‚ÑùPath a b (p , pa , pb) =
--    (Œª t t‚àà ‚Üí p (1 -·µ£ t) {!!}) ,
--     (pb ‚àô {!!}) , (pa ‚àô {!!} )

--  ‚ÑùPath‚ÜíSpPath : ‚àÄ {a b : A} ‚Üí ‚ÑùPath a b ‚Üí Path (Space A) (pt a) (pt b)
--  ‚ÑùPath‚ÜíSpPath (p , p0 , p1) = cong pt p0 ‚àô‚àô path p ‚àô‚àô cong pt (sym p1)


--  isOfHLevel‚ÑùPath : ‚àÄ n
--     ‚Üí isOfHLevel n A
--     ‚Üí ‚àÄ (a‚ÇÄ a‚ÇÅ : A)
--     ‚Üí isOfHLevel n (‚ÑùPath a‚ÇÄ a‚ÇÅ)
--  isOfHLevel‚ÑùPath n hl _ _ =
--    isOfHLevelŒ£ n (isOfHLevelŒ†2 n Œª _ _ ‚Üí hl)
--     Œª _ ‚Üí isOfHLevel√ó n (isOfHLevelPath n hl _ _) (isOfHLevelPath n hl _ _)


--  module _ (A : Type ‚Ñì) (isSetA : isSet A) where

--   opaque
--    Sp‚ÑùPathPreConcat : ‚àÄ {a b c : A} ‚Üí ‚ÑùPath a b ‚Üí ‚ÑùPath b c ‚Üí ‚ÑùPath a c 
--    Sp‚ÑùPathPreConcat (p , p0 , p1) (q , q0 , q1) =
--      pq
--       , {!!}
--       , {!!}

--     where

--     -- pqw : {!!}
--     -- pqw = {!!}


--     pq : (t : ‚Ñù) ‚Üí t ‚àà interval‚Ñô 0 1 ‚Üí A
--     pq t t‚àà = stichSetFns
--       A
      
--       (rat [ 1 / 4 ])
--       (rat [ 1 / 2 ])
--       dec‚Ñö<·µ£?
--       (Œª t t<1/2 ‚Üí p (clamp·µ£ 0 1 (t ¬∑·µ£ 4))
--          ({!!} , {!!}))
--       (Œª t 1/4<t ‚Üí q (clamp·µ£ 0 1 ((t ¬∑·µ£ 2) -·µ£ 1)) {!!})
--       isSetA
--       {!!} t

--    Sp‚ÑùPathPreConcatInvolHom : ‚àÄ {a b c : A} ‚Üí (pab : ‚ÑùPath a b)
--      ‚Üí (pbc : ‚ÑùPath b c)
--       ‚Üí ‚ÑùPath (Sp‚ÑùPathPreConcat (sym‚ÑùPath _ _ pab)
--         (Sp‚ÑùPathPreConcat pab pbc )) pbc
--    Sp‚ÑùPathPreConcatInvolHom = {!!}

  
--   Sp‚ÑùPathPreConcatRet : ‚àÄ {a b c : A} ‚Üí (pab : ‚ÑùPath a b) ‚Üí
--      retract (mapSpace (Sp‚ÑùPathPreConcat {a} {b} {c} pab))
--       (mapSpace (Sp‚ÑùPathPreConcat {b} {a} {c} (sym‚ÑùPath a b pab)))
--   Sp‚ÑùPathPreConcatRet pab (pt x) = ‚ÑùPath‚ÜíSpPath
--     (Sp‚ÑùPathPreConcatInvolHom pab x)
--   Sp‚ÑùPathPreConcatRet pab (path p i) j = {!!}
--   Sp‚ÑùPathPreConcatRet pab (const‚â°refl a i i‚ÇÅ) = {!!}
  
--   Sp‚ÑùPathPreConcatIso : ‚àÄ {a b c : A} ‚Üí ‚ÑùPath a b ‚Üí
--     Iso (Space (‚ÑùPath b c)) (Space (‚ÑùPath a c))
--   Sp‚ÑùPathPreConcatIso pab .Iso.fun =
--     mapSpace (Sp‚ÑùPathPreConcat pab)
--   Sp‚ÑùPathPreConcatIso pab .Iso.inv =
--     mapSpace (Sp‚ÑùPathPreConcat (sym‚ÑùPath _ _ pab))
--   Sp‚ÑùPathPreConcatIso pab .Iso.rightInv = {!!}
--   Sp‚ÑùPathPreConcatIso pab .Iso.leftInv = {!!}


--   Sp‚ÑùPathPostConcatIso : ‚àÄ {a b c : A} ‚Üí ‚ÑùPath b c ‚Üí
--     Iso (Space (‚ÑùPath a b)) (Space (‚ÑùPath a c))
--   Sp‚ÑùPathPostConcatIso pbc .Iso.fun =
--     mapSpace (flip Sp‚ÑùPathPreConcat pbc)
--   Sp‚ÑùPathPostConcatIso pbc .Iso.inv =
--     mapSpace (flip Sp‚ÑùPathPreConcat (sym‚ÑùPath _ _ pbc))
--   Sp‚ÑùPathPostConcatIso pbc .Iso.rightInv = {!!}

--   Sp‚ÑùPathPostConcatIso  pbc .Iso.leftInv = {!!}

--   Sp‚ÑùPathPreConcatEquiv : ‚àÄ {a b c : A} ‚Üí ‚ÑùPath a b ‚Üí
--       (Space (‚ÑùPath b c)) ‚âÉ (Space (‚ÑùPath a c))
--   Sp‚ÑùPathPreConcatEquiv pab = isoToEquiv (Sp‚ÑùPathPreConcatIso pab)

--   Sp‚ÑùPathPostConcatEquiv : ‚àÄ {a b c : A} ‚Üí ‚ÑùPath b c ‚Üí
--       (Space (‚ÑùPath a b)) ‚âÉ (Space (‚ÑùPath a c))
--   Sp‚ÑùPathPostConcatEquiv pbc = isoToEquiv (Sp‚ÑùPathPostConcatIso pbc)



--   EncodedSpacePath‚ÇÇ : Space A ‚Üí Space A ‚Üí Type ‚Ñì 
--   EncodedSpacePath‚ÇÇ (pt x) (pt x‚ÇÅ) = Space (‚ÑùPath x x‚ÇÅ)
--   EncodedSpacePath‚ÇÇ (pt x) (path p i) =
--     ua (Sp‚ÑùPathPostConcatEquiv {a = x}
--       (p , refl , refl)) i
--   EncodedSpacePath‚ÇÇ (pt x) (const‚â°refl a i i‚ÇÅ) = {!!}
--   EncodedSpacePath‚ÇÇ (path p i) (pt x) =
--     ua (Sp‚ÑùPathPreConcatEquiv {c = x} (p , refl , refl)) (~ i)
--   EncodedSpacePath‚ÇÇ (path p i) (path p‚ÇÅ i‚ÇÅ) = {!!}
--   EncodedSpacePath‚ÇÇ (path p i) (const‚â°refl a i‚ÇÅ i‚ÇÇ) = {!!}
--   EncodedSpacePath‚ÇÇ (const‚â°refl a i i‚ÇÅ) (pt x) = {!!}
--   EncodedSpacePath‚ÇÇ (const‚â°refl a i i‚ÇÅ) (path p i‚ÇÇ) = {!!}
--   EncodedSpacePath‚ÇÇ (const‚â°refl a i i‚ÇÅ) (const‚â°refl a‚ÇÅ i‚ÇÇ i‚ÇÉ) = {!!}

  

--   DecodeSpacePath‚ÇÇ : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí a‚ÇÄ ‚â° a‚ÇÅ ‚Üí EncodedSpacePath‚ÇÇ a‚ÇÄ a‚ÇÅ
--   DecodeSpacePath‚ÇÇ a‚ÇÄ _ =
--    J (Œª a‚ÇÅ (p : a‚ÇÄ ‚â° a‚ÇÅ) ‚Üí EncodedSpacePath‚ÇÇ a‚ÇÄ a‚ÇÅ)
--      (ElimSpace.go ww a‚ÇÄ)
--    where
--    ww : ElimSpace _ (Œª a‚ÇÄ ‚Üí EncodedSpacePath‚ÇÇ a‚ÇÄ a‚ÇÄ)
--    ww .ElimSpace.pt-f a‚ÇÄ = pt ((Œª _ _ ‚Üí a‚ÇÄ) , refl , refl) 
--    ww .ElimSpace.path-f p = {!‚ÑùPath‚ÜíSpPath!}
--    ww .ElimSpace.const‚â°refl-f = {!!}
   
--   DecodeSpacePath‚ÇÇPt : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí Path (Space A) (pt a‚ÇÄ) (pt a‚ÇÅ)
--     ‚Üí Space (‚ÑùPath a‚ÇÄ a‚ÇÅ) 
--   DecodeSpacePath‚ÇÇPt a‚ÇÄ a‚ÇÅ = DecodeSpacePath‚ÇÇ (pt a‚ÇÄ) (pt a‚ÇÅ)
  
-- -- ElimSpaceGroupoid‚ÇÇ.go w
-- --    where
-- --    w : ElimSpaceGroupoid‚ÇÇ _ _ (Œª _ _ ‚Üí hSet _)
-- --    w .ElimSpaceGroupoid‚ÇÇ.pt-pt-f a‚ÇÄ a‚ÇÅ =
-- --      Space (‚ÑùPath a‚ÇÄ a‚ÇÅ) , {!!}
-- --    w .ElimSpaceGroupoid‚ÇÇ.pt-path-f a p =
-- --      {!!}
-- --      -- {!Sp‚ÑùPathPreConcatEquiv (p , refl , refl)!}
-- --    w .ElimSpaceGroupoid‚ÇÇ.path-pt-f p b =
-- --      TypeOfHLevel‚â° 2 (sym (ua (Sp‚ÑùPathPreConcatEquiv (p , refl , refl))))
-- --    w .ElimSpaceGroupoid‚ÇÇ.path-path-f p p' = {!!}
-- --    w .ElimSpaceGroupoid‚ÇÇ.const-refl‚â°-Left a x = {!!}
-- --    w .ElimSpaceGroupoid‚ÇÇ.const-refl‚â°-Right a x = {!!}
-- --    w .ElimSpaceGroupoid‚ÇÇ.isGroupoidT = {!!}

-- --  Sp‚Çô : (A : Type ‚Ñì) ‚Üí ‚Ñï ‚Üí Type ‚Ñì
-- --  Sp‚Çô A zero = A
-- --  Sp‚Çô A (suc x) = Space (Sp‚Çô A x)



-- --  -- Sp‚Çô-prediag2 : Space {‚Ñì} A ‚Üí I ‚Üí Space {‚Ñì} A 
-- --  -- Sp‚Çô-prediag2 (pt x) _ = pt x
-- --  -- Sp‚Çô-prediag2 (path p i) j = {!(path p j)!}
-- --  -- Sp‚Çô-prediag2 (const‚â°refl a i i‚ÇÅ) x‚ÇÅ = {!!}

 
-- --  -- Sp‚Çô-prediag : ‚àÄ A n ‚Üí Sp‚Çô {‚Ñì} A (suc (suc n)) ‚Üí I ‚Üí Sp‚Çô A (suc n)
-- --  -- Sp‚Çô-prediag A n (pt x) _ = x
-- --  -- Sp‚Çô-prediag A zero (path p i) j =
-- --  --   let z = path (Œª t t‚àà ‚Üí {!p t t‚àà!}) 
-- --  --   in {!!}
-- --  -- Sp‚Çô-prediag A (suc n) (path p i) j =
-- --  --   let z = ((path (Œª t t‚àà ‚Üí Sp‚Çô-prediag A n (p t t‚àà) i) i))
-- --  --   in {!z!}
        
-- --  -- Sp‚Çô-prediag A n (const‚â°refl a i i‚ÇÅ) x‚ÇÅ = {!!}
 
-- --  zzz : (f : (‚Ñù √ó ‚Ñù) ‚Üí (‚Ñù √ó ‚Ñù)) ‚Üí
-- --         Square {A = Sp‚Çô (‚Ñù √ó ‚Ñù) 2}
-- --           (path Œª j·µ£ _ ‚Üí pt (f (0 , j·µ£)))
-- --           (path Œª j·µ£ _ ‚Üí pt (f (1 , j·µ£)))
-- --           (cong pt (path Œª i·µ£ _ ‚Üí (f (i·µ£ , 0))))
-- --           (cong pt (path Œª i·µ£ _ ‚Üí (f (i·µ£ , 1))))
-- --  zzz f i =
-- --    path (Œª j·µ£ _ ‚Üí path (Œª i·µ£ _ ‚Üí f (i·µ£ , j·µ£)) i)


-- --  Sp‚Çô-seq : (A : Type ‚Ñì) ‚Üí Sequence ‚Ñì
-- --  Sp‚Çô-seq A .Sequence.obj = Sp‚Çô A
-- --  Sp‚Çô-seq A .Sequence.map = pt
 
-- --  Sp : (A : Type ‚Ñì) ‚Üí Type ‚Ñì
-- --  Sp A = SeqColim (Sp‚Çô-seq A)


-- --  ‚Ñù¬∑‚Çô : ‚àÄ  n ‚Üí ‚Ñù ‚Üí Sp‚Çô ‚Ñù n ‚Üí Sp‚Çô ‚Ñù n
-- --  ‚Ñù¬∑‚Çô zero x x‚ÇÅ = x ¬∑·µ£ x‚ÇÅ
-- --  ‚Ñù¬∑‚Çô (suc n) x (pt x‚ÇÅ) = pt (‚Ñù¬∑‚Çô n x x‚ÇÅ)
-- --  ‚Ñù¬∑‚Çô (suc n) x (path p i) = path (Œª t t‚àà ‚Üí ‚Ñù¬∑‚Çô n x (p t t‚àà)) i
-- --  ‚Ñù¬∑‚Çô (suc n) x (const‚â°refl a i i‚ÇÅ) =
-- --    const‚â°refl (‚Ñù¬∑‚Çô n x a) i i‚ÇÅ

  
-- --  _‚Ñù¬∑_ : ‚Ñù ‚Üí Sp ‚Ñù ‚Üí Sp ‚Ñù
-- --  x ‚Ñù¬∑ incl x‚ÇÅ = incl (‚Ñù¬∑‚Çô _ x x‚ÇÅ)
-- --  x ‚Ñù¬∑ push x‚ÇÅ i = push (‚Ñù¬∑‚Çô _ x x‚ÇÅ) i


-- --  opaque
-- --   inclPt : ‚àÄ {A : Type ‚Ñì} ‚Üí (a : A) ‚Üí ‚àÄ n ‚Üí Œ£ (Sp‚Çô A n)
-- --     Œª x ‚Üí Path (Sp A) (incl {n = 0} a) (incl x) 
-- --   inclPt a zero = _ , refl
-- --   inclPt a (suc n) = _ , snd (inclPt a n) ‚àô push _



-- --   -- Sp‚Çô-corner : ‚àÄ n ‚Üí (x : Sp‚Çô {‚Ñì} A n) ‚Üí
-- --   --   Œ£ (Space A) Œª x‚ÇÄ ‚Üí Path (Sp A) (incl {n = 1} x‚ÇÄ) (incl  x) 
-- --   -- Sp‚Çô-corner zero x = _ , sym (push _)
-- --   -- Sp‚Çô-corner (suc n) (pt x) =
-- --   --   let z , zz = Sp‚Çô-corner n x
-- --   --     in z , zz ‚àô push _
-- --   -- Sp‚Çô-corner (suc n) (path p i) =
-- --   --   let u = path (Œª t t‚àà ‚Üí fst (Sp‚Çô-corner n (p t t‚àà))) i
-- --   --   in {!u !}
-- --   -- Sp‚Çô-corner (suc n) (const‚â°refl a i i‚ÇÅ) = {!!}


-- --  --  ‚Ñù¬∑‚Çô0 : ‚àÄ n x ‚Üí ‚Ñù¬∑‚Çô n 0 x ‚â° fst (inclPt 0 n) 
-- --  --  ‚Ñù¬∑‚Çô0 zero x = ùêë'.0LeftAnnihilates _
-- --  --  ‚Ñù¬∑‚Çô0 (suc n) (pt x) i = pt (‚Ñù¬∑‚Çô0 n x i)
-- --  --  ‚Ñù¬∑‚Çô0 (suc n) (path p j) i =
-- --  --    hcomp
-- --  --      (Œª k ‚Üí
-- --  --         Œª { (i = i0) ‚Üí path
-- --  --           (Œª t t‚àà ‚Üí ‚Ñù¬∑‚Çô0 n (p t t‚àà) (~ k)) j
-- --  --           ; (i = i1) ‚Üí pt (fst (inclPt 0 n))
-- --  --           ; (j = i0) ‚Üí pt ((‚Ñù¬∑‚Çô0 n (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) (i ‚à® ~ k)))
-- --  --           ; (j = i1) ‚Üí pt ((‚Ñù¬∑‚Çô0 n (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) (i ‚à® ~ k)))
-- --  --         })
-- --  --      (const‚â°refl (fst (inclPt (rat [ pos 0 , (1+ 0) ]/) n)) i j)
-- --  --  ‚Ñù¬∑‚Çô0 (suc n) (const‚â°refl a i‚ÇÅ i‚ÇÇ) i = {!!}




-- --  -- ‚Ñù¬∑‚Çô1 : ‚àÄ n x ‚Üí ‚Ñù¬∑‚Çô n 1 x ‚â° x 
-- --  -- ‚Ñù¬∑‚Çô1 zero x = ¬∑IdL _
-- --  -- ‚Ñù¬∑‚Çô1 (suc n) (pt x) i = pt (‚Ñù¬∑‚Çô1 n x i)
-- --  -- ‚Ñù¬∑‚Çô1 (suc n) (path p i‚ÇÅ) i = path (Œª t t‚àà ‚Üí ‚Ñù¬∑‚Çô1 n (p t t‚àà) i) i‚ÇÅ
-- --  -- ‚Ñù¬∑‚Çô1 (suc n) (const‚â°refl a i‚ÇÅ i‚ÇÇ) i = const‚â°refl (‚Ñù¬∑‚Çô1 n a i) i‚ÇÅ i‚ÇÇ

-- --  -- opaque
-- --  --  incl-path : ‚àÄ n x ‚Üí Path (Sp ‚Ñù)
-- --  --    (incl (fst (inclPt {A = ‚Ñù} 0 n)))
-- --  --    (incl {n = n} x)

-- --  --  incl-path n x i = 
-- --  --    hcomp
-- --  --       (Œª k ‚Üí
-- --  --         Œª { (i = i0) ‚Üí push {n = n} (‚Ñù¬∑‚Çô0 n x k) (~ k)
-- --  --           ; (i = i1) ‚Üí push {n = n} (‚Ñù¬∑‚Çô1 n x k) (~ k)
-- --  --         })
-- --  --         (incl {n = suc n} (
-- --  --         (path (Œª t t‚àà ‚Üí ‚Ñù¬∑‚Çô n t x) i)))

-- --  --  sqIsContrSp‚Ñù : ‚àÄ n (x : Sp‚Çô ‚Ñù n) ‚Üí
-- --  --     Square {A = (Sp ‚Ñù)}
-- --  --       (snd (inclPt (rat [ pos 0 , (1+ 0) ]/) n) ‚àô (incl-path n x))
-- --  --       (snd (inclPt (rat [ pos 0 , (1+ 0) ]/) (suc n))
-- --  --         ‚àô  (incl-path (suc n) (pt x)))
-- --  --       (Œª _ ‚Üí incl 0)
-- --  --       (push x)

-- --  --  sqIsContrSp‚Ñù zero x i i‚ÇÅ = {!!}
-- --  --  sqIsContrSp‚Ñù (suc n) x = {!!}
 
-- --  -- isContrSp‚Ñù : isContr (Sp ‚Ñù)
-- --  -- isContrSp‚Ñù .fst = incl {n = 0} 0
-- --  -- isContrSp‚Ñù .snd (incl {n = n} x) =
-- --  --           snd (inclPt 0 n)
-- --  --            ‚àô  (incl-path n x)
-- --  -- isContrSp‚Ñù .snd (push {n} x i)  = sqIsContrSp‚Ñù n x i


-- --  circleBase : distCircle
-- --  circleBase = Circle‚ÜídistCircle (injCircle (rat [ pos 0 / 1+ 0 ]))

-- --  circleBase‚â°inj1 : Circle‚ÜídistCircle (injCircle 1) ‚â° circleBase
-- --  circleBase‚â°inj1 = cong Circle‚ÜídistCircle (eq/ _ _ (1 , -·µ£-rat‚ÇÇ 1 0))


-- --  rotateSp‚ÇôDC : distCircle ‚Üí Sp‚Çô distCircle 1 ‚Üí Sp‚Çô distCircle 1
-- --  rotateSp‚ÇôDC a = mapSpace (‚ÑùS¬π._+ a)
-- --   -- where
-- --   -- w : ElimSpace (Sp‚Çô distCircle 0) (Œª _ ‚Üí Sp‚Çô distCircle 1)
-- --   -- w .ElimSpace.pt-f x = pt (x ‚ÑùS¬π.+ a)
-- --   -- w .ElimSpace.path-f p = path (Œª t t‚àà ‚Üí (p t t‚àà) ‚ÑùS¬π.+ a) 
-- --   -- w .ElimSpace.const‚â°refl-f x = const‚â°refl _
 
-- --  -- rotateSp‚ÇôDCIso : ‚Ñù ‚Üí Iso {!!} {!!}
-- --  -- rotateSp‚ÇôDCIso = {!!}

-- --  opaque
-- --   arcLength : ((x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí distCircle) ‚Üí ‚Ñù 
-- --   arcLength = {!!}

-- --   arcLenghIsLength : ‚àÄ p ‚Üí
-- --      p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚ÑùS¬π.+
-- --       Circle‚ÜídistCircle (injCircle (arcLength p))
-- --       ‚â° p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)
-- --   arcLenghIsLength = {!!}
  
-- --  -- SelfEncodeDC : Sp‚Çô distCircle 1 ‚Üí Œ£ Type Œª A ‚Üí A
-- --  -- SelfEncodeDC = ElimSpace.go w
-- --  --  where
-- --  --  w : ElimSpace _ _
-- --  --  w .ElimSpace.pt-f x = _ , x
-- --  --  w .ElimSpace.path-f p = Œ£PathP (ua (rotationEquiv
-- --  --   (Circle‚ÜídistCircle (injCircle (arcLength p)))) , ua-gluePath _
-- --  --    (arcLenghIsLength p))
-- --  --  w .ElimSpace.const‚â°refl-f = {!!}
 
-- --  Encode‚Ñù‚ÇÄ : Sp‚Çô distCircle 1 ‚Üí hSet ‚Ñì-zero
-- --  Encode‚Ñù‚ÇÄ = ElimSpace.go w
-- --   where
-- --   w : ElimSpace distCircle (Œª _ ‚Üí hSet ‚Ñì-zero)
-- --   w .ElimSpace.pt-f _ = ‚Ñù , isSet‚Ñù
-- --   w .ElimSpace.path-f p = TypeOfHLevel‚â° 2 (ua (_+·µ£ (arcLength p) , {!!}))  
-- --   w .ElimSpace.const‚â°refl-f = {!!}

-- --  -- encode‚Ñù‚ÇÄBase : ‚àÄ x ‚Üí fst (Encode‚Ñù‚ÇÄ x)
-- --  -- encode‚Ñù‚ÇÄBase = ElimSpaceSet.go w
-- --  --  where
-- --  --  w : ElimSpaceSet _ _
-- --  --  w .ElimSpaceSet.pt-f x = {!x!}
-- --  --  w .ElimSpaceSet.path-f = {!!}
-- --  --  w .ElimSpaceSet.isSetT = snd ‚àò Encode‚Ñù‚ÇÄ

-- --  decodeDSPath : ‚àÄ c‚ÇÄ c‚ÇÅ ‚Üí Path (Sp‚Çô distCircle (suc zero)) (pt c‚ÇÄ) (pt c‚ÇÅ) ‚Üí ‚Ñù
-- --  decodeDSPath c‚ÇÄ c‚ÇÅ p = subst (fst ‚àò Encode‚Ñù‚ÇÄ) p 0 

 
-- --  opaque
-- --   encode‚Ñùpath : ‚àÄ (p : (x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí Space distCircle)
-- --         (a b : distCircle) ‚Üí
-- --        pt a ‚â° p (rat [ pos 0 / 1+ 0 ]) (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚Üí
-- --        pt b ‚â° p (rat [ pos 1 / 1+ 0 ]) (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚Üí
-- --        {!!}
-- --   encode‚Ñùpath = {!!}

-- --   -- encode‚Ñùsq :
-- --   --   ‚àÄ (p : (x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí Space distCircle)
-- --   --     (a : distCircle)
-- --   --     (p' : (x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí distCircle) ‚Üí
-- --   --     (x : pt a ‚â° p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚Üí 
-- --   --     PathP
-- --   --     (Œª i ‚Üí         
-- --   --        (path p' i ‚â° p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚Üí ‚Ñù ‚â° ‚Ñù)
-- --   --     (encode‚Ñùpath p a (p' 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) x)
-- --   --     (encode‚Ñùpath p a (p' 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) x)
-- --   -- encode‚Ñùsq p a p' x = {!!}

-- --  Encode‚Ñù : Sp‚Çô distCircle 2 ‚Üí {!!}
-- --  Encode‚Ñù = {!!}

-- --  decodeDSSq : ‚àÄ c‚ÇÄ c‚ÇÅ ‚Üí
-- --    (p p' : Path (Sp‚Çô distCircle (suc zero)) (pt c‚ÇÄ) (pt c‚ÇÅ))
-- --    ‚Üí 
-- --    Square {A = Sp‚Çô distCircle (suc (suc zero))}
-- --     (cong pt p)
-- --     (cong pt p')
-- --     refl
-- --     refl
-- --     ‚Üí decodeDSPath _ _ p ‚â° decodeDSPath _ _ p'
-- --  decodeDSSq c‚ÇÄ c‚ÇÅ p = {!!}

-- -- --  opaque
-- -- --   short : (c : distCircle) ‚Üí
-- -- --    ((x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí distCircle)
-- -- --   short = {!!}

-- -- --   short0 : ‚àÄ c ‚Üí circleBase ‚â° short c 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) 
-- -- --   short0 = {!!}

-- -- --   short1 : ‚àÄ c ‚Üí short c 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° c
-- -- --   short1 = {!!}

-- -- --  opaque
-- -- --   wind : ((x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí distCircle) ‚Üí ‚Ñ§
-- -- --   wind = {!!}

-- -- --   wind-const : ‚àÄ c ‚Üí (wind Œª _ _ ‚Üí c) ‚â° 0 
-- -- --   wind-const = {!!}

-- -- --   wind1 : wind (Œª t _ ‚Üí Circle‚ÜídistCircle (injCircle t)) ‚â° 1
-- -- --   wind1 = {!!}
-- -- --  opaque
 
-- -- --   S¬π‚ÜídistCircle : S¬π ‚Üí Sp‚Çô distCircle 1
-- -- --   S¬π‚ÜídistCircle base = pt circleBase
-- -- --   S¬π‚ÜídistCircle (loop i) = 
-- -- --    ((path Œª t _ ‚Üí
-- -- --       Circle‚ÜídistCircle (injCircle t))
-- -- --         ‚àô cong {y = circleBase} pt circleBase‚â°inj1) i

-- -- --   Sp‚ÇÅdistCircle : Sp‚Çô distCircle 1 ‚Üí S¬π 
-- -- --   Sp‚ÇÅdistCircle (pt _) = base
-- -- --   Sp‚ÇÅdistCircle (path p i) = intLoop (wind p) i
-- -- --   Sp‚ÇÅdistCircle (const‚â°refl a i j) = intLoop (wind-const a i) j
 
-- -- --   S¬π‚ÜídistCircle‚àòdistCircle‚ÜíS¬π : ‚àÄ x ‚Üí S¬π‚ÜídistCircle (Sp‚ÇÅdistCircle x) ‚â° x
-- -- --   S¬π‚ÜídistCircle‚àòdistCircle‚ÜíS¬π (pt x) =
-- -- --    cong pt (short0 x) ‚àô‚àô path (short x ) ‚àô‚àô cong pt (short1 x)
-- -- --   S¬π‚ÜídistCircle‚àòdistCircle‚ÜíS¬π (path p i) j =
-- -- --     hcomp
-- -- --       (Œª k ‚Üí
-- -- --            Œª {(j = i0) ‚Üí {!!}
-- -- --              ;(j = i1) ‚Üí {!!}
-- -- --                -- hcomp
-- -- --                --  (Œª k' ‚Üí
-- -- --                --    Œª { (k = i0) ‚Üí {!!}
-- -- --                --      ; (k = i1) ‚Üí {!!}
-- -- --                --      ; (i = i0) ‚Üí {!!}
-- -- --                --      ; (i = i1) ‚Üí {!!}
-- -- --                --      })
-- -- --                --  {!!}

-- -- --  --
-- -- --              })
-- -- --       {!!}
-- -- --   S¬π‚ÜídistCircle‚àòdistCircle‚ÜíS¬π (const‚â°refl a i i‚ÇÅ) = {!!}

-- -- --   distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle : ‚àÄ x ‚Üí (Sp‚ÇÅdistCircle (S¬π‚ÜídistCircle  x)) ‚â° x
-- -- --   distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle base _ = base
-- -- --   distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle (loop i) j =
-- -- --       hcomp (Œª k ‚Üí
-- -- --                   Œª { (j = i1) ‚Üí compPath-filler' refl loop (~ k) i
-- -- --                     ; (i = i0) ‚Üí base
-- -- --                     ; (i = i1) ‚Üí base
-- -- --                     })
-- -- --                 (intLoop (wind1 j) i)


-- -- --   Sp‚ÇÅ-pa' : (p : (x : ‚Ñù) ‚Üí
-- -- --     x ‚àà interval‚Ñô (rat [ pos 0 / 1+ 0 ]) (rat [ pos 1 / 1+ 0 ]) ‚Üí
-- -- --     Space distCircle)
-- -- --      ‚Üí singl (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --      ‚Üí singl (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --      ‚Üí Sp‚ÇÅdistCircle (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --       ‚â° Sp‚ÇÅdistCircle (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --   Sp‚ÇÅ-pa' p = uncurry ‚àò (uncurry (flip ‚àò ElimSpaceSet‚ÇÇ.go w  ))
-- -- --    where
-- -- --    w : ElimSpaceSet‚ÇÇ distCircle distCircle
-- -- --         (Œª z z‚ÇÅ ‚Üí
-- -- --            (y : p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° z)
-- -- --            (y‚ÇÅ : p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° z‚ÇÅ) ‚Üí
-- -- --            Sp‚ÇÅdistCircle (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚â°
-- -- --            Sp‚ÇÅdistCircle (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)))
-- -- --    w .ElimSpaceSet‚ÇÇ.pt-pt-f x y xP yP =
-- -- --      cong Sp‚ÇÅdistCircle xP ‚àô‚àô
-- -- --      cong Sp‚ÇÅdistCircle (path {!!})
-- -- --      ‚àô‚àô cong Sp‚ÇÅdistCircle (sym yP)
-- -- --    w .ElimSpaceSet‚ÇÇ.pt-path-f a p' i xP yP j =
-- -- --      hcomp
-- -- --        (Œª k ‚Üí
-- -- --          Œª {    (j = i0) ‚Üí Sp‚ÇÅdistCircle (xP (~ k))  
-- -- --                ;(j = i1) ‚Üí Sp‚ÇÅdistCircle (yP (~ k))
-- -- --            })
-- -- --        {!!}
-- -- --      where
-- -- --      zzzw : Sp‚ÇÅdistCircle (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) ‚â° intLoop (wind p') i
-- -- --      zzzw = cong Sp‚ÇÅdistCircle yP

-- -- --      zz : Path (Space (Space distCircle))
-- -- --             (path (Œª _ _ ‚Üí p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)) i) (pt (path p' i))
-- -- --      zz = flipSquare (const‚â°refl (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) i  ‚àô cong pt yP

     

-- -- --      -- hcomp
-- -- --      --     (doubleComp-faces (Œª i‚ÇÅ ‚Üí Sp‚ÇÅdistCircle (y i‚ÇÅ))
-- -- --      --      (Œª i‚ÇÅ ‚Üí {!!}) j)
-- -- --      --     base
-- -- --      -- ((Œª i‚ÇÅ ‚Üí Sp‚ÇÅdistCircle (y i‚ÇÅ)) ‚àô‚àô (Œª _ ‚Üí base) ‚àô‚àô
-- -- --      --     (Œª i‚ÇÅ ‚Üí Sp‚ÇÅdistCircle (y‚ÇÅ (~ i‚ÇÅ)))) j
-- -- --    w .ElimSpaceSet‚ÇÇ.path-pt-f p b = {!!}
-- -- --    w .ElimSpaceSet‚ÇÇ.isSetT _ _ = isSetŒ†2 Œª _ _ ‚Üí isGroupoidS¬π _ _

-- -- --   Sp‚ÇÅ-pa : (p : (x : ‚Ñù) ‚Üí
-- -- --     x ‚àà interval‚Ñô (rat [ pos 0 / 1+ 0 ]) (rat [ pos 1 / 1+ 0 ]) ‚Üí
-- -- --     Space distCircle)
-- -- --      ‚Üí Sp‚ÇÅdistCircle (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --       ‚â° Sp‚ÇÅdistCircle (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))
-- -- --   Sp‚ÇÅ-pa p = Sp‚ÇÅ-pa' p (_ , refl) (_ , refl)


-- -- --   Sp‚ÇÅ-sq : (a : Space distCircle) ‚Üí
-- -- --    Square {A = S¬π}
-- -- --      (Sp‚ÇÅ-pa (Œª _ _ ‚Üí a))
-- -- --      refl
-- -- --      refl
-- -- --      refl
-- -- --   Sp‚ÇÅ-sq = ElimSpaceProp.go w
-- -- --    where
-- -- --    w : ElimSpaceProp distCircle
-- -- --         (Œª z ‚Üí Square (Sp‚ÇÅ-pa (Œª _ _ ‚Üí z)) refl refl refl)
-- -- --    w .ElimSpaceProp.pt-f x = {!!} --sym (doubleCompPath-filler refl refl refl)
-- -- --    w .ElimSpaceProp.isPropT _ = isOfHLevelPathP' 2 isGroupoidS¬π _ _ _ _


  
-- -- -- --  distCircle‚ÜíS¬π-Elim-f : ‚àÄ k ‚Üí (x : Sp‚Çô distCircle k) ‚Üí S¬π
-- -- -- --  distCircle‚ÜíS¬π-Elim-push : ‚àÄ k ‚Üí (x : Sp‚Çô distCircle k) ‚Üí
-- -- -- --       distCircle‚ÜíS¬π-Elim-f k x ‚â° distCircle‚ÜíS¬π-Elim-f (suc k) (pt x)
  


-- -- -- --  distCircle‚ÜíS¬π-Elim-f = ‚Ñï.elim (Œª _ ‚Üí base)
-- -- -- --    (‚Ñï.elim (Œª _ ‚Üí Sp‚ÇÅdistCircle)
-- -- -- --      (‚Ñï.elim (Œª _ _ ‚Üí w') w))
-- -- -- --    where
   
-- -- -- --    w' : Sp‚Çô distCircle 2 ‚Üí S¬π
-- -- -- --    w' (pt x‚ÇÇ) = Sp‚ÇÅdistCircle x‚ÇÇ
-- -- -- --    w' (path p i) = Sp‚ÇÅ-pa p i
-- -- -- --    w' (const‚â°refl a i i‚ÇÅ) = Sp‚ÇÅ-sq a i i‚ÇÅ
    
-- -- -- --    w : (n : ‚Ñï) ‚Üí
-- -- -- --         (((Sp‚Çô distCircle n ‚Üí S¬π) ‚Üí Sp‚Çô distCircle (suc n) ‚Üí S¬π) ‚Üí
-- -- -- --          (Sp‚Çô distCircle (suc n) ‚Üí S¬π) ‚Üí
-- -- -- --          Sp‚Çô distCircle (suc (suc n)) ‚Üí S¬π) ‚Üí
-- -- -- --         ((Sp‚Çô distCircle (suc n) ‚Üí S¬π) ‚Üí
-- -- -- --          Sp‚Çô distCircle (suc (suc n)) ‚Üí S¬π) ‚Üí
-- -- -- --         (Sp‚Çô distCircle (suc (suc n)) ‚Üí S¬π) ‚Üí
-- -- -- --         Sp‚Çô distCircle (suc (suc (suc n))) ‚Üí S¬π
-- -- -- --    w f0 f1 f2 f3 (pt x) = (f3 x)
-- -- -- --    w f0 f1 f2 f3 (path p i) =
-- -- -- --       let zz : Path (Sp‚Çô distCircle 2) _ _
-- -- -- --           zz = (path (Œª t t‚àà ‚Üí 
-- -- -- --                     S¬π‚ÜídistCircle
-- -- -- --                      (f3 ((p t t‚àà)))))
          
-- -- -- --       in (hcomp (Œª k ‚Üí
-- -- -- --            Œª {(i = i0) ‚Üí distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle
-- -- -- --                  (f3
-- -- -- --                   (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) k
-- -- -- --              ;(i = i1) ‚Üí distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle
-- -- -- --                  (f3
-- -- -- --                   (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) k
-- -- -- --              })
-- -- -- --          (w' (zz i)))   
-- -- -- --    w f0 f1 f2 f3 (const‚â°refl (pt x) i i‚ÇÅ) =
-- -- -- --      {!f3 (const‚â°refl x i i‚ÇÅ)!}
-- -- -- --    w f0 f1 f2 f3 (const‚â°refl (path p i‚ÇÇ) i i‚ÇÅ) = {!!}
-- -- -- --    w f0 f1 f2 f3 (const‚â°refl (const‚â°refl a i‚ÇÇ i‚ÇÉ) i i‚ÇÅ) = {!!}
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f zero x = base
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc zero) x = Sp‚ÇÅdistCircle x
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc zero)) (pt x) =
-- -- -- --  --   distCircle‚ÜíS¬π-Elim-f (suc zero) x
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc (suc n))) (pt x) = 
-- -- -- --  --   distCircle‚ÜíS¬π-Elim-f (suc (suc n)) x
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc zero)) (path p i) = {!!}
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc (suc n))) (path p i) = 
   
-- -- -- --  --   let zz : Path (Sp‚Çô distCircle 2) _ _
-- -- -- --  --       zz = (path (Œª t t‚àà ‚Üí 
-- -- -- --  --                 S¬π‚ÜídistCircle
-- -- -- --  --                  (distCircle‚ÜíS¬π-Elim-f (suc (suc n)) ((p t t‚àà)))))
-- -- -- --  --       zzz : Path S¬π _ _
-- -- -- --  --       zzz = cong (distCircle‚ÜíS¬π-Elim-f (suc (suc zero))) zz
-- -- -- --  --       zzzz = (hcomp (Œª k ‚Üí
-- -- -- --  --           Œª {(i = i0) ‚Üí distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle
-- -- -- --  --                 (distCircle‚ÜíS¬π-Elim-f (suc (suc n))
-- -- -- --  --                  (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) k
-- -- -- --  --             ;(i = i1) ‚Üí distCircle‚ÜíS¬π‚àòS¬π‚ÜídistCircle
-- -- -- --  --                 (distCircle‚ÜíS¬π-Elim-f (suc (suc n))
-- -- -- --  --                  (p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))) k
-- -- -- --  --             })
-- -- -- --  --         (zzz i))
-- -- -- --  --    in {!zzzz!}
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc zero)) (const‚â°refl a i i‚ÇÅ) = {!!}
-- -- -- --  -- distCircle‚ÜíS¬π-Elim-f (suc (suc (suc k))) (const‚â°refl a i i‚ÇÅ) = {!!}
 

-- -- -- --  distCircle‚ÜíS¬π-Elim-push zero x = {!!}
-- -- -- --  distCircle‚ÜíS¬π-Elim-push (suc zero) x = refl
-- -- -- --  distCircle‚ÜíS¬π-Elim-push (suc (suc zero)) x = refl
-- -- -- --  distCircle‚ÜíS¬π-Elim-push (suc (suc (suc k))) x = refl

-- -- -- --  distCircle‚ÜíS¬π-Elim : ElimData (Sp‚Çô-seq distCircle) (Œª _ ‚Üí S¬π)
-- -- -- --  distCircle‚ÜíS¬π-Elim .ElimData.inclP {k} = distCircle‚ÜíS¬π-Elim-f k
-- -- -- --  distCircle‚ÜíS¬π-Elim .ElimData.pushP {k} = distCircle‚ÜíS¬π-Elim-push k

-- -- -- --  distCircle‚ÜíS¬π : Sp distCircle ‚Üí S¬π
-- -- -- --  distCircle‚ÜíS¬π = Seq.elim (Sp‚Çô-seq distCircle) (Œª _ ‚Üí S¬π) distCircle‚ÜíS¬π-Elim
-- -- -- --  -- distCircle‚ÜíS¬π (incl {zero} x) = base
-- -- -- --  -- distCircle‚ÜíS¬π (incl {suc zero} x) = Sp‚ÇÅdistCircle x
-- -- -- --  -- -- distCircle‚ÜíS¬π (incl {suc zero} (path p i)) = intLoop (wind' 0 p) i
-- -- -- --  -- distCircle‚ÜíS¬π (incl {suc (suc n)} (pt x)) =
-- -- -- --  --   distCircle‚ÜíS¬π (incl {n = suc n} x)
-- -- -- --  -- distCircle‚ÜíS¬π (incl {suc (suc n)} (path p i)) = 
 
-- -- -- --  --   let zz : Path (Sp‚Çô distCircle 2) _ _
-- -- -- --  --       zz = (path (Œª t t‚àà ‚Üí 
-- -- -- --  --                 S¬π‚ÜídistCircle
-- -- -- --  --                  (distCircle‚ÜíS¬π (incl {n = suc n} (p t t‚àà)))))
-- -- -- --  --       zzz : Path S¬π _ _
-- -- -- --  --       zzz j = {! ()!} 
-- -- -- --  --    in ({!zzz i!})
-- -- -- --  -- distCircle‚ÜíS¬π (incl {suc (suc n)} (const‚â°refl a i i‚ÇÅ)) = {!!} 
-- -- -- --  -- --  -- -- ({!!} ‚àô‚àô intLoop (wind' n p) ‚àô‚àô {!!}) i
-- -- -- --  -- -- distCircle‚ÜíS¬π (incl {suc n} (const‚â°refl a i i‚ÇÅ)) =
-- -- -- --  -- --   {!!}
-- -- -- --  -- distCircle‚ÜíS¬π (push {zero} x i) = {!!}
-- -- -- --  -- distCircle‚ÜíS¬π (push {suc zero} x i) = {!!}
-- -- -- --  -- distCircle‚ÜíS¬π (push {suc (suc n)} x i) = {!!}



-- -- -- -- -- --  incl-path zero (pt x) =
-- -- -- -- -- --    {!!}
-- -- -- -- -- --    -- cong incl (cong pt (sym (ùêë'.0LeftAnnihilates _))
-- -- -- -- -- --    --   ‚àô‚àô path (Œª t _ ‚Üí  (t ¬∑·µ£ x)) ‚àô‚àô cong pt (¬∑IdL _)) 
-- -- -- -- -- --  incl-path zero (const‚â°refl a i j) k = {!!}
-- -- -- -- -- --  incl-path zero (path p i) j =
-- -- -- -- -- --     hcomp
-- -- -- -- -- --       (Œª k ‚Üí
-- -- -- -- -- --         Œª { (j = i0) ‚Üí push (pt (rat [ pos 0 / 1+ 0 ])) (~ k)
-- -- -- -- -- --           ; (j = i1) ‚Üí push (path p i) (~ k)
-- -- -- -- -- --           -- ; (i = i0) ‚Üí push {!!} (~ k)
-- -- -- -- -- --           -- ; (i = i1) ‚Üí push {!!} (~ k)
-- -- -- -- -- --         } )
-- -- -- -- -- --       {!!}
-- -- -- -- -- --  -- incl
   
-- -- -- -- -- --  --   (hcomp
-- -- -- -- -- --  --    (Œª k ‚Üí
-- -- -- -- -- --  --      Œª { (j = i0) ‚Üí const‚â°refl (rat 0) k i
-- -- -- -- -- --  --        ; (j = i1) ‚Üí path p i
-- -- -- -- -- --  --        })
-- -- -- -- -- --  --    (hcomp
-- -- -- -- -- --  --      (Œª k ‚Üí
-- -- -- -- -- --  --        Œª { (j = i0) ‚Üí {!push ?!}
-- -- -- -- -- --  --          ; (j = i1) ‚Üí {!!}
-- -- -- -- -- --  --          ; (i = i0) ‚Üí {!!}
-- -- -- -- -- --  --          ; (i = i1) ‚Üí {!!}
-- -- -- -- -- --  --        } )
-- -- -- -- -- --  --      {!!}))
-- -- -- -- -- --  --   -- hcomp
-- -- -- -- -- --  --   --  (Œª k ‚Üí
-- -- -- -- -- --  --   --    Œª { (i = i0) ‚Üí ?
-- -- -- -- -- --  --   --      ; (i = i1) ‚Üí ?
-- -- -- -- -- --  --   --      })
-- -- -- -- -- --  --   --  {!!}
-- -- -- -- -- --  --   -- {!cong (incl {n = zero}) (cong pt (sym (ùêë'.0LeftAnnihilates (p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?))))
-- -- -- -- -- --  --   --   ‚àô‚àô path (Œª t t‚àà ‚Üí  (t ¬∑·µ£ p t t‚àà)) ‚àô‚àô
-- -- -- -- -- --  --   --     ?) j!}
 
-- -- -- -- -- --  incl-path (suc n) x = {!!}


-- -- -- -- -- --  isContrSp‚Ñù .fst = incl {n = 0} (pt 0)
-- -- -- -- -- --  isContrSp‚Ñù .snd (incl {n} x) = incl-path n x
-- -- -- -- -- --  isContrSp‚Ñù .snd (push x i) = {!!}
-- -- -- -- -- --  -- isContrSp‚Ñù .fst = incl 0
-- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {zero} x) = {!!}
-- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {n = suc n} (pt x)) =
-- -- -- -- -- --  --   isContrSp‚Ñù .snd (incl {n = n} x) ‚àô {!push!}
-- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {suc n} (path p i‚ÇÅ)) i = {!!}
-- -- -- -- -- --  -- isContrSp‚Ñù .snd (push x i) = {!!}


-- -- -- -- -- -- -- module Version2 where
-- -- -- -- -- -- --  data Space {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- -- -- --   pt : A ‚Üí Space A
-- -- -- -- -- -- --   path : (p : ‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí Space A)
-- -- -- -- -- -- --            ‚Üí p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)



-- -- -- -- -- -- --  Sp‚Çô : (A : Type ‚Ñì) ‚Üí ‚Ñï ‚Üí Type ‚Ñì
-- -- -- -- -- -- --  Sp‚Çô A zero = A
-- -- -- -- -- -- --  Sp‚Çô A (suc x) = Sp‚Çô (Space A) x


-- -- -- -- -- -- --  zzz : {A : Type ‚Ñì} (f : ‚Ñù ‚Üí ‚Ñù ‚Üí A) ‚Üí
-- -- -- -- -- -- --         Square {A = Sp‚Çô A 1}
-- -- -- -- -- -- --            (path (Œª j·µ£ _ ‚Üí pt (f 0 j·µ£)))
-- -- -- -- -- -- --            (path (Œª j·µ£ _ ‚Üí pt (f 1 j·µ£)))
-- -- -- -- -- -- --            (path (Œª i·µ£ _ ‚Üí pt (f i·µ£ 0)))
-- -- -- -- -- -- --            (path (Œª i·µ£ _ ‚Üí pt (f i·µ£ 1)))
          
-- -- -- -- -- -- --  zzz f i j = path
-- -- -- -- -- -- --    (Œª i·µ£ _ ‚Üí  path (Œª j·µ£ _ ‚Üí
-- -- -- -- -- -- --      pt ((f i·µ£ j·µ£))) j) i

-- -- -- -- -- -- --  pt‚Üë : (A : Type ‚Ñì) ‚Üí ‚àÄ n ‚Üí Sp‚Çô A n ‚Üí  Sp‚Çô A (suc n)
-- -- -- -- -- -- --  pt‚Üë A zero = pt
-- -- -- -- -- -- --  pt‚Üë A (suc n) x = {!pt x!}
 
-- -- -- -- -- -- --  Sp‚Çô-seq : (A : Type ‚Ñì) ‚Üí Sequence ‚Ñì
-- -- -- -- -- -- --  Sp‚Çô-seq A .Sequence.obj = Sp‚Çô A
-- -- -- -- -- -- --  Sp‚Çô-seq A .Sequence.map {zero} = pt
-- -- -- -- -- -- --  Sp‚Çô-seq A .Sequence.map {suc n} = {!!}
 
-- -- -- -- -- -- --  Sp : (A : Type ‚Ñì) ‚Üí Type ‚Ñì
-- -- -- -- -- -- --  Sp A = SeqColim (Sp‚Çô-seq A)


-- -- -- -- -- -- -- module Version3 where
-- -- -- -- -- -- --  data Space {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- -- -- --   pt : A ‚Üí Space A
-- -- -- -- -- -- --   path : (p : ‚àÄ x ‚Üí x ‚àà interval‚Ñô 0 1 ‚Üí Space A)
-- -- -- -- -- -- --            ‚Üí p 0 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?) ‚â° p 1 (dec‚Ñö‚â§·µ£? , dec‚Ñö‚â§·µ£?)



-- -- -- -- -- -- --  Sp‚Çô : (A : Type ‚Ñì) ‚Üí ‚Ñï ‚Üí Type ‚Ñì
-- -- -- -- -- -- --  Sp‚Çô A zero = Space A
-- -- -- -- -- -- --  Sp‚Çô A (suc x) = Space (Sp‚Çô A x)


-- -- -- -- -- -- --  zzz : {A : Type ‚Ñì} (f : ‚Ñù ‚Üí ‚Ñù ‚Üí A) ‚Üí
-- -- -- -- -- -- --         Square {A = Sp‚Çô A 1}
-- -- -- -- -- -- --            (path (Œª j·µ£ _ ‚Üí pt (pt (f 0 j·µ£))))
-- -- -- -- -- -- --            (path (Œª j·µ£ _ ‚Üí pt (pt (f 1 j·µ£))))
-- -- -- -- -- -- --            (path (Œª i·µ£ _ ‚Üí pt (pt (f i·µ£ 0))))
-- -- -- -- -- -- --            (path (Œª i·µ£ _ ‚Üí pt (pt (f i·µ£ 1))))
          
-- -- -- -- -- -- --  zzz f i j = path
-- -- -- -- -- -- --    (Œª i·µ£ _ ‚Üí  path (Œª j·µ£ _ ‚Üí
-- -- -- -- -- -- --      pt (pt (f i·µ£ j·µ£))) j) i
 
-- -- -- -- -- -- --  Sp‚Çô-seq : (A : Type ‚Ñì) ‚Üí Sequence ‚Ñì
-- -- -- -- -- -- --  Sp‚Çô-seq A .Sequence.obj = Sp‚Çô A
-- -- -- -- -- -- --  Sp‚Çô-seq A .Sequence.map = pt
 
-- -- -- -- -- -- --  Sp : (A : Type ‚Ñì) ‚Üí Type ‚Ñì
-- -- -- -- -- -- --  Sp A = SeqColim (Sp‚Çô-seq A)


-- -- -- -- -- -- --  pathTo0in‚Ñù : (x : ‚Ñù) ‚Üí {!!}
-- -- -- -- -- -- --  pathTo0in‚Ñù = {!!}

-- -- -- -- -- -- --  incl-path : ‚àÄ n x ‚Üí Path (Sp ‚Ñù) (incl {n = 0} (pt 0)) (incl {n = n} x) 
-- -- -- -- -- -- --  incl-path zero (pt x) = cong incl ({!!}
-- -- -- -- -- -- --    ‚àô‚àô path (Œª t _ ‚Üí pt (t ¬∑·µ£ x)) ‚àô‚àô {!!})
-- -- -- -- -- -- --  incl-path zero (path p i) = {!incl ?!}
-- -- -- -- -- -- --    -- cong incl ({!!} ‚àô‚àô path (Œª t _ ‚Üí pt ({!t ¬∑·µ£ x!})) ‚àô‚àô {!!})
-- -- -- -- -- -- --  incl-path (suc n) x = {!!}
 
-- -- -- -- -- -- --  isContrSp‚Ñù : isContr (Sp ‚Ñù)
-- -- -- -- -- -- --  isContrSp‚Ñù .fst = incl {n = 0} (pt 0)
-- -- -- -- -- -- --  isContrSp‚Ñù .snd (incl {n} x) = incl-path n x
-- -- -- -- -- -- --  isContrSp‚Ñù .snd (push x i) = {!!}
-- -- -- -- -- -- --  -- isContrSp‚Ñù .fst = incl 0
-- -- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {zero} x) = {!!}
-- -- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {n = suc n} (pt x)) =
-- -- -- -- -- -- --  --   isContrSp‚Ñù .snd (incl {n = n} x) ‚àô {!push!}
-- -- -- -- -- -- --  -- isContrSp‚Ñù .snd (incl {suc n} (path p i‚ÇÅ)) i = {!!}
-- -- -- -- -- -- --  -- isContrSp‚Ñù .snd (push x i) = {!!}


-- -- -- -- -- -- --  -- -- sqT : (f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) ‚Üí
-- -- -- -- -- -- --  -- --    Square {A = Space ‚Ñù }
-- -- -- -- -- -- --  -- --         {!!}
-- -- -- -- -- -- --  -- --         {!!}
-- -- -- -- -- -- --  -- --         {!!}
-- -- -- -- -- -- --  -- --         {!!} 
-- -- -- -- -- -- --  -- -- sqT i j = {!path (Œª j·µ£ _ ‚Üí ?) j!}
 
-- -- -- -- -- -- --  -- -- -- zzzz : {A : Type ‚Ñì} (f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí A) ‚Üí
-- -- -- -- -- -- --  -- -- --        Cube {A = Sp A 2}
-- -- -- -- -- -- --  -- -- --           (Œª j ‚Üí
-- -- -- -- -- -- --  -- -- --             path (Œª k·µ£ _ ‚Üí  path (Œª j·µ£ _ ‚Üí pt (pt (pt (f 0 j·µ£ k·µ£)))) j))
-- -- -- -- -- -- --  -- -- --           {!!}
-- -- -- -- -- -- --  -- -- --           -- (Œª j k ‚Üí path (Œª j·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --           --       path (Œª k·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --           --       pt (pt (pt (f 0 j·µ£ k·µ£)))) k) j)
-- -- -- -- -- -- --  -- -- --           -- (Œª j k ‚Üí path (Œª j·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --           --       path (Œª k·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --           --       pt (pt (pt (f 1 j·µ£ k·µ£)))) k) j)
-- -- -- -- -- -- --  -- -- --           {!!}
-- -- -- -- -- -- --  -- -- --           {!!}
-- -- -- -- -- -- --  -- -- --           {!!}
-- -- -- -- -- -- --  -- -- --           {!!}
           
          
-- -- -- -- -- -- --  -- -- -- zzzz f i j k = path
-- -- -- -- -- -- --  -- -- --   (Œª k·µ£ _ ‚Üí  path (Œª j·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --     path (Œª i·µ£ _ ‚Üí
-- -- -- -- -- -- --  -- -- --     pt (pt (pt (f i·µ£ j·µ£ k·µ£)))) i) j) k


